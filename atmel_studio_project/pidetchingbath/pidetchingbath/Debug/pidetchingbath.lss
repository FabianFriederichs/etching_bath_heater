
pidetchingbath.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00005322  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005278  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000b8  00800100  00800100  0000530c  2**0
                  ALLOC
  3 .eeprom       00000016  00810000  00810000  0000530c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  00005322  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00005354  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000688  00000000  00000000  00005398  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00003285  00000000  00000000  00005a20  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001363  00000000  00000000  00008ca5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00004b58  00000000  00000000  0000a008  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001a7c  00000000  00000000  0000eb60  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000c3fa  00000000  00000000  000105dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000037f3  00000000  00000000  0001c9d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000558  00000000  00000000  000201c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00004c29  00000000  00000000  00020721  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 85 00 	jmp	0x10a	; 0x10a <__ctors_end>
       4:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
       8:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
       c:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      10:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      14:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      18:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      1c:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      20:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      24:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      28:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      2c:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      30:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      34:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      38:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      3c:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      40:	0c 94 c1 10 	jmp	0x2182	; 0x2182 <__vector_16>
      44:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      48:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      4c:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      50:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      54:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      58:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      5c:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      60:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      64:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      68:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      6c:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      70:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      74:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      78:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      7c:	a7 1b       	sub	r26, r23
      7e:	a9 1b       	sub	r26, r25
      80:	ab 1b       	sub	r26, r27
      82:	ad 1b       	sub	r26, r29
      84:	af 1b       	sub	r26, r31
      86:	b1 1b       	sub	r27, r17
      88:	b3 1b       	sub	r27, r19
      8a:	b5 1b       	sub	r27, r21
      8c:	b7 1b       	sub	r27, r23
      8e:	b9 1b       	sub	r27, r25
      90:	08 00       	.word	0x0008	; ????
      92:	00 00       	nop
      94:	be 92       	st	-X, r11
      96:	24 49       	sbci	r18, 0x94	; 148
      98:	12 3e       	cpi	r17, 0xE2	; 226
      9a:	ab aa       	std	Y+51, r10	; 0x33
      9c:	aa 2a       	or	r10, r26
      9e:	be cd       	rjmp	.-1156   	; 0xfffffc1c <__eeprom_end+0xff7efc06>
      a0:	cc cc       	rjmp	.-1640   	; 0xfffffa3a <__eeprom_end+0xff7efa24>
      a2:	4c 3e       	cpi	r20, 0xEC	; 236
      a4:	00 00       	nop
      a6:	00 80       	ld	r0, Z
      a8:	be ab       	std	Y+54, r27	; 0x36
      aa:	aa aa       	std	Y+50, r10	; 0x32
      ac:	aa 3e       	cpi	r26, 0xEA	; 234
      ae:	00 00       	nop
      b0:	00 00       	nop
      b2:	bf 00       	.word	0x00bf	; ????
      b4:	00 00       	nop
      b6:	80 3f       	cpi	r24, 0xF0	; 240
      b8:	00 00       	nop
      ba:	00 00       	nop
      bc:	00 08       	sbc	r0, r0
      be:	41 78       	andi	r20, 0x81	; 129
      c0:	d3 bb       	out	0x13, r29	; 19
      c2:	43 87       	std	Z+11, r20	; 0x0b
      c4:	d1 13       	cpse	r29, r17
      c6:	3d 19       	sub	r19, r13
      c8:	0e 3c       	cpi	r16, 0xCE	; 206
      ca:	c3 bd       	out	0x23, r28	; 35
      cc:	42 82       	std	Z+2, r4	; 0x02
      ce:	ad 2b       	or	r26, r29
      d0:	3e 68       	ori	r19, 0x8E	; 142
      d2:	ec 82       	std	Y+4, r14	; 0x04
      d4:	76 be       	out	0x36, r7	; 54
      d6:	d9 8f       	std	Y+25, r29	; 0x19
      d8:	e1 a9       	ldd	r30, Z+49	; 0x31
      da:	3e 4c       	sbci	r19, 0xCE	; 206
      dc:	80 ef       	ldi	r24, 0xF0	; 240
      de:	ff be       	out	0x3f, r15	; 63
      e0:	01 c4       	rjmp	.+2050   	; 0x8e4 <app_state_menu_heater+0xe8>
      e2:	ff 7f       	andi	r31, 0xFF	; 255
      e4:	3f 00       	.word	0x003f	; ????
      e6:	00 00       	nop
	...

000000ea <__trampolines_end>:
	...
      f6:	00 00       	nop
      f8:	01 00       	.word	0x0001	; ????
	...
     102:	00 00       	nop
     104:	ff ff       	.word	0xffff	; ????
     106:	00 00       	nop
	...

0000010a <__ctors_end>:
     10a:	11 24       	eor	r1, r1
     10c:	1f be       	out	0x3f, r1	; 63
     10e:	cf ef       	ldi	r28, 0xFF	; 255
     110:	d0 e1       	ldi	r29, 0x10	; 16
     112:	de bf       	out	0x3e, r29	; 62
     114:	cd bf       	out	0x3d, r28	; 61

00000116 <__do_clear_bss>:
     116:	21 e0       	ldi	r18, 0x01	; 1
     118:	a0 e0       	ldi	r26, 0x00	; 0
     11a:	b1 e0       	ldi	r27, 0x01	; 1
     11c:	01 c0       	rjmp	.+2      	; 0x120 <.do_clear_bss_start>

0000011e <.do_clear_bss_loop>:
     11e:	1d 92       	st	X+, r1

00000120 <.do_clear_bss_start>:
     120:	a8 3b       	cpi	r26, 0xB8	; 184
     122:	b2 07       	cpc	r27, r18
     124:	e1 f7       	brne	.-8      	; 0x11e <.do_clear_bss_loop>
     126:	0e 94 04 12 	call	0x2408	; 0x2408 <main>
     12a:	0c 94 3a 29 	jmp	0x5274	; 0x5274 <_exit>

0000012e <__bad_interrupt>:
     12e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000132 <app_run>:
}

void app_shutdown()
{
	app_state.should_stop = TRUE;
}
     132:	8f 92       	push	r8
     134:	9f 92       	push	r9
     136:	af 92       	push	r10
     138:	bf 92       	push	r11
     13a:	cf 92       	push	r12
     13c:	df 92       	push	r13
     13e:	ef 92       	push	r14
     140:	ff 92       	push	r15
     142:	0f 93       	push	r16
     144:	1f 93       	push	r17
     146:	cf 93       	push	r28
     148:	df 93       	push	r29
     14a:	cd b7       	in	r28, 0x3d	; 61
     14c:	de b7       	in	r29, 0x3e	; 62
     14e:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <app_state+0x3b>
     152:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <appt_init>
     156:	0e 94 6c 1e 	call	0x3cd8	; 0x3cd8 <srd_init>
     15a:	0e 94 31 20 	call	0x4062	; 0x4062 <switch_init>
     15e:	0e 94 b6 19 	call	0x336c	; 0x336c <rotenc_init>
     162:	0e 94 1c 0b 	call	0x1638	; 0x1638 <app_load_settings_from_eeprom>
     166:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <app_state+0x3c>
     16a:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <app_state+0x3d>
     16e:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <app_state+0x3e>
     172:	0e 94 29 1f 	call	0x3e52	; 0x3e52 <stirrer_init>
     176:	0e 94 12 20 	call	0x4024	; 0x4024 <stirrer_off>
     17a:	0e 94 29 11 	call	0x2252	; 0x2252 <heater_init>
     17e:	0e 94 e6 11 	call	0x23cc	; 0x23cc <heater_off>
     182:	e0 90 1d 01 	lds	r14, 0x011D	; 0x80011d <app_state+0xc>
     186:	f0 90 1e 01 	lds	r15, 0x011E	; 0x80011e <app_state+0xd>
     18a:	00 91 1f 01 	lds	r16, 0x011F	; 0x80011f <app_state+0xe>
     18e:	10 91 20 01 	lds	r17, 0x0120	; 0x800120 <app_state+0xf>
     192:	20 91 19 01 	lds	r18, 0x0119	; 0x800119 <app_state+0x8>
     196:	30 91 1a 01 	lds	r19, 0x011A	; 0x80011a <app_state+0x9>
     19a:	40 91 1b 01 	lds	r20, 0x011B	; 0x80011b <app_state+0xa>
     19e:	50 91 1c 01 	lds	r21, 0x011C	; 0x80011c <app_state+0xb>
     1a2:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <app_state+0x4>
     1a6:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <app_state+0x5>
     1aa:	a0 91 17 01 	lds	r26, 0x0117	; 0x800117 <app_state+0x6>
     1ae:	b0 91 18 01 	lds	r27, 0x0118	; 0x800118 <app_state+0x7>
     1b2:	62 e4       	ldi	r22, 0x42	; 66
     1b4:	6f 93       	push	r22
     1b6:	68 ec       	ldi	r22, 0xC8	; 200
     1b8:	6f 93       	push	r22
     1ba:	1f 92       	push	r1
     1bc:	1f 92       	push	r1
     1be:	81 2c       	mov	r8, r1
     1c0:	91 2c       	mov	r9, r1
     1c2:	54 01       	movw	r10, r8
     1c4:	67 01       	movw	r12, r14
     1c6:	78 01       	movw	r14, r16
     1c8:	89 01       	movw	r16, r18
     1ca:	9a 01       	movw	r18, r20
     1cc:	ac 01       	movw	r20, r24
     1ce:	bd 01       	movw	r22, r26
     1d0:	80 e3       	ldi	r24, 0x30	; 48
     1d2:	91 e0       	ldi	r25, 0x01	; 1
     1d4:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <pid_init>
     1d8:	0f 90       	pop	r0
     1da:	0f 90       	pop	r0
     1dc:	0f 90       	pop	r0
     1de:	0f 90       	pop	r0
     1e0:	0e 94 29 22 	call	0x4452	; 0x4452 <tsens_init>
     1e4:	20 e0       	ldi	r18, 0x00	; 0
     1e6:	44 e2       	ldi	r20, 0x24	; 36
     1e8:	52 e0       	ldi	r21, 0x02	; 2
     1ea:	6a e0       	ldi	r22, 0x0A	; 10
     1ec:	77 ed       	ldi	r23, 0xD7	; 215
     1ee:	83 ea       	ldi	r24, 0xA3	; 163
     1f0:	9c e3       	ldi	r25, 0x3C	; 60
     1f2:	0e 94 2b 10 	call	0x2056	; 0x2056 <appt_set_callback>
     1f6:	21 e0       	ldi	r18, 0x01	; 1
     1f8:	47 ee       	ldi	r20, 0xE7	; 231
     1fa:	51 e0       	ldi	r21, 0x01	; 1
     1fc:	6a e0       	ldi	r22, 0x0A	; 10
     1fe:	77 ed       	ldi	r23, 0xD7	; 215
     200:	83 e2       	ldi	r24, 0x23	; 35
     202:	9d e3       	ldi	r25, 0x3D	; 61
     204:	0e 94 2b 10 	call	0x2056	; 0x2056 <appt_set_callback>
     208:	22 e0       	ldi	r18, 0x02	; 2
     20a:	42 e0       	ldi	r20, 0x02	; 2
     20c:	53 e0       	ldi	r21, 0x03	; 3
     20e:	6f e6       	ldi	r22, 0x6F	; 111
     210:	72 e1       	ldi	r23, 0x12	; 18
     212:	83 e8       	ldi	r24, 0x83	; 131
     214:	9a e3       	ldi	r25, 0x3A	; 58
     216:	0e 94 2b 10 	call	0x2056	; 0x2056 <appt_set_callback>
     21a:	23 e0       	ldi	r18, 0x03	; 3
     21c:	4c e0       	ldi	r20, 0x0C	; 12
     21e:	53 e0       	ldi	r21, 0x03	; 3
     220:	6a e0       	ldi	r22, 0x0A	; 10
     222:	77 ed       	ldi	r23, 0xD7	; 215
     224:	83 ea       	ldi	r24, 0xA3	; 163
     226:	9b e3       	ldi	r25, 0x3B	; 59
     228:	0e 94 2b 10 	call	0x2056	; 0x2056 <appt_set_callback>
     22c:	0e 94 8c 0a 	call	0x1518	; 0x1518 <app_clear_input>
     230:	86 e1       	ldi	r24, 0x16	; 22
     232:	93 e0       	ldi	r25, 0x03	; 3
     234:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <app_state+0x1d>
     238:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <app_state+0x1c>
     23c:	0e 94 8c 22 	call	0x4518	; 0x4518 <tsens_start_adc>
     240:	8c e4       	ldi	r24, 0x4C	; 76
     242:	91 e0       	ldi	r25, 0x01	; 1
     244:	0e 94 8c 23 	call	0x4718	; 0x4718 <tsens_measure_probe0_temp>
     248:	dc 01       	movw	r26, r24
     24a:	cb 01       	movw	r24, r22
     24c:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <app_state+0x3f>
     250:	90 93 51 01 	sts	0x0151, r25	; 0x800151 <app_state+0x40>
     254:	a0 93 52 01 	sts	0x0152, r26	; 0x800152 <app_state+0x41>
     258:	b0 93 53 01 	sts	0x0153, r27	; 0x800153 <app_state+0x42>
     25c:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <app_state+0x3b>
     260:	88 23       	and	r24, r24
     262:	79 f0       	breq	.+30     	; 0x282 <app_run+0x150>
     264:	0e 94 61 11 	call	0x22c2	; 0x22c2 <heater_shutdown>
     268:	0e 94 72 1f 	call	0x3ee4	; 0x3ee4 <stirrer_shutdown>
     26c:	0e 94 55 22 	call	0x44aa	; 0x44aa <tsens_shutdown>
     270:	0e 94 f0 19 	call	0x33e0	; 0x33e0 <rotenc_shutdown>
     274:	0e 94 6a 20 	call	0x40d4	; 0x40d4 <switch_shutdown>
     278:	0e 94 a0 0a 	call	0x1540	; 0x1540 <app_error_display>
     27c:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <app_state+0x3b>
     280:	99 c0       	rjmp	.+306    	; 0x3b4 <app_run+0x282>
     282:	8c e4       	ldi	r24, 0x4C	; 76
     284:	91 e0       	ldi	r25, 0x01	; 1
     286:	0e 94 0c 23 	call	0x4618	; 0x4618 <tsens_measure0_resistance>
     28a:	dc 01       	movw	r26, r24
     28c:	cb 01       	movw	r24, r22
     28e:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <app_state+0x43>
     292:	90 93 55 01 	sts	0x0155, r25	; 0x800155 <app_state+0x44>
     296:	a0 93 56 01 	sts	0x0156, r26	; 0x800156 <app_state+0x45>
     29a:	b0 93 57 01 	sts	0x0157, r27	; 0x800157 <app_state+0x46>
     29e:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <app_state+0x3b>
     2a2:	88 23       	and	r24, r24
     2a4:	79 f0       	breq	.+30     	; 0x2c4 <app_run+0x192>
     2a6:	0e 94 61 11 	call	0x22c2	; 0x22c2 <heater_shutdown>
     2aa:	0e 94 72 1f 	call	0x3ee4	; 0x3ee4 <stirrer_shutdown>
     2ae:	0e 94 55 22 	call	0x44aa	; 0x44aa <tsens_shutdown>
     2b2:	0e 94 f0 19 	call	0x33e0	; 0x33e0 <rotenc_shutdown>
     2b6:	0e 94 6a 20 	call	0x40d4	; 0x40d4 <switch_shutdown>
     2ba:	0e 94 a0 0a 	call	0x1540	; 0x1540 <app_error_display>
     2be:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <app_state+0x3b>
     2c2:	78 c0       	rjmp	.+240    	; 0x3b4 <app_run+0x282>
     2c4:	8c e4       	ldi	r24, 0x4C	; 76
     2c6:	91 e0       	ldi	r25, 0x01	; 1
     2c8:	0e 94 e3 24 	call	0x49c6	; 0x49c6 <tsens_measure_probe1_temp>
     2cc:	dc 01       	movw	r26, r24
     2ce:	cb 01       	movw	r24, r22
     2d0:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <app_state+0x47>
     2d4:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <app_state+0x48>
     2d8:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <app_state+0x49>
     2dc:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <app_state+0x4a>
     2e0:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <app_state+0x3b>
     2e4:	88 23       	and	r24, r24
     2e6:	79 f0       	breq	.+30     	; 0x306 <app_run+0x1d4>
     2e8:	0e 94 61 11 	call	0x22c2	; 0x22c2 <heater_shutdown>
     2ec:	0e 94 72 1f 	call	0x3ee4	; 0x3ee4 <stirrer_shutdown>
     2f0:	0e 94 55 22 	call	0x44aa	; 0x44aa <tsens_shutdown>
     2f4:	0e 94 f0 19 	call	0x33e0	; 0x33e0 <rotenc_shutdown>
     2f8:	0e 94 6a 20 	call	0x40d4	; 0x40d4 <switch_shutdown>
     2fc:	0e 94 a0 0a 	call	0x1540	; 0x1540 <app_error_display>
     300:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <app_state+0x3b>
     304:	57 c0       	rjmp	.+174    	; 0x3b4 <app_run+0x282>
     306:	8c e4       	ldi	r24, 0x4C	; 76
     308:	91 e0       	ldi	r25, 0x01	; 1
     30a:	0e 94 63 24 	call	0x48c6	; 0x48c6 <tsens_measure1_resistance>
     30e:	dc 01       	movw	r26, r24
     310:	cb 01       	movw	r24, r22
     312:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <app_state+0x4b>
     316:	90 93 5d 01 	sts	0x015D, r25	; 0x80015d <app_state+0x4c>
     31a:	a0 93 5e 01 	sts	0x015E, r26	; 0x80015e <app_state+0x4d>
     31e:	b0 93 5f 01 	sts	0x015F, r27	; 0x80015f <app_state+0x4e>
     322:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <app_state+0x3b>
     326:	88 23       	and	r24, r24
     328:	79 f0       	breq	.+30     	; 0x348 <app_run+0x216>
     32a:	0e 94 61 11 	call	0x22c2	; 0x22c2 <heater_shutdown>
     32e:	0e 94 72 1f 	call	0x3ee4	; 0x3ee4 <stirrer_shutdown>
     332:	0e 94 55 22 	call	0x44aa	; 0x44aa <tsens_shutdown>
     336:	0e 94 f0 19 	call	0x33e0	; 0x33e0 <rotenc_shutdown>
     33a:	0e 94 6a 20 	call	0x40d4	; 0x40d4 <switch_shutdown>
     33e:	0e 94 a0 0a 	call	0x1540	; 0x1540 <app_error_display>
     342:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <app_state+0x3b>
     346:	36 c0       	rjmp	.+108    	; 0x3b4 <app_run+0x282>
     348:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <appt_start>
     34c:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <app_state+0x15>
     350:	0b c0       	rjmp	.+22     	; 0x368 <app_run+0x236>
     352:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <appt_update>
     356:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <app_state+0x3b>
     35a:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <app_state+0x3b>
     35e:	88 23       	and	r24, r24
     360:	19 f0       	breq	.+6      	; 0x368 <app_run+0x236>
     362:	81 e0       	ldi	r24, 0x01	; 1
     364:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <app_state+0x15>
     368:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <app_state+0x15>
     36c:	88 23       	and	r24, r24
     36e:	89 f3       	breq	.-30     	; 0x352 <app_run+0x220>
     370:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <app_state+0x3b>
     374:	88 23       	and	r24, r24
     376:	79 f0       	breq	.+30     	; 0x396 <app_run+0x264>
     378:	0e 94 61 11 	call	0x22c2	; 0x22c2 <heater_shutdown>
     37c:	0e 94 72 1f 	call	0x3ee4	; 0x3ee4 <stirrer_shutdown>
     380:	0e 94 55 22 	call	0x44aa	; 0x44aa <tsens_shutdown>
     384:	0e 94 f0 19 	call	0x33e0	; 0x33e0 <rotenc_shutdown>
     388:	0e 94 6a 20 	call	0x40d4	; 0x40d4 <switch_shutdown>
     38c:	0e 94 a0 0a 	call	0x1540	; 0x1540 <app_error_display>
     390:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <app_state+0x3b>
     394:	0f c0       	rjmp	.+30     	; 0x3b4 <app_run+0x282>
     396:	0e 94 9e 0c 	call	0x193c	; 0x193c <appt_shutdown>
     39a:	0e 94 72 1f 	call	0x3ee4	; 0x3ee4 <stirrer_shutdown>
     39e:	0e 94 61 11 	call	0x22c2	; 0x22c2 <heater_shutdown>
     3a2:	0e 94 55 22 	call	0x44aa	; 0x44aa <tsens_shutdown>
     3a6:	0e 94 f0 19 	call	0x33e0	; 0x33e0 <rotenc_shutdown>
     3aa:	0e 94 6a 20 	call	0x40d4	; 0x40d4 <switch_shutdown>
     3ae:	0e 94 7a 1e 	call	0x3cf4	; 0x3cf4 <srd_shutdown>
     3b2:	80 e0       	ldi	r24, 0x00	; 0
     3b4:	df 91       	pop	r29
     3b6:	cf 91       	pop	r28
     3b8:	1f 91       	pop	r17
     3ba:	0f 91       	pop	r16
     3bc:	ff 90       	pop	r15
     3be:	ef 90       	pop	r14
     3c0:	df 90       	pop	r13
     3c2:	cf 90       	pop	r12
     3c4:	bf 90       	pop	r11
     3c6:	af 90       	pop	r10
     3c8:	9f 90       	pop	r9
     3ca:	8f 90       	pop	r8
     3cc:	08 95       	ret

000003ce <app_user_main>:

////////////////////////////////////////// INPUT CALLBACK /////////////////////////////////////////
ErrorCode app_user_main()
{
     3ce:	cf 93       	push	r28
     3d0:	df 93       	push	r29
     3d2:	cd b7       	in	r28, 0x3d	; 61
     3d4:	de b7       	in	r29, 0x3e	; 62
	// INPUT	
	app_clear_input();
     3d6:	0e 94 8c 0a 	call	0x1518	; 0x1518 <app_clear_input>
	app_state.current_input.rotenc_delta = rotenc_get_inc();
     3da:	0e 94 05 1a 	call	0x340a	; 0x340a <rotenc_get_inc>
     3de:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <app_state+0x17>
     3e2:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <app_state+0x16>
	// Rotenc Button
	app_state.current_input.button_states |= (switch_get_state(BUTTON0) << BUTTON0);
     3e6:	80 e0       	ldi	r24, 0x00	; 0
     3e8:	0e 94 21 21 	call	0x4242	; 0x4242 <switch_get_state>
     3ec:	88 2f       	mov	r24, r24
     3ee:	90 e0       	ldi	r25, 0x00	; 0
     3f0:	20 91 2c 01 	lds	r18, 0x012C	; 0x80012c <app_state+0x1b>
     3f4:	82 2b       	or	r24, r18
     3f6:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <app_state+0x1b>
	app_state.current_input.button_presses |= (switch_press(BUTTON0) << BUTTON0);
     3fa:	80 e0       	ldi	r24, 0x00	; 0
     3fc:	0e 94 9a 20 	call	0x4134	; 0x4134 <switch_press>
     400:	88 2f       	mov	r24, r24
     402:	90 e0       	ldi	r25, 0x00	; 0
     404:	20 91 29 01 	lds	r18, 0x0129	; 0x800129 <app_state+0x18>
     408:	82 2b       	or	r24, r18
     40a:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <app_state+0x18>
	app_state.current_input.button_long_presses |= (switch_longpress(BUTTON0) << BUTTON0);
     40e:	80 e0       	ldi	r24, 0x00	; 0
     410:	0e 94 f4 20 	call	0x41e8	; 0x41e8 <switch_longpress>
     414:	88 2f       	mov	r24, r24
     416:	90 e0       	ldi	r25, 0x00	; 0
     418:	20 91 2a 01 	lds	r18, 0x012A	; 0x80012a <app_state+0x19>
     41c:	82 2b       	or	r24, r18
     41e:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <app_state+0x19>
	app_state.current_input.button_releases |= (switch_release(BUTTON0) << BUTTON0);
     422:	80 e0       	ldi	r24, 0x00	; 0
     424:	0e 94 c7 20 	call	0x418e	; 0x418e <switch_release>
     428:	88 2f       	mov	r24, r24
     42a:	90 e0       	ldi	r25, 0x00	; 0
     42c:	20 91 2b 01 	lds	r18, 0x012B	; 0x80012b <app_state+0x1a>
     430:	82 2b       	or	r24, r18
     432:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <app_state+0x1a>
	// Secondary Button
	//---
	
	// query menu state machine
	return (*app_state.current_state_func)();
     436:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <app_state+0x1c>
     43a:	90 91 2e 01 	lds	r25, 0x012E	; 0x80012e <app_state+0x1d>
     43e:	fc 01       	movw	r30, r24
     440:	09 95       	icall
}
     442:	df 91       	pop	r29
     444:	cf 91       	pop	r28
     446:	08 95       	ret

00000448 <app_control>:

///////////////////////////////////////// PID CONTROL CALLBACK ////////////////////////////////////
ErrorCode app_control()
{
     448:	0f 93       	push	r16
     44a:	1f 93       	push	r17
     44c:	cf 93       	push	r28
     44e:	df 93       	push	r29
     450:	cd b7       	in	r28, 0x3d	; 61
     452:	de b7       	in	r29, 0x3e	; 62
     454:	28 97       	sbiw	r28, 0x08	; 8
     456:	0f b6       	in	r0, 0x3f	; 63
     458:	f8 94       	cli
     45a:	de bf       	out	0x3e, r29	; 62
     45c:	0f be       	out	0x3f, r0	; 63
     45e:	cd bf       	out	0x3d, r28	; 61
	// do measurements
	// if calibration menu is active, update corresponding resistance value
	#ifdef TSENS_PROBE_0
	app_state.t0_current_temp = tsens_measure_probe0_temp(&app_state.current_error);
     460:	8c e4       	ldi	r24, 0x4C	; 76
     462:	91 e0       	ldi	r25, 0x01	; 1
     464:	0e 94 8c 23 	call	0x4718	; 0x4718 <tsens_measure_probe0_temp>
     468:	dc 01       	movw	r26, r24
     46a:	cb 01       	movw	r24, r22
     46c:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <app_state+0x3f>
     470:	90 93 51 01 	sts	0x0151, r25	; 0x800151 <app_state+0x40>
     474:	a0 93 52 01 	sts	0x0152, r26	; 0x800152 <app_state+0x41>
     478:	b0 93 53 01 	sts	0x0153, r27	; 0x800153 <app_state+0x42>
	if(app_state.current_error)
     47c:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <app_state+0x3b>
     480:	88 23       	and	r24, r24
     482:	19 f0       	breq	.+6      	; 0x48a <app_control+0x42>
	{
		return app_state.current_error;
     484:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <app_state+0x3b>
     488:	b2 c0       	rjmp	.+356    	; 0x5ee <app_control+0x1a6>
	}
	if(app_state.current_state_func == app_state_menu_tprobe0_calib)
     48a:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <app_state+0x1c>
     48e:	90 91 2e 01 	lds	r25, 0x012E	; 0x80012e <app_state+0x1d>
     492:	8c 5f       	subi	r24, 0xFC	; 252
     494:	99 40       	sbci	r25, 0x09	; 9
     496:	a9 f4       	brne	.+42     	; 0x4c2 <app_control+0x7a>
	{
		app_state.t0_resistance = tsens_measure0_resistance(&app_state.current_error);
     498:	8c e4       	ldi	r24, 0x4C	; 76
     49a:	91 e0       	ldi	r25, 0x01	; 1
     49c:	0e 94 0c 23 	call	0x4618	; 0x4618 <tsens_measure0_resistance>
     4a0:	dc 01       	movw	r26, r24
     4a2:	cb 01       	movw	r24, r22
     4a4:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <app_state+0x43>
     4a8:	90 93 55 01 	sts	0x0155, r25	; 0x800155 <app_state+0x44>
     4ac:	a0 93 56 01 	sts	0x0156, r26	; 0x800156 <app_state+0x45>
     4b0:	b0 93 57 01 	sts	0x0157, r27	; 0x800157 <app_state+0x46>
		if(app_state.current_error)
     4b4:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <app_state+0x3b>
     4b8:	88 23       	and	r24, r24
     4ba:	19 f0       	breq	.+6      	; 0x4c2 <app_control+0x7a>
		{
			return app_state.current_error;
     4bc:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <app_state+0x3b>
     4c0:	96 c0       	rjmp	.+300    	; 0x5ee <app_control+0x1a6>
		}
	}
	#endif
	#ifdef TSENS_PROBE_1
	app_state.t1_current_temp = tsens_measure_probe1_temp(&app_state.current_error);
     4c2:	8c e4       	ldi	r24, 0x4C	; 76
     4c4:	91 e0       	ldi	r25, 0x01	; 1
     4c6:	0e 94 e3 24 	call	0x49c6	; 0x49c6 <tsens_measure_probe1_temp>
     4ca:	dc 01       	movw	r26, r24
     4cc:	cb 01       	movw	r24, r22
     4ce:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <app_state+0x47>
     4d2:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <app_state+0x48>
     4d6:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <app_state+0x49>
     4da:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <app_state+0x4a>
	if(app_state.current_error)
     4de:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <app_state+0x3b>
     4e2:	88 23       	and	r24, r24
     4e4:	19 f0       	breq	.+6      	; 0x4ec <app_control+0xa4>
	{
		return app_state.current_error;
     4e6:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <app_state+0x3b>
     4ea:	81 c0       	rjmp	.+258    	; 0x5ee <app_control+0x1a6>
	}
	if(app_state.current_state_func == app_state_menu_tprobe1_calib)
     4ec:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <app_state+0x1c>
     4f0:	90 91 2e 01 	lds	r25, 0x012E	; 0x80012e <app_state+0x1d>
     4f4:	85 52       	subi	r24, 0x25	; 37
     4f6:	9a 40       	sbci	r25, 0x0A	; 10
     4f8:	a9 f4       	brne	.+42     	; 0x524 <app_control+0xdc>
	{
		app_state.t1_resistance = tsens_measure1_resistance(&app_state.current_error);
     4fa:	8c e4       	ldi	r24, 0x4C	; 76
     4fc:	91 e0       	ldi	r25, 0x01	; 1
     4fe:	0e 94 63 24 	call	0x48c6	; 0x48c6 <tsens_measure1_resistance>
     502:	dc 01       	movw	r26, r24
     504:	cb 01       	movw	r24, r22
     506:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <app_state+0x4b>
     50a:	90 93 5d 01 	sts	0x015D, r25	; 0x80015d <app_state+0x4c>
     50e:	a0 93 5e 01 	sts	0x015E, r26	; 0x80015e <app_state+0x4d>
     512:	b0 93 5f 01 	sts	0x015F, r27	; 0x80015f <app_state+0x4e>
		if(app_state.current_error)
     516:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <app_state+0x3b>
     51a:	88 23       	and	r24, r24
     51c:	19 f0       	breq	.+6      	; 0x524 <app_control+0xdc>
		{
			return app_state.current_error;
     51e:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <app_state+0x3b>
     522:	65 c0       	rjmp	.+202    	; 0x5ee <app_control+0x1a6>
		}
	}
	#endif
	
	// pid stuff
	if(app_state.heater_onoff)
     524:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <app_state+0x3d>
     528:	88 23       	and	r24, r24
     52a:	09 f4       	brne	.+2      	; 0x52e <app_control+0xe6>
     52c:	5f c0       	rjmp	.+190    	; 0x5ec <app_control+0x1a4>
	{
		float process_val;
		switch(app_state.settings.controlling_tprobe)
     52e:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <app_state+0x14>
     532:	88 2f       	mov	r24, r24
     534:	90 e0       	ldi	r25, 0x00	; 0
     536:	00 97       	sbiw	r24, 0x00	; 0
     538:	19 f0       	breq	.+6      	; 0x540 <app_control+0xf8>
     53a:	01 97       	sbiw	r24, 0x01	; 1
     53c:	71 f0       	breq	.+28     	; 0x55a <app_control+0x112>
     53e:	1a c0       	rjmp	.+52     	; 0x574 <app_control+0x12c>
		{
			#ifdef TSENS_PROBE_0
			case 0:				
				process_val = app_state.t0_current_temp;				
     540:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <app_state+0x3f>
     544:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <app_state+0x40>
     548:	a0 91 52 01 	lds	r26, 0x0152	; 0x800152 <app_state+0x41>
     54c:	b0 91 53 01 	lds	r27, 0x0153	; 0x800153 <app_state+0x42>
     550:	89 83       	std	Y+1, r24	; 0x01
     552:	9a 83       	std	Y+2, r25	; 0x02
     554:	ab 83       	std	Y+3, r26	; 0x03
     556:	bc 83       	std	Y+4, r27	; 0x04
				break;
     558:	0f c0       	rjmp	.+30     	; 0x578 <app_control+0x130>
				#endif
			#ifdef TSENS_PROBE_1
			case 1:				
				process_val = app_state.t1_current_temp;				
     55a:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <app_state+0x47>
     55e:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <app_state+0x48>
     562:	a0 91 5a 01 	lds	r26, 0x015A	; 0x80015a <app_state+0x49>
     566:	b0 91 5b 01 	lds	r27, 0x015B	; 0x80015b <app_state+0x4a>
     56a:	89 83       	std	Y+1, r24	; 0x01
     56c:	9a 83       	std	Y+2, r25	; 0x02
     56e:	ab 83       	std	Y+3, r26	; 0x03
     570:	bc 83       	std	Y+4, r27	; 0x04
				break;
     572:	02 c0       	rjmp	.+4      	; 0x578 <app_control+0x130>
			case 3:				
				process_val = app_state.t3_current_temp;				
				break;
				#endif
			default:
				return EC_NO_CONTROLLING_TPROBE;
     574:	84 e0       	ldi	r24, 0x04	; 4
     576:	3b c0       	rjmp	.+118    	; 0x5ee <app_control+0x1a6>
		}
		
		float pid_res = pid_step(&app_state.pid_state, process_val, app_state.settings.heater_target_temp);
     578:	20 91 11 01 	lds	r18, 0x0111	; 0x800111 <app_state>
     57c:	30 91 12 01 	lds	r19, 0x0112	; 0x800112 <app_state+0x1>
     580:	40 91 13 01 	lds	r20, 0x0113	; 0x800113 <app_state+0x2>
     584:	50 91 14 01 	lds	r21, 0x0114	; 0x800114 <app_state+0x3>
     588:	89 81       	ldd	r24, Y+1	; 0x01
     58a:	9a 81       	ldd	r25, Y+2	; 0x02
     58c:	ab 81       	ldd	r26, Y+3	; 0x03
     58e:	bc 81       	ldd	r27, Y+4	; 0x04
     590:	89 01       	movw	r16, r18
     592:	9a 01       	movw	r18, r20
     594:	ac 01       	movw	r20, r24
     596:	bd 01       	movw	r22, r26
     598:	80 e3       	ldi	r24, 0x30	; 48
     59a:	91 e0       	ldi	r25, 0x01	; 1
     59c:	0e 94 33 18 	call	0x3066	; 0x3066 <pid_step>
     5a0:	dc 01       	movw	r26, r24
     5a2:	cb 01       	movw	r24, r22
     5a4:	8d 83       	std	Y+5, r24	; 0x05
     5a6:	9e 83       	std	Y+6, r25	; 0x06
     5a8:	af 83       	std	Y+7, r26	; 0x07
     5aa:	b8 87       	std	Y+8, r27	; 0x08
		// if heater temp is > than safe maximum, default pwm duty cycle to 0
		if(HEATER_SAFETY_TPROBE_CURRENT_TEMP > HEATER_MAX_TEMP) // HEATER_SAFETY_TPROBE_CURRENT_TEMP is the selected heater probe used to limit the maximum heater temperature
     5ac:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <app_state+0x3f>
     5b0:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <app_state+0x40>
     5b4:	a0 91 52 01 	lds	r26, 0x0152	; 0x800152 <app_state+0x41>
     5b8:	b0 91 53 01 	lds	r27, 0x0153	; 0x800153 <app_state+0x42>
     5bc:	20 e0       	ldi	r18, 0x00	; 0
     5be:	30 e0       	ldi	r19, 0x00	; 0
     5c0:	48 ec       	ldi	r20, 0xC8	; 200
     5c2:	52 e4       	ldi	r21, 0x42	; 66
     5c4:	bc 01       	movw	r22, r24
     5c6:	cd 01       	movw	r24, r26
     5c8:	0e 94 7b 27 	call	0x4ef6	; 0x4ef6 <__gesf2>
     5cc:	18 16       	cp	r1, r24
     5ce:	24 f4       	brge	.+8      	; 0x5d8 <app_control+0x190>
			heater_set_duty_cycle(0);
     5d0:	80 e0       	ldi	r24, 0x00	; 0
     5d2:	0e 94 95 11 	call	0x232a	; 0x232a <heater_set_duty_cycle>
     5d6:	0a c0       	rjmp	.+20     	; 0x5ec <app_control+0x1a4>
		else
			heater_set_duty_cycle((uint8_t)pid_res);
     5d8:	6d 81       	ldd	r22, Y+5	; 0x05
     5da:	7e 81       	ldd	r23, Y+6	; 0x06
     5dc:	8f 81       	ldd	r24, Y+7	; 0x07
     5de:	98 85       	ldd	r25, Y+8	; 0x08
     5e0:	0e 94 8a 26 	call	0x4d14	; 0x4d14 <__fixunssfsi>
     5e4:	dc 01       	movw	r26, r24
     5e6:	cb 01       	movw	r24, r22
     5e8:	0e 94 95 11 	call	0x232a	; 0x232a <heater_set_duty_cycle>
		
	}
	return EC_SUCCESS; // everything ok
     5ec:	80 e0       	ldi	r24, 0x00	; 0
}
     5ee:	28 96       	adiw	r28, 0x08	; 8
     5f0:	0f b6       	in	r0, 0x3f	; 63
     5f2:	f8 94       	cli
     5f4:	de bf       	out	0x3e, r29	; 62
     5f6:	0f be       	out	0x3f, r0	; 63
     5f8:	cd bf       	out	0x3d, r28	; 61
     5fa:	df 91       	pop	r29
     5fc:	cf 91       	pop	r28
     5fe:	1f 91       	pop	r17
     600:	0f 91       	pop	r16
     602:	08 95       	ret

00000604 <app_rotenc_update>:

/////////////////////////////////////// ROT_ENC UPDATE CALLBACK ///////////////////////////////////
ErrorCode app_rotenc_update()
{
     604:	cf 93       	push	r28
     606:	df 93       	push	r29
     608:	cd b7       	in	r28, 0x3d	; 61
     60a:	de b7       	in	r29, 0x3e	; 62
	rotenc_update();
     60c:	0e 94 2f 1a 	call	0x345e	; 0x345e <rotenc_update>
	return EC_SUCCESS;
     610:	80 e0       	ldi	r24, 0x00	; 0
}
     612:	df 91       	pop	r29
     614:	cf 91       	pop	r28
     616:	08 95       	ret

00000618 <app_button_update>:

/////////////////////////////////////// BUTTONS UPDATE CALLBACK ///////////////////////////////////
ErrorCode app_button_update()
{
     618:	cf 93       	push	r28
     61a:	df 93       	push	r29
     61c:	cd b7       	in	r28, 0x3d	; 61
     61e:	de b7       	in	r29, 0x3e	; 62
	switch_update();
     620:	0e 94 3e 21 	call	0x427c	; 0x427c <switch_update>
	return EC_SUCCESS;
     624:	80 e0       	ldi	r24, 0x00	; 0
}
     626:	df 91       	pop	r29
     628:	cf 91       	pop	r28
     62a:	08 95       	ret

0000062c <app_state_main>:

/////////////////////////////////////// STATE MACHINE IMPLEMENTATION //////////////////////////////
// all the state functions
ErrorCode app_state_main()
{
     62c:	cf 93       	push	r28
     62e:	df 93       	push	r29
     630:	cd b7       	in	r28, 0x3d	; 61
     632:	de b7       	in	r29, 0x3e	; 62
	if(app_state.current_input.rotenc_delta > 0)
     634:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <app_state+0x16>
     638:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <app_state+0x17>
     63c:	18 16       	cp	r1, r24
     63e:	19 06       	cpc	r1, r25
     640:	64 f4       	brge	.+24     	; 0x65a <app_state_main+0x2e>
		app_state.selected_menu_item_index = imax8(imin8(app_state.selected_menu_item_index + 1, 1), 0);
     642:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <app_state+0x1e>
     646:	8f 5f       	subi	r24, 0xFF	; 255
     648:	61 e0       	ldi	r22, 0x01	; 1
     64a:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <imin8>
     64e:	60 e0       	ldi	r22, 0x00	; 0
     650:	0e 94 5b 16 	call	0x2cb6	; 0x2cb6 <imax8>
     654:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <app_state+0x1e>
     658:	11 c0       	rjmp	.+34     	; 0x67c <app_state_main+0x50>
	else if(app_state.current_input.rotenc_delta < 0)
     65a:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <app_state+0x16>
     65e:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <app_state+0x17>
     662:	99 23       	and	r25, r25
     664:	5c f4       	brge	.+22     	; 0x67c <app_state_main+0x50>
		app_state.selected_menu_item_index = imax8(imin8(app_state.selected_menu_item_index - 1, 1), 0);
     666:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <app_state+0x1e>
     66a:	81 50       	subi	r24, 0x01	; 1
     66c:	61 e0       	ldi	r22, 0x01	; 1
     66e:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <imin8>
     672:	60 e0       	ldi	r22, 0x00	; 0
     674:	0e 94 5b 16 	call	0x2cb6	; 0x2cb6 <imax8>
     678:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <app_state+0x1e>
	// display current temp
	srd_clear();
     67c:	0e 94 10 1f 	call	0x3e20	; 0x3e20 <srd_clear>
	switch(app_state.selected_menu_item_index)
     680:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <app_state+0x1e>
     684:	08 2e       	mov	r0, r24
     686:	00 0c       	add	r0, r0
     688:	99 0b       	sbc	r25, r25
     68a:	00 97       	sbiw	r24, 0x00	; 0
     68c:	19 f0       	breq	.+6      	; 0x694 <app_state_main+0x68>
     68e:	01 97       	sbiw	r24, 0x01	; 1
     690:	79 f0       	breq	.+30     	; 0x6b0 <app_state_main+0x84>
     692:	1c c0       	rjmp	.+56     	; 0x6cc <app_state_main+0xa0>
	{
		#ifdef TSENS_PROBE_0
		case 0:
			mr_main(app_state.t0_current_temp, 0);
     694:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <app_state+0x3f>
     698:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <app_state+0x40>
     69c:	a0 91 52 01 	lds	r26, 0x0152	; 0x800152 <app_state+0x41>
     6a0:	b0 91 53 01 	lds	r27, 0x0153	; 0x800153 <app_state+0x42>
     6a4:	40 e0       	ldi	r20, 0x00	; 0
     6a6:	bc 01       	movw	r22, r24
     6a8:	cd 01       	movw	r24, r26
     6aa:	0e 94 16 12 	call	0x242c	; 0x242c <mr_main>
			break;
     6ae:	10 c0       	rjmp	.+32     	; 0x6d0 <app_state_main+0xa4>
			#endif
		#ifdef TSENS_PROBE_1
		case 1:
			mr_main(app_state.t1_current_temp, 1);
     6b0:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <app_state+0x47>
     6b4:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <app_state+0x48>
     6b8:	a0 91 5a 01 	lds	r26, 0x015A	; 0x80015a <app_state+0x49>
     6bc:	b0 91 5b 01 	lds	r27, 0x015B	; 0x80015b <app_state+0x4a>
     6c0:	41 e0       	ldi	r20, 0x01	; 1
     6c2:	bc 01       	movw	r22, r24
     6c4:	cd 01       	movw	r24, r26
     6c6:	0e 94 16 12 	call	0x242c	; 0x242c <mr_main>
			break;
     6ca:	02 c0       	rjmp	.+4      	; 0x6d0 <app_state_main+0xa4>
		case 3:
			mr_main(app_state.t3_current_temp, 3);
			break;
			#endif
		default:
			return EC_NO_CONTROLLING_TPROBE;
     6cc:	84 e0       	ldi	r24, 0x04	; 4
     6ce:	13 c0       	rjmp	.+38     	; 0x6f6 <app_state_main+0xca>
			break;
	}
	srd_display();
     6d0:	0e 94 ff 1e 	call	0x3dfe	; 0x3dfe <srd_display>
	
	// state change
	if(app_state.current_input.button_presses & (1 << BUTTON0))
     6d4:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <app_state+0x18>
     6d8:	88 2f       	mov	r24, r24
     6da:	90 e0       	ldi	r25, 0x00	; 0
     6dc:	81 70       	andi	r24, 0x01	; 1
     6de:	99 27       	eor	r25, r25
     6e0:	89 2b       	or	r24, r25
     6e2:	41 f0       	breq	.+16     	; 0x6f4 <app_state_main+0xc8>
	{
		app_state.selected_menu_item_index = 0;
     6e4:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <app_state+0x1e>
		app_state.current_state_func = app_state_menu_main;
     6e8:	8e e7       	ldi	r24, 0x7E	; 126
     6ea:	93 e0       	ldi	r25, 0x03	; 3
     6ec:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <app_state+0x1d>
     6f0:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <app_state+0x1c>
	}
	
	return EC_SUCCESS; // everything ok	
     6f4:	80 e0       	ldi	r24, 0x00	; 0
}
     6f6:	df 91       	pop	r29
     6f8:	cf 91       	pop	r28
     6fa:	08 95       	ret

000006fc <app_state_menu_main>:

ErrorCode app_state_menu_main()
{
     6fc:	cf 93       	push	r28
     6fe:	df 93       	push	r29
     700:	cd b7       	in	r28, 0x3d	; 61
     702:	de b7       	in	r29, 0x3e	; 62
	if(app_state.current_input.rotenc_delta > 0)
     704:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <app_state+0x16>
     708:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <app_state+0x17>
     70c:	18 16       	cp	r1, r24
     70e:	19 06       	cpc	r1, r25
     710:	64 f4       	brge	.+24     	; 0x72a <app_state_menu_main+0x2e>
		app_state.selected_menu_item_index = imax8(imin8(app_state.selected_menu_item_index + 1, 5), 0);
     712:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <app_state+0x1e>
     716:	8f 5f       	subi	r24, 0xFF	; 255
     718:	65 e0       	ldi	r22, 0x05	; 5
     71a:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <imin8>
     71e:	60 e0       	ldi	r22, 0x00	; 0
     720:	0e 94 5b 16 	call	0x2cb6	; 0x2cb6 <imax8>
     724:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <app_state+0x1e>
     728:	11 c0       	rjmp	.+34     	; 0x74c <app_state_menu_main+0x50>
	else if(app_state.current_input.rotenc_delta < 0)
     72a:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <app_state+0x16>
     72e:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <app_state+0x17>
     732:	99 23       	and	r25, r25
     734:	5c f4       	brge	.+22     	; 0x74c <app_state_menu_main+0x50>
		app_state.selected_menu_item_index = imax8(imin8(app_state.selected_menu_item_index - 1, 5), 0);
     736:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <app_state+0x1e>
     73a:	81 50       	subi	r24, 0x01	; 1
     73c:	65 e0       	ldi	r22, 0x05	; 5
     73e:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <imin8>
     742:	60 e0       	ldi	r22, 0x00	; 0
     744:	0e 94 5b 16 	call	0x2cb6	; 0x2cb6 <imax8>
     748:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <app_state+0x1e>
	// display selected menu item
	srd_clear();
     74c:	0e 94 10 1f 	call	0x3e20	; 0x3e20 <srd_clear>
	mr_main_menu(app_state.selected_menu_item_index);
     750:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <app_state+0x1e>
     754:	0e 94 5e 12 	call	0x24bc	; 0x24bc <mr_main_menu>
	srd_display();
     758:	0e 94 ff 1e 	call	0x3dfe	; 0x3dfe <srd_display>
	
	// state change
	if(app_state.current_input.button_presses & (1 << BUTTON0))
     75c:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <app_state+0x18>
     760:	88 2f       	mov	r24, r24
     762:	90 e0       	ldi	r25, 0x00	; 0
     764:	81 70       	andi	r24, 0x01	; 1
     766:	99 27       	eor	r25, r25
     768:	89 2b       	or	r24, r25
     76a:	09 f4       	brne	.+2      	; 0x76e <app_state_menu_main+0x72>
     76c:	43 c0       	rjmp	.+134    	; 0x7f4 <app_state_menu_main+0xf8>
	{
		switch(app_state.selected_menu_item_index)
     76e:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <app_state+0x1e>
     772:	08 2e       	mov	r0, r24
     774:	00 0c       	add	r0, r0
     776:	99 0b       	sbc	r25, r25
     778:	82 30       	cpi	r24, 0x02	; 2
     77a:	91 05       	cpc	r25, r1
     77c:	19 f1       	breq	.+70     	; 0x7c4 <app_state_menu_main+0xc8>
     77e:	83 30       	cpi	r24, 0x03	; 3
     780:	91 05       	cpc	r25, r1
     782:	2c f4       	brge	.+10     	; 0x78e <app_state_menu_main+0x92>
     784:	00 97       	sbiw	r24, 0x00	; 0
     786:	61 f0       	breq	.+24     	; 0x7a0 <app_state_menu_main+0xa4>
     788:	01 97       	sbiw	r24, 0x01	; 1
     78a:	99 f0       	breq	.+38     	; 0x7b2 <app_state_menu_main+0xb6>
     78c:	33 c0       	rjmp	.+102    	; 0x7f4 <app_state_menu_main+0xf8>
     78e:	84 30       	cpi	r24, 0x04	; 4
     790:	91 05       	cpc	r25, r1
     792:	51 f1       	breq	.+84     	; 0x7e8 <app_state_menu_main+0xec>
     794:	84 30       	cpi	r24, 0x04	; 4
     796:	91 05       	cpc	r25, r1
     798:	f4 f0       	brlt	.+60     	; 0x7d6 <app_state_menu_main+0xda>
     79a:	05 97       	sbiw	r24, 0x05	; 5
     79c:	41 f1       	breq	.+80     	; 0x7ee <app_state_menu_main+0xf2>
     79e:	2a c0       	rjmp	.+84     	; 0x7f4 <app_state_menu_main+0xf8>
		{
			case 0:	// back to main screen
				app_state.selected_menu_item_index = 0;
     7a0:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <app_state+0x1e>
				app_state.current_state_func = app_state_main;
     7a4:	86 e1       	ldi	r24, 0x16	; 22
     7a6:	93 e0       	ldi	r25, 0x03	; 3
     7a8:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <app_state+0x1d>
     7ac:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <app_state+0x1c>
				break;
     7b0:	21 c0       	rjmp	.+66     	; 0x7f4 <app_state_menu_main+0xf8>
			case 1: // heater menu
				app_state.selected_menu_item_index = 0;
     7b2:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <app_state+0x1e>
				app_state.current_state_func = app_state_menu_heater;
     7b6:	8e ef       	ldi	r24, 0xFE	; 254
     7b8:	93 e0       	ldi	r25, 0x03	; 3
     7ba:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <app_state+0x1d>
     7be:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <app_state+0x1c>
				break;
     7c2:	18 c0       	rjmp	.+48     	; 0x7f4 <app_state_menu_main+0xf8>
			case 2:	// stirrer menu
				app_state.selected_menu_item_index = 0;
     7c4:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <app_state+0x1e>
				app_state.current_state_func = app_state_menu_stirrer;
     7c8:	86 ec       	ldi	r24, 0xC6	; 198
     7ca:	98 e0       	ldi	r25, 0x08	; 8
     7cc:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <app_state+0x1d>
     7d0:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <app_state+0x1c>
				break;
     7d4:	0f c0       	rjmp	.+30     	; 0x7f4 <app_state_menu_main+0xf8>
			case 3:	// thermistor calibration menu
				app_state.selected_menu_item_index = 0;
     7d6:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <app_state+0x1e>
				app_state.current_state_func = app_state_menu_tprobe;
     7da:	8b e7       	ldi	r24, 0x7B	; 123
     7dc:	99 e0       	ldi	r25, 0x09	; 9
     7de:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <app_state+0x1d>
     7e2:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <app_state+0x1c>
				break;
     7e6:	06 c0       	rjmp	.+12     	; 0x7f4 <app_state_menu_main+0xf8>
			case 4:	// load settings from eeprom
				//app_state.selected_menu_item_index = 0;
				//app_state.current_state_func = app_state_menu_load_eeprom_settings;
				app_load_settings_from_eeprom();
     7e8:	0e 94 1c 0b 	call	0x1638	; 0x1638 <app_load_settings_from_eeprom>
				break;
     7ec:	03 c0       	rjmp	.+6      	; 0x7f4 <app_state_menu_main+0xf8>
			case 5:	// store settings to eeprom
				//app_state.selected_menu_item_index = 0;
				//app_state.current_state_func = app_state_menu_store_eeprom_settings;
				app_store_settings_to_eeprom();
     7ee:	0e 94 49 0b 	call	0x1692	; 0x1692 <app_store_settings_to_eeprom>
				break;
     7f2:	00 00       	nop
		}
	}
	return EC_SUCCESS;
     7f4:	80 e0       	ldi	r24, 0x00	; 0
}
     7f6:	df 91       	pop	r29
     7f8:	cf 91       	pop	r28
     7fa:	08 95       	ret

000007fc <app_state_menu_heater>:

ErrorCode app_state_menu_heater()
{
     7fc:	cf 93       	push	r28
     7fe:	df 93       	push	r29
     800:	cd b7       	in	r28, 0x3d	; 61
     802:	de b7       	in	r29, 0x3e	; 62
	if(app_state.current_input.rotenc_delta > 0)
     804:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <app_state+0x16>
     808:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <app_state+0x17>
     80c:	18 16       	cp	r1, r24
     80e:	19 06       	cpc	r1, r25
     810:	64 f4       	brge	.+24     	; 0x82a <app_state_menu_heater+0x2e>
		app_state.selected_menu_item_index = imax8(imin8(app_state.selected_menu_item_index + 1, 5), 0);
     812:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <app_state+0x1e>
     816:	8f 5f       	subi	r24, 0xFF	; 255
     818:	65 e0       	ldi	r22, 0x05	; 5
     81a:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <imin8>
     81e:	60 e0       	ldi	r22, 0x00	; 0
     820:	0e 94 5b 16 	call	0x2cb6	; 0x2cb6 <imax8>
     824:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <app_state+0x1e>
     828:	11 c0       	rjmp	.+34     	; 0x84c <app_state_menu_heater+0x50>
	else if(app_state.current_input.rotenc_delta < 0)
     82a:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <app_state+0x16>
     82e:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <app_state+0x17>
     832:	99 23       	and	r25, r25
     834:	5c f4       	brge	.+22     	; 0x84c <app_state_menu_heater+0x50>
		app_state.selected_menu_item_index = imax8(imin8(app_state.selected_menu_item_index - 1, 5), 0);
     836:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <app_state+0x1e>
     83a:	81 50       	subi	r24, 0x01	; 1
     83c:	65 e0       	ldi	r22, 0x05	; 5
     83e:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <imin8>
     842:	60 e0       	ldi	r22, 0x00	; 0
     844:	0e 94 5b 16 	call	0x2cb6	; 0x2cb6 <imax8>
     848:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <app_state+0x1e>
	// display selected menu item
	srd_clear();
     84c:	0e 94 10 1f 	call	0x3e20	; 0x3e20 <srd_clear>
	mr_heater_menu(app_state.selected_menu_item_index);
     850:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <app_state+0x1e>
     854:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <mr_heater_menu>
	srd_display();
     858:	0e 94 ff 1e 	call	0x3dfe	; 0x3dfe <srd_display>
	
	// state change
	if(app_state.current_input.button_presses & (1 << BUTTON0))
     85c:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <app_state+0x18>
     860:	88 2f       	mov	r24, r24
     862:	90 e0       	ldi	r25, 0x00	; 0
     864:	81 70       	andi	r24, 0x01	; 1
     866:	99 27       	eor	r25, r25
     868:	89 2b       	or	r24, r25
     86a:	09 f4       	brne	.+2      	; 0x86e <app_state_menu_heater+0x72>
     86c:	52 c0       	rjmp	.+164    	; 0x912 <app_state_menu_heater+0x116>
	{
		switch(app_state.selected_menu_item_index)
     86e:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <app_state+0x1e>
     872:	08 2e       	mov	r0, r24
     874:	00 0c       	add	r0, r0
     876:	99 0b       	sbc	r25, r25
     878:	82 30       	cpi	r24, 0x02	; 2
     87a:	91 05       	cpc	r25, r1
     87c:	21 f1       	breq	.+72     	; 0x8c6 <app_state_menu_heater+0xca>
     87e:	83 30       	cpi	r24, 0x03	; 3
     880:	91 05       	cpc	r25, r1
     882:	2c f4       	brge	.+10     	; 0x88e <app_state_menu_heater+0x92>
     884:	00 97       	sbiw	r24, 0x00	; 0
     886:	61 f0       	breq	.+24     	; 0x8a0 <app_state_menu_heater+0xa4>
     888:	01 97       	sbiw	r24, 0x01	; 1
     88a:	a1 f0       	breq	.+40     	; 0x8b4 <app_state_menu_heater+0xb8>
     88c:	42 c0       	rjmp	.+132    	; 0x912 <app_state_menu_heater+0x116>
     88e:	84 30       	cpi	r24, 0x04	; 4
     890:	91 05       	cpc	r25, r1
     892:	69 f1       	breq	.+90     	; 0x8ee <app_state_menu_heater+0xf2>
     894:	84 30       	cpi	r24, 0x04	; 4
     896:	91 05       	cpc	r25, r1
     898:	fc f0       	brlt	.+62     	; 0x8d8 <app_state_menu_heater+0xdc>
     89a:	05 97       	sbiw	r24, 0x05	; 5
     89c:	89 f1       	breq	.+98     	; 0x900 <app_state_menu_heater+0x104>
     89e:	39 c0       	rjmp	.+114    	; 0x912 <app_state_menu_heater+0x116>
		{
			case 0:	// back to main menu
				app_state.selected_menu_item_index = 1;
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <app_state+0x1e>
				app_state.current_state_func = app_state_menu_main;
     8a6:	8e e7       	ldi	r24, 0x7E	; 126
     8a8:	93 e0       	ldi	r25, 0x03	; 3
     8aa:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <app_state+0x1d>
     8ae:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <app_state+0x1c>
				break;
     8b2:	2f c0       	rjmp	.+94     	; 0x912 <app_state_menu_heater+0x116>
			case 1: // heater on / off
				app_state.selected_menu_item_index = 0;
     8b4:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <app_state+0x1e>
				app_state.current_state_func = app_state_menu_heater_onoff;
     8b8:	8d e8       	ldi	r24, 0x8D	; 141
     8ba:	94 e0       	ldi	r25, 0x04	; 4
     8bc:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <app_state+0x1d>
     8c0:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <app_state+0x1c>
				break;
     8c4:	26 c0       	rjmp	.+76     	; 0x912 <app_state_menu_heater+0x116>
			case 2:	// heater target temp
				app_state.selected_menu_item_index = 0;
     8c6:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <app_state+0x1e>
				app_state.current_state_func = app_state_menu_heater_target_temp;
     8ca:	89 ec       	ldi	r24, 0xC9	; 201
     8cc:	94 e0       	ldi	r25, 0x04	; 4
     8ce:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <app_state+0x1d>
     8d2:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <app_state+0x1c>
				break;
     8d6:	1d c0       	rjmp	.+58     	; 0x912 <app_state_menu_heater+0x116>
			case 3:	// thermistor select
				app_state.selected_menu_item_index = app_state.settings.controlling_tprobe;
     8d8:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <app_state+0x14>
     8dc:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <app_state+0x1e>
				app_state.current_state_func = app_state_menu_heater_controlling_tprobe;
     8e0:	84 e4       	ldi	r24, 0x44	; 68
     8e2:	95 e0       	ldi	r25, 0x05	; 5
     8e4:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <app_state+0x1d>
     8e8:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <app_state+0x1c>
				break;
     8ec:	12 c0       	rjmp	.+36     	; 0x912 <app_state_menu_heater+0x116>
			case 4:	// heater pid menu
				app_state.selected_menu_item_index = 0;
     8ee:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <app_state+0x1e>
				app_state.current_state_func = app_state_menu_heater_pid;
     8f2:	83 eb       	ldi	r24, 0xB3	; 179
     8f4:	95 e0       	ldi	r25, 0x05	; 5
     8f6:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <app_state+0x1d>
     8fa:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <app_state+0x1c>
				break;
     8fe:	09 c0       	rjmp	.+18     	; 0x912 <app_state_menu_heater+0x116>
			case 5:	// heater offset
				app_state.selected_menu_item_index = 0;
     900:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <app_state+0x1e>
				app_state.current_state_func = app_state_menu_heater_offset;
     904:	8a e4       	ldi	r24, 0x4A	; 74
     906:	98 e0       	ldi	r25, 0x08	; 8
     908:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <app_state+0x1d>
     90c:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <app_state+0x1c>
				break;
     910:	00 00       	nop
		}
	}
	return EC_SUCCESS;
     912:	80 e0       	ldi	r24, 0x00	; 0
}
     914:	df 91       	pop	r29
     916:	cf 91       	pop	r28
     918:	08 95       	ret

0000091a <app_state_menu_heater_onoff>:

ErrorCode app_state_menu_heater_onoff()
{
     91a:	cf 93       	push	r28
     91c:	df 93       	push	r29
     91e:	cd b7       	in	r28, 0x3d	; 61
     920:	de b7       	in	r29, 0x3e	; 62
	if(app_state.current_input.rotenc_delta != 0)
     922:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <app_state+0x16>
     926:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <app_state+0x17>
     92a:	89 2b       	or	r24, r25
     92c:	a9 f0       	breq	.+42     	; 0x958 <app_state_menu_heater_onoff+0x3e>
	{
		app_state.heater_onoff = !app_state.heater_onoff;
     92e:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <app_state+0x3d>
     932:	81 e0       	ldi	r24, 0x01	; 1
     934:	99 23       	and	r25, r25
     936:	09 f0       	breq	.+2      	; 0x93a <app_state_menu_heater_onoff+0x20>
     938:	80 e0       	ldi	r24, 0x00	; 0
     93a:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <app_state+0x3d>
		if(app_state.heater_onoff)
     93e:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <app_state+0x3d>
     942:	88 23       	and	r24, r24
     944:	19 f0       	breq	.+6      	; 0x94c <app_state_menu_heater_onoff+0x32>
		{
			heater_on();
     946:	0e 94 c4 11 	call	0x2388	; 0x2388 <heater_on>
     94a:	02 c0       	rjmp	.+4      	; 0x950 <app_state_menu_heater_onoff+0x36>
		}
		else
		{
			heater_off();
     94c:	0e 94 e6 11 	call	0x23cc	; 0x23cc <heater_off>
		}
		pid_reset(&app_state.pid_state);
     950:	80 e3       	ldi	r24, 0x30	; 48
     952:	91 e0       	ldi	r25, 0x01	; 1
     954:	0e 94 7d 19 	call	0x32fa	; 0x32fa <pid_reset>
	}
	
	// display current value
	srd_clear();
     958:	0e 94 10 1f 	call	0x3e20	; 0x3e20 <srd_clear>
	mr_heater_menu_onoff(app_state.heater_onoff);
     95c:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <app_state+0x3d>
     960:	0e 94 35 14 	call	0x286a	; 0x286a <mr_heater_menu_onoff>
	srd_display();
     964:	0e 94 ff 1e 	call	0x3dfe	; 0x3dfe <srd_display>
	
	if(app_state.current_input.button_presses & (1 << BUTTON0))
     968:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <app_state+0x18>
     96c:	88 2f       	mov	r24, r24
     96e:	90 e0       	ldi	r25, 0x00	; 0
     970:	81 70       	andi	r24, 0x01	; 1
     972:	99 27       	eor	r25, r25
     974:	89 2b       	or	r24, r25
     976:	49 f0       	breq	.+18     	; 0x98a <app_state_menu_heater_onoff+0x70>
	{
		app_state.selected_menu_item_index = 1;
     978:	81 e0       	ldi	r24, 0x01	; 1
     97a:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <app_state+0x1e>
		app_state.current_state_func = app_state_menu_heater;
     97e:	8e ef       	ldi	r24, 0xFE	; 254
     980:	93 e0       	ldi	r25, 0x03	; 3
     982:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <app_state+0x1d>
     986:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <app_state+0x1c>
	}
	return EC_SUCCESS;
     98a:	80 e0       	ldi	r24, 0x00	; 0
}
     98c:	df 91       	pop	r29
     98e:	cf 91       	pop	r28
     990:	08 95       	ret

00000992 <app_state_menu_heater_target_temp>:

ErrorCode app_state_menu_heater_target_temp()
{
     992:	cf 92       	push	r12
     994:	df 92       	push	r13
     996:	ef 92       	push	r14
     998:	ff 92       	push	r15
     99a:	cf 93       	push	r28
     99c:	df 93       	push	r29
     99e:	cd b7       	in	r28, 0x3d	; 61
     9a0:	de b7       	in	r29, 0x3e	; 62
	if(app_state.current_input.rotenc_delta != 0)
     9a2:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <app_state+0x16>
     9a6:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <app_state+0x17>
     9aa:	89 2b       	or	r24, r25
     9ac:	09 f4       	brne	.+2      	; 0x9b0 <app_state_menu_heater_target_temp+0x1e>
     9ae:	43 c0       	rjmp	.+134    	; 0xa36 <app_state_menu_heater_target_temp+0xa4>
		app_state.settings.heater_target_temp = fmax(fmin(app_state.settings.heater_target_temp + app_state.current_input.rotenc_delta * TEMP_CHANGE_PER_ROTENC_STEP, MAX_HEATER_TARGET_TEMP), MIN_HEATER_TARGET_TEMP);
     9b0:	c0 90 11 01 	lds	r12, 0x0111	; 0x800111 <app_state>
     9b4:	d0 90 12 01 	lds	r13, 0x0112	; 0x800112 <app_state+0x1>
     9b8:	e0 90 13 01 	lds	r14, 0x0113	; 0x800113 <app_state+0x2>
     9bc:	f0 90 14 01 	lds	r15, 0x0114	; 0x800114 <app_state+0x3>
     9c0:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <app_state+0x16>
     9c4:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <app_state+0x17>
     9c8:	09 2e       	mov	r0, r25
     9ca:	00 0c       	add	r0, r0
     9cc:	aa 0b       	sbc	r26, r26
     9ce:	bb 0b       	sbc	r27, r27
     9d0:	bc 01       	movw	r22, r24
     9d2:	cd 01       	movw	r24, r26
     9d4:	0e 94 bb 26 	call	0x4d76	; 0x4d76 <__floatsisf>
     9d8:	dc 01       	movw	r26, r24
     9da:	cb 01       	movw	r24, r22
     9dc:	20 e0       	ldi	r18, 0x00	; 0
     9de:	30 e0       	ldi	r19, 0x00	; 0
     9e0:	40 e0       	ldi	r20, 0x00	; 0
     9e2:	5f e3       	ldi	r21, 0x3F	; 63
     9e4:	bc 01       	movw	r22, r24
     9e6:	cd 01       	movw	r24, r26
     9e8:	0e 94 d0 27 	call	0x4fa0	; 0x4fa0 <__mulsf3>
     9ec:	dc 01       	movw	r26, r24
     9ee:	cb 01       	movw	r24, r22
     9f0:	9c 01       	movw	r18, r24
     9f2:	ad 01       	movw	r20, r26
     9f4:	c7 01       	movw	r24, r14
     9f6:	b6 01       	movw	r22, r12
     9f8:	0e 94 64 25 	call	0x4ac8	; 0x4ac8 <__addsf3>
     9fc:	dc 01       	movw	r26, r24
     9fe:	cb 01       	movw	r24, r22
     a00:	20 e0       	ldi	r18, 0x00	; 0
     a02:	30 e0       	ldi	r19, 0x00	; 0
     a04:	48 ec       	ldi	r20, 0xC8	; 200
     a06:	52 e4       	ldi	r21, 0x42	; 66
     a08:	bc 01       	movw	r22, r24
     a0a:	cd 01       	movw	r24, r26
     a0c:	0e 94 03 17 	call	0x2e06	; 0x2e06 <fmin>
     a10:	dc 01       	movw	r26, r24
     a12:	cb 01       	movw	r24, r22
     a14:	20 e0       	ldi	r18, 0x00	; 0
     a16:	30 e0       	ldi	r19, 0x00	; 0
     a18:	a9 01       	movw	r20, r18
     a1a:	bc 01       	movw	r22, r24
     a1c:	cd 01       	movw	r24, r26
     a1e:	0e 94 d1 16 	call	0x2da2	; 0x2da2 <fmax>
     a22:	dc 01       	movw	r26, r24
     a24:	cb 01       	movw	r24, r22
     a26:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <app_state>
     a2a:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <app_state+0x1>
     a2e:	a0 93 13 01 	sts	0x0113, r26	; 0x800113 <app_state+0x2>
     a32:	b0 93 14 01 	sts	0x0114, r27	; 0x800114 <app_state+0x3>
	
	// display current value
	srd_clear();
     a36:	0e 94 10 1f 	call	0x3e20	; 0x3e20 <srd_clear>
	mr_heater_menu_target_temp(app_state.settings.heater_target_temp);
     a3a:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <app_state>
     a3e:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <app_state+0x1>
     a42:	a0 91 13 01 	lds	r26, 0x0113	; 0x800113 <app_state+0x2>
     a46:	b0 91 14 01 	lds	r27, 0x0114	; 0x800114 <app_state+0x3>
     a4a:	bc 01       	movw	r22, r24
     a4c:	cd 01       	movw	r24, r26
     a4e:	0e 94 60 14 	call	0x28c0	; 0x28c0 <mr_heater_menu_target_temp>
	srd_display();
     a52:	0e 94 ff 1e 	call	0x3dfe	; 0x3dfe <srd_display>
	
	if(app_state.current_input.button_presses & (1 << BUTTON0))
     a56:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <app_state+0x18>
     a5a:	88 2f       	mov	r24, r24
     a5c:	90 e0       	ldi	r25, 0x00	; 0
     a5e:	81 70       	andi	r24, 0x01	; 1
     a60:	99 27       	eor	r25, r25
     a62:	89 2b       	or	r24, r25
     a64:	49 f0       	breq	.+18     	; 0xa78 <app_state_menu_heater_target_temp+0xe6>
	{
		app_state.selected_menu_item_index = 2;
     a66:	82 e0       	ldi	r24, 0x02	; 2
     a68:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <app_state+0x1e>
		app_state.current_state_func = app_state_menu_heater;
     a6c:	8e ef       	ldi	r24, 0xFE	; 254
     a6e:	93 e0       	ldi	r25, 0x03	; 3
     a70:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <app_state+0x1d>
     a74:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <app_state+0x1c>
	}
	return EC_SUCCESS;
     a78:	80 e0       	ldi	r24, 0x00	; 0
}
     a7a:	df 91       	pop	r29
     a7c:	cf 91       	pop	r28
     a7e:	ff 90       	pop	r15
     a80:	ef 90       	pop	r14
     a82:	df 90       	pop	r13
     a84:	cf 90       	pop	r12
     a86:	08 95       	ret

00000a88 <app_state_menu_heater_controlling_tprobe>:

ErrorCode app_state_menu_heater_controlling_tprobe()
{
     a88:	cf 93       	push	r28
     a8a:	df 93       	push	r29
     a8c:	1f 92       	push	r1
     a8e:	cd b7       	in	r28, 0x3d	; 61
     a90:	de b7       	in	r29, 0x3e	; 62
	if(app_state.current_input.rotenc_delta > 0)
     a92:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <app_state+0x16>
     a96:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <app_state+0x17>
     a9a:	18 16       	cp	r1, r24
     a9c:	19 06       	cpc	r1, r25
     a9e:	64 f4       	brge	.+24     	; 0xab8 <app_state_menu_heater_controlling_tprobe+0x30>
		app_state.selected_menu_item_index = imax8(imin8(app_state.selected_menu_item_index + 1, 3), 0);
     aa0:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <app_state+0x1e>
     aa4:	8f 5f       	subi	r24, 0xFF	; 255
     aa6:	63 e0       	ldi	r22, 0x03	; 3
     aa8:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <imin8>
     aac:	60 e0       	ldi	r22, 0x00	; 0
     aae:	0e 94 5b 16 	call	0x2cb6	; 0x2cb6 <imax8>
     ab2:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <app_state+0x1e>
     ab6:	11 c0       	rjmp	.+34     	; 0xada <app_state_menu_heater_controlling_tprobe+0x52>
	else if(app_state.current_input.rotenc_delta < 0)
     ab8:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <app_state+0x16>
     abc:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <app_state+0x17>
     ac0:	99 23       	and	r25, r25
     ac2:	5c f4       	brge	.+22     	; 0xada <app_state_menu_heater_controlling_tprobe+0x52>
		app_state.selected_menu_item_index = imax8(imin8(app_state.selected_menu_item_index - 1, 3), 0);
     ac4:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <app_state+0x1e>
     ac8:	81 50       	subi	r24, 0x01	; 1
     aca:	63 e0       	ldi	r22, 0x03	; 3
     acc:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <imin8>
     ad0:	60 e0       	ldi	r22, 0x00	; 0
     ad2:	0e 94 5b 16 	call	0x2cb6	; 0x2cb6 <imax8>
     ad6:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <app_state+0x1e>
	
	uint8_t selection_valid;
	switch(app_state.selected_menu_item_index)
     ada:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <app_state+0x1e>
     ade:	08 2e       	mov	r0, r24
     ae0:	00 0c       	add	r0, r0
     ae2:	99 0b       	sbc	r25, r25
     ae4:	81 30       	cpi	r24, 0x01	; 1
     ae6:	91 05       	cpc	r25, r1
     ae8:	79 f0       	breq	.+30     	; 0xb08 <app_state_menu_heater_controlling_tprobe+0x80>
     aea:	82 30       	cpi	r24, 0x02	; 2
     aec:	91 05       	cpc	r25, r1
     aee:	1c f4       	brge	.+6      	; 0xaf6 <app_state_menu_heater_controlling_tprobe+0x6e>
     af0:	89 2b       	or	r24, r25
     af2:	39 f0       	breq	.+14     	; 0xb02 <app_state_menu_heater_controlling_tprobe+0x7a>
     af4:	10 c0       	rjmp	.+32     	; 0xb16 <app_state_menu_heater_controlling_tprobe+0x8e>
     af6:	82 30       	cpi	r24, 0x02	; 2
     af8:	91 05       	cpc	r25, r1
     afa:	49 f0       	breq	.+18     	; 0xb0e <app_state_menu_heater_controlling_tprobe+0x86>
     afc:	03 97       	sbiw	r24, 0x03	; 3
     afe:	49 f0       	breq	.+18     	; 0xb12 <app_state_menu_heater_controlling_tprobe+0x8a>
     b00:	0a c0       	rjmp	.+20     	; 0xb16 <app_state_menu_heater_controlling_tprobe+0x8e>
	{
		case 0:
			#ifdef TSENS_PROBE_0
				selection_valid = TRUE;
     b02:	81 e0       	ldi	r24, 0x01	; 1
     b04:	89 83       	std	Y+1, r24	; 0x01
			#else
				selection_valid = FALSE;
			#endif
			break;
     b06:	09 c0       	rjmp	.+18     	; 0xb1a <app_state_menu_heater_controlling_tprobe+0x92>
		case 1:
			#ifdef TSENS_PROBE_1
				selection_valid = TRUE;
     b08:	81 e0       	ldi	r24, 0x01	; 1
     b0a:	89 83       	std	Y+1, r24	; 0x01
			#else
				selection_valid = FALSE;
			#endif
			break;
     b0c:	06 c0       	rjmp	.+12     	; 0xb1a <app_state_menu_heater_controlling_tprobe+0x92>
		case 2:
			#ifdef TSENS_PROBE_2
				selection_valid = TRUE;
			#else
				selection_valid = FALSE;
     b0e:	19 82       	std	Y+1, r1	; 0x01
			#endif
			break;
     b10:	04 c0       	rjmp	.+8      	; 0xb1a <app_state_menu_heater_controlling_tprobe+0x92>
		case 3:
			#ifdef TSENS_PROBE_3
				selection_valid = TRUE;
			#else
				selection_valid = FALSE;
     b12:	19 82       	std	Y+1, r1	; 0x01
			#endif
			break;
     b14:	02 c0       	rjmp	.+4      	; 0xb1a <app_state_menu_heater_controlling_tprobe+0x92>
		default:
			selection_valid = FALSE;
     b16:	19 82       	std	Y+1, r1	; 0x01
			break;
     b18:	00 00       	nop
	}
	
	// display current selection
	srd_clear();
     b1a:	0e 94 10 1f 	call	0x3e20	; 0x3e20 <srd_clear>
	mr_heater_menu_controlling_probe_select(app_state.selected_menu_item_index, selection_valid);
     b1e:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <app_state+0x1e>
     b22:	69 81       	ldd	r22, Y+1	; 0x01
     b24:	0e 94 a3 13 	call	0x2746	; 0x2746 <mr_heater_menu_controlling_probe_select>
	srd_display();
     b28:	0e 94 ff 1e 	call	0x3dfe	; 0x3dfe <srd_display>
	
	if(app_state.current_input.button_presses & (1 << BUTTON0))
     b2c:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <app_state+0x18>
     b30:	88 2f       	mov	r24, r24
     b32:	90 e0       	ldi	r25, 0x00	; 0
     b34:	81 70       	andi	r24, 0x01	; 1
     b36:	99 27       	eor	r25, r25
     b38:	89 2b       	or	r24, r25
     b3a:	81 f0       	breq	.+32     	; 0xb5c <app_state_menu_heater_controlling_tprobe+0xd4>
	{
		if(selection_valid)
     b3c:	89 81       	ldd	r24, Y+1	; 0x01
     b3e:	88 23       	and	r24, r24
     b40:	69 f0       	breq	.+26     	; 0xb5c <app_state_menu_heater_controlling_tprobe+0xd4>
		{
			app_state.settings.controlling_tprobe = (uint8_t)app_state.selected_menu_item_index;
     b42:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <app_state+0x1e>
     b46:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <app_state+0x14>
			app_state.selected_menu_item_index = 3;
     b4a:	83 e0       	ldi	r24, 0x03	; 3
     b4c:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <app_state+0x1e>
			app_state.current_state_func = app_state_menu_heater;
     b50:	8e ef       	ldi	r24, 0xFE	; 254
     b52:	93 e0       	ldi	r25, 0x03	; 3
     b54:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <app_state+0x1d>
     b58:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <app_state+0x1c>
		}		
	}
	return EC_SUCCESS;
     b5c:	80 e0       	ldi	r24, 0x00	; 0
}
     b5e:	0f 90       	pop	r0
     b60:	df 91       	pop	r29
     b62:	cf 91       	pop	r28
     b64:	08 95       	ret

00000b66 <app_state_menu_heater_pid>:

ErrorCode app_state_menu_heater_pid()
{
     b66:	cf 93       	push	r28
     b68:	df 93       	push	r29
     b6a:	cd b7       	in	r28, 0x3d	; 61
     b6c:	de b7       	in	r29, 0x3e	; 62
	if(app_state.current_input.rotenc_delta > 0)
     b6e:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <app_state+0x16>
     b72:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <app_state+0x17>
     b76:	18 16       	cp	r1, r24
     b78:	19 06       	cpc	r1, r25
     b7a:	64 f4       	brge	.+24     	; 0xb94 <app_state_menu_heater_pid+0x2e>
		app_state.selected_menu_item_index = imax8(imin8(app_state.selected_menu_item_index + 1, 3), 0);
     b7c:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <app_state+0x1e>
     b80:	8f 5f       	subi	r24, 0xFF	; 255
     b82:	63 e0       	ldi	r22, 0x03	; 3
     b84:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <imin8>
     b88:	60 e0       	ldi	r22, 0x00	; 0
     b8a:	0e 94 5b 16 	call	0x2cb6	; 0x2cb6 <imax8>
     b8e:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <app_state+0x1e>
     b92:	11 c0       	rjmp	.+34     	; 0xbb6 <app_state_menu_heater_pid+0x50>
	else if(app_state.current_input.rotenc_delta < 0)
     b94:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <app_state+0x16>
     b98:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <app_state+0x17>
     b9c:	99 23       	and	r25, r25
     b9e:	5c f4       	brge	.+22     	; 0xbb6 <app_state_menu_heater_pid+0x50>
		app_state.selected_menu_item_index = imax8(imin8(app_state.selected_menu_item_index - 1, 3), 0);
     ba0:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <app_state+0x1e>
     ba4:	81 50       	subi	r24, 0x01	; 1
     ba6:	63 e0       	ldi	r22, 0x03	; 3
     ba8:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <imin8>
     bac:	60 e0       	ldi	r22, 0x00	; 0
     bae:	0e 94 5b 16 	call	0x2cb6	; 0x2cb6 <imax8>
     bb2:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <app_state+0x1e>
	// display selected menu item
	srd_clear();
     bb6:	0e 94 10 1f 	call	0x3e20	; 0x3e20 <srd_clear>
	mr_heater_menu_pid(app_state.selected_menu_item_index);
     bba:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <app_state+0x1e>
     bbe:	0e 94 fc 13 	call	0x27f8	; 0x27f8 <mr_heater_menu_pid>
	srd_display();
     bc2:	0e 94 ff 1e 	call	0x3dfe	; 0x3dfe <srd_display>
	
	// state change
	if(app_state.current_input.button_presses & (1 << BUTTON0))
     bc6:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <app_state+0x18>
     bca:	88 2f       	mov	r24, r24
     bcc:	90 e0       	ldi	r25, 0x00	; 0
     bce:	81 70       	andi	r24, 0x01	; 1
     bd0:	99 27       	eor	r25, r25
     bd2:	89 2b       	or	r24, r25
     bd4:	c9 f1       	breq	.+114    	; 0xc48 <app_state_menu_heater_pid+0xe2>
	{
		switch(app_state.selected_menu_item_index)
     bd6:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <app_state+0x1e>
     bda:	08 2e       	mov	r0, r24
     bdc:	00 0c       	add	r0, r0
     bde:	99 0b       	sbc	r25, r25
     be0:	81 30       	cpi	r24, 0x01	; 1
     be2:	91 05       	cpc	r25, r1
     be4:	b1 f0       	breq	.+44     	; 0xc12 <app_state_menu_heater_pid+0xac>
     be6:	82 30       	cpi	r24, 0x02	; 2
     be8:	91 05       	cpc	r25, r1
     bea:	1c f4       	brge	.+6      	; 0xbf2 <app_state_menu_heater_pid+0x8c>
     bec:	89 2b       	or	r24, r25
     bee:	39 f0       	breq	.+14     	; 0xbfe <app_state_menu_heater_pid+0x98>
     bf0:	2b c0       	rjmp	.+86     	; 0xc48 <app_state_menu_heater_pid+0xe2>
     bf2:	82 30       	cpi	r24, 0x02	; 2
     bf4:	91 05       	cpc	r25, r1
     bf6:	b1 f0       	breq	.+44     	; 0xc24 <app_state_menu_heater_pid+0xbe>
     bf8:	03 97       	sbiw	r24, 0x03	; 3
     bfa:	e9 f0       	breq	.+58     	; 0xc36 <app_state_menu_heater_pid+0xd0>
     bfc:	25 c0       	rjmp	.+74     	; 0xc48 <app_state_menu_heater_pid+0xe2>
		{
			case 0:	// back to main menu
				app_state.selected_menu_item_index = 4;
     bfe:	84 e0       	ldi	r24, 0x04	; 4
     c00:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <app_state+0x1e>
				app_state.current_state_func = app_state_menu_heater;
     c04:	8e ef       	ldi	r24, 0xFE	; 254
     c06:	93 e0       	ldi	r25, 0x03	; 3
     c08:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <app_state+0x1d>
     c0c:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <app_state+0x1c>
				break;
     c10:	1b c0       	rjmp	.+54     	; 0xc48 <app_state_menu_heater_pid+0xe2>
			case 1: // P
				app_state.selected_menu_item_index = 0;
     c12:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <app_state+0x1e>
				app_state.current_state_func = app_state_menu_heater_pid_p;
     c16:	88 e2       	ldi	r24, 0x28	; 40
     c18:	96 e0       	ldi	r25, 0x06	; 6
     c1a:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <app_state+0x1d>
     c1e:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <app_state+0x1c>
				break;
     c22:	12 c0       	rjmp	.+36     	; 0xc48 <app_state_menu_heater_pid+0xe2>
			case 2:	// I
				app_state.selected_menu_item_index = 0;
     c24:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <app_state+0x1e>
				app_state.current_state_func = app_state_menu_heater_pid_i;
     c28:	8e ed       	ldi	r24, 0xDE	; 222
     c2a:	96 e0       	ldi	r25, 0x06	; 6
     c2c:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <app_state+0x1d>
     c30:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <app_state+0x1c>
				break;
     c34:	09 c0       	rjmp	.+18     	; 0xc48 <app_state_menu_heater_pid+0xe2>
			case 3:	// D
				app_state.selected_menu_item_index = 0;
     c36:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <app_state+0x1e>
				app_state.current_state_func = app_state_menu_heater_pid_d;
     c3a:	84 e9       	ldi	r24, 0x94	; 148
     c3c:	97 e0       	ldi	r25, 0x07	; 7
     c3e:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <app_state+0x1d>
     c42:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <app_state+0x1c>
				break;
     c46:	00 00       	nop
		}
	}
	return EC_SUCCESS;
     c48:	80 e0       	ldi	r24, 0x00	; 0
}
     c4a:	df 91       	pop	r29
     c4c:	cf 91       	pop	r28
     c4e:	08 95       	ret

00000c50 <app_state_menu_heater_pid_p>:

ErrorCode app_state_menu_heater_pid_p()
{
     c50:	8f 92       	push	r8
     c52:	9f 92       	push	r9
     c54:	af 92       	push	r10
     c56:	bf 92       	push	r11
     c58:	cf 92       	push	r12
     c5a:	df 92       	push	r13
     c5c:	ef 92       	push	r14
     c5e:	ff 92       	push	r15
     c60:	0f 93       	push	r16
     c62:	1f 93       	push	r17
     c64:	cf 93       	push	r28
     c66:	df 93       	push	r29
     c68:	cd b7       	in	r28, 0x3d	; 61
     c6a:	de b7       	in	r29, 0x3e	; 62
	if(app_state.current_input.rotenc_delta != 0)
     c6c:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <app_state+0x16>
     c70:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <app_state+0x17>
     c74:	89 2b       	or	r24, r25
     c76:	09 f4       	brne	.+2      	; 0xc7a <app_state_menu_heater_pid_p+0x2a>
     c78:	72 c0       	rjmp	.+228    	; 0xd5e <app_state_menu_heater_pid_p+0x10e>
	{
		app_state.settings.heater_pid_p = fmax(fmin(app_state.settings.heater_pid_p + app_state.current_input.rotenc_delta * PID_CHANGE_PER_ROTENC_STEP, MAX_HEATER_PID_P), MIN_HEATER_PID_P);
     c7a:	c0 90 15 01 	lds	r12, 0x0115	; 0x800115 <app_state+0x4>
     c7e:	d0 90 16 01 	lds	r13, 0x0116	; 0x800116 <app_state+0x5>
     c82:	e0 90 17 01 	lds	r14, 0x0117	; 0x800117 <app_state+0x6>
     c86:	f0 90 18 01 	lds	r15, 0x0118	; 0x800118 <app_state+0x7>
     c8a:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <app_state+0x16>
     c8e:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <app_state+0x17>
     c92:	09 2e       	mov	r0, r25
     c94:	00 0c       	add	r0, r0
     c96:	aa 0b       	sbc	r26, r26
     c98:	bb 0b       	sbc	r27, r27
     c9a:	bc 01       	movw	r22, r24
     c9c:	cd 01       	movw	r24, r26
     c9e:	0e 94 bb 26 	call	0x4d76	; 0x4d76 <__floatsisf>
     ca2:	dc 01       	movw	r26, r24
     ca4:	cb 01       	movw	r24, r22
     ca6:	2a e0       	ldi	r18, 0x0A	; 10
     ca8:	37 ed       	ldi	r19, 0xD7	; 215
     caa:	43 e2       	ldi	r20, 0x23	; 35
     cac:	5c e3       	ldi	r21, 0x3C	; 60
     cae:	bc 01       	movw	r22, r24
     cb0:	cd 01       	movw	r24, r26
     cb2:	0e 94 d0 27 	call	0x4fa0	; 0x4fa0 <__mulsf3>
     cb6:	dc 01       	movw	r26, r24
     cb8:	cb 01       	movw	r24, r22
     cba:	9c 01       	movw	r18, r24
     cbc:	ad 01       	movw	r20, r26
     cbe:	c7 01       	movw	r24, r14
     cc0:	b6 01       	movw	r22, r12
     cc2:	0e 94 64 25 	call	0x4ac8	; 0x4ac8 <__addsf3>
     cc6:	dc 01       	movw	r26, r24
     cc8:	cb 01       	movw	r24, r22
     cca:	20 e0       	ldi	r18, 0x00	; 0
     ccc:	30 e0       	ldi	r19, 0x00	; 0
     cce:	4a e7       	ldi	r20, 0x7A	; 122
     cd0:	54 e4       	ldi	r21, 0x44	; 68
     cd2:	bc 01       	movw	r22, r24
     cd4:	cd 01       	movw	r24, r26
     cd6:	0e 94 03 17 	call	0x2e06	; 0x2e06 <fmin>
     cda:	dc 01       	movw	r26, r24
     cdc:	cb 01       	movw	r24, r22
     cde:	20 e0       	ldi	r18, 0x00	; 0
     ce0:	30 e0       	ldi	r19, 0x00	; 0
     ce2:	a9 01       	movw	r20, r18
     ce4:	bc 01       	movw	r22, r24
     ce6:	cd 01       	movw	r24, r26
     ce8:	0e 94 d1 16 	call	0x2da2	; 0x2da2 <fmax>
     cec:	dc 01       	movw	r26, r24
     cee:	cb 01       	movw	r24, r22
     cf0:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <app_state+0x4>
     cf4:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <app_state+0x5>
     cf8:	a0 93 17 01 	sts	0x0117, r26	; 0x800117 <app_state+0x6>
     cfc:	b0 93 18 01 	sts	0x0118, r27	; 0x800118 <app_state+0x7>
		pid_set_params(&app_state.pid_state, app_state.settings.heater_pid_p, app_state.settings.heater_pid_i, app_state.settings.heater_pid_d, HEATER_CONTROL_MIN, HEATER_CONTROL_MAX);
     d00:	e0 90 1d 01 	lds	r14, 0x011D	; 0x80011d <app_state+0xc>
     d04:	f0 90 1e 01 	lds	r15, 0x011E	; 0x80011e <app_state+0xd>
     d08:	00 91 1f 01 	lds	r16, 0x011F	; 0x80011f <app_state+0xe>
     d0c:	10 91 20 01 	lds	r17, 0x0120	; 0x800120 <app_state+0xf>
     d10:	20 91 19 01 	lds	r18, 0x0119	; 0x800119 <app_state+0x8>
     d14:	30 91 1a 01 	lds	r19, 0x011A	; 0x80011a <app_state+0x9>
     d18:	40 91 1b 01 	lds	r20, 0x011B	; 0x80011b <app_state+0xa>
     d1c:	50 91 1c 01 	lds	r21, 0x011C	; 0x80011c <app_state+0xb>
     d20:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <app_state+0x4>
     d24:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <app_state+0x5>
     d28:	a0 91 17 01 	lds	r26, 0x0117	; 0x800117 <app_state+0x6>
     d2c:	b0 91 18 01 	lds	r27, 0x0118	; 0x800118 <app_state+0x7>
     d30:	62 e4       	ldi	r22, 0x42	; 66
     d32:	6f 93       	push	r22
     d34:	68 ec       	ldi	r22, 0xC8	; 200
     d36:	6f 93       	push	r22
     d38:	1f 92       	push	r1
     d3a:	1f 92       	push	r1
     d3c:	81 2c       	mov	r8, r1
     d3e:	91 2c       	mov	r9, r1
     d40:	54 01       	movw	r10, r8
     d42:	67 01       	movw	r12, r14
     d44:	78 01       	movw	r14, r16
     d46:	89 01       	movw	r16, r18
     d48:	9a 01       	movw	r18, r20
     d4a:	ac 01       	movw	r20, r24
     d4c:	bd 01       	movw	r22, r26
     d4e:	80 e3       	ldi	r24, 0x30	; 48
     d50:	91 e0       	ldi	r25, 0x01	; 1
     d52:	0e 94 b4 17 	call	0x2f68	; 0x2f68 <pid_set_params>
     d56:	0f 90       	pop	r0
     d58:	0f 90       	pop	r0
     d5a:	0f 90       	pop	r0
     d5c:	0f 90       	pop	r0
	}
	
	// display current value
	srd_clear();
     d5e:	0e 94 10 1f 	call	0x3e20	; 0x3e20 <srd_clear>
	mr_heater_menu_pid_p(app_state.settings.heater_pid_p);
     d62:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <app_state+0x4>
     d66:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <app_state+0x5>
     d6a:	a0 91 17 01 	lds	r26, 0x0117	; 0x800117 <app_state+0x6>
     d6e:	b0 91 18 01 	lds	r27, 0x0118	; 0x800118 <app_state+0x7>
     d72:	bc 01       	movw	r22, r24
     d74:	cd 01       	movw	r24, r26
     d76:	0e 94 83 14 	call	0x2906	; 0x2906 <mr_heater_menu_pid_p>
	srd_display();
     d7a:	0e 94 ff 1e 	call	0x3dfe	; 0x3dfe <srd_display>
	
	if(app_state.current_input.button_presses & (1 << BUTTON0))
     d7e:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <app_state+0x18>
     d82:	88 2f       	mov	r24, r24
     d84:	90 e0       	ldi	r25, 0x00	; 0
     d86:	81 70       	andi	r24, 0x01	; 1
     d88:	99 27       	eor	r25, r25
     d8a:	89 2b       	or	r24, r25
     d8c:	49 f0       	breq	.+18     	; 0xda0 <app_state_menu_heater_pid_p+0x150>
	{
		app_state.selected_menu_item_index = 1;
     d8e:	81 e0       	ldi	r24, 0x01	; 1
     d90:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <app_state+0x1e>
		app_state.current_state_func = app_state_menu_heater_pid;
     d94:	83 eb       	ldi	r24, 0xB3	; 179
     d96:	95 e0       	ldi	r25, 0x05	; 5
     d98:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <app_state+0x1d>
     d9c:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <app_state+0x1c>
	}
	return EC_SUCCESS;
     da0:	80 e0       	ldi	r24, 0x00	; 0
}
     da2:	df 91       	pop	r29
     da4:	cf 91       	pop	r28
     da6:	1f 91       	pop	r17
     da8:	0f 91       	pop	r16
     daa:	ff 90       	pop	r15
     dac:	ef 90       	pop	r14
     dae:	df 90       	pop	r13
     db0:	cf 90       	pop	r12
     db2:	bf 90       	pop	r11
     db4:	af 90       	pop	r10
     db6:	9f 90       	pop	r9
     db8:	8f 90       	pop	r8
     dba:	08 95       	ret

00000dbc <app_state_menu_heater_pid_i>:

ErrorCode app_state_menu_heater_pid_i()
{
     dbc:	8f 92       	push	r8
     dbe:	9f 92       	push	r9
     dc0:	af 92       	push	r10
     dc2:	bf 92       	push	r11
     dc4:	cf 92       	push	r12
     dc6:	df 92       	push	r13
     dc8:	ef 92       	push	r14
     dca:	ff 92       	push	r15
     dcc:	0f 93       	push	r16
     dce:	1f 93       	push	r17
     dd0:	cf 93       	push	r28
     dd2:	df 93       	push	r29
     dd4:	cd b7       	in	r28, 0x3d	; 61
     dd6:	de b7       	in	r29, 0x3e	; 62
	if(app_state.current_input.rotenc_delta != 0)
     dd8:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <app_state+0x16>
     ddc:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <app_state+0x17>
     de0:	89 2b       	or	r24, r25
     de2:	09 f4       	brne	.+2      	; 0xde6 <app_state_menu_heater_pid_i+0x2a>
     de4:	72 c0       	rjmp	.+228    	; 0xeca <app_state_menu_heater_pid_i+0x10e>
	{
		app_state.settings.heater_pid_i = fmax(fmin(app_state.settings.heater_pid_i + app_state.current_input.rotenc_delta * PID_CHANGE_PER_ROTENC_STEP, MAX_HEATER_PID_I), MIN_HEATER_PID_I);
     de6:	c0 90 19 01 	lds	r12, 0x0119	; 0x800119 <app_state+0x8>
     dea:	d0 90 1a 01 	lds	r13, 0x011A	; 0x80011a <app_state+0x9>
     dee:	e0 90 1b 01 	lds	r14, 0x011B	; 0x80011b <app_state+0xa>
     df2:	f0 90 1c 01 	lds	r15, 0x011C	; 0x80011c <app_state+0xb>
     df6:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <app_state+0x16>
     dfa:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <app_state+0x17>
     dfe:	09 2e       	mov	r0, r25
     e00:	00 0c       	add	r0, r0
     e02:	aa 0b       	sbc	r26, r26
     e04:	bb 0b       	sbc	r27, r27
     e06:	bc 01       	movw	r22, r24
     e08:	cd 01       	movw	r24, r26
     e0a:	0e 94 bb 26 	call	0x4d76	; 0x4d76 <__floatsisf>
     e0e:	dc 01       	movw	r26, r24
     e10:	cb 01       	movw	r24, r22
     e12:	2a e0       	ldi	r18, 0x0A	; 10
     e14:	37 ed       	ldi	r19, 0xD7	; 215
     e16:	43 e2       	ldi	r20, 0x23	; 35
     e18:	5c e3       	ldi	r21, 0x3C	; 60
     e1a:	bc 01       	movw	r22, r24
     e1c:	cd 01       	movw	r24, r26
     e1e:	0e 94 d0 27 	call	0x4fa0	; 0x4fa0 <__mulsf3>
     e22:	dc 01       	movw	r26, r24
     e24:	cb 01       	movw	r24, r22
     e26:	9c 01       	movw	r18, r24
     e28:	ad 01       	movw	r20, r26
     e2a:	c7 01       	movw	r24, r14
     e2c:	b6 01       	movw	r22, r12
     e2e:	0e 94 64 25 	call	0x4ac8	; 0x4ac8 <__addsf3>
     e32:	dc 01       	movw	r26, r24
     e34:	cb 01       	movw	r24, r22
     e36:	20 e0       	ldi	r18, 0x00	; 0
     e38:	30 e0       	ldi	r19, 0x00	; 0
     e3a:	4a e7       	ldi	r20, 0x7A	; 122
     e3c:	54 e4       	ldi	r21, 0x44	; 68
     e3e:	bc 01       	movw	r22, r24
     e40:	cd 01       	movw	r24, r26
     e42:	0e 94 03 17 	call	0x2e06	; 0x2e06 <fmin>
     e46:	dc 01       	movw	r26, r24
     e48:	cb 01       	movw	r24, r22
     e4a:	20 e0       	ldi	r18, 0x00	; 0
     e4c:	30 e0       	ldi	r19, 0x00	; 0
     e4e:	a9 01       	movw	r20, r18
     e50:	bc 01       	movw	r22, r24
     e52:	cd 01       	movw	r24, r26
     e54:	0e 94 d1 16 	call	0x2da2	; 0x2da2 <fmax>
     e58:	dc 01       	movw	r26, r24
     e5a:	cb 01       	movw	r24, r22
     e5c:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <app_state+0x8>
     e60:	90 93 1a 01 	sts	0x011A, r25	; 0x80011a <app_state+0x9>
     e64:	a0 93 1b 01 	sts	0x011B, r26	; 0x80011b <app_state+0xa>
     e68:	b0 93 1c 01 	sts	0x011C, r27	; 0x80011c <app_state+0xb>
		pid_set_params(&app_state.pid_state, app_state.settings.heater_pid_p, app_state.settings.heater_pid_i, app_state.settings.heater_pid_d, HEATER_CONTROL_MIN, HEATER_CONTROL_MAX);
     e6c:	e0 90 1d 01 	lds	r14, 0x011D	; 0x80011d <app_state+0xc>
     e70:	f0 90 1e 01 	lds	r15, 0x011E	; 0x80011e <app_state+0xd>
     e74:	00 91 1f 01 	lds	r16, 0x011F	; 0x80011f <app_state+0xe>
     e78:	10 91 20 01 	lds	r17, 0x0120	; 0x800120 <app_state+0xf>
     e7c:	20 91 19 01 	lds	r18, 0x0119	; 0x800119 <app_state+0x8>
     e80:	30 91 1a 01 	lds	r19, 0x011A	; 0x80011a <app_state+0x9>
     e84:	40 91 1b 01 	lds	r20, 0x011B	; 0x80011b <app_state+0xa>
     e88:	50 91 1c 01 	lds	r21, 0x011C	; 0x80011c <app_state+0xb>
     e8c:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <app_state+0x4>
     e90:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <app_state+0x5>
     e94:	a0 91 17 01 	lds	r26, 0x0117	; 0x800117 <app_state+0x6>
     e98:	b0 91 18 01 	lds	r27, 0x0118	; 0x800118 <app_state+0x7>
     e9c:	62 e4       	ldi	r22, 0x42	; 66
     e9e:	6f 93       	push	r22
     ea0:	68 ec       	ldi	r22, 0xC8	; 200
     ea2:	6f 93       	push	r22
     ea4:	1f 92       	push	r1
     ea6:	1f 92       	push	r1
     ea8:	81 2c       	mov	r8, r1
     eaa:	91 2c       	mov	r9, r1
     eac:	54 01       	movw	r10, r8
     eae:	67 01       	movw	r12, r14
     eb0:	78 01       	movw	r14, r16
     eb2:	89 01       	movw	r16, r18
     eb4:	9a 01       	movw	r18, r20
     eb6:	ac 01       	movw	r20, r24
     eb8:	bd 01       	movw	r22, r26
     eba:	80 e3       	ldi	r24, 0x30	; 48
     ebc:	91 e0       	ldi	r25, 0x01	; 1
     ebe:	0e 94 b4 17 	call	0x2f68	; 0x2f68 <pid_set_params>
     ec2:	0f 90       	pop	r0
     ec4:	0f 90       	pop	r0
     ec6:	0f 90       	pop	r0
     ec8:	0f 90       	pop	r0
	}
	
	// display current value
	srd_clear();
     eca:	0e 94 10 1f 	call	0x3e20	; 0x3e20 <srd_clear>
	mr_heater_menu_pid_i(app_state.settings.heater_pid_i);
     ece:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <app_state+0x8>
     ed2:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <app_state+0x9>
     ed6:	a0 91 1b 01 	lds	r26, 0x011B	; 0x80011b <app_state+0xa>
     eda:	b0 91 1c 01 	lds	r27, 0x011C	; 0x80011c <app_state+0xb>
     ede:	bc 01       	movw	r22, r24
     ee0:	cd 01       	movw	r24, r26
     ee2:	0e 94 a6 14 	call	0x294c	; 0x294c <mr_heater_menu_pid_i>
	srd_display();
     ee6:	0e 94 ff 1e 	call	0x3dfe	; 0x3dfe <srd_display>
	
	if(app_state.current_input.button_presses & (1 << BUTTON0))
     eea:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <app_state+0x18>
     eee:	88 2f       	mov	r24, r24
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	81 70       	andi	r24, 0x01	; 1
     ef4:	99 27       	eor	r25, r25
     ef6:	89 2b       	or	r24, r25
     ef8:	49 f0       	breq	.+18     	; 0xf0c <app_state_menu_heater_pid_i+0x150>
	{
		app_state.selected_menu_item_index = 2;
     efa:	82 e0       	ldi	r24, 0x02	; 2
     efc:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <app_state+0x1e>
		app_state.current_state_func = app_state_menu_heater_pid;
     f00:	83 eb       	ldi	r24, 0xB3	; 179
     f02:	95 e0       	ldi	r25, 0x05	; 5
     f04:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <app_state+0x1d>
     f08:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <app_state+0x1c>
	}
	return EC_SUCCESS;
     f0c:	80 e0       	ldi	r24, 0x00	; 0
}
     f0e:	df 91       	pop	r29
     f10:	cf 91       	pop	r28
     f12:	1f 91       	pop	r17
     f14:	0f 91       	pop	r16
     f16:	ff 90       	pop	r15
     f18:	ef 90       	pop	r14
     f1a:	df 90       	pop	r13
     f1c:	cf 90       	pop	r12
     f1e:	bf 90       	pop	r11
     f20:	af 90       	pop	r10
     f22:	9f 90       	pop	r9
     f24:	8f 90       	pop	r8
     f26:	08 95       	ret

00000f28 <app_state_menu_heater_pid_d>:

ErrorCode app_state_menu_heater_pid_d()
{
     f28:	8f 92       	push	r8
     f2a:	9f 92       	push	r9
     f2c:	af 92       	push	r10
     f2e:	bf 92       	push	r11
     f30:	cf 92       	push	r12
     f32:	df 92       	push	r13
     f34:	ef 92       	push	r14
     f36:	ff 92       	push	r15
     f38:	0f 93       	push	r16
     f3a:	1f 93       	push	r17
     f3c:	cf 93       	push	r28
     f3e:	df 93       	push	r29
     f40:	cd b7       	in	r28, 0x3d	; 61
     f42:	de b7       	in	r29, 0x3e	; 62
	if(app_state.current_input.rotenc_delta != 0)
     f44:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <app_state+0x16>
     f48:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <app_state+0x17>
     f4c:	89 2b       	or	r24, r25
     f4e:	09 f4       	brne	.+2      	; 0xf52 <app_state_menu_heater_pid_d+0x2a>
     f50:	72 c0       	rjmp	.+228    	; 0x1036 <app_state_menu_heater_pid_d+0x10e>
	{
		app_state.settings.heater_pid_d = fmax(fmin(app_state.settings.heater_pid_d + app_state.current_input.rotenc_delta * PID_CHANGE_PER_ROTENC_STEP, MAX_HEATER_PID_D), MIN_HEATER_PID_D);
     f52:	c0 90 1d 01 	lds	r12, 0x011D	; 0x80011d <app_state+0xc>
     f56:	d0 90 1e 01 	lds	r13, 0x011E	; 0x80011e <app_state+0xd>
     f5a:	e0 90 1f 01 	lds	r14, 0x011F	; 0x80011f <app_state+0xe>
     f5e:	f0 90 20 01 	lds	r15, 0x0120	; 0x800120 <app_state+0xf>
     f62:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <app_state+0x16>
     f66:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <app_state+0x17>
     f6a:	09 2e       	mov	r0, r25
     f6c:	00 0c       	add	r0, r0
     f6e:	aa 0b       	sbc	r26, r26
     f70:	bb 0b       	sbc	r27, r27
     f72:	bc 01       	movw	r22, r24
     f74:	cd 01       	movw	r24, r26
     f76:	0e 94 bb 26 	call	0x4d76	; 0x4d76 <__floatsisf>
     f7a:	dc 01       	movw	r26, r24
     f7c:	cb 01       	movw	r24, r22
     f7e:	2a e0       	ldi	r18, 0x0A	; 10
     f80:	37 ed       	ldi	r19, 0xD7	; 215
     f82:	43 e2       	ldi	r20, 0x23	; 35
     f84:	5c e3       	ldi	r21, 0x3C	; 60
     f86:	bc 01       	movw	r22, r24
     f88:	cd 01       	movw	r24, r26
     f8a:	0e 94 d0 27 	call	0x4fa0	; 0x4fa0 <__mulsf3>
     f8e:	dc 01       	movw	r26, r24
     f90:	cb 01       	movw	r24, r22
     f92:	9c 01       	movw	r18, r24
     f94:	ad 01       	movw	r20, r26
     f96:	c7 01       	movw	r24, r14
     f98:	b6 01       	movw	r22, r12
     f9a:	0e 94 64 25 	call	0x4ac8	; 0x4ac8 <__addsf3>
     f9e:	dc 01       	movw	r26, r24
     fa0:	cb 01       	movw	r24, r22
     fa2:	20 e0       	ldi	r18, 0x00	; 0
     fa4:	30 e0       	ldi	r19, 0x00	; 0
     fa6:	4a e7       	ldi	r20, 0x7A	; 122
     fa8:	54 e4       	ldi	r21, 0x44	; 68
     faa:	bc 01       	movw	r22, r24
     fac:	cd 01       	movw	r24, r26
     fae:	0e 94 03 17 	call	0x2e06	; 0x2e06 <fmin>
     fb2:	dc 01       	movw	r26, r24
     fb4:	cb 01       	movw	r24, r22
     fb6:	20 e0       	ldi	r18, 0x00	; 0
     fb8:	30 e0       	ldi	r19, 0x00	; 0
     fba:	a9 01       	movw	r20, r18
     fbc:	bc 01       	movw	r22, r24
     fbe:	cd 01       	movw	r24, r26
     fc0:	0e 94 d1 16 	call	0x2da2	; 0x2da2 <fmax>
     fc4:	dc 01       	movw	r26, r24
     fc6:	cb 01       	movw	r24, r22
     fc8:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <app_state+0xc>
     fcc:	90 93 1e 01 	sts	0x011E, r25	; 0x80011e <app_state+0xd>
     fd0:	a0 93 1f 01 	sts	0x011F, r26	; 0x80011f <app_state+0xe>
     fd4:	b0 93 20 01 	sts	0x0120, r27	; 0x800120 <app_state+0xf>
		pid_set_params(&app_state.pid_state, app_state.settings.heater_pid_p, app_state.settings.heater_pid_i, app_state.settings.heater_pid_d, HEATER_CONTROL_MIN, HEATER_CONTROL_MAX);
     fd8:	e0 90 1d 01 	lds	r14, 0x011D	; 0x80011d <app_state+0xc>
     fdc:	f0 90 1e 01 	lds	r15, 0x011E	; 0x80011e <app_state+0xd>
     fe0:	00 91 1f 01 	lds	r16, 0x011F	; 0x80011f <app_state+0xe>
     fe4:	10 91 20 01 	lds	r17, 0x0120	; 0x800120 <app_state+0xf>
     fe8:	20 91 19 01 	lds	r18, 0x0119	; 0x800119 <app_state+0x8>
     fec:	30 91 1a 01 	lds	r19, 0x011A	; 0x80011a <app_state+0x9>
     ff0:	40 91 1b 01 	lds	r20, 0x011B	; 0x80011b <app_state+0xa>
     ff4:	50 91 1c 01 	lds	r21, 0x011C	; 0x80011c <app_state+0xb>
     ff8:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <app_state+0x4>
     ffc:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <app_state+0x5>
    1000:	a0 91 17 01 	lds	r26, 0x0117	; 0x800117 <app_state+0x6>
    1004:	b0 91 18 01 	lds	r27, 0x0118	; 0x800118 <app_state+0x7>
    1008:	62 e4       	ldi	r22, 0x42	; 66
    100a:	6f 93       	push	r22
    100c:	68 ec       	ldi	r22, 0xC8	; 200
    100e:	6f 93       	push	r22
    1010:	1f 92       	push	r1
    1012:	1f 92       	push	r1
    1014:	81 2c       	mov	r8, r1
    1016:	91 2c       	mov	r9, r1
    1018:	54 01       	movw	r10, r8
    101a:	67 01       	movw	r12, r14
    101c:	78 01       	movw	r14, r16
    101e:	89 01       	movw	r16, r18
    1020:	9a 01       	movw	r18, r20
    1022:	ac 01       	movw	r20, r24
    1024:	bd 01       	movw	r22, r26
    1026:	80 e3       	ldi	r24, 0x30	; 48
    1028:	91 e0       	ldi	r25, 0x01	; 1
    102a:	0e 94 b4 17 	call	0x2f68	; 0x2f68 <pid_set_params>
    102e:	0f 90       	pop	r0
    1030:	0f 90       	pop	r0
    1032:	0f 90       	pop	r0
    1034:	0f 90       	pop	r0
	}
	
	// display current value
	srd_clear();
    1036:	0e 94 10 1f 	call	0x3e20	; 0x3e20 <srd_clear>
	mr_heater_menu_pid_d(app_state.settings.heater_pid_d);
    103a:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <app_state+0xc>
    103e:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <app_state+0xd>
    1042:	a0 91 1f 01 	lds	r26, 0x011F	; 0x80011f <app_state+0xe>
    1046:	b0 91 20 01 	lds	r27, 0x0120	; 0x800120 <app_state+0xf>
    104a:	bc 01       	movw	r22, r24
    104c:	cd 01       	movw	r24, r26
    104e:	0e 94 c9 14 	call	0x2992	; 0x2992 <mr_heater_menu_pid_d>
	srd_display();
    1052:	0e 94 ff 1e 	call	0x3dfe	; 0x3dfe <srd_display>
	
	if(app_state.current_input.button_presses & (1 << BUTTON0))
    1056:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <app_state+0x18>
    105a:	88 2f       	mov	r24, r24
    105c:	90 e0       	ldi	r25, 0x00	; 0
    105e:	81 70       	andi	r24, 0x01	; 1
    1060:	99 27       	eor	r25, r25
    1062:	89 2b       	or	r24, r25
    1064:	49 f0       	breq	.+18     	; 0x1078 <app_state_menu_heater_pid_d+0x150>
	{
		app_state.selected_menu_item_index = 3;
    1066:	83 e0       	ldi	r24, 0x03	; 3
    1068:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <app_state+0x1e>
		app_state.current_state_func = app_state_menu_heater_pid;
    106c:	83 eb       	ldi	r24, 0xB3	; 179
    106e:	95 e0       	ldi	r25, 0x05	; 5
    1070:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <app_state+0x1d>
    1074:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <app_state+0x1c>
	}
	return EC_SUCCESS;
    1078:	80 e0       	ldi	r24, 0x00	; 0
}
    107a:	df 91       	pop	r29
    107c:	cf 91       	pop	r28
    107e:	1f 91       	pop	r17
    1080:	0f 91       	pop	r16
    1082:	ff 90       	pop	r15
    1084:	ef 90       	pop	r14
    1086:	df 90       	pop	r13
    1088:	cf 90       	pop	r12
    108a:	bf 90       	pop	r11
    108c:	af 90       	pop	r10
    108e:	9f 90       	pop	r9
    1090:	8f 90       	pop	r8
    1092:	08 95       	ret

00001094 <app_state_menu_heater_offset>:

ErrorCode app_state_menu_heater_offset()
{
    1094:	cf 92       	push	r12
    1096:	df 92       	push	r13
    1098:	ef 92       	push	r14
    109a:	ff 92       	push	r15
    109c:	cf 93       	push	r28
    109e:	df 93       	push	r29
    10a0:	cd b7       	in	r28, 0x3d	; 61
    10a2:	de b7       	in	r29, 0x3e	; 62
	if(app_state.current_input.rotenc_delta != 0)
    10a4:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <app_state+0x16>
    10a8:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <app_state+0x17>
    10ac:	89 2b       	or	r24, r25
    10ae:	09 f4       	brne	.+2      	; 0x10b2 <app_state_menu_heater_offset+0x1e>
    10b0:	44 c0       	rjmp	.+136    	; 0x113a <__stack+0x3b>
	{
		app_state.settings.heater_offset = fmax(fmin(app_state.settings.heater_offset + app_state.current_input.rotenc_delta * TEMP_CHANGE_PER_ROTENC_STEP, MAX_HEATER_OFFSET), MIN_HEATER_OFFSET);
    10b2:	c0 90 21 01 	lds	r12, 0x0121	; 0x800121 <app_state+0x10>
    10b6:	d0 90 22 01 	lds	r13, 0x0122	; 0x800122 <app_state+0x11>
    10ba:	e0 90 23 01 	lds	r14, 0x0123	; 0x800123 <app_state+0x12>
    10be:	f0 90 24 01 	lds	r15, 0x0124	; 0x800124 <app_state+0x13>
    10c2:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <app_state+0x16>
    10c6:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <app_state+0x17>
    10ca:	09 2e       	mov	r0, r25
    10cc:	00 0c       	add	r0, r0
    10ce:	aa 0b       	sbc	r26, r26
    10d0:	bb 0b       	sbc	r27, r27
    10d2:	bc 01       	movw	r22, r24
    10d4:	cd 01       	movw	r24, r26
    10d6:	0e 94 bb 26 	call	0x4d76	; 0x4d76 <__floatsisf>
    10da:	dc 01       	movw	r26, r24
    10dc:	cb 01       	movw	r24, r22
    10de:	20 e0       	ldi	r18, 0x00	; 0
    10e0:	30 e0       	ldi	r19, 0x00	; 0
    10e2:	40 e0       	ldi	r20, 0x00	; 0
    10e4:	5f e3       	ldi	r21, 0x3F	; 63
    10e6:	bc 01       	movw	r22, r24
    10e8:	cd 01       	movw	r24, r26
    10ea:	0e 94 d0 27 	call	0x4fa0	; 0x4fa0 <__mulsf3>
    10ee:	dc 01       	movw	r26, r24
    10f0:	cb 01       	movw	r24, r22
    10f2:	9c 01       	movw	r18, r24
    10f4:	ad 01       	movw	r20, r26
    10f6:	c7 01       	movw	r24, r14
    10f8:	b6 01       	movw	r22, r12
    10fa:	0e 94 64 25 	call	0x4ac8	; 0x4ac8 <__addsf3>
    10fe:	dc 01       	movw	r26, r24
    1100:	cb 01       	movw	r24, r22
    1102:	20 e0       	ldi	r18, 0x00	; 0
    1104:	30 e0       	ldi	r19, 0x00	; 0
    1106:	48 e4       	ldi	r20, 0x48	; 72
    1108:	52 e4       	ldi	r21, 0x42	; 66
    110a:	bc 01       	movw	r22, r24
    110c:	cd 01       	movw	r24, r26
    110e:	0e 94 03 17 	call	0x2e06	; 0x2e06 <fmin>
    1112:	dc 01       	movw	r26, r24
    1114:	cb 01       	movw	r24, r22
    1116:	20 e0       	ldi	r18, 0x00	; 0
    1118:	30 e0       	ldi	r19, 0x00	; 0
    111a:	48 e4       	ldi	r20, 0x48	; 72
    111c:	52 ec       	ldi	r21, 0xC2	; 194
    111e:	bc 01       	movw	r22, r24
    1120:	cd 01       	movw	r24, r26
    1122:	0e 94 d1 16 	call	0x2da2	; 0x2da2 <fmax>
    1126:	dc 01       	movw	r26, r24
    1128:	cb 01       	movw	r24, r22
    112a:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <app_state+0x10>
    112e:	90 93 22 01 	sts	0x0122, r25	; 0x800122 <app_state+0x11>
    1132:	a0 93 23 01 	sts	0x0123, r26	; 0x800123 <app_state+0x12>
    1136:	b0 93 24 01 	sts	0x0124, r27	; 0x800124 <app_state+0x13>
	}
	
	// display current value
	srd_clear();
    113a:	0e 94 10 1f 	call	0x3e20	; 0x3e20 <srd_clear>
	mr_heater_menu_offset(app_state.settings.heater_offset);
    113e:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <app_state+0x10>
    1142:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <app_state+0x11>
    1146:	a0 91 23 01 	lds	r26, 0x0123	; 0x800123 <app_state+0x12>
    114a:	b0 91 24 01 	lds	r27, 0x0124	; 0x800124 <app_state+0x13>
    114e:	bc 01       	movw	r22, r24
    1150:	cd 01       	movw	r24, r26
    1152:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <mr_heater_menu_offset>
	srd_display();
    1156:	0e 94 ff 1e 	call	0x3dfe	; 0x3dfe <srd_display>
	
	if(app_state.current_input.button_presses & (1 << BUTTON0))
    115a:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <app_state+0x18>
    115e:	88 2f       	mov	r24, r24
    1160:	90 e0       	ldi	r25, 0x00	; 0
    1162:	81 70       	andi	r24, 0x01	; 1
    1164:	99 27       	eor	r25, r25
    1166:	89 2b       	or	r24, r25
    1168:	49 f0       	breq	.+18     	; 0x117c <__stack+0x7d>
	{
		app_state.selected_menu_item_index = 5;
    116a:	85 e0       	ldi	r24, 0x05	; 5
    116c:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <app_state+0x1e>
		app_state.current_state_func = app_state_menu_heater;
    1170:	8e ef       	ldi	r24, 0xFE	; 254
    1172:	93 e0       	ldi	r25, 0x03	; 3
    1174:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <app_state+0x1d>
    1178:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <app_state+0x1c>
	}
	return EC_SUCCESS;
    117c:	80 e0       	ldi	r24, 0x00	; 0
}
    117e:	df 91       	pop	r29
    1180:	cf 91       	pop	r28
    1182:	ff 90       	pop	r15
    1184:	ef 90       	pop	r14
    1186:	df 90       	pop	r13
    1188:	cf 90       	pop	r12
    118a:	08 95       	ret

0000118c <app_state_menu_stirrer>:

ErrorCode app_state_menu_stirrer()
{
    118c:	cf 93       	push	r28
    118e:	df 93       	push	r29
    1190:	cd b7       	in	r28, 0x3d	; 61
    1192:	de b7       	in	r29, 0x3e	; 62
	if(app_state.current_input.rotenc_delta > 0)
    1194:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <app_state+0x16>
    1198:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <app_state+0x17>
    119c:	18 16       	cp	r1, r24
    119e:	19 06       	cpc	r1, r25
    11a0:	64 f4       	brge	.+24     	; 0x11ba <app_state_menu_stirrer+0x2e>
		app_state.selected_menu_item_index = imax8(imin8(app_state.selected_menu_item_index + 1, 1), 0);
    11a2:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <app_state+0x1e>
    11a6:	8f 5f       	subi	r24, 0xFF	; 255
    11a8:	61 e0       	ldi	r22, 0x01	; 1
    11aa:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <imin8>
    11ae:	60 e0       	ldi	r22, 0x00	; 0
    11b0:	0e 94 5b 16 	call	0x2cb6	; 0x2cb6 <imax8>
    11b4:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <app_state+0x1e>
    11b8:	11 c0       	rjmp	.+34     	; 0x11dc <app_state_menu_stirrer+0x50>
	else if(app_state.current_input.rotenc_delta < 0)
    11ba:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <app_state+0x16>
    11be:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <app_state+0x17>
    11c2:	99 23       	and	r25, r25
    11c4:	5c f4       	brge	.+22     	; 0x11dc <app_state_menu_stirrer+0x50>
		app_state.selected_menu_item_index = imax8(imin8(app_state.selected_menu_item_index - 1, 1), 0);
    11c6:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <app_state+0x1e>
    11ca:	81 50       	subi	r24, 0x01	; 1
    11cc:	61 e0       	ldi	r22, 0x01	; 1
    11ce:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <imin8>
    11d2:	60 e0       	ldi	r22, 0x00	; 0
    11d4:	0e 94 5b 16 	call	0x2cb6	; 0x2cb6 <imax8>
    11d8:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <app_state+0x1e>
	// display selected menu item
	srd_clear();
    11dc:	0e 94 10 1f 	call	0x3e20	; 0x3e20 <srd_clear>
	mr_stirrer_menu(app_state.selected_menu_item_index);
    11e0:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <app_state+0x1e>
    11e4:	0e 94 72 13 	call	0x26e4	; 0x26e4 <mr_stirrer_menu>
	srd_display();
    11e8:	0e 94 ff 1e 	call	0x3dfe	; 0x3dfe <srd_display>
	
	// state change
	if(app_state.current_input.button_presses & (1 << BUTTON0))
    11ec:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <app_state+0x18>
    11f0:	88 2f       	mov	r24, r24
    11f2:	90 e0       	ldi	r25, 0x00	; 0
    11f4:	81 70       	andi	r24, 0x01	; 1
    11f6:	99 27       	eor	r25, r25
    11f8:	89 2b       	or	r24, r25
    11fa:	e9 f0       	breq	.+58     	; 0x1236 <app_state_menu_stirrer+0xaa>
	{
		switch(app_state.selected_menu_item_index)
    11fc:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <app_state+0x1e>
    1200:	08 2e       	mov	r0, r24
    1202:	00 0c       	add	r0, r0
    1204:	99 0b       	sbc	r25, r25
    1206:	00 97       	sbiw	r24, 0x00	; 0
    1208:	19 f0       	breq	.+6      	; 0x1210 <app_state_menu_stirrer+0x84>
    120a:	01 97       	sbiw	r24, 0x01	; 1
    120c:	59 f0       	breq	.+22     	; 0x1224 <app_state_menu_stirrer+0x98>
    120e:	13 c0       	rjmp	.+38     	; 0x1236 <app_state_menu_stirrer+0xaa>
		{
			case 0:	// back to main menu
				app_state.selected_menu_item_index = 2;
    1210:	82 e0       	ldi	r24, 0x02	; 2
    1212:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <app_state+0x1e>
				app_state.current_state_func = app_state_menu_main;
    1216:	8e e7       	ldi	r24, 0x7E	; 126
    1218:	93 e0       	ldi	r25, 0x03	; 3
    121a:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <app_state+0x1d>
    121e:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <app_state+0x1c>
				break;
    1222:	09 c0       	rjmp	.+18     	; 0x1236 <app_state_menu_stirrer+0xaa>
			case 1: // heater duty cycle
				app_state.selected_menu_item_index = 0;
    1224:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <app_state+0x1e>
				app_state.current_state_func = app_state_menu_stirrer_duty_cycle;
    1228:	8f e1       	ldi	r24, 0x1F	; 31
    122a:	99 e0       	ldi	r25, 0x09	; 9
    122c:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <app_state+0x1d>
    1230:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <app_state+0x1c>
				break;
    1234:	00 00       	nop
		}
	}
	return EC_SUCCESS;
    1236:	80 e0       	ldi	r24, 0x00	; 0
}
    1238:	df 91       	pop	r29
    123a:	cf 91       	pop	r28
    123c:	08 95       	ret

0000123e <app_state_menu_stirrer_duty_cycle>:

ErrorCode app_state_menu_stirrer_duty_cycle()
{
    123e:	cf 93       	push	r28
    1240:	df 93       	push	r29
    1242:	cd b7       	in	r28, 0x3d	; 61
    1244:	de b7       	in	r29, 0x3e	; 62
	if(app_state.current_input.rotenc_delta != 0)
    1246:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <app_state+0x16>
    124a:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <app_state+0x17>
    124e:	89 2b       	or	r24, r25
    1250:	a9 f1       	breq	.+106    	; 0x12bc <app_state_menu_stirrer_duty_cycle+0x7e>
	{
		app_state.stirrer_duty_cycle = (uint8_t)imax16(imin16((int16_t)app_state.stirrer_duty_cycle + app_state.current_input.rotenc_delta * STIRRER_DC_CHANGE_PER_STEP, 100), 0);
    1252:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <app_state+0x3c>
    1256:	28 2f       	mov	r18, r24
    1258:	30 e0       	ldi	r19, 0x00	; 0
    125a:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <app_state+0x16>
    125e:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <app_state+0x17>
    1262:	82 0f       	add	r24, r18
    1264:	93 1f       	adc	r25, r19
    1266:	64 e6       	ldi	r22, 0x64	; 100
    1268:	70 e0       	ldi	r23, 0x00	; 0
    126a:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <imin16>
    126e:	60 e0       	ldi	r22, 0x00	; 0
    1270:	70 e0       	ldi	r23, 0x00	; 0
    1272:	0e 94 6c 16 	call	0x2cd8	; 0x2cd8 <imax16>
    1276:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <app_state+0x3c>
		
		if(!app_state.stirrer_onoff && app_state.stirrer_duty_cycle > 0) // stirrer was switched on
    127a:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <app_state+0x3e>
    127e:	88 23       	and	r24, r24
    1280:	39 f4       	brne	.+14     	; 0x1290 <app_state_menu_stirrer_duty_cycle+0x52>
    1282:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <app_state+0x3c>
    1286:	88 23       	and	r24, r24
    1288:	19 f0       	breq	.+6      	; 0x1290 <app_state_menu_stirrer_duty_cycle+0x52>
		{
			stirrer_on();
    128a:	0e 94 ee 1f 	call	0x3fdc	; 0x3fdc <stirrer_on>
    128e:	0a c0       	rjmp	.+20     	; 0x12a4 <app_state_menu_stirrer_duty_cycle+0x66>
		}
		else if(app_state.stirrer_onoff && (app_state.stirrer_duty_cycle == 0)) // stirrer was switched off
    1290:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <app_state+0x3e>
    1294:	88 23       	and	r24, r24
    1296:	31 f0       	breq	.+12     	; 0x12a4 <app_state_menu_stirrer_duty_cycle+0x66>
    1298:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <app_state+0x3c>
    129c:	88 23       	and	r24, r24
    129e:	11 f4       	brne	.+4      	; 0x12a4 <app_state_menu_stirrer_duty_cycle+0x66>
		{
			stirrer_off();
    12a0:	0e 94 12 20 	call	0x4024	; 0x4024 <stirrer_off>
		}
			
		app_state.stirrer_onoff = app_state.stirrer_duty_cycle > 0;
    12a4:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <app_state+0x3c>
    12a8:	81 e0       	ldi	r24, 0x01	; 1
    12aa:	99 23       	and	r25, r25
    12ac:	09 f4       	brne	.+2      	; 0x12b0 <app_state_menu_stirrer_duty_cycle+0x72>
    12ae:	80 e0       	ldi	r24, 0x00	; 0
    12b0:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <app_state+0x3e>
		
		// set stirrer duty cycle
		stirrer_set_duty_cycle(app_state.stirrer_duty_cycle);
    12b4:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <app_state+0x3c>
    12b8:	0e 94 b6 1f 	call	0x3f6c	; 0x3f6c <stirrer_set_duty_cycle>
	}
	
	// display current value
	srd_clear();
    12bc:	0e 94 10 1f 	call	0x3e20	; 0x3e20 <srd_clear>
	mr_stirrer_menu_dc(app_state.stirrer_duty_cycle);
    12c0:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <app_state+0x3c>
    12c4:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <mr_stirrer_menu_dc>
	srd_display();
    12c8:	0e 94 ff 1e 	call	0x3dfe	; 0x3dfe <srd_display>
	
	if(app_state.current_input.button_presses & (1 << BUTTON0))
    12cc:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <app_state+0x18>
    12d0:	88 2f       	mov	r24, r24
    12d2:	90 e0       	ldi	r25, 0x00	; 0
    12d4:	81 70       	andi	r24, 0x01	; 1
    12d6:	99 27       	eor	r25, r25
    12d8:	89 2b       	or	r24, r25
    12da:	49 f0       	breq	.+18     	; 0x12ee <app_state_menu_stirrer_duty_cycle+0xb0>
	{
		app_state.selected_menu_item_index = 1;
    12dc:	81 e0       	ldi	r24, 0x01	; 1
    12de:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <app_state+0x1e>
		app_state.current_state_func = app_state_menu_stirrer;
    12e2:	86 ec       	ldi	r24, 0xC6	; 198
    12e4:	98 e0       	ldi	r25, 0x08	; 8
    12e6:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <app_state+0x1d>
    12ea:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <app_state+0x1c>
	}
	return EC_SUCCESS;
    12ee:	80 e0       	ldi	r24, 0x00	; 0
}
    12f0:	df 91       	pop	r29
    12f2:	cf 91       	pop	r28
    12f4:	08 95       	ret

000012f6 <app_state_menu_tprobe>:

ErrorCode app_state_menu_tprobe()
{
    12f6:	cf 93       	push	r28
    12f8:	df 93       	push	r29
    12fa:	cd b7       	in	r28, 0x3d	; 61
    12fc:	de b7       	in	r29, 0x3e	; 62
	if(app_state.current_input.rotenc_delta > 0)
    12fe:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <app_state+0x16>
    1302:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <app_state+0x17>
    1306:	18 16       	cp	r1, r24
    1308:	19 06       	cpc	r1, r25
    130a:	64 f4       	brge	.+24     	; 0x1324 <app_state_menu_tprobe+0x2e>
		app_state.selected_menu_item_index = imax8(imin8(app_state.selected_menu_item_index + 1, 4), 0);
    130c:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <app_state+0x1e>
    1310:	8f 5f       	subi	r24, 0xFF	; 255
    1312:	64 e0       	ldi	r22, 0x04	; 4
    1314:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <imin8>
    1318:	60 e0       	ldi	r22, 0x00	; 0
    131a:	0e 94 5b 16 	call	0x2cb6	; 0x2cb6 <imax8>
    131e:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <app_state+0x1e>
    1322:	11 c0       	rjmp	.+34     	; 0x1346 <app_state_menu_tprobe+0x50>
	else if(app_state.current_input.rotenc_delta < 0)
    1324:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <app_state+0x16>
    1328:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <app_state+0x17>
    132c:	99 23       	and	r25, r25
    132e:	5c f4       	brge	.+22     	; 0x1346 <app_state_menu_tprobe+0x50>
		app_state.selected_menu_item_index = imax8(imin8(app_state.selected_menu_item_index - 1, 4), 0);
    1330:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <app_state+0x1e>
    1334:	81 50       	subi	r24, 0x01	; 1
    1336:	64 e0       	ldi	r22, 0x04	; 4
    1338:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <imin8>
    133c:	60 e0       	ldi	r22, 0x00	; 0
    133e:	0e 94 5b 16 	call	0x2cb6	; 0x2cb6 <imax8>
    1342:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <app_state+0x1e>
	// display selected menu item
	srd_clear();
    1346:	0e 94 10 1f 	call	0x3e20	; 0x3e20 <srd_clear>
	mr_tprobe_menu(app_state.selected_menu_item_index);
    134a:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <app_state+0x1e>
    134e:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <mr_tprobe_menu>
	srd_display();
    1352:	0e 94 ff 1e 	call	0x3dfe	; 0x3dfe <srd_display>
	
	// state change
	if(app_state.current_input.button_presses & (1 << BUTTON0))
    1356:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <app_state+0x18>
    135a:	88 2f       	mov	r24, r24
    135c:	90 e0       	ldi	r25, 0x00	; 0
    135e:	81 70       	andi	r24, 0x01	; 1
    1360:	99 27       	eor	r25, r25
    1362:	89 2b       	or	r24, r25
    1364:	09 f4       	brne	.+2      	; 0x1368 <app_state_menu_tprobe+0x72>
    1366:	44 c0       	rjmp	.+136    	; 0x13f0 <app_state_menu_tprobe+0xfa>
	{
		switch(app_state.selected_menu_item_index)
    1368:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <app_state+0x1e>
    136c:	08 2e       	mov	r0, r24
    136e:	00 0c       	add	r0, r0
    1370:	99 0b       	sbc	r25, r25
    1372:	82 30       	cpi	r24, 0x02	; 2
    1374:	91 05       	cpc	r25, r1
    1376:	09 f1       	breq	.+66     	; 0x13ba <app_state_menu_tprobe+0xc4>
    1378:	83 30       	cpi	r24, 0x03	; 3
    137a:	91 05       	cpc	r25, r1
    137c:	2c f4       	brge	.+10     	; 0x1388 <app_state_menu_tprobe+0x92>
    137e:	00 97       	sbiw	r24, 0x00	; 0
    1380:	49 f0       	breq	.+18     	; 0x1394 <app_state_menu_tprobe+0x9e>
    1382:	01 97       	sbiw	r24, 0x01	; 1
    1384:	89 f0       	breq	.+34     	; 0x13a8 <app_state_menu_tprobe+0xb2>
    1386:	34 c0       	rjmp	.+104    	; 0x13f0 <app_state_menu_tprobe+0xfa>
    1388:	83 30       	cpi	r24, 0x03	; 3
    138a:	91 05       	cpc	r25, r1
    138c:	f9 f0       	breq	.+62     	; 0x13cc <app_state_menu_tprobe+0xd6>
    138e:	04 97       	sbiw	r24, 0x04	; 4
    1390:	31 f1       	breq	.+76     	; 0x13de <app_state_menu_tprobe+0xe8>
    1392:	2e c0       	rjmp	.+92     	; 0x13f0 <app_state_menu_tprobe+0xfa>
		{
			case 0:	// back to main menu
				app_state.selected_menu_item_index = 3;
    1394:	83 e0       	ldi	r24, 0x03	; 3
    1396:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <app_state+0x1e>
				app_state.current_state_func = app_state_menu_main;
    139a:	8e e7       	ldi	r24, 0x7E	; 126
    139c:	93 e0       	ldi	r25, 0x03	; 3
    139e:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <app_state+0x1d>
    13a2:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <app_state+0x1c>
				break;
    13a6:	24 c0       	rjmp	.+72     	; 0x13f0 <app_state_menu_tprobe+0xfa>
			case 1: // thermistor 0 resistance
				app_state.selected_menu_item_index = 0;
    13a8:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <app_state+0x1e>
				app_state.current_state_func = app_state_menu_tprobe0_calib;
    13ac:	8c ef       	ldi	r24, 0xFC	; 252
    13ae:	99 e0       	ldi	r25, 0x09	; 9
    13b0:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <app_state+0x1d>
    13b4:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <app_state+0x1c>
				break;
    13b8:	1b c0       	rjmp	.+54     	; 0x13f0 <app_state_menu_tprobe+0xfa>
			case 2: // thermistor 1 resistance
				app_state.selected_menu_item_index = 0;
    13ba:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <app_state+0x1e>
				app_state.current_state_func = app_state_menu_tprobe1_calib;
    13be:	85 e2       	ldi	r24, 0x25	; 37
    13c0:	9a e0       	ldi	r25, 0x0A	; 10
    13c2:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <app_state+0x1d>
    13c6:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <app_state+0x1c>
				break;
    13ca:	12 c0       	rjmp	.+36     	; 0x13f0 <app_state_menu_tprobe+0xfa>
			case 3: // thermistor 2 resistance
				app_state.selected_menu_item_index = 0;
    13cc:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <app_state+0x1e>
				app_state.current_state_func = app_state_menu_tprobe2_calib;
    13d0:	8e e4       	ldi	r24, 0x4E	; 78
    13d2:	9a e0       	ldi	r25, 0x0A	; 10
    13d4:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <app_state+0x1d>
    13d8:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <app_state+0x1c>
				break;
    13dc:	09 c0       	rjmp	.+18     	; 0x13f0 <app_state_menu_tprobe+0xfa>
			case 4: // thermistor 3 resistance
				app_state.selected_menu_item_index = 0;
    13de:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <app_state+0x1e>
				app_state.current_state_func = app_state_menu_tprobe3_calib;
    13e2:	8d e6       	ldi	r24, 0x6D	; 109
    13e4:	9a e0       	ldi	r25, 0x0A	; 10
    13e6:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <app_state+0x1d>
    13ea:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <app_state+0x1c>
				break;
    13ee:	00 00       	nop
		}
	}
	return EC_SUCCESS;
    13f0:	80 e0       	ldi	r24, 0x00	; 0
}
    13f2:	df 91       	pop	r29
    13f4:	cf 91       	pop	r28
    13f6:	08 95       	ret

000013f8 <app_state_menu_tprobe0_calib>:

ErrorCode app_state_menu_tprobe0_calib()
{
    13f8:	cf 93       	push	r28
    13fa:	df 93       	push	r29
    13fc:	cd b7       	in	r28, 0x3d	; 61
    13fe:	de b7       	in	r29, 0x3e	; 62
	// display current resistance
	#ifdef TSENS_PROBE_0
	srd_clear();
    1400:	0e 94 10 1f 	call	0x3e20	; 0x3e20 <srd_clear>
	mr_tprobe_calib_menu(app_state.t0_resistance);
    1404:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <app_state+0x43>
    1408:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <app_state+0x44>
    140c:	a0 91 56 01 	lds	r26, 0x0156	; 0x800156 <app_state+0x45>
    1410:	b0 91 57 01 	lds	r27, 0x0157	; 0x800157 <app_state+0x46>
    1414:	bc 01       	movw	r22, r24
    1416:	cd 01       	movw	r24, r26
    1418:	0e 94 81 15 	call	0x2b02	; 0x2b02 <mr_tprobe_calib_menu>
	srd_display();
    141c:	0e 94 ff 1e 	call	0x3dfe	; 0x3dfe <srd_display>
	mr_tprobe_calib_menu_nc();
	srd_display();
	#endif
	
	// state change
	if(app_state.current_input.button_presses & (1 << BUTTON0))
    1420:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <app_state+0x18>
    1424:	88 2f       	mov	r24, r24
    1426:	90 e0       	ldi	r25, 0x00	; 0
    1428:	81 70       	andi	r24, 0x01	; 1
    142a:	99 27       	eor	r25, r25
    142c:	89 2b       	or	r24, r25
    142e:	49 f0       	breq	.+18     	; 0x1442 <app_state_menu_tprobe0_calib+0x4a>
	{
		app_state.selected_menu_item_index = 1;
    1430:	81 e0       	ldi	r24, 0x01	; 1
    1432:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <app_state+0x1e>
		app_state.current_state_func = app_state_menu_tprobe;
    1436:	8b e7       	ldi	r24, 0x7B	; 123
    1438:	99 e0       	ldi	r25, 0x09	; 9
    143a:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <app_state+0x1d>
    143e:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <app_state+0x1c>
	}
	
	return EC_SUCCESS; // everything ok
    1442:	80 e0       	ldi	r24, 0x00	; 0
}
    1444:	df 91       	pop	r29
    1446:	cf 91       	pop	r28
    1448:	08 95       	ret

0000144a <app_state_menu_tprobe1_calib>:

ErrorCode app_state_menu_tprobe1_calib()
{
    144a:	cf 93       	push	r28
    144c:	df 93       	push	r29
    144e:	cd b7       	in	r28, 0x3d	; 61
    1450:	de b7       	in	r29, 0x3e	; 62
	// display current resistance
	#ifdef TSENS_PROBE_1
	srd_clear();
    1452:	0e 94 10 1f 	call	0x3e20	; 0x3e20 <srd_clear>
	mr_tprobe_calib_menu(app_state.t1_resistance);
    1456:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <app_state+0x4b>
    145a:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <app_state+0x4c>
    145e:	a0 91 5e 01 	lds	r26, 0x015E	; 0x80015e <app_state+0x4d>
    1462:	b0 91 5f 01 	lds	r27, 0x015F	; 0x80015f <app_state+0x4e>
    1466:	bc 01       	movw	r22, r24
    1468:	cd 01       	movw	r24, r26
    146a:	0e 94 81 15 	call	0x2b02	; 0x2b02 <mr_tprobe_calib_menu>
	srd_display();
    146e:	0e 94 ff 1e 	call	0x3dfe	; 0x3dfe <srd_display>
	mr_tprobe_calib_menu_nc();
	srd_display();
	#endif
	
	// state change
	if(app_state.current_input.button_presses & (1 << BUTTON0))
    1472:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <app_state+0x18>
    1476:	88 2f       	mov	r24, r24
    1478:	90 e0       	ldi	r25, 0x00	; 0
    147a:	81 70       	andi	r24, 0x01	; 1
    147c:	99 27       	eor	r25, r25
    147e:	89 2b       	or	r24, r25
    1480:	49 f0       	breq	.+18     	; 0x1494 <app_state_menu_tprobe1_calib+0x4a>
	{
		app_state.selected_menu_item_index = 2;
    1482:	82 e0       	ldi	r24, 0x02	; 2
    1484:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <app_state+0x1e>
		app_state.current_state_func = app_state_menu_tprobe;
    1488:	8b e7       	ldi	r24, 0x7B	; 123
    148a:	99 e0       	ldi	r25, 0x09	; 9
    148c:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <app_state+0x1d>
    1490:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <app_state+0x1c>
	}
	
	return EC_SUCCESS; // everything ok
    1494:	80 e0       	ldi	r24, 0x00	; 0
}
    1496:	df 91       	pop	r29
    1498:	cf 91       	pop	r28
    149a:	08 95       	ret

0000149c <app_state_menu_tprobe2_calib>:

ErrorCode app_state_menu_tprobe2_calib()
{
    149c:	cf 93       	push	r28
    149e:	df 93       	push	r29
    14a0:	cd b7       	in	r28, 0x3d	; 61
    14a2:	de b7       	in	r29, 0x3e	; 62
	#ifdef TSENS_PROBE_2
	srd_clear();
	mr_tprobe_calib_menu(app_state.t2_resistance);
	srd_display();
	#else
	srd_clear();
    14a4:	0e 94 10 1f 	call	0x3e20	; 0x3e20 <srd_clear>
	mr_tprobe_calib_menu_nc();
    14a8:	0e 94 ab 15 	call	0x2b56	; 0x2b56 <mr_tprobe_calib_menu_nc>
	srd_display();
    14ac:	0e 94 ff 1e 	call	0x3dfe	; 0x3dfe <srd_display>
	#endif
	
	// state change
	if(app_state.current_input.button_presses & (1 << BUTTON0))
    14b0:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <app_state+0x18>
    14b4:	88 2f       	mov	r24, r24
    14b6:	90 e0       	ldi	r25, 0x00	; 0
    14b8:	81 70       	andi	r24, 0x01	; 1
    14ba:	99 27       	eor	r25, r25
    14bc:	89 2b       	or	r24, r25
    14be:	49 f0       	breq	.+18     	; 0x14d2 <app_state_menu_tprobe2_calib+0x36>
	{
		app_state.selected_menu_item_index = 3;
    14c0:	83 e0       	ldi	r24, 0x03	; 3
    14c2:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <app_state+0x1e>
		app_state.current_state_func = app_state_menu_tprobe;
    14c6:	8b e7       	ldi	r24, 0x7B	; 123
    14c8:	99 e0       	ldi	r25, 0x09	; 9
    14ca:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <app_state+0x1d>
    14ce:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <app_state+0x1c>
	}
	
	return EC_SUCCESS; // everything ok
    14d2:	80 e0       	ldi	r24, 0x00	; 0
}
    14d4:	df 91       	pop	r29
    14d6:	cf 91       	pop	r28
    14d8:	08 95       	ret

000014da <app_state_menu_tprobe3_calib>:

ErrorCode app_state_menu_tprobe3_calib()
{
    14da:	cf 93       	push	r28
    14dc:	df 93       	push	r29
    14de:	cd b7       	in	r28, 0x3d	; 61
    14e0:	de b7       	in	r29, 0x3e	; 62
	#ifdef TSENS_PROBE_3
	srd_clear();
	mr_tprobe_calib_menu(app_state.t3_resistance);
	srd_display();
	#else
	srd_clear();
    14e2:	0e 94 10 1f 	call	0x3e20	; 0x3e20 <srd_clear>
	mr_tprobe_calib_menu_nc();
    14e6:	0e 94 ab 15 	call	0x2b56	; 0x2b56 <mr_tprobe_calib_menu_nc>
	srd_display();
    14ea:	0e 94 ff 1e 	call	0x3dfe	; 0x3dfe <srd_display>
	#endif
	
	// state change
	if(app_state.current_input.button_presses & (1 << BUTTON0))
    14ee:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <app_state+0x18>
    14f2:	88 2f       	mov	r24, r24
    14f4:	90 e0       	ldi	r25, 0x00	; 0
    14f6:	81 70       	andi	r24, 0x01	; 1
    14f8:	99 27       	eor	r25, r25
    14fa:	89 2b       	or	r24, r25
    14fc:	49 f0       	breq	.+18     	; 0x1510 <app_state_menu_tprobe3_calib+0x36>
	{
		app_state.selected_menu_item_index = 4;
    14fe:	84 e0       	ldi	r24, 0x04	; 4
    1500:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <app_state+0x1e>
		app_state.current_state_func = app_state_menu_tprobe;
    1504:	8b e7       	ldi	r24, 0x7B	; 123
    1506:	99 e0       	ldi	r25, 0x09	; 9
    1508:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <app_state+0x1d>
    150c:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <app_state+0x1c>
	}
	
	return EC_SUCCESS; // everything ok
    1510:	80 e0       	ldi	r24, 0x00	; 0
}
    1512:	df 91       	pop	r29
    1514:	cf 91       	pop	r28
    1516:	08 95       	ret

00001518 <app_clear_input>:
	//return EC_SUCCESS;
//}

////////////////////////////////////// HELPERS ////////////////////////////////////////////////////
void app_clear_input()
{
    1518:	cf 93       	push	r28
    151a:	df 93       	push	r29
    151c:	cd b7       	in	r28, 0x3d	; 61
    151e:	de b7       	in	r29, 0x3e	; 62
	app_state.current_input.rotenc_delta = 0;
    1520:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <app_state+0x17>
    1524:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <app_state+0x16>
	app_state.current_input.button_presses = 0;
    1528:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <app_state+0x18>
	app_state.current_input.button_long_presses = 0;
    152c:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <app_state+0x19>
	app_state.current_input.button_releases = 0;
    1530:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <app_state+0x1a>
	app_state.current_input.button_states = 0;
    1534:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <app_state+0x1b>
}
    1538:	00 00       	nop
    153a:	df 91       	pop	r29
    153c:	cf 91       	pop	r28
    153e:	08 95       	ret

00001540 <app_error_display>:

void app_error_display()
{
    1540:	cf 93       	push	r28
    1542:	df 93       	push	r29
    1544:	cd b7       	in	r28, 0x3d	; 61
    1546:	de b7       	in	r29, 0x3e	; 62
	switch(app_state.current_error)
    1548:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <app_state+0x3b>
    154c:	88 2f       	mov	r24, r24
    154e:	90 e0       	ldi	r25, 0x00	; 0
    1550:	82 30       	cpi	r24, 0x02	; 2
    1552:	91 05       	cpc	r25, r1
    1554:	b9 f0       	breq	.+46     	; 0x1584 <app_error_display+0x44>
    1556:	83 30       	cpi	r24, 0x03	; 3
    1558:	91 05       	cpc	r25, r1
    155a:	2c f4       	brge	.+10     	; 0x1566 <app_error_display+0x26>
    155c:	00 97       	sbiw	r24, 0x00	; 0
    155e:	69 f1       	breq	.+90     	; 0x15ba <app_error_display+0x7a>
    1560:	01 97       	sbiw	r24, 0x01	; 1
    1562:	39 f0       	breq	.+14     	; 0x1572 <app_error_display+0x32>
			srd_clear();
			mr_thermistor_error(app_state.current_error);
			srd_display();
			break;
	}
}
    1564:	2b c0       	rjmp	.+86     	; 0x15bc <app_error_display+0x7c>
	app_state.current_input.button_states = 0;
}

void app_error_display()
{
	switch(app_state.current_error)
    1566:	83 30       	cpi	r24, 0x03	; 3
    1568:	91 05       	cpc	r25, r1
    156a:	a9 f0       	breq	.+42     	; 0x1596 <app_error_display+0x56>
    156c:	04 97       	sbiw	r24, 0x04	; 4
    156e:	e1 f0       	breq	.+56     	; 0x15a8 <app_error_display+0x68>
			srd_clear();
			mr_thermistor_error(app_state.current_error);
			srd_display();
			break;
	}
}
    1570:	25 c0       	rjmp	.+74     	; 0x15bc <app_error_display+0x7c>
	switch(app_state.current_error)
	{
		case EC_SUCCESS:
			break;
		case EC_THERMISTOR_OPEN_CIRCUIT:
			srd_clear();
    1572:	0e 94 10 1f 	call	0x3e20	; 0x3e20 <srd_clear>
			mr_thermistor_error(app_state.current_error);
    1576:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <app_state+0x3b>
    157a:	0e 94 bb 15 	call	0x2b76	; 0x2b76 <mr_thermistor_error>
			srd_display();
    157e:	0e 94 ff 1e 	call	0x3dfe	; 0x3dfe <srd_display>
			break;
    1582:	1c c0       	rjmp	.+56     	; 0x15bc <app_error_display+0x7c>
		case EC_THERMISTOR_SHORT_CIRCUIT:
			srd_clear();
    1584:	0e 94 10 1f 	call	0x3e20	; 0x3e20 <srd_clear>
			mr_thermistor_error(app_state.current_error);
    1588:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <app_state+0x3b>
    158c:	0e 94 bb 15 	call	0x2b76	; 0x2b76 <mr_thermistor_error>
			srd_display();
    1590:	0e 94 ff 1e 	call	0x3dfe	; 0x3dfe <srd_display>
			break;
    1594:	13 c0       	rjmp	.+38     	; 0x15bc <app_error_display+0x7c>
		case EC_THERMISTOR_NOT_RESPONDING:
			srd_clear();
    1596:	0e 94 10 1f 	call	0x3e20	; 0x3e20 <srd_clear>
			mr_thermistor_error(app_state.current_error);
    159a:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <app_state+0x3b>
    159e:	0e 94 bb 15 	call	0x2b76	; 0x2b76 <mr_thermistor_error>
			srd_display();
    15a2:	0e 94 ff 1e 	call	0x3dfe	; 0x3dfe <srd_display>
			break;
    15a6:	0a c0       	rjmp	.+20     	; 0x15bc <app_error_display+0x7c>
		case EC_NO_CONTROLLING_TPROBE:
			srd_clear();
    15a8:	0e 94 10 1f 	call	0x3e20	; 0x3e20 <srd_clear>
			mr_thermistor_error(app_state.current_error);
    15ac:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <app_state+0x3b>
    15b0:	0e 94 bb 15 	call	0x2b76	; 0x2b76 <mr_thermistor_error>
			srd_display();
    15b4:	0e 94 ff 1e 	call	0x3dfe	; 0x3dfe <srd_display>
			break;
    15b8:	01 c0       	rjmp	.+2      	; 0x15bc <app_error_display+0x7c>
void app_error_display()
{
	switch(app_state.current_error)
	{
		case EC_SUCCESS:
			break;
    15ba:	00 00       	nop
			srd_clear();
			mr_thermistor_error(app_state.current_error);
			srd_display();
			break;
	}
}
    15bc:	00 00       	nop
    15be:	df 91       	pop	r29
    15c0:	cf 91       	pop	r28
    15c2:	08 95       	ret

000015c4 <app_load_default_settings>:

void app_load_default_settings()
{
    15c4:	cf 93       	push	r28
    15c6:	df 93       	push	r29
    15c8:	cd b7       	in	r28, 0x3d	; 61
    15ca:	de b7       	in	r29, 0x3e	; 62
	app_state.settings.heater_target_temp = SETTINGS_DEFAULT_HEATER_TARGET_TEMP;
    15cc:	80 e0       	ldi	r24, 0x00	; 0
    15ce:	90 e0       	ldi	r25, 0x00	; 0
    15d0:	a8 ec       	ldi	r26, 0xC8	; 200
    15d2:	b1 e4       	ldi	r27, 0x41	; 65
    15d4:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <app_state>
    15d8:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <app_state+0x1>
    15dc:	a0 93 13 01 	sts	0x0113, r26	; 0x800113 <app_state+0x2>
    15e0:	b0 93 14 01 	sts	0x0114, r27	; 0x800114 <app_state+0x3>
	app_state.settings.heater_pid_p = SETTINGS_DEFAULT_HEATER_PID_P;
    15e4:	80 e0       	ldi	r24, 0x00	; 0
    15e6:	90 e0       	ldi	r25, 0x00	; 0
    15e8:	a0 e8       	ldi	r26, 0x80	; 128
    15ea:	bf e3       	ldi	r27, 0x3F	; 63
    15ec:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <app_state+0x4>
    15f0:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <app_state+0x5>
    15f4:	a0 93 17 01 	sts	0x0117, r26	; 0x800117 <app_state+0x6>
    15f8:	b0 93 18 01 	sts	0x0118, r27	; 0x800118 <app_state+0x7>
	app_state.settings.heater_pid_i = SETTINGS_DEFAULT_HEATER_PID_I;
    15fc:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <app_state+0x8>
    1600:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <app_state+0x9>
    1604:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <app_state+0xa>
    1608:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <app_state+0xb>
	app_state.settings.heater_pid_d = SETTINGS_DEFAULT_HEATER_PID_D;
    160c:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <app_state+0xc>
    1610:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <app_state+0xd>
    1614:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <app_state+0xe>
    1618:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <app_state+0xf>
	app_state.settings.heater_offset = SETTINGS_DEFAULT_HEATER_OFFSET;
    161c:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <app_state+0x10>
    1620:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <app_state+0x11>
    1624:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <app_state+0x12>
    1628:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <app_state+0x13>
	app_state.settings.controlling_tprobe = HEATER_SAFETY_TPROBE;
    162c:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <app_state+0x14>
}
    1630:	00 00       	nop
    1632:	df 91       	pop	r29
    1634:	cf 91       	pop	r28
    1636:	08 95       	ret

00001638 <app_load_settings_from_eeprom>:

void app_load_settings_from_eeprom()
{
    1638:	cf 93       	push	r28
    163a:	df 93       	push	r29
    163c:	cd b7       	in	r28, 0x3d	; 61
    163e:	de b7       	in	r29, 0x3e	; 62
    1640:	66 97       	sbiw	r28, 0x16	; 22
    1642:	0f b6       	in	r0, 0x3f	; 63
    1644:	f8 94       	cli
    1646:	de bf       	out	0x3e, r29	; 62
    1648:	0f be       	out	0x3f, r0	; 63
    164a:	cd bf       	out	0x3d, r28	; 61
	eeprom_settings_t load_settings;
	eeprom_read_block(&load_settings, &app_eeprom_settings, sizeof(eeprom_settings_t));
    164c:	46 e1       	ldi	r20, 0x16	; 22
    164e:	50 e0       	ldi	r21, 0x00	; 0
    1650:	60 e0       	ldi	r22, 0x00	; 0
    1652:	70 e0       	ldi	r23, 0x00	; 0
    1654:	ce 01       	movw	r24, r28
    1656:	01 96       	adiw	r24, 0x01	; 1
    1658:	0e 94 08 29 	call	0x5210	; 0x5210 <eeprom_read_block>
	// if no valid data was found in eeprom, initialize it with default settings
	if(load_settings.magic_number != EEPROM_SETTINGS_MAGIC_NUMBER)
    165c:	89 81       	ldd	r24, Y+1	; 0x01
    165e:	8a 32       	cpi	r24, 0x2A	; 42
    1660:	29 f0       	breq	.+10     	; 0x166c <app_load_settings_from_eeprom+0x34>
	{
		app_load_default_settings();
    1662:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <app_load_default_settings>
		app_store_settings_to_eeprom();
    1666:	0e 94 49 0b 	call	0x1692	; 0x1692 <app_store_settings_to_eeprom>
	}
	else
	{
		app_state.settings = load_settings.settings;
	}
}
    166a:	09 c0       	rjmp	.+18     	; 0x167e <app_load_settings_from_eeprom+0x46>
		app_load_default_settings();
		app_store_settings_to_eeprom();
	}
	else
	{
		app_state.settings = load_settings.settings;
    166c:	85 e1       	ldi	r24, 0x15	; 21
    166e:	fe 01       	movw	r30, r28
    1670:	32 96       	adiw	r30, 0x02	; 2
    1672:	a1 e1       	ldi	r26, 0x11	; 17
    1674:	b1 e0       	ldi	r27, 0x01	; 1
    1676:	01 90       	ld	r0, Z+
    1678:	0d 92       	st	X+, r0
    167a:	8a 95       	dec	r24
    167c:	e1 f7       	brne	.-8      	; 0x1676 <app_load_settings_from_eeprom+0x3e>
	}
}
    167e:	00 00       	nop
    1680:	66 96       	adiw	r28, 0x16	; 22
    1682:	0f b6       	in	r0, 0x3f	; 63
    1684:	f8 94       	cli
    1686:	de bf       	out	0x3e, r29	; 62
    1688:	0f be       	out	0x3f, r0	; 63
    168a:	cd bf       	out	0x3d, r28	; 61
    168c:	df 91       	pop	r29
    168e:	cf 91       	pop	r28
    1690:	08 95       	ret

00001692 <app_store_settings_to_eeprom>:

void app_store_settings_to_eeprom()
{
    1692:	cf 93       	push	r28
    1694:	df 93       	push	r29
    1696:	cd b7       	in	r28, 0x3d	; 61
    1698:	de b7       	in	r29, 0x3e	; 62
    169a:	66 97       	sbiw	r28, 0x16	; 22
    169c:	0f b6       	in	r0, 0x3f	; 63
    169e:	f8 94       	cli
    16a0:	de bf       	out	0x3e, r29	; 62
    16a2:	0f be       	out	0x3f, r0	; 63
    16a4:	cd bf       	out	0x3d, r28	; 61
	eeprom_settings_t store_settings = {EEPROM_SETTINGS_MAGIC_NUMBER, app_state.settings};
    16a6:	8a e2       	ldi	r24, 0x2A	; 42
    16a8:	89 83       	std	Y+1, r24	; 0x01
    16aa:	85 e1       	ldi	r24, 0x15	; 21
    16ac:	e1 e1       	ldi	r30, 0x11	; 17
    16ae:	f1 e0       	ldi	r31, 0x01	; 1
    16b0:	de 01       	movw	r26, r28
    16b2:	12 96       	adiw	r26, 0x02	; 2
    16b4:	01 90       	ld	r0, Z+
    16b6:	0d 92       	st	X+, r0
    16b8:	8a 95       	dec	r24
    16ba:	e1 f7       	brne	.-8      	; 0x16b4 <app_store_settings_to_eeprom+0x22>
	eeprom_update_block(&store_settings, &app_eeprom_settings, sizeof(eeprom_settings_t));
    16bc:	46 e1       	ldi	r20, 0x16	; 22
    16be:	50 e0       	ldi	r21, 0x00	; 0
    16c0:	60 e0       	ldi	r22, 0x00	; 0
    16c2:	70 e0       	ldi	r23, 0x00	; 0
    16c4:	ce 01       	movw	r24, r28
    16c6:	01 96       	adiw	r24, 0x01	; 1
    16c8:	0e 94 18 29 	call	0x5230	; 0x5230 <eeprom_update_block>
    16cc:	00 00       	nop
    16ce:	66 96       	adiw	r28, 0x16	; 22
    16d0:	0f b6       	in	r0, 0x3f	; 63
    16d2:	f8 94       	cli
    16d4:	de bf       	out	0x3e, r29	; 62
    16d6:	0f be       	out	0x3f, r0	; 63
    16d8:	cd bf       	out	0x3d, r28	; 61
    16da:	df 91       	pop	r29
    16dc:	cf 91       	pop	r28
    16de:	08 95       	ret

000016e0 <__iCliRetVal>:

void appt_clear_callback(uint8_t index)
{
	assert(index < APP_TIMER_MAX_CALLBACKS);
	appt_callbacks[index] = (appt_callback_entry){APPT_CYCLE_ZERO, APPT_CYCLE_ZERO, 0};
}
    16e0:	cf 93       	push	r28
    16e2:	df 93       	push	r29
    16e4:	cd b7       	in	r28, 0x3d	; 61
    16e6:	de b7       	in	r29, 0x3e	; 62
    16e8:	f8 94       	cli
    16ea:	81 e0       	ldi	r24, 0x01	; 1
    16ec:	df 91       	pop	r29
    16ee:	cf 91       	pop	r28
    16f0:	08 95       	ret

000016f2 <__iRestore>:
    16f2:	cf 93       	push	r28
    16f4:	df 93       	push	r29
    16f6:	00 d0       	rcall	.+0      	; 0x16f8 <__iRestore+0x6>
    16f8:	cd b7       	in	r28, 0x3d	; 61
    16fa:	de b7       	in	r29, 0x3e	; 62
    16fc:	9a 83       	std	Y+2, r25	; 0x02
    16fe:	89 83       	std	Y+1, r24	; 0x01
    1700:	8f e5       	ldi	r24, 0x5F	; 95
    1702:	90 e0       	ldi	r25, 0x00	; 0
    1704:	29 81       	ldd	r18, Y+1	; 0x01
    1706:	3a 81       	ldd	r19, Y+2	; 0x02
    1708:	f9 01       	movw	r30, r18
    170a:	20 81       	ld	r18, Z
    170c:	fc 01       	movw	r30, r24
    170e:	20 83       	st	Z, r18
    1710:	00 00       	nop
    1712:	0f 90       	pop	r0
    1714:	0f 90       	pop	r0
    1716:	df 91       	pop	r29
    1718:	cf 91       	pop	r28
    171a:	08 95       	ret

0000171c <seconds_to_cycles>:
    171c:	2f 92       	push	r2
    171e:	3f 92       	push	r3
    1720:	4f 92       	push	r4
    1722:	5f 92       	push	r5
    1724:	6f 92       	push	r6
    1726:	7f 92       	push	r7
    1728:	8f 92       	push	r8
    172a:	9f 92       	push	r9
    172c:	af 92       	push	r10
    172e:	bf 92       	push	r11
    1730:	cf 92       	push	r12
    1732:	df 92       	push	r13
    1734:	ef 92       	push	r14
    1736:	ff 92       	push	r15
    1738:	0f 93       	push	r16
    173a:	1f 93       	push	r17
    173c:	cf 93       	push	r28
    173e:	df 93       	push	r29
    1740:	00 d0       	rcall	.+0      	; 0x1742 <seconds_to_cycles+0x26>
    1742:	00 d0       	rcall	.+0      	; 0x1744 <seconds_to_cycles+0x28>
    1744:	cd b7       	in	r28, 0x3d	; 61
    1746:	de b7       	in	r29, 0x3e	; 62
    1748:	69 83       	std	Y+1, r22	; 0x01
    174a:	7a 83       	std	Y+2, r23	; 0x02
    174c:	8b 83       	std	Y+3, r24	; 0x03
    174e:	9c 83       	std	Y+4, r25	; 0x04
    1750:	28 e3       	ldi	r18, 0x38	; 56
    1752:	3e e9       	ldi	r19, 0x9E	; 158
    1754:	4f ec       	ldi	r20, 0xCF	; 207
    1756:	58 e3       	ldi	r21, 0x38	; 56
    1758:	69 81       	ldd	r22, Y+1	; 0x01
    175a:	7a 81       	ldd	r23, Y+2	; 0x02
    175c:	8b 81       	ldd	r24, Y+3	; 0x03
    175e:	9c 81       	ldd	r25, Y+4	; 0x04
    1760:	0e 94 d5 25 	call	0x4baa	; 0x4baa <__divsf3>
    1764:	dc 01       	movw	r26, r24
    1766:	cb 01       	movw	r24, r22
    1768:	20 e0       	ldi	r18, 0x00	; 0
    176a:	30 e0       	ldi	r19, 0x00	; 0
    176c:	40 e0       	ldi	r20, 0x00	; 0
    176e:	5f e3       	ldi	r21, 0x3F	; 63
    1770:	bc 01       	movw	r22, r24
    1772:	cd 01       	movw	r24, r26
    1774:	0e 94 64 25 	call	0x4ac8	; 0x4ac8 <__addsf3>
    1778:	dc 01       	movw	r26, r24
    177a:	cb 01       	movw	r24, r22
    177c:	bc 01       	movw	r22, r24
    177e:	cd 01       	movw	r24, r26
    1780:	0e 94 4c 26 	call	0x4c98	; 0x4c98 <__fixunssfdi>
    1784:	22 2e       	mov	r2, r18
    1786:	33 2e       	mov	r3, r19
    1788:	44 2e       	mov	r4, r20
    178a:	55 2e       	mov	r5, r21
    178c:	66 2e       	mov	r6, r22
    178e:	77 2e       	mov	r7, r23
    1790:	88 2e       	mov	r8, r24
    1792:	99 2e       	mov	r9, r25
    1794:	a2 2c       	mov	r10, r2
    1796:	b3 2c       	mov	r11, r3
    1798:	c4 2c       	mov	r12, r4
    179a:	d5 2c       	mov	r13, r5
    179c:	e6 2c       	mov	r14, r6
    179e:	f7 2c       	mov	r15, r7
    17a0:	08 2d       	mov	r16, r8
    17a2:	19 2d       	mov	r17, r9
    17a4:	2a 2d       	mov	r18, r10
    17a6:	3b 2d       	mov	r19, r11
    17a8:	4c 2d       	mov	r20, r12
    17aa:	5d 2d       	mov	r21, r13
    17ac:	6e 2d       	mov	r22, r14
    17ae:	7f 2d       	mov	r23, r15
    17b0:	80 2f       	mov	r24, r16
    17b2:	91 2f       	mov	r25, r17
    17b4:	0f 90       	pop	r0
    17b6:	0f 90       	pop	r0
    17b8:	0f 90       	pop	r0
    17ba:	0f 90       	pop	r0
    17bc:	df 91       	pop	r29
    17be:	cf 91       	pop	r28
    17c0:	1f 91       	pop	r17
    17c2:	0f 91       	pop	r16
    17c4:	ff 90       	pop	r15
    17c6:	ef 90       	pop	r14
    17c8:	df 90       	pop	r13
    17ca:	cf 90       	pop	r12
    17cc:	bf 90       	pop	r11
    17ce:	af 90       	pop	r10
    17d0:	9f 90       	pop	r9
    17d2:	8f 90       	pop	r8
    17d4:	7f 90       	pop	r7
    17d6:	6f 90       	pop	r6
    17d8:	5f 90       	pop	r5
    17da:	4f 90       	pop	r4
    17dc:	3f 90       	pop	r3
    17de:	2f 90       	pop	r2
    17e0:	08 95       	ret

000017e2 <appt_init>:
    17e2:	cf 93       	push	r28
    17e4:	df 93       	push	r29
    17e6:	1f 92       	push	r1
    17e8:	cd b7       	in	r28, 0x3d	; 61
    17ea:	de b7       	in	r29, 0x3e	; 62
    17ec:	10 92 b0 01 	sts	0x01B0, r1	; 0x8001b0 <appt_cycles>
    17f0:	10 92 b1 01 	sts	0x01B1, r1	; 0x8001b1 <appt_cycles+0x1>
    17f4:	10 92 b2 01 	sts	0x01B2, r1	; 0x8001b2 <appt_cycles+0x2>
    17f8:	10 92 b3 01 	sts	0x01B3, r1	; 0x8001b3 <appt_cycles+0x3>
    17fc:	10 92 b4 01 	sts	0x01B4, r1	; 0x8001b4 <appt_cycles+0x4>
    1800:	10 92 b5 01 	sts	0x01B5, r1	; 0x8001b5 <appt_cycles+0x5>
    1804:	10 92 b6 01 	sts	0x01B6, r1	; 0x8001b6 <appt_cycles+0x6>
    1808:	10 92 b7 01 	sts	0x01B7, r1	; 0x8001b7 <appt_cycles+0x7>
    180c:	10 92 a8 01 	sts	0x01A8, r1	; 0x8001a8 <appt_cycles_old>
    1810:	10 92 a9 01 	sts	0x01A9, r1	; 0x8001a9 <appt_cycles_old+0x1>
    1814:	10 92 aa 01 	sts	0x01AA, r1	; 0x8001aa <appt_cycles_old+0x2>
    1818:	10 92 ab 01 	sts	0x01AB, r1	; 0x8001ab <appt_cycles_old+0x3>
    181c:	10 92 ac 01 	sts	0x01AC, r1	; 0x8001ac <appt_cycles_old+0x4>
    1820:	10 92 ad 01 	sts	0x01AD, r1	; 0x8001ad <appt_cycles_old+0x5>
    1824:	10 92 ae 01 	sts	0x01AE, r1	; 0x8001ae <appt_cycles_old+0x6>
    1828:	10 92 af 01 	sts	0x01AF, r1	; 0x8001af <appt_cycles_old+0x7>
    182c:	19 82       	std	Y+1, r1	; 0x01
    182e:	53 c0       	rjmp	.+166    	; 0x18d6 <appt_init+0xf4>
    1830:	89 81       	ldd	r24, Y+1	; 0x01
    1832:	28 2f       	mov	r18, r24
    1834:	30 e0       	ldi	r19, 0x00	; 0
    1836:	c9 01       	movw	r24, r18
    1838:	88 0f       	add	r24, r24
    183a:	99 1f       	adc	r25, r25
    183c:	ac 01       	movw	r20, r24
    183e:	44 0f       	add	r20, r20
    1840:	55 1f       	adc	r21, r21
    1842:	44 0f       	add	r20, r20
    1844:	55 1f       	adc	r21, r21
    1846:	44 0f       	add	r20, r20
    1848:	55 1f       	adc	r21, r21
    184a:	84 0f       	add	r24, r20
    184c:	95 1f       	adc	r25, r21
    184e:	80 5a       	subi	r24, 0xA0	; 160
    1850:	9e 4f       	sbci	r25, 0xFE	; 254
    1852:	fc 01       	movw	r30, r24
    1854:	10 82       	st	Z, r1
    1856:	fc 01       	movw	r30, r24
    1858:	11 82       	std	Z+1, r1	; 0x01
    185a:	fc 01       	movw	r30, r24
    185c:	12 82       	std	Z+2, r1	; 0x02
    185e:	fc 01       	movw	r30, r24
    1860:	13 82       	std	Z+3, r1	; 0x03
    1862:	fc 01       	movw	r30, r24
    1864:	14 82       	std	Z+4, r1	; 0x04
    1866:	fc 01       	movw	r30, r24
    1868:	15 82       	std	Z+5, r1	; 0x05
    186a:	fc 01       	movw	r30, r24
    186c:	16 82       	std	Z+6, r1	; 0x06
    186e:	fc 01       	movw	r30, r24
    1870:	17 82       	std	Z+7, r1	; 0x07
    1872:	c9 01       	movw	r24, r18
    1874:	88 0f       	add	r24, r24
    1876:	99 1f       	adc	r25, r25
    1878:	ac 01       	movw	r20, r24
    187a:	44 0f       	add	r20, r20
    187c:	55 1f       	adc	r21, r21
    187e:	44 0f       	add	r20, r20
    1880:	55 1f       	adc	r21, r21
    1882:	44 0f       	add	r20, r20
    1884:	55 1f       	adc	r21, r21
    1886:	84 0f       	add	r24, r20
    1888:	95 1f       	adc	r25, r21
    188a:	88 59       	subi	r24, 0x98	; 152
    188c:	9e 4f       	sbci	r25, 0xFE	; 254
    188e:	fc 01       	movw	r30, r24
    1890:	10 82       	st	Z, r1
    1892:	fc 01       	movw	r30, r24
    1894:	11 82       	std	Z+1, r1	; 0x01
    1896:	fc 01       	movw	r30, r24
    1898:	12 82       	std	Z+2, r1	; 0x02
    189a:	fc 01       	movw	r30, r24
    189c:	13 82       	std	Z+3, r1	; 0x03
    189e:	fc 01       	movw	r30, r24
    18a0:	14 82       	std	Z+4, r1	; 0x04
    18a2:	fc 01       	movw	r30, r24
    18a4:	15 82       	std	Z+5, r1	; 0x05
    18a6:	fc 01       	movw	r30, r24
    18a8:	16 82       	std	Z+6, r1	; 0x06
    18aa:	fc 01       	movw	r30, r24
    18ac:	17 82       	std	Z+7, r1	; 0x07
    18ae:	c9 01       	movw	r24, r18
    18b0:	88 0f       	add	r24, r24
    18b2:	99 1f       	adc	r25, r25
    18b4:	9c 01       	movw	r18, r24
    18b6:	22 0f       	add	r18, r18
    18b8:	33 1f       	adc	r19, r19
    18ba:	22 0f       	add	r18, r18
    18bc:	33 1f       	adc	r19, r19
    18be:	22 0f       	add	r18, r18
    18c0:	33 1f       	adc	r19, r19
    18c2:	82 0f       	add	r24, r18
    18c4:	93 1f       	adc	r25, r19
    18c6:	80 59       	subi	r24, 0x90	; 144
    18c8:	9e 4f       	sbci	r25, 0xFE	; 254
    18ca:	fc 01       	movw	r30, r24
    18cc:	11 82       	std	Z+1, r1	; 0x01
    18ce:	10 82       	st	Z, r1
    18d0:	89 81       	ldd	r24, Y+1	; 0x01
    18d2:	8f 5f       	subi	r24, 0xFF	; 255
    18d4:	89 83       	std	Y+1, r24	; 0x01
    18d6:	89 81       	ldd	r24, Y+1	; 0x01
    18d8:	84 30       	cpi	r24, 0x04	; 4
    18da:	08 f4       	brcc	.+2      	; 0x18de <appt_init+0xfc>
    18dc:	a9 cf       	rjmp	.-174    	; 0x1830 <appt_init+0x4e>
    18de:	8e e6       	ldi	r24, 0x6E	; 110
    18e0:	90 e0       	ldi	r25, 0x00	; 0
    18e2:	2e e6       	ldi	r18, 0x6E	; 110
    18e4:	30 e0       	ldi	r19, 0x00	; 0
    18e6:	f9 01       	movw	r30, r18
    18e8:	20 81       	ld	r18, Z
    18ea:	2c 7f       	andi	r18, 0xFC	; 252
    18ec:	fc 01       	movw	r30, r24
    18ee:	20 83       	st	Z, r18
    18f0:	85 e4       	ldi	r24, 0x45	; 69
    18f2:	90 e0       	ldi	r25, 0x00	; 0
    18f4:	25 e4       	ldi	r18, 0x45	; 69
    18f6:	30 e0       	ldi	r19, 0x00	; 0
    18f8:	f9 01       	movw	r30, r18
    18fa:	20 81       	ld	r18, Z
    18fc:	28 7f       	andi	r18, 0xF8	; 248
    18fe:	fc 01       	movw	r30, r24
    1900:	20 83       	st	Z, r18
    1902:	84 e4       	ldi	r24, 0x44	; 68
    1904:	90 e0       	ldi	r25, 0x00	; 0
    1906:	24 e4       	ldi	r18, 0x44	; 68
    1908:	30 e0       	ldi	r19, 0x00	; 0
    190a:	f9 01       	movw	r30, r18
    190c:	20 81       	ld	r18, Z
    190e:	22 60       	ori	r18, 0x02	; 2
    1910:	fc 01       	movw	r30, r24
    1912:	20 83       	st	Z, r18
    1914:	87 e4       	ldi	r24, 0x47	; 71
    1916:	90 e0       	ldi	r25, 0x00	; 0
    1918:	22 e6       	ldi	r18, 0x62	; 98
    191a:	fc 01       	movw	r30, r24
    191c:	20 83       	st	Z, r18
    191e:	8e e6       	ldi	r24, 0x6E	; 110
    1920:	90 e0       	ldi	r25, 0x00	; 0
    1922:	2e e6       	ldi	r18, 0x6E	; 110
    1924:	30 e0       	ldi	r19, 0x00	; 0
    1926:	f9 01       	movw	r30, r18
    1928:	20 81       	ld	r18, Z
    192a:	22 60       	ori	r18, 0x02	; 2
    192c:	fc 01       	movw	r30, r24
    192e:	20 83       	st	Z, r18
    1930:	78 94       	sei
    1932:	00 00       	nop
    1934:	0f 90       	pop	r0
    1936:	df 91       	pop	r29
    1938:	cf 91       	pop	r28
    193a:	08 95       	ret

0000193c <appt_shutdown>:
    193c:	cf 93       	push	r28
    193e:	df 93       	push	r29
    1940:	1f 92       	push	r1
    1942:	cd b7       	in	r28, 0x3d	; 61
    1944:	de b7       	in	r29, 0x3e	; 62
    1946:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <appt_stop>
    194a:	8e e6       	ldi	r24, 0x6E	; 110
    194c:	90 e0       	ldi	r25, 0x00	; 0
    194e:	2e e6       	ldi	r18, 0x6E	; 110
    1950:	30 e0       	ldi	r19, 0x00	; 0
    1952:	f9 01       	movw	r30, r18
    1954:	20 81       	ld	r18, Z
    1956:	2d 7f       	andi	r18, 0xFD	; 253
    1958:	fc 01       	movw	r30, r24
    195a:	20 83       	st	Z, r18
    195c:	84 e4       	ldi	r24, 0x44	; 68
    195e:	90 e0       	ldi	r25, 0x00	; 0
    1960:	24 e4       	ldi	r18, 0x44	; 68
    1962:	30 e0       	ldi	r19, 0x00	; 0
    1964:	f9 01       	movw	r30, r18
    1966:	20 81       	ld	r18, Z
    1968:	2d 7b       	andi	r18, 0xBD	; 189
    196a:	fc 01       	movw	r30, r24
    196c:	20 83       	st	Z, r18
    196e:	86 e4       	ldi	r24, 0x46	; 70
    1970:	90 e0       	ldi	r25, 0x00	; 0
    1972:	fc 01       	movw	r30, r24
    1974:	10 82       	st	Z, r1
    1976:	87 e4       	ldi	r24, 0x47	; 71
    1978:	90 e0       	ldi	r25, 0x00	; 0
    197a:	fc 01       	movw	r30, r24
    197c:	10 82       	st	Z, r1
    197e:	10 92 b0 01 	sts	0x01B0, r1	; 0x8001b0 <appt_cycles>
    1982:	10 92 b1 01 	sts	0x01B1, r1	; 0x8001b1 <appt_cycles+0x1>
    1986:	10 92 b2 01 	sts	0x01B2, r1	; 0x8001b2 <appt_cycles+0x2>
    198a:	10 92 b3 01 	sts	0x01B3, r1	; 0x8001b3 <appt_cycles+0x3>
    198e:	10 92 b4 01 	sts	0x01B4, r1	; 0x8001b4 <appt_cycles+0x4>
    1992:	10 92 b5 01 	sts	0x01B5, r1	; 0x8001b5 <appt_cycles+0x5>
    1996:	10 92 b6 01 	sts	0x01B6, r1	; 0x8001b6 <appt_cycles+0x6>
    199a:	10 92 b7 01 	sts	0x01B7, r1	; 0x8001b7 <appt_cycles+0x7>
    199e:	10 92 a8 01 	sts	0x01A8, r1	; 0x8001a8 <appt_cycles_old>
    19a2:	10 92 a9 01 	sts	0x01A9, r1	; 0x8001a9 <appt_cycles_old+0x1>
    19a6:	10 92 aa 01 	sts	0x01AA, r1	; 0x8001aa <appt_cycles_old+0x2>
    19aa:	10 92 ab 01 	sts	0x01AB, r1	; 0x8001ab <appt_cycles_old+0x3>
    19ae:	10 92 ac 01 	sts	0x01AC, r1	; 0x8001ac <appt_cycles_old+0x4>
    19b2:	10 92 ad 01 	sts	0x01AD, r1	; 0x8001ad <appt_cycles_old+0x5>
    19b6:	10 92 ae 01 	sts	0x01AE, r1	; 0x8001ae <appt_cycles_old+0x6>
    19ba:	10 92 af 01 	sts	0x01AF, r1	; 0x8001af <appt_cycles_old+0x7>
    19be:	19 82       	std	Y+1, r1	; 0x01
    19c0:	53 c0       	rjmp	.+166    	; 0x1a68 <appt_shutdown+0x12c>
    19c2:	89 81       	ldd	r24, Y+1	; 0x01
    19c4:	28 2f       	mov	r18, r24
    19c6:	30 e0       	ldi	r19, 0x00	; 0
    19c8:	c9 01       	movw	r24, r18
    19ca:	88 0f       	add	r24, r24
    19cc:	99 1f       	adc	r25, r25
    19ce:	ac 01       	movw	r20, r24
    19d0:	44 0f       	add	r20, r20
    19d2:	55 1f       	adc	r21, r21
    19d4:	44 0f       	add	r20, r20
    19d6:	55 1f       	adc	r21, r21
    19d8:	44 0f       	add	r20, r20
    19da:	55 1f       	adc	r21, r21
    19dc:	84 0f       	add	r24, r20
    19de:	95 1f       	adc	r25, r21
    19e0:	80 5a       	subi	r24, 0xA0	; 160
    19e2:	9e 4f       	sbci	r25, 0xFE	; 254
    19e4:	fc 01       	movw	r30, r24
    19e6:	10 82       	st	Z, r1
    19e8:	fc 01       	movw	r30, r24
    19ea:	11 82       	std	Z+1, r1	; 0x01
    19ec:	fc 01       	movw	r30, r24
    19ee:	12 82       	std	Z+2, r1	; 0x02
    19f0:	fc 01       	movw	r30, r24
    19f2:	13 82       	std	Z+3, r1	; 0x03
    19f4:	fc 01       	movw	r30, r24
    19f6:	14 82       	std	Z+4, r1	; 0x04
    19f8:	fc 01       	movw	r30, r24
    19fa:	15 82       	std	Z+5, r1	; 0x05
    19fc:	fc 01       	movw	r30, r24
    19fe:	16 82       	std	Z+6, r1	; 0x06
    1a00:	fc 01       	movw	r30, r24
    1a02:	17 82       	std	Z+7, r1	; 0x07
    1a04:	c9 01       	movw	r24, r18
    1a06:	88 0f       	add	r24, r24
    1a08:	99 1f       	adc	r25, r25
    1a0a:	ac 01       	movw	r20, r24
    1a0c:	44 0f       	add	r20, r20
    1a0e:	55 1f       	adc	r21, r21
    1a10:	44 0f       	add	r20, r20
    1a12:	55 1f       	adc	r21, r21
    1a14:	44 0f       	add	r20, r20
    1a16:	55 1f       	adc	r21, r21
    1a18:	84 0f       	add	r24, r20
    1a1a:	95 1f       	adc	r25, r21
    1a1c:	88 59       	subi	r24, 0x98	; 152
    1a1e:	9e 4f       	sbci	r25, 0xFE	; 254
    1a20:	fc 01       	movw	r30, r24
    1a22:	10 82       	st	Z, r1
    1a24:	fc 01       	movw	r30, r24
    1a26:	11 82       	std	Z+1, r1	; 0x01
    1a28:	fc 01       	movw	r30, r24
    1a2a:	12 82       	std	Z+2, r1	; 0x02
    1a2c:	fc 01       	movw	r30, r24
    1a2e:	13 82       	std	Z+3, r1	; 0x03
    1a30:	fc 01       	movw	r30, r24
    1a32:	14 82       	std	Z+4, r1	; 0x04
    1a34:	fc 01       	movw	r30, r24
    1a36:	15 82       	std	Z+5, r1	; 0x05
    1a38:	fc 01       	movw	r30, r24
    1a3a:	16 82       	std	Z+6, r1	; 0x06
    1a3c:	fc 01       	movw	r30, r24
    1a3e:	17 82       	std	Z+7, r1	; 0x07
    1a40:	c9 01       	movw	r24, r18
    1a42:	88 0f       	add	r24, r24
    1a44:	99 1f       	adc	r25, r25
    1a46:	9c 01       	movw	r18, r24
    1a48:	22 0f       	add	r18, r18
    1a4a:	33 1f       	adc	r19, r19
    1a4c:	22 0f       	add	r18, r18
    1a4e:	33 1f       	adc	r19, r19
    1a50:	22 0f       	add	r18, r18
    1a52:	33 1f       	adc	r19, r19
    1a54:	82 0f       	add	r24, r18
    1a56:	93 1f       	adc	r25, r19
    1a58:	80 59       	subi	r24, 0x90	; 144
    1a5a:	9e 4f       	sbci	r25, 0xFE	; 254
    1a5c:	fc 01       	movw	r30, r24
    1a5e:	11 82       	std	Z+1, r1	; 0x01
    1a60:	10 82       	st	Z, r1
    1a62:	89 81       	ldd	r24, Y+1	; 0x01
    1a64:	8f 5f       	subi	r24, 0xFF	; 255
    1a66:	89 83       	std	Y+1, r24	; 0x01
    1a68:	89 81       	ldd	r24, Y+1	; 0x01
    1a6a:	84 30       	cpi	r24, 0x04	; 4
    1a6c:	08 f4       	brcc	.+2      	; 0x1a70 <appt_shutdown+0x134>
    1a6e:	a9 cf       	rjmp	.-174    	; 0x19c2 <appt_shutdown+0x86>
    1a70:	00 00       	nop
    1a72:	0f 90       	pop	r0
    1a74:	df 91       	pop	r29
    1a76:	cf 91       	pop	r28
    1a78:	08 95       	ret

00001a7a <appt_start>:
    1a7a:	cf 93       	push	r28
    1a7c:	df 93       	push	r29
    1a7e:	cd b7       	in	r28, 0x3d	; 61
    1a80:	de b7       	in	r29, 0x3e	; 62
    1a82:	10 92 b0 01 	sts	0x01B0, r1	; 0x8001b0 <appt_cycles>
    1a86:	10 92 b1 01 	sts	0x01B1, r1	; 0x8001b1 <appt_cycles+0x1>
    1a8a:	10 92 b2 01 	sts	0x01B2, r1	; 0x8001b2 <appt_cycles+0x2>
    1a8e:	10 92 b3 01 	sts	0x01B3, r1	; 0x8001b3 <appt_cycles+0x3>
    1a92:	10 92 b4 01 	sts	0x01B4, r1	; 0x8001b4 <appt_cycles+0x4>
    1a96:	10 92 b5 01 	sts	0x01B5, r1	; 0x8001b5 <appt_cycles+0x5>
    1a9a:	10 92 b6 01 	sts	0x01B6, r1	; 0x8001b6 <appt_cycles+0x6>
    1a9e:	10 92 b7 01 	sts	0x01B7, r1	; 0x8001b7 <appt_cycles+0x7>
    1aa2:	10 92 a8 01 	sts	0x01A8, r1	; 0x8001a8 <appt_cycles_old>
    1aa6:	10 92 a9 01 	sts	0x01A9, r1	; 0x8001a9 <appt_cycles_old+0x1>
    1aaa:	10 92 aa 01 	sts	0x01AA, r1	; 0x8001aa <appt_cycles_old+0x2>
    1aae:	10 92 ab 01 	sts	0x01AB, r1	; 0x8001ab <appt_cycles_old+0x3>
    1ab2:	10 92 ac 01 	sts	0x01AC, r1	; 0x8001ac <appt_cycles_old+0x4>
    1ab6:	10 92 ad 01 	sts	0x01AD, r1	; 0x8001ad <appt_cycles_old+0x5>
    1aba:	10 92 ae 01 	sts	0x01AE, r1	; 0x8001ae <appt_cycles_old+0x6>
    1abe:	10 92 af 01 	sts	0x01AF, r1	; 0x8001af <appt_cycles_old+0x7>
    1ac2:	86 e4       	ldi	r24, 0x46	; 70
    1ac4:	90 e0       	ldi	r25, 0x00	; 0
    1ac6:	fc 01       	movw	r30, r24
    1ac8:	10 82       	st	Z, r1
    1aca:	85 e4       	ldi	r24, 0x45	; 69
    1acc:	90 e0       	ldi	r25, 0x00	; 0
    1ace:	25 e4       	ldi	r18, 0x45	; 69
    1ad0:	30 e0       	ldi	r19, 0x00	; 0
    1ad2:	f9 01       	movw	r30, r18
    1ad4:	20 81       	ld	r18, Z
    1ad6:	22 60       	ori	r18, 0x02	; 2
    1ad8:	fc 01       	movw	r30, r24
    1ada:	20 83       	st	Z, r18
    1adc:	00 00       	nop
    1ade:	df 91       	pop	r29
    1ae0:	cf 91       	pop	r28
    1ae2:	08 95       	ret

00001ae4 <appt_stop>:
    1ae4:	cf 93       	push	r28
    1ae6:	df 93       	push	r29
    1ae8:	cd b7       	in	r28, 0x3d	; 61
    1aea:	de b7       	in	r29, 0x3e	; 62
    1aec:	85 e4       	ldi	r24, 0x45	; 69
    1aee:	90 e0       	ldi	r25, 0x00	; 0
    1af0:	25 e4       	ldi	r18, 0x45	; 69
    1af2:	30 e0       	ldi	r19, 0x00	; 0
    1af4:	f9 01       	movw	r30, r18
    1af6:	20 81       	ld	r18, Z
    1af8:	28 7f       	andi	r18, 0xF8	; 248
    1afa:	fc 01       	movw	r30, r24
    1afc:	20 83       	st	Z, r18
    1afe:	00 00       	nop
    1b00:	df 91       	pop	r29
    1b02:	cf 91       	pop	r28
    1b04:	08 95       	ret

00001b06 <appt_update>:
    1b06:	2f 92       	push	r2
    1b08:	3f 92       	push	r3
    1b0a:	4f 92       	push	r4
    1b0c:	5f 92       	push	r5
    1b0e:	6f 92       	push	r6
    1b10:	7f 92       	push	r7
    1b12:	8f 92       	push	r8
    1b14:	9f 92       	push	r9
    1b16:	af 92       	push	r10
    1b18:	bf 92       	push	r11
    1b1a:	cf 92       	push	r12
    1b1c:	df 92       	push	r13
    1b1e:	ef 92       	push	r14
    1b20:	ff 92       	push	r15
    1b22:	0f 93       	push	r16
    1b24:	1f 93       	push	r17
    1b26:	cf 93       	push	r28
    1b28:	df 93       	push	r29
    1b2a:	cd b7       	in	r28, 0x3d	; 61
    1b2c:	de b7       	in	r29, 0x3e	; 62
    1b2e:	2c 97       	sbiw	r28, 0x0c	; 12
    1b30:	0f b6       	in	r0, 0x3f	; 63
    1b32:	f8 94       	cli
    1b34:	de bf       	out	0x3e, r29	; 62
    1b36:	0f be       	out	0x3f, r0	; 63
    1b38:	cd bf       	out	0x3d, r28	; 61
    1b3a:	8f e5       	ldi	r24, 0x5F	; 95
    1b3c:	90 e0       	ldi	r25, 0x00	; 0
    1b3e:	dc 01       	movw	r26, r24
    1b40:	8c 91       	ld	r24, X
    1b42:	8c 87       	std	Y+12, r24	; 0x0c
    1b44:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <__iCliRetVal>
    1b48:	89 87       	std	Y+9, r24	; 0x09
    1b4a:	5b c0       	rjmp	.+182    	; 0x1c02 <appt_update+0xfc>
    1b4c:	a0 90 b0 01 	lds	r10, 0x01B0	; 0x8001b0 <appt_cycles>
    1b50:	b0 90 b1 01 	lds	r11, 0x01B1	; 0x8001b1 <appt_cycles+0x1>
    1b54:	c0 90 b2 01 	lds	r12, 0x01B2	; 0x8001b2 <appt_cycles+0x2>
    1b58:	d0 90 b3 01 	lds	r13, 0x01B3	; 0x8001b3 <appt_cycles+0x3>
    1b5c:	e0 90 b4 01 	lds	r14, 0x01B4	; 0x8001b4 <appt_cycles+0x4>
    1b60:	f0 90 b5 01 	lds	r15, 0x01B5	; 0x8001b5 <appt_cycles+0x5>
    1b64:	00 91 b6 01 	lds	r16, 0x01B6	; 0x8001b6 <appt_cycles+0x6>
    1b68:	10 91 b7 01 	lds	r17, 0x01B7	; 0x8001b7 <appt_cycles+0x7>
    1b6c:	20 90 a8 01 	lds	r2, 0x01A8	; 0x8001a8 <appt_cycles_old>
    1b70:	30 90 a9 01 	lds	r3, 0x01A9	; 0x8001a9 <appt_cycles_old+0x1>
    1b74:	40 90 aa 01 	lds	r4, 0x01AA	; 0x8001aa <appt_cycles_old+0x2>
    1b78:	50 90 ab 01 	lds	r5, 0x01AB	; 0x8001ab <appt_cycles_old+0x3>
    1b7c:	60 90 ac 01 	lds	r6, 0x01AC	; 0x8001ac <appt_cycles_old+0x4>
    1b80:	70 90 ad 01 	lds	r7, 0x01AD	; 0x8001ad <appt_cycles_old+0x5>
    1b84:	80 90 ae 01 	lds	r8, 0x01AE	; 0x8001ae <appt_cycles_old+0x6>
    1b88:	90 90 af 01 	lds	r9, 0x01AF	; 0x8001af <appt_cycles_old+0x7>
    1b8c:	2a 2d       	mov	r18, r10
    1b8e:	3b 2d       	mov	r19, r11
    1b90:	4c 2d       	mov	r20, r12
    1b92:	5d 2d       	mov	r21, r13
    1b94:	6e 2d       	mov	r22, r14
    1b96:	7f 2d       	mov	r23, r15
    1b98:	80 2f       	mov	r24, r16
    1b9a:	91 2f       	mov	r25, r17
    1b9c:	a2 2c       	mov	r10, r2
    1b9e:	b3 2c       	mov	r11, r3
    1ba0:	c4 2c       	mov	r12, r4
    1ba2:	d5 2c       	mov	r13, r5
    1ba4:	e6 2c       	mov	r14, r6
    1ba6:	f7 2c       	mov	r15, r7
    1ba8:	08 2d       	mov	r16, r8
    1baa:	19 2d       	mov	r17, r9
    1bac:	0e 94 dd 28 	call	0x51ba	; 0x51ba <__subdi3>
    1bb0:	29 83       	std	Y+1, r18	; 0x01
    1bb2:	3a 83       	std	Y+2, r19	; 0x02
    1bb4:	4b 83       	std	Y+3, r20	; 0x03
    1bb6:	5c 83       	std	Y+4, r21	; 0x04
    1bb8:	6d 83       	std	Y+5, r22	; 0x05
    1bba:	7e 83       	std	Y+6, r23	; 0x06
    1bbc:	8f 83       	std	Y+7, r24	; 0x07
    1bbe:	98 87       	std	Y+8, r25	; 0x08
    1bc0:	20 91 b0 01 	lds	r18, 0x01B0	; 0x8001b0 <appt_cycles>
    1bc4:	30 91 b1 01 	lds	r19, 0x01B1	; 0x8001b1 <appt_cycles+0x1>
    1bc8:	40 91 b2 01 	lds	r20, 0x01B2	; 0x8001b2 <appt_cycles+0x2>
    1bcc:	50 91 b3 01 	lds	r21, 0x01B3	; 0x8001b3 <appt_cycles+0x3>
    1bd0:	60 91 b4 01 	lds	r22, 0x01B4	; 0x8001b4 <appt_cycles+0x4>
    1bd4:	70 91 b5 01 	lds	r23, 0x01B5	; 0x8001b5 <appt_cycles+0x5>
    1bd8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <appt_cycles+0x6>
    1bdc:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <appt_cycles+0x7>
    1be0:	20 93 a8 01 	sts	0x01A8, r18	; 0x8001a8 <appt_cycles_old>
    1be4:	30 93 a9 01 	sts	0x01A9, r19	; 0x8001a9 <appt_cycles_old+0x1>
    1be8:	40 93 aa 01 	sts	0x01AA, r20	; 0x8001aa <appt_cycles_old+0x2>
    1bec:	50 93 ab 01 	sts	0x01AB, r21	; 0x8001ab <appt_cycles_old+0x3>
    1bf0:	60 93 ac 01 	sts	0x01AC, r22	; 0x8001ac <appt_cycles_old+0x4>
    1bf4:	70 93 ad 01 	sts	0x01AD, r23	; 0x8001ad <appt_cycles_old+0x5>
    1bf8:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <appt_cycles_old+0x6>
    1bfc:	90 93 af 01 	sts	0x01AF, r25	; 0x8001af <appt_cycles_old+0x7>
    1c00:	19 86       	std	Y+9, r1	; 0x09
    1c02:	89 85       	ldd	r24, Y+9	; 0x09
    1c04:	88 23       	and	r24, r24
    1c06:	09 f0       	breq	.+2      	; 0x1c0a <appt_update+0x104>
    1c08:	a1 cf       	rjmp	.-190    	; 0x1b4c <appt_update+0x46>
    1c0a:	ce 01       	movw	r24, r28
    1c0c:	0c 96       	adiw	r24, 0x0c	; 12
    1c0e:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <__iRestore>
    1c12:	1a 86       	std	Y+10, r1	; 0x0a
    1c14:	02 c2       	rjmp	.+1028   	; 0x201a <appt_update+0x514>
    1c16:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c18:	88 2f       	mov	r24, r24
    1c1a:	90 e0       	ldi	r25, 0x00	; 0
    1c1c:	88 0f       	add	r24, r24
    1c1e:	99 1f       	adc	r25, r25
    1c20:	9c 01       	movw	r18, r24
    1c22:	22 0f       	add	r18, r18
    1c24:	33 1f       	adc	r19, r19
    1c26:	22 0f       	add	r18, r18
    1c28:	33 1f       	adc	r19, r19
    1c2a:	22 0f       	add	r18, r18
    1c2c:	33 1f       	adc	r19, r19
    1c2e:	82 0f       	add	r24, r18
    1c30:	93 1f       	adc	r25, r19
    1c32:	80 59       	subi	r24, 0x90	; 144
    1c34:	9e 4f       	sbci	r25, 0xFE	; 254
    1c36:	fc 01       	movw	r30, r24
    1c38:	80 81       	ld	r24, Z
    1c3a:	91 81       	ldd	r25, Z+1	; 0x01
    1c3c:	89 2b       	or	r24, r25
    1c3e:	09 f4       	brne	.+2      	; 0x1c42 <appt_update+0x13c>
    1c40:	e9 c1       	rjmp	.+978    	; 0x2014 <appt_update+0x50e>
    1c42:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c44:	e8 2f       	mov	r30, r24
    1c46:	f0 e0       	ldi	r31, 0x00	; 0
    1c48:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c4a:	88 2f       	mov	r24, r24
    1c4c:	90 e0       	ldi	r25, 0x00	; 0
    1c4e:	88 0f       	add	r24, r24
    1c50:	99 1f       	adc	r25, r25
    1c52:	9c 01       	movw	r18, r24
    1c54:	22 0f       	add	r18, r18
    1c56:	33 1f       	adc	r19, r19
    1c58:	22 0f       	add	r18, r18
    1c5a:	33 1f       	adc	r19, r19
    1c5c:	22 0f       	add	r18, r18
    1c5e:	33 1f       	adc	r19, r19
    1c60:	82 0f       	add	r24, r18
    1c62:	93 1f       	adc	r25, r19
    1c64:	88 59       	subi	r24, 0x98	; 152
    1c66:	9e 4f       	sbci	r25, 0xFE	; 254
    1c68:	dc 01       	movw	r26, r24
    1c6a:	ac 90       	ld	r10, X
    1c6c:	dc 01       	movw	r26, r24
    1c6e:	11 96       	adiw	r26, 0x01	; 1
    1c70:	bc 90       	ld	r11, X
    1c72:	dc 01       	movw	r26, r24
    1c74:	12 96       	adiw	r26, 0x02	; 2
    1c76:	cc 90       	ld	r12, X
    1c78:	dc 01       	movw	r26, r24
    1c7a:	13 96       	adiw	r26, 0x03	; 3
    1c7c:	dc 90       	ld	r13, X
    1c7e:	dc 01       	movw	r26, r24
    1c80:	14 96       	adiw	r26, 0x04	; 4
    1c82:	ec 90       	ld	r14, X
    1c84:	dc 01       	movw	r26, r24
    1c86:	15 96       	adiw	r26, 0x05	; 5
    1c88:	fc 90       	ld	r15, X
    1c8a:	dc 01       	movw	r26, r24
    1c8c:	16 96       	adiw	r26, 0x06	; 6
    1c8e:	0c 91       	ld	r16, X
    1c90:	dc 01       	movw	r26, r24
    1c92:	17 96       	adiw	r26, 0x07	; 7
    1c94:	1c 91       	ld	r17, X
    1c96:	2a 2d       	mov	r18, r10
    1c98:	3b 2d       	mov	r19, r11
    1c9a:	4c 2d       	mov	r20, r12
    1c9c:	5d 2d       	mov	r21, r13
    1c9e:	6e 2d       	mov	r22, r14
    1ca0:	7f 2d       	mov	r23, r15
    1ca2:	80 2f       	mov	r24, r16
    1ca4:	91 2f       	mov	r25, r17
    1ca6:	a9 80       	ldd	r10, Y+1	; 0x01
    1ca8:	ba 80       	ldd	r11, Y+2	; 0x02
    1caa:	cb 80       	ldd	r12, Y+3	; 0x03
    1cac:	dc 80       	ldd	r13, Y+4	; 0x04
    1cae:	ed 80       	ldd	r14, Y+5	; 0x05
    1cb0:	fe 80       	ldd	r15, Y+6	; 0x06
    1cb2:	0f 81       	ldd	r16, Y+7	; 0x07
    1cb4:	18 85       	ldd	r17, Y+8	; 0x08
    1cb6:	0e 94 c8 28 	call	0x5190	; 0x5190 <__adddi3>
    1cba:	a2 2e       	mov	r10, r18
    1cbc:	b3 2e       	mov	r11, r19
    1cbe:	c4 2e       	mov	r12, r20
    1cc0:	d5 2e       	mov	r13, r21
    1cc2:	e6 2e       	mov	r14, r22
    1cc4:	f7 2e       	mov	r15, r23
    1cc6:	08 2f       	mov	r16, r24
    1cc8:	19 2f       	mov	r17, r25
    1cca:	cf 01       	movw	r24, r30
    1ccc:	88 0f       	add	r24, r24
    1cce:	99 1f       	adc	r25, r25
    1cd0:	9c 01       	movw	r18, r24
    1cd2:	22 0f       	add	r18, r18
    1cd4:	33 1f       	adc	r19, r19
    1cd6:	22 0f       	add	r18, r18
    1cd8:	33 1f       	adc	r19, r19
    1cda:	22 0f       	add	r18, r18
    1cdc:	33 1f       	adc	r19, r19
    1cde:	82 0f       	add	r24, r18
    1ce0:	93 1f       	adc	r25, r19
    1ce2:	88 59       	subi	r24, 0x98	; 152
    1ce4:	9e 4f       	sbci	r25, 0xFE	; 254
    1ce6:	fc 01       	movw	r30, r24
    1ce8:	a0 82       	st	Z, r10
    1cea:	dc 01       	movw	r26, r24
    1cec:	11 96       	adiw	r26, 0x01	; 1
    1cee:	bc 92       	st	X, r11
    1cf0:	fc 01       	movw	r30, r24
    1cf2:	c2 82       	std	Z+2, r12	; 0x02
    1cf4:	dc 01       	movw	r26, r24
    1cf6:	13 96       	adiw	r26, 0x03	; 3
    1cf8:	dc 92       	st	X, r13
    1cfa:	fc 01       	movw	r30, r24
    1cfc:	e4 82       	std	Z+4, r14	; 0x04
    1cfe:	dc 01       	movw	r26, r24
    1d00:	15 96       	adiw	r26, 0x05	; 5
    1d02:	fc 92       	st	X, r15
    1d04:	fc 01       	movw	r30, r24
    1d06:	06 83       	std	Z+6, r16	; 0x06
    1d08:	dc 01       	movw	r26, r24
    1d0a:	17 96       	adiw	r26, 0x07	; 7
    1d0c:	1c 93       	st	X, r17
    1d0e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d10:	88 2f       	mov	r24, r24
    1d12:	90 e0       	ldi	r25, 0x00	; 0
    1d14:	88 0f       	add	r24, r24
    1d16:	99 1f       	adc	r25, r25
    1d18:	9c 01       	movw	r18, r24
    1d1a:	22 0f       	add	r18, r18
    1d1c:	33 1f       	adc	r19, r19
    1d1e:	22 0f       	add	r18, r18
    1d20:	33 1f       	adc	r19, r19
    1d22:	22 0f       	add	r18, r18
    1d24:	33 1f       	adc	r19, r19
    1d26:	82 0f       	add	r24, r18
    1d28:	93 1f       	adc	r25, r19
    1d2a:	88 59       	subi	r24, 0x98	; 152
    1d2c:	9e 4f       	sbci	r25, 0xFE	; 254
    1d2e:	fc 01       	movw	r30, r24
    1d30:	a0 80       	ld	r10, Z
    1d32:	dc 01       	movw	r26, r24
    1d34:	11 96       	adiw	r26, 0x01	; 1
    1d36:	bc 90       	ld	r11, X
    1d38:	fc 01       	movw	r30, r24
    1d3a:	c2 80       	ldd	r12, Z+2	; 0x02
    1d3c:	dc 01       	movw	r26, r24
    1d3e:	13 96       	adiw	r26, 0x03	; 3
    1d40:	dc 90       	ld	r13, X
    1d42:	fc 01       	movw	r30, r24
    1d44:	e4 80       	ldd	r14, Z+4	; 0x04
    1d46:	dc 01       	movw	r26, r24
    1d48:	15 96       	adiw	r26, 0x05	; 5
    1d4a:	fc 90       	ld	r15, X
    1d4c:	fc 01       	movw	r30, r24
    1d4e:	06 81       	ldd	r16, Z+6	; 0x06
    1d50:	dc 01       	movw	r26, r24
    1d52:	17 96       	adiw	r26, 0x07	; 7
    1d54:	1c 91       	ld	r17, X
    1d56:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d58:	88 2f       	mov	r24, r24
    1d5a:	90 e0       	ldi	r25, 0x00	; 0
    1d5c:	88 0f       	add	r24, r24
    1d5e:	99 1f       	adc	r25, r25
    1d60:	9c 01       	movw	r18, r24
    1d62:	22 0f       	add	r18, r18
    1d64:	33 1f       	adc	r19, r19
    1d66:	22 0f       	add	r18, r18
    1d68:	33 1f       	adc	r19, r19
    1d6a:	22 0f       	add	r18, r18
    1d6c:	33 1f       	adc	r19, r19
    1d6e:	82 0f       	add	r24, r18
    1d70:	93 1f       	adc	r25, r19
    1d72:	80 5a       	subi	r24, 0xA0	; 160
    1d74:	9e 4f       	sbci	r25, 0xFE	; 254
    1d76:	fc 01       	movw	r30, r24
    1d78:	20 80       	ld	r2, Z
    1d7a:	dc 01       	movw	r26, r24
    1d7c:	11 96       	adiw	r26, 0x01	; 1
    1d7e:	3c 90       	ld	r3, X
    1d80:	fc 01       	movw	r30, r24
    1d82:	42 80       	ldd	r4, Z+2	; 0x02
    1d84:	dc 01       	movw	r26, r24
    1d86:	13 96       	adiw	r26, 0x03	; 3
    1d88:	5c 90       	ld	r5, X
    1d8a:	fc 01       	movw	r30, r24
    1d8c:	64 80       	ldd	r6, Z+4	; 0x04
    1d8e:	dc 01       	movw	r26, r24
    1d90:	15 96       	adiw	r26, 0x05	; 5
    1d92:	7c 90       	ld	r7, X
    1d94:	fc 01       	movw	r30, r24
    1d96:	86 80       	ldd	r8, Z+6	; 0x06
    1d98:	dc 01       	movw	r26, r24
    1d9a:	17 96       	adiw	r26, 0x07	; 7
    1d9c:	9c 90       	ld	r9, X
    1d9e:	2a 2d       	mov	r18, r10
    1da0:	3b 2d       	mov	r19, r11
    1da2:	4c 2d       	mov	r20, r12
    1da4:	5d 2d       	mov	r21, r13
    1da6:	6e 2d       	mov	r22, r14
    1da8:	7f 2d       	mov	r23, r15
    1daa:	80 2f       	mov	r24, r16
    1dac:	91 2f       	mov	r25, r17
    1dae:	a2 2c       	mov	r10, r2
    1db0:	b3 2c       	mov	r11, r3
    1db2:	c4 2c       	mov	r12, r4
    1db4:	d5 2c       	mov	r13, r5
    1db6:	e6 2c       	mov	r14, r6
    1db8:	f7 2c       	mov	r15, r7
    1dba:	08 2d       	mov	r16, r8
    1dbc:	19 2d       	mov	r17, r9
    1dbe:	0e 94 e6 28 	call	0x51cc	; 0x51cc <__cmpdi2>
    1dc2:	08 f4       	brcc	.+2      	; 0x1dc6 <appt_update+0x2c0>
    1dc4:	27 c1       	rjmp	.+590    	; 0x2014 <appt_update+0x50e>
    1dc6:	8a 85       	ldd	r24, Y+10	; 0x0a
    1dc8:	e8 2f       	mov	r30, r24
    1dca:	f0 e0       	ldi	r31, 0x00	; 0
    1dcc:	8a 85       	ldd	r24, Y+10	; 0x0a
    1dce:	88 2f       	mov	r24, r24
    1dd0:	90 e0       	ldi	r25, 0x00	; 0
    1dd2:	88 0f       	add	r24, r24
    1dd4:	99 1f       	adc	r25, r25
    1dd6:	9c 01       	movw	r18, r24
    1dd8:	22 0f       	add	r18, r18
    1dda:	33 1f       	adc	r19, r19
    1ddc:	22 0f       	add	r18, r18
    1dde:	33 1f       	adc	r19, r19
    1de0:	22 0f       	add	r18, r18
    1de2:	33 1f       	adc	r19, r19
    1de4:	82 0f       	add	r24, r18
    1de6:	93 1f       	adc	r25, r19
    1de8:	88 59       	subi	r24, 0x98	; 152
    1dea:	9e 4f       	sbci	r25, 0xFE	; 254
    1dec:	dc 01       	movw	r26, r24
    1dee:	ac 90       	ld	r10, X
    1df0:	dc 01       	movw	r26, r24
    1df2:	11 96       	adiw	r26, 0x01	; 1
    1df4:	bc 90       	ld	r11, X
    1df6:	dc 01       	movw	r26, r24
    1df8:	12 96       	adiw	r26, 0x02	; 2
    1dfa:	cc 90       	ld	r12, X
    1dfc:	dc 01       	movw	r26, r24
    1dfe:	13 96       	adiw	r26, 0x03	; 3
    1e00:	dc 90       	ld	r13, X
    1e02:	dc 01       	movw	r26, r24
    1e04:	14 96       	adiw	r26, 0x04	; 4
    1e06:	ec 90       	ld	r14, X
    1e08:	dc 01       	movw	r26, r24
    1e0a:	15 96       	adiw	r26, 0x05	; 5
    1e0c:	fc 90       	ld	r15, X
    1e0e:	dc 01       	movw	r26, r24
    1e10:	16 96       	adiw	r26, 0x06	; 6
    1e12:	0c 91       	ld	r16, X
    1e14:	dc 01       	movw	r26, r24
    1e16:	17 96       	adiw	r26, 0x07	; 7
    1e18:	1c 91       	ld	r17, X
    1e1a:	8a 85       	ldd	r24, Y+10	; 0x0a
    1e1c:	88 2f       	mov	r24, r24
    1e1e:	90 e0       	ldi	r25, 0x00	; 0
    1e20:	88 0f       	add	r24, r24
    1e22:	99 1f       	adc	r25, r25
    1e24:	9c 01       	movw	r18, r24
    1e26:	22 0f       	add	r18, r18
    1e28:	33 1f       	adc	r19, r19
    1e2a:	22 0f       	add	r18, r18
    1e2c:	33 1f       	adc	r19, r19
    1e2e:	22 0f       	add	r18, r18
    1e30:	33 1f       	adc	r19, r19
    1e32:	82 0f       	add	r24, r18
    1e34:	93 1f       	adc	r25, r19
    1e36:	80 5a       	subi	r24, 0xA0	; 160
    1e38:	9e 4f       	sbci	r25, 0xFE	; 254
    1e3a:	dc 01       	movw	r26, r24
    1e3c:	2c 90       	ld	r2, X
    1e3e:	dc 01       	movw	r26, r24
    1e40:	11 96       	adiw	r26, 0x01	; 1
    1e42:	3c 90       	ld	r3, X
    1e44:	dc 01       	movw	r26, r24
    1e46:	12 96       	adiw	r26, 0x02	; 2
    1e48:	4c 90       	ld	r4, X
    1e4a:	dc 01       	movw	r26, r24
    1e4c:	13 96       	adiw	r26, 0x03	; 3
    1e4e:	5c 90       	ld	r5, X
    1e50:	dc 01       	movw	r26, r24
    1e52:	14 96       	adiw	r26, 0x04	; 4
    1e54:	6c 90       	ld	r6, X
    1e56:	dc 01       	movw	r26, r24
    1e58:	15 96       	adiw	r26, 0x05	; 5
    1e5a:	7c 90       	ld	r7, X
    1e5c:	dc 01       	movw	r26, r24
    1e5e:	16 96       	adiw	r26, 0x06	; 6
    1e60:	8c 90       	ld	r8, X
    1e62:	dc 01       	movw	r26, r24
    1e64:	17 96       	adiw	r26, 0x07	; 7
    1e66:	9c 90       	ld	r9, X
    1e68:	2a 2d       	mov	r18, r10
    1e6a:	3b 2d       	mov	r19, r11
    1e6c:	4c 2d       	mov	r20, r12
    1e6e:	5d 2d       	mov	r21, r13
    1e70:	6e 2d       	mov	r22, r14
    1e72:	7f 2d       	mov	r23, r15
    1e74:	80 2f       	mov	r24, r16
    1e76:	91 2f       	mov	r25, r17
    1e78:	a2 2c       	mov	r10, r2
    1e7a:	b3 2c       	mov	r11, r3
    1e7c:	c4 2c       	mov	r12, r4
    1e7e:	d5 2c       	mov	r13, r5
    1e80:	e6 2c       	mov	r14, r6
    1e82:	f7 2c       	mov	r15, r7
    1e84:	08 2d       	mov	r16, r8
    1e86:	19 2d       	mov	r17, r9
    1e88:	0e 94 dd 28 	call	0x51ba	; 0x51ba <__subdi3>
    1e8c:	a2 2e       	mov	r10, r18
    1e8e:	b3 2e       	mov	r11, r19
    1e90:	c4 2e       	mov	r12, r20
    1e92:	d5 2e       	mov	r13, r21
    1e94:	e6 2e       	mov	r14, r22
    1e96:	f7 2e       	mov	r15, r23
    1e98:	08 2f       	mov	r16, r24
    1e9a:	19 2f       	mov	r17, r25
    1e9c:	cf 01       	movw	r24, r30
    1e9e:	88 0f       	add	r24, r24
    1ea0:	99 1f       	adc	r25, r25
    1ea2:	9c 01       	movw	r18, r24
    1ea4:	22 0f       	add	r18, r18
    1ea6:	33 1f       	adc	r19, r19
    1ea8:	22 0f       	add	r18, r18
    1eaa:	33 1f       	adc	r19, r19
    1eac:	22 0f       	add	r18, r18
    1eae:	33 1f       	adc	r19, r19
    1eb0:	82 0f       	add	r24, r18
    1eb2:	93 1f       	adc	r25, r19
    1eb4:	88 59       	subi	r24, 0x98	; 152
    1eb6:	9e 4f       	sbci	r25, 0xFE	; 254
    1eb8:	fc 01       	movw	r30, r24
    1eba:	a0 82       	st	Z, r10
    1ebc:	dc 01       	movw	r26, r24
    1ebe:	11 96       	adiw	r26, 0x01	; 1
    1ec0:	bc 92       	st	X, r11
    1ec2:	fc 01       	movw	r30, r24
    1ec4:	c2 82       	std	Z+2, r12	; 0x02
    1ec6:	dc 01       	movw	r26, r24
    1ec8:	13 96       	adiw	r26, 0x03	; 3
    1eca:	dc 92       	st	X, r13
    1ecc:	fc 01       	movw	r30, r24
    1ece:	e4 82       	std	Z+4, r14	; 0x04
    1ed0:	dc 01       	movw	r26, r24
    1ed2:	15 96       	adiw	r26, 0x05	; 5
    1ed4:	fc 92       	st	X, r15
    1ed6:	fc 01       	movw	r30, r24
    1ed8:	06 83       	std	Z+6, r16	; 0x06
    1eda:	dc 01       	movw	r26, r24
    1edc:	17 96       	adiw	r26, 0x07	; 7
    1ede:	1c 93       	st	X, r17
    1ee0:	8a 85       	ldd	r24, Y+10	; 0x0a
    1ee2:	88 2f       	mov	r24, r24
    1ee4:	90 e0       	ldi	r25, 0x00	; 0
    1ee6:	88 0f       	add	r24, r24
    1ee8:	99 1f       	adc	r25, r25
    1eea:	9c 01       	movw	r18, r24
    1eec:	22 0f       	add	r18, r18
    1eee:	33 1f       	adc	r19, r19
    1ef0:	22 0f       	add	r18, r18
    1ef2:	33 1f       	adc	r19, r19
    1ef4:	22 0f       	add	r18, r18
    1ef6:	33 1f       	adc	r19, r19
    1ef8:	82 0f       	add	r24, r18
    1efa:	93 1f       	adc	r25, r19
    1efc:	88 59       	subi	r24, 0x98	; 152
    1efe:	9e 4f       	sbci	r25, 0xFE	; 254
    1f00:	fc 01       	movw	r30, r24
    1f02:	a0 80       	ld	r10, Z
    1f04:	dc 01       	movw	r26, r24
    1f06:	11 96       	adiw	r26, 0x01	; 1
    1f08:	bc 90       	ld	r11, X
    1f0a:	fc 01       	movw	r30, r24
    1f0c:	c2 80       	ldd	r12, Z+2	; 0x02
    1f0e:	dc 01       	movw	r26, r24
    1f10:	13 96       	adiw	r26, 0x03	; 3
    1f12:	dc 90       	ld	r13, X
    1f14:	fc 01       	movw	r30, r24
    1f16:	e4 80       	ldd	r14, Z+4	; 0x04
    1f18:	dc 01       	movw	r26, r24
    1f1a:	15 96       	adiw	r26, 0x05	; 5
    1f1c:	fc 90       	ld	r15, X
    1f1e:	fc 01       	movw	r30, r24
    1f20:	06 81       	ldd	r16, Z+6	; 0x06
    1f22:	dc 01       	movw	r26, r24
    1f24:	17 96       	adiw	r26, 0x07	; 7
    1f26:	1c 91       	ld	r17, X
    1f28:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f2a:	88 2f       	mov	r24, r24
    1f2c:	90 e0       	ldi	r25, 0x00	; 0
    1f2e:	88 0f       	add	r24, r24
    1f30:	99 1f       	adc	r25, r25
    1f32:	9c 01       	movw	r18, r24
    1f34:	22 0f       	add	r18, r18
    1f36:	33 1f       	adc	r19, r19
    1f38:	22 0f       	add	r18, r18
    1f3a:	33 1f       	adc	r19, r19
    1f3c:	22 0f       	add	r18, r18
    1f3e:	33 1f       	adc	r19, r19
    1f40:	82 0f       	add	r24, r18
    1f42:	93 1f       	adc	r25, r19
    1f44:	80 5a       	subi	r24, 0xA0	; 160
    1f46:	9e 4f       	sbci	r25, 0xFE	; 254
    1f48:	fc 01       	movw	r30, r24
    1f4a:	20 80       	ld	r2, Z
    1f4c:	dc 01       	movw	r26, r24
    1f4e:	11 96       	adiw	r26, 0x01	; 1
    1f50:	3c 90       	ld	r3, X
    1f52:	fc 01       	movw	r30, r24
    1f54:	42 80       	ldd	r4, Z+2	; 0x02
    1f56:	dc 01       	movw	r26, r24
    1f58:	13 96       	adiw	r26, 0x03	; 3
    1f5a:	5c 90       	ld	r5, X
    1f5c:	fc 01       	movw	r30, r24
    1f5e:	64 80       	ldd	r6, Z+4	; 0x04
    1f60:	dc 01       	movw	r26, r24
    1f62:	15 96       	adiw	r26, 0x05	; 5
    1f64:	7c 90       	ld	r7, X
    1f66:	fc 01       	movw	r30, r24
    1f68:	86 80       	ldd	r8, Z+6	; 0x06
    1f6a:	dc 01       	movw	r26, r24
    1f6c:	17 96       	adiw	r26, 0x07	; 7
    1f6e:	9c 90       	ld	r9, X
    1f70:	2a 2d       	mov	r18, r10
    1f72:	3b 2d       	mov	r19, r11
    1f74:	4c 2d       	mov	r20, r12
    1f76:	5d 2d       	mov	r21, r13
    1f78:	6e 2d       	mov	r22, r14
    1f7a:	7f 2d       	mov	r23, r15
    1f7c:	80 2f       	mov	r24, r16
    1f7e:	91 2f       	mov	r25, r17
    1f80:	a2 2c       	mov	r10, r2
    1f82:	b3 2c       	mov	r11, r3
    1f84:	c4 2c       	mov	r12, r4
    1f86:	d5 2c       	mov	r13, r5
    1f88:	e6 2c       	mov	r14, r6
    1f8a:	f7 2c       	mov	r15, r7
    1f8c:	08 2d       	mov	r16, r8
    1f8e:	19 2d       	mov	r17, r9
    1f90:	0e 94 e6 28 	call	0x51cc	; 0x51cc <__cmpdi2>
    1f94:	20 f1       	brcs	.+72     	; 0x1fde <appt_update+0x4d8>
    1f96:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f98:	88 2f       	mov	r24, r24
    1f9a:	90 e0       	ldi	r25, 0x00	; 0
    1f9c:	88 0f       	add	r24, r24
    1f9e:	99 1f       	adc	r25, r25
    1fa0:	9c 01       	movw	r18, r24
    1fa2:	22 0f       	add	r18, r18
    1fa4:	33 1f       	adc	r19, r19
    1fa6:	22 0f       	add	r18, r18
    1fa8:	33 1f       	adc	r19, r19
    1faa:	22 0f       	add	r18, r18
    1fac:	33 1f       	adc	r19, r19
    1fae:	82 0f       	add	r24, r18
    1fb0:	93 1f       	adc	r25, r19
    1fb2:	88 59       	subi	r24, 0x98	; 152
    1fb4:	9e 4f       	sbci	r25, 0xFE	; 254
    1fb6:	fc 01       	movw	r30, r24
    1fb8:	10 82       	st	Z, r1
    1fba:	dc 01       	movw	r26, r24
    1fbc:	11 96       	adiw	r26, 0x01	; 1
    1fbe:	1c 92       	st	X, r1
    1fc0:	fc 01       	movw	r30, r24
    1fc2:	12 82       	std	Z+2, r1	; 0x02
    1fc4:	dc 01       	movw	r26, r24
    1fc6:	13 96       	adiw	r26, 0x03	; 3
    1fc8:	1c 92       	st	X, r1
    1fca:	fc 01       	movw	r30, r24
    1fcc:	14 82       	std	Z+4, r1	; 0x04
    1fce:	dc 01       	movw	r26, r24
    1fd0:	15 96       	adiw	r26, 0x05	; 5
    1fd2:	1c 92       	st	X, r1
    1fd4:	fc 01       	movw	r30, r24
    1fd6:	16 82       	std	Z+6, r1	; 0x06
    1fd8:	dc 01       	movw	r26, r24
    1fda:	17 96       	adiw	r26, 0x07	; 7
    1fdc:	1c 92       	st	X, r1
    1fde:	8a 85       	ldd	r24, Y+10	; 0x0a
    1fe0:	88 2f       	mov	r24, r24
    1fe2:	90 e0       	ldi	r25, 0x00	; 0
    1fe4:	88 0f       	add	r24, r24
    1fe6:	99 1f       	adc	r25, r25
    1fe8:	9c 01       	movw	r18, r24
    1fea:	22 0f       	add	r18, r18
    1fec:	33 1f       	adc	r19, r19
    1fee:	22 0f       	add	r18, r18
    1ff0:	33 1f       	adc	r19, r19
    1ff2:	22 0f       	add	r18, r18
    1ff4:	33 1f       	adc	r19, r19
    1ff6:	82 0f       	add	r24, r18
    1ff8:	93 1f       	adc	r25, r19
    1ffa:	80 59       	subi	r24, 0x90	; 144
    1ffc:	9e 4f       	sbci	r25, 0xFE	; 254
    1ffe:	fc 01       	movw	r30, r24
    2000:	80 81       	ld	r24, Z
    2002:	91 81       	ldd	r25, Z+1	; 0x01
    2004:	fc 01       	movw	r30, r24
    2006:	09 95       	icall
    2008:	8b 87       	std	Y+11, r24	; 0x0b
    200a:	8b 85       	ldd	r24, Y+11	; 0x0b
    200c:	88 23       	and	r24, r24
    200e:	11 f0       	breq	.+4      	; 0x2014 <appt_update+0x50e>
    2010:	8b 85       	ldd	r24, Y+11	; 0x0b
    2012:	08 c0       	rjmp	.+16     	; 0x2024 <appt_update+0x51e>
    2014:	8a 85       	ldd	r24, Y+10	; 0x0a
    2016:	8f 5f       	subi	r24, 0xFF	; 255
    2018:	8a 87       	std	Y+10, r24	; 0x0a
    201a:	8a 85       	ldd	r24, Y+10	; 0x0a
    201c:	84 30       	cpi	r24, 0x04	; 4
    201e:	08 f4       	brcc	.+2      	; 0x2022 <appt_update+0x51c>
    2020:	fa cd       	rjmp	.-1036   	; 0x1c16 <appt_update+0x110>
    2022:	80 e0       	ldi	r24, 0x00	; 0
    2024:	2c 96       	adiw	r28, 0x0c	; 12
    2026:	0f b6       	in	r0, 0x3f	; 63
    2028:	f8 94       	cli
    202a:	de bf       	out	0x3e, r29	; 62
    202c:	0f be       	out	0x3f, r0	; 63
    202e:	cd bf       	out	0x3d, r28	; 61
    2030:	df 91       	pop	r29
    2032:	cf 91       	pop	r28
    2034:	1f 91       	pop	r17
    2036:	0f 91       	pop	r16
    2038:	ff 90       	pop	r15
    203a:	ef 90       	pop	r14
    203c:	df 90       	pop	r13
    203e:	cf 90       	pop	r12
    2040:	bf 90       	pop	r11
    2042:	af 90       	pop	r10
    2044:	9f 90       	pop	r9
    2046:	8f 90       	pop	r8
    2048:	7f 90       	pop	r7
    204a:	6f 90       	pop	r6
    204c:	5f 90       	pop	r5
    204e:	4f 90       	pop	r4
    2050:	3f 90       	pop	r3
    2052:	2f 90       	pop	r2
    2054:	08 95       	ret

00002056 <appt_set_callback>:
    2056:	8f 92       	push	r8
    2058:	9f 92       	push	r9
    205a:	af 92       	push	r10
    205c:	bf 92       	push	r11
    205e:	cf 92       	push	r12
    2060:	df 92       	push	r13
    2062:	ef 92       	push	r14
    2064:	ff 92       	push	r15
    2066:	0f 93       	push	r16
    2068:	1f 93       	push	r17
    206a:	cf 93       	push	r28
    206c:	df 93       	push	r29
    206e:	cd b7       	in	r28, 0x3d	; 61
    2070:	de b7       	in	r29, 0x3e	; 62
    2072:	27 97       	sbiw	r28, 0x07	; 7
    2074:	0f b6       	in	r0, 0x3f	; 63
    2076:	f8 94       	cli
    2078:	de bf       	out	0x3e, r29	; 62
    207a:	0f be       	out	0x3f, r0	; 63
    207c:	cd bf       	out	0x3d, r28	; 61
    207e:	69 83       	std	Y+1, r22	; 0x01
    2080:	7a 83       	std	Y+2, r23	; 0x02
    2082:	8b 83       	std	Y+3, r24	; 0x03
    2084:	9c 83       	std	Y+4, r25	; 0x04
    2086:	5e 83       	std	Y+6, r21	; 0x06
    2088:	4d 83       	std	Y+5, r20	; 0x05
    208a:	2f 83       	std	Y+7, r18	; 0x07
    208c:	8f 81       	ldd	r24, Y+7	; 0x07
    208e:	84 30       	cpi	r24, 0x04	; 4
    2090:	10 f0       	brcs	.+4      	; 0x2096 <appt_set_callback+0x40>
    2092:	0e 94 03 29 	call	0x5206	; 0x5206 <abort>
    2096:	8f 81       	ldd	r24, Y+7	; 0x07
    2098:	88 2e       	mov	r8, r24
    209a:	91 2c       	mov	r9, r1
    209c:	89 81       	ldd	r24, Y+1	; 0x01
    209e:	9a 81       	ldd	r25, Y+2	; 0x02
    20a0:	ab 81       	ldd	r26, Y+3	; 0x03
    20a2:	bc 81       	ldd	r27, Y+4	; 0x04
    20a4:	bc 01       	movw	r22, r24
    20a6:	cd 01       	movw	r24, r26
    20a8:	0e 94 8e 0b 	call	0x171c	; 0x171c <seconds_to_cycles>
    20ac:	a2 2e       	mov	r10, r18
    20ae:	b3 2e       	mov	r11, r19
    20b0:	c4 2e       	mov	r12, r20
    20b2:	d5 2e       	mov	r13, r21
    20b4:	e6 2e       	mov	r14, r22
    20b6:	f7 2e       	mov	r15, r23
    20b8:	08 2f       	mov	r16, r24
    20ba:	19 2f       	mov	r17, r25
    20bc:	c4 01       	movw	r24, r8
    20be:	88 0f       	add	r24, r24
    20c0:	99 1f       	adc	r25, r25
    20c2:	9c 01       	movw	r18, r24
    20c4:	22 0f       	add	r18, r18
    20c6:	33 1f       	adc	r19, r19
    20c8:	22 0f       	add	r18, r18
    20ca:	33 1f       	adc	r19, r19
    20cc:	22 0f       	add	r18, r18
    20ce:	33 1f       	adc	r19, r19
    20d0:	82 0f       	add	r24, r18
    20d2:	93 1f       	adc	r25, r19
    20d4:	80 5a       	subi	r24, 0xA0	; 160
    20d6:	9e 4f       	sbci	r25, 0xFE	; 254
    20d8:	fc 01       	movw	r30, r24
    20da:	a0 82       	st	Z, r10
    20dc:	fc 01       	movw	r30, r24
    20de:	b1 82       	std	Z+1, r11	; 0x01
    20e0:	fc 01       	movw	r30, r24
    20e2:	c2 82       	std	Z+2, r12	; 0x02
    20e4:	fc 01       	movw	r30, r24
    20e6:	d3 82       	std	Z+3, r13	; 0x03
    20e8:	fc 01       	movw	r30, r24
    20ea:	e4 82       	std	Z+4, r14	; 0x04
    20ec:	fc 01       	movw	r30, r24
    20ee:	f5 82       	std	Z+5, r15	; 0x05
    20f0:	fc 01       	movw	r30, r24
    20f2:	06 83       	std	Z+6, r16	; 0x06
    20f4:	fc 01       	movw	r30, r24
    20f6:	17 83       	std	Z+7, r17	; 0x07
    20f8:	c4 01       	movw	r24, r8
    20fa:	88 0f       	add	r24, r24
    20fc:	99 1f       	adc	r25, r25
    20fe:	9c 01       	movw	r18, r24
    2100:	22 0f       	add	r18, r18
    2102:	33 1f       	adc	r19, r19
    2104:	22 0f       	add	r18, r18
    2106:	33 1f       	adc	r19, r19
    2108:	22 0f       	add	r18, r18
    210a:	33 1f       	adc	r19, r19
    210c:	82 0f       	add	r24, r18
    210e:	93 1f       	adc	r25, r19
    2110:	88 59       	subi	r24, 0x98	; 152
    2112:	9e 4f       	sbci	r25, 0xFE	; 254
    2114:	fc 01       	movw	r30, r24
    2116:	10 82       	st	Z, r1
    2118:	fc 01       	movw	r30, r24
    211a:	11 82       	std	Z+1, r1	; 0x01
    211c:	fc 01       	movw	r30, r24
    211e:	12 82       	std	Z+2, r1	; 0x02
    2120:	fc 01       	movw	r30, r24
    2122:	13 82       	std	Z+3, r1	; 0x03
    2124:	fc 01       	movw	r30, r24
    2126:	14 82       	std	Z+4, r1	; 0x04
    2128:	fc 01       	movw	r30, r24
    212a:	15 82       	std	Z+5, r1	; 0x05
    212c:	fc 01       	movw	r30, r24
    212e:	16 82       	std	Z+6, r1	; 0x06
    2130:	fc 01       	movw	r30, r24
    2132:	17 82       	std	Z+7, r1	; 0x07
    2134:	c4 01       	movw	r24, r8
    2136:	88 0f       	add	r24, r24
    2138:	99 1f       	adc	r25, r25
    213a:	9c 01       	movw	r18, r24
    213c:	22 0f       	add	r18, r18
    213e:	33 1f       	adc	r19, r19
    2140:	22 0f       	add	r18, r18
    2142:	33 1f       	adc	r19, r19
    2144:	22 0f       	add	r18, r18
    2146:	33 1f       	adc	r19, r19
    2148:	82 0f       	add	r24, r18
    214a:	93 1f       	adc	r25, r19
    214c:	80 59       	subi	r24, 0x90	; 144
    214e:	9e 4f       	sbci	r25, 0xFE	; 254
    2150:	2d 81       	ldd	r18, Y+5	; 0x05
    2152:	3e 81       	ldd	r19, Y+6	; 0x06
    2154:	fc 01       	movw	r30, r24
    2156:	31 83       	std	Z+1, r19	; 0x01
    2158:	20 83       	st	Z, r18
    215a:	00 00       	nop
    215c:	27 96       	adiw	r28, 0x07	; 7
    215e:	0f b6       	in	r0, 0x3f	; 63
    2160:	f8 94       	cli
    2162:	de bf       	out	0x3e, r29	; 62
    2164:	0f be       	out	0x3f, r0	; 63
    2166:	cd bf       	out	0x3d, r28	; 61
    2168:	df 91       	pop	r29
    216a:	cf 91       	pop	r28
    216c:	1f 91       	pop	r17
    216e:	0f 91       	pop	r16
    2170:	ff 90       	pop	r15
    2172:	ef 90       	pop	r14
    2174:	df 90       	pop	r13
    2176:	cf 90       	pop	r12
    2178:	bf 90       	pop	r11
    217a:	af 90       	pop	r10
    217c:	9f 90       	pop	r9
    217e:	8f 90       	pop	r8
    2180:	08 95       	ret

00002182 <__vector_16>:


// ------------------------------ ISR ------------------------------------
ISR(TIMER0_COMPA_vect)
{
    2182:	1f 92       	push	r1
    2184:	0f 92       	push	r0
    2186:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    218a:	0f 92       	push	r0
    218c:	11 24       	eor	r1, r1
    218e:	af 92       	push	r10
    2190:	bf 92       	push	r11
    2192:	cf 92       	push	r12
    2194:	df 92       	push	r13
    2196:	ef 92       	push	r14
    2198:	ff 92       	push	r15
    219a:	0f 93       	push	r16
    219c:	1f 93       	push	r17
    219e:	2f 93       	push	r18
    21a0:	3f 93       	push	r19
    21a2:	4f 93       	push	r20
    21a4:	5f 93       	push	r21
    21a6:	6f 93       	push	r22
    21a8:	7f 93       	push	r23
    21aa:	8f 93       	push	r24
    21ac:	9f 93       	push	r25
    21ae:	af 93       	push	r26
    21b0:	cf 93       	push	r28
    21b2:	df 93       	push	r29
    21b4:	cd b7       	in	r28, 0x3d	; 61
    21b6:	de b7       	in	r29, 0x3e	; 62
	++appt_cycles;
    21b8:	a0 90 b0 01 	lds	r10, 0x01B0	; 0x8001b0 <appt_cycles>
    21bc:	b0 90 b1 01 	lds	r11, 0x01B1	; 0x8001b1 <appt_cycles+0x1>
    21c0:	c0 90 b2 01 	lds	r12, 0x01B2	; 0x8001b2 <appt_cycles+0x2>
    21c4:	d0 90 b3 01 	lds	r13, 0x01B3	; 0x8001b3 <appt_cycles+0x3>
    21c8:	e0 90 b4 01 	lds	r14, 0x01B4	; 0x8001b4 <appt_cycles+0x4>
    21cc:	f0 90 b5 01 	lds	r15, 0x01B5	; 0x8001b5 <appt_cycles+0x5>
    21d0:	00 91 b6 01 	lds	r16, 0x01B6	; 0x8001b6 <appt_cycles+0x6>
    21d4:	10 91 b7 01 	lds	r17, 0x01B7	; 0x8001b7 <appt_cycles+0x7>
    21d8:	2a 2d       	mov	r18, r10
    21da:	3b 2d       	mov	r19, r11
    21dc:	4c 2d       	mov	r20, r12
    21de:	5d 2d       	mov	r21, r13
    21e0:	6e 2d       	mov	r22, r14
    21e2:	7f 2d       	mov	r23, r15
    21e4:	80 2f       	mov	r24, r16
    21e6:	91 2f       	mov	r25, r17
    21e8:	a1 e0       	ldi	r26, 0x01	; 1
    21ea:	0e 94 d1 28 	call	0x51a2	; 0x51a2 <__adddi3_s8>
    21ee:	a2 2e       	mov	r10, r18
    21f0:	b3 2e       	mov	r11, r19
    21f2:	c4 2e       	mov	r12, r20
    21f4:	d5 2e       	mov	r13, r21
    21f6:	e6 2e       	mov	r14, r22
    21f8:	f7 2e       	mov	r15, r23
    21fa:	08 2f       	mov	r16, r24
    21fc:	19 2f       	mov	r17, r25
    21fe:	a0 92 b0 01 	sts	0x01B0, r10	; 0x8001b0 <appt_cycles>
    2202:	b0 92 b1 01 	sts	0x01B1, r11	; 0x8001b1 <appt_cycles+0x1>
    2206:	c0 92 b2 01 	sts	0x01B2, r12	; 0x8001b2 <appt_cycles+0x2>
    220a:	d0 92 b3 01 	sts	0x01B3, r13	; 0x8001b3 <appt_cycles+0x3>
    220e:	e0 92 b4 01 	sts	0x01B4, r14	; 0x8001b4 <appt_cycles+0x4>
    2212:	f0 92 b5 01 	sts	0x01B5, r15	; 0x8001b5 <appt_cycles+0x5>
    2216:	00 93 b6 01 	sts	0x01B6, r16	; 0x8001b6 <appt_cycles+0x6>
    221a:	10 93 b7 01 	sts	0x01B7, r17	; 0x8001b7 <appt_cycles+0x7>
}
    221e:	00 00       	nop
    2220:	df 91       	pop	r29
    2222:	cf 91       	pop	r28
    2224:	af 91       	pop	r26
    2226:	9f 91       	pop	r25
    2228:	8f 91       	pop	r24
    222a:	7f 91       	pop	r23
    222c:	6f 91       	pop	r22
    222e:	5f 91       	pop	r21
    2230:	4f 91       	pop	r20
    2232:	3f 91       	pop	r19
    2234:	2f 91       	pop	r18
    2236:	1f 91       	pop	r17
    2238:	0f 91       	pop	r16
    223a:	ff 90       	pop	r15
    223c:	ef 90       	pop	r14
    223e:	df 90       	pop	r13
    2240:	cf 90       	pop	r12
    2242:	bf 90       	pop	r11
    2244:	af 90       	pop	r10
    2246:	0f 90       	pop	r0
    2248:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    224c:	0f 90       	pop	r0
    224e:	1f 90       	pop	r1
    2250:	18 95       	reti

00002252 <heater_init>:
#endif

#define HEATER_PWM_WGM_BITS_A (1 << WGM20) // phase correct pwm

void heater_init()
{
    2252:	cf 93       	push	r28
    2254:	df 93       	push	r29
    2256:	cd b7       	in	r28, 0x3d	; 61
    2258:	de b7       	in	r29, 0x3e	; 62
	TIMSK2 = 0x00;
    225a:	80 e7       	ldi	r24, 0x70	; 112
    225c:	90 e0       	ldi	r25, 0x00	; 0
    225e:	fc 01       	movw	r30, r24
    2260:	10 82       	st	Z, r1
	// stop timer clock
	TCCR2B &= ~HEATER_PWM_PRESCALE_BITS;
    2262:	81 eb       	ldi	r24, 0xB1	; 177
    2264:	90 e0       	ldi	r25, 0x00	; 0
    2266:	21 eb       	ldi	r18, 0xB1	; 177
    2268:	30 e0       	ldi	r19, 0x00	; 0
    226a:	f9 01       	movw	r30, r18
    226c:	20 81       	ld	r18, Z
    226e:	29 7f       	andi	r18, 0xF9	; 249
    2270:	fc 01       	movw	r30, r24
    2272:	20 83       	st	Z, r18
	// enable phase correct, frequency correct pwm mode
	TCCR2A |= HEATER_PWM_WGM_BITS_A;
    2274:	80 eb       	ldi	r24, 0xB0	; 176
    2276:	90 e0       	ldi	r25, 0x00	; 0
    2278:	20 eb       	ldi	r18, 0xB0	; 176
    227a:	30 e0       	ldi	r19, 0x00	; 0
    227c:	f9 01       	movw	r30, r18
    227e:	20 81       	ld	r18, Z
    2280:	21 60       	ori	r18, 0x01	; 1
    2282:	fc 01       	movw	r30, r24
    2284:	20 83       	st	Z, r18
	// reset duty cycle val
	#ifdef HEATER_PWM_INVERSE
		OCR2A = 0xFF;
	#else
		OCR2A = 0x00;
    2286:	83 eb       	ldi	r24, 0xB3	; 179
    2288:	90 e0       	ldi	r25, 0x00	; 0
    228a:	fc 01       	movw	r30, r24
    228c:	10 82       	st	Z, r1
	#endif
	// reset timer
	TCNT2 = 0x00;
    228e:	82 eb       	ldi	r24, 0xB2	; 178
    2290:	90 e0       	ldi	r25, 0x00	; 0
    2292:	fc 01       	movw	r30, r24
    2294:	10 82       	st	Z, r1
	
	// enable output pin
	OC2A_DDR |= (1 << OC2A_BIT);
    2296:	8a e2       	ldi	r24, 0x2A	; 42
    2298:	90 e0       	ldi	r25, 0x00	; 0
    229a:	2a e2       	ldi	r18, 0x2A	; 42
    229c:	30 e0       	ldi	r19, 0x00	; 0
    229e:	f9 01       	movw	r30, r18
    22a0:	20 81       	ld	r18, Z
    22a2:	20 68       	ori	r18, 0x80	; 128
    22a4:	fc 01       	movw	r30, r24
    22a6:	20 83       	st	Z, r18
	// set pin state when pwm is off (becomes active when COMA bits are cleared)
	#ifdef HEATER_PWM_INVERSE
		OC2A_PORT |= (1 << OC2A_BIT);
	#else
		OC2A_PORT &= ~(1 << OC2A_BIT);
    22a8:	8b e2       	ldi	r24, 0x2B	; 43
    22aa:	90 e0       	ldi	r25, 0x00	; 0
    22ac:	2b e2       	ldi	r18, 0x2B	; 43
    22ae:	30 e0       	ldi	r19, 0x00	; 0
    22b0:	f9 01       	movw	r30, r18
    22b2:	20 81       	ld	r18, Z
    22b4:	2f 77       	andi	r18, 0x7F	; 127
    22b6:	fc 01       	movw	r30, r24
    22b8:	20 83       	st	Z, r18
	#endif
}
    22ba:	00 00       	nop
    22bc:	df 91       	pop	r29
    22be:	cf 91       	pop	r28
    22c0:	08 95       	ret

000022c2 <heater_shutdown>:

void heater_shutdown()
{
    22c2:	cf 93       	push	r28
    22c4:	df 93       	push	r29
    22c6:	cd b7       	in	r28, 0x3d	; 61
    22c8:	de b7       	in	r29, 0x3e	; 62
	// stop timer clock
	TCCR2B &= ~HEATER_PWM_PRESCALE_BITS;
    22ca:	81 eb       	ldi	r24, 0xB1	; 177
    22cc:	90 e0       	ldi	r25, 0x00	; 0
    22ce:	21 eb       	ldi	r18, 0xB1	; 177
    22d0:	30 e0       	ldi	r19, 0x00	; 0
    22d2:	f9 01       	movw	r30, r18
    22d4:	20 81       	ld	r18, Z
    22d6:	29 7f       	andi	r18, 0xF9	; 249
    22d8:	fc 01       	movw	r30, r24
    22da:	20 83       	st	Z, r18
	// reset duty cycle val
	TCNT2 = 0x00;
    22dc:	82 eb       	ldi	r24, 0xB2	; 178
    22de:	90 e0       	ldi	r25, 0x00	; 0
    22e0:	fc 01       	movw	r30, r24
    22e2:	10 82       	st	Z, r1
	OCR2A = 0x00;
    22e4:	83 eb       	ldi	r24, 0xB3	; 179
    22e6:	90 e0       	ldi	r25, 0x00	; 0
    22e8:	fc 01       	movw	r30, r24
    22ea:	10 82       	st	Z, r1
	// back to normal mode
	TCCR2A &= ~(HEATER_PWM_COMA_BITS | HEATER_PWM_WGM_BITS_A);
    22ec:	80 eb       	ldi	r24, 0xB0	; 176
    22ee:	90 e0       	ldi	r25, 0x00	; 0
    22f0:	20 eb       	ldi	r18, 0xB0	; 176
    22f2:	30 e0       	ldi	r19, 0x00	; 0
    22f4:	f9 01       	movw	r30, r18
    22f6:	20 81       	ld	r18, Z
    22f8:	2e 77       	andi	r18, 0x7E	; 126
    22fa:	fc 01       	movw	r30, r24
    22fc:	20 83       	st	Z, r18
	// disable output pin
	OC2A_DDR &= ~(1 << OC2A_BIT);
    22fe:	8a e2       	ldi	r24, 0x2A	; 42
    2300:	90 e0       	ldi	r25, 0x00	; 0
    2302:	2a e2       	ldi	r18, 0x2A	; 42
    2304:	30 e0       	ldi	r19, 0x00	; 0
    2306:	f9 01       	movw	r30, r18
    2308:	20 81       	ld	r18, Z
    230a:	2f 77       	andi	r18, 0x7F	; 127
    230c:	fc 01       	movw	r30, r24
    230e:	20 83       	st	Z, r18
	OC2A_PORT &= ~(1 << OC2A_BIT);
    2310:	8b e2       	ldi	r24, 0x2B	; 43
    2312:	90 e0       	ldi	r25, 0x00	; 0
    2314:	2b e2       	ldi	r18, 0x2B	; 43
    2316:	30 e0       	ldi	r19, 0x00	; 0
    2318:	f9 01       	movw	r30, r18
    231a:	20 81       	ld	r18, Z
    231c:	2f 77       	andi	r18, 0x7F	; 127
    231e:	fc 01       	movw	r30, r24
    2320:	20 83       	st	Z, r18
}
    2322:	00 00       	nop
    2324:	df 91       	pop	r29
    2326:	cf 91       	pop	r28
    2328:	08 95       	ret

0000232a <heater_set_duty_cycle>:

void heater_set_duty_cycle(uint8_t dc)
{
    232a:	cf 93       	push	r28
    232c:	df 93       	push	r29
    232e:	00 d0       	rcall	.+0      	; 0x2330 <heater_set_duty_cycle+0x6>
    2330:	1f 92       	push	r1
    2332:	cd b7       	in	r28, 0x3d	; 61
    2334:	de b7       	in	r29, 0x3e	; 62
    2336:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t compval = ((uint16_t)umax8(umin8(dc, 100), 0) * 0xFF) / 100;
    2338:	64 e6       	ldi	r22, 0x64	; 100
    233a:	8b 81       	ldd	r24, Y+3	; 0x03
    233c:	0e 94 c0 16 	call	0x2d80	; 0x2d80 <umin8>
    2340:	60 e0       	ldi	r22, 0x00	; 0
    2342:	0e 94 af 16 	call	0x2d5e	; 0x2d5e <umax8>
    2346:	28 2f       	mov	r18, r24
    2348:	30 e0       	ldi	r19, 0x00	; 0
    234a:	4f ef       	ldi	r20, 0xFF	; 255
    234c:	42 9f       	mul	r20, r18
    234e:	c0 01       	movw	r24, r0
    2350:	43 9f       	mul	r20, r19
    2352:	90 0d       	add	r25, r0
    2354:	11 24       	eor	r1, r1
    2356:	96 95       	lsr	r25
    2358:	87 95       	ror	r24
    235a:	96 95       	lsr	r25
    235c:	87 95       	ror	r24
    235e:	9c 01       	movw	r18, r24
    2360:	ab e7       	ldi	r26, 0x7B	; 123
    2362:	b4 e1       	ldi	r27, 0x14	; 20
    2364:	0e 94 ae 28 	call	0x515c	; 0x515c <__umulhisi3>
    2368:	96 95       	lsr	r25
    236a:	87 95       	ror	r24
    236c:	9a 83       	std	Y+2, r25	; 0x02
    236e:	89 83       	std	Y+1, r24	; 0x01
	OCR2A = (uint8_t)compval;
    2370:	83 eb       	ldi	r24, 0xB3	; 179
    2372:	90 e0       	ldi	r25, 0x00	; 0
    2374:	29 81       	ldd	r18, Y+1	; 0x01
    2376:	fc 01       	movw	r30, r24
    2378:	20 83       	st	Z, r18
}
    237a:	00 00       	nop
    237c:	0f 90       	pop	r0
    237e:	0f 90       	pop	r0
    2380:	0f 90       	pop	r0
    2382:	df 91       	pop	r29
    2384:	cf 91       	pop	r28
    2386:	08 95       	ret

00002388 <heater_on>:

void heater_on()
{
    2388:	cf 93       	push	r28
    238a:	df 93       	push	r29
    238c:	cd b7       	in	r28, 0x3d	; 61
    238e:	de b7       	in	r29, 0x3e	; 62
	TCNT2 = 0x00;
    2390:	82 eb       	ldi	r24, 0xB2	; 178
    2392:	90 e0       	ldi	r25, 0x00	; 0
    2394:	fc 01       	movw	r30, r24
    2396:	10 82       	st	Z, r1
	#ifdef HEATER_PWM_INVERSE
		OCR2A = 0xFF;
	#else
		OCR2A = 0x00;
    2398:	83 eb       	ldi	r24, 0xB3	; 179
    239a:	90 e0       	ldi	r25, 0x00	; 0
    239c:	fc 01       	movw	r30, r24
    239e:	10 82       	st	Z, r1
	#endif
	TCCR2A |= HEATER_PWM_COMA_BITS;
    23a0:	80 eb       	ldi	r24, 0xB0	; 176
    23a2:	90 e0       	ldi	r25, 0x00	; 0
    23a4:	20 eb       	ldi	r18, 0xB0	; 176
    23a6:	30 e0       	ldi	r19, 0x00	; 0
    23a8:	f9 01       	movw	r30, r18
    23aa:	20 81       	ld	r18, Z
    23ac:	20 68       	ori	r18, 0x80	; 128
    23ae:	fc 01       	movw	r30, r24
    23b0:	20 83       	st	Z, r18
	TCCR2B |= HEATER_PWM_PRESCALE_BITS;
    23b2:	81 eb       	ldi	r24, 0xB1	; 177
    23b4:	90 e0       	ldi	r25, 0x00	; 0
    23b6:	21 eb       	ldi	r18, 0xB1	; 177
    23b8:	30 e0       	ldi	r19, 0x00	; 0
    23ba:	f9 01       	movw	r30, r18
    23bc:	20 81       	ld	r18, Z
    23be:	26 60       	ori	r18, 0x06	; 6
    23c0:	fc 01       	movw	r30, r24
    23c2:	20 83       	st	Z, r18
}
    23c4:	00 00       	nop
    23c6:	df 91       	pop	r29
    23c8:	cf 91       	pop	r28
    23ca:	08 95       	ret

000023cc <heater_off>:

void heater_off()
{	
    23cc:	cf 93       	push	r28
    23ce:	df 93       	push	r29
    23d0:	cd b7       	in	r28, 0x3d	; 61
    23d2:	de b7       	in	r29, 0x3e	; 62
	TCCR2A &= ~HEATER_PWM_COMA_BITS;
    23d4:	80 eb       	ldi	r24, 0xB0	; 176
    23d6:	90 e0       	ldi	r25, 0x00	; 0
    23d8:	20 eb       	ldi	r18, 0xB0	; 176
    23da:	30 e0       	ldi	r19, 0x00	; 0
    23dc:	f9 01       	movw	r30, r18
    23de:	20 81       	ld	r18, Z
    23e0:	2f 77       	andi	r18, 0x7F	; 127
    23e2:	fc 01       	movw	r30, r24
    23e4:	20 83       	st	Z, r18
	TCCR2B &= ~HEATER_PWM_PRESCALE_BITS;	
    23e6:	81 eb       	ldi	r24, 0xB1	; 177
    23e8:	90 e0       	ldi	r25, 0x00	; 0
    23ea:	21 eb       	ldi	r18, 0xB1	; 177
    23ec:	30 e0       	ldi	r19, 0x00	; 0
    23ee:	f9 01       	movw	r30, r18
    23f0:	20 81       	ld	r18, Z
    23f2:	29 7f       	andi	r18, 0xF9	; 249
    23f4:	fc 01       	movw	r30, r24
    23f6:	20 83       	st	Z, r18
	TCNT2 = 0x00;
    23f8:	82 eb       	ldi	r24, 0xB2	; 178
    23fa:	90 e0       	ldi	r25, 0x00	; 0
    23fc:	fc 01       	movw	r30, r24
    23fe:	10 82       	st	Z, r1
}
    2400:	00 00       	nop
    2402:	df 91       	pop	r29
    2404:	cf 91       	pop	r28
    2406:	08 95       	ret

00002408 <main>:
 * Author : fabia
 */ 
#include "application.h"

int main(void)
{
    2408:	cf 93       	push	r28
    240a:	df 93       	push	r29
    240c:	1f 92       	push	r1
    240e:	cd b7       	in	r28, 0x3d	; 61
    2410:	de b7       	in	r29, 0x3e	; 62
	ErrorCode res = app_run();
    2412:	0e 94 99 00 	call	0x132	; 0x132 <app_run>
    2416:	89 83       	std	Y+1, r24	; 0x01
	if(res) // if error occured, block forever, keeping the error message on the display
    2418:	89 81       	ldd	r24, Y+1	; 0x01
    241a:	88 23       	and	r24, r24
    241c:	09 f0       	breq	.+2      	; 0x2420 <main+0x18>
	{
		while(TRUE) {};
    241e:	ff cf       	rjmp	.-2      	; 0x241e <main+0x16>
    2420:	80 e0       	ldi	r24, 0x00	; 0
    2422:	90 e0       	ldi	r25, 0x00	; 0
	}
    2424:	0f 90       	pop	r0
    2426:	df 91       	pop	r29
    2428:	cf 91       	pop	r28
    242a:	08 95       	ret

0000242c <mr_main>:
//static const uint8_t pg_menu_patterns[] PROGMEM = {
	//SRD_CB, SRD_CA, SRD_CC, SRD_CT							// "BACK", 4
//};

void mr_main(float current_temp, uint8_t tprobe_index)
{
    242c:	0f 93       	push	r16
    242e:	cf 93       	push	r28
    2430:	df 93       	push	r29
    2432:	00 d0       	rcall	.+0      	; 0x2434 <mr_main+0x8>
    2434:	00 d0       	rcall	.+0      	; 0x2436 <mr_main+0xa>
    2436:	1f 92       	push	r1
    2438:	cd b7       	in	r28, 0x3d	; 61
    243a:	de b7       	in	r29, 0x3e	; 62
    243c:	69 83       	std	Y+1, r22	; 0x01
    243e:	7a 83       	std	Y+2, r23	; 0x02
    2440:	8b 83       	std	Y+3, r24	; 0x03
    2442:	9c 83       	std	Y+4, r25	; 0x04
    2444:	4d 83       	std	Y+5, r20	; 0x05
	switch(tprobe_index)
    2446:	8d 81       	ldd	r24, Y+5	; 0x05
    2448:	88 2f       	mov	r24, r24
    244a:	90 e0       	ldi	r25, 0x00	; 0
    244c:	81 30       	cpi	r24, 0x01	; 1
    244e:	91 05       	cpc	r25, r1
    2450:	89 f0       	breq	.+34     	; 0x2474 <mr_main+0x48>
    2452:	82 30       	cpi	r24, 0x02	; 2
    2454:	91 05       	cpc	r25, r1
    2456:	1c f4       	brge	.+6      	; 0x245e <mr_main+0x32>
    2458:	89 2b       	or	r24, r25
    245a:	39 f0       	breq	.+14     	; 0x246a <mr_main+0x3e>
    245c:	1a c0       	rjmp	.+52     	; 0x2492 <mr_main+0x66>
    245e:	82 30       	cpi	r24, 0x02	; 2
    2460:	91 05       	cpc	r25, r1
    2462:	69 f0       	breq	.+26     	; 0x247e <mr_main+0x52>
    2464:	03 97       	sbiw	r24, 0x03	; 3
    2466:	81 f0       	breq	.+32     	; 0x2488 <mr_main+0x5c>
    2468:	14 c0       	rjmp	.+40     	; 0x2492 <mr_main+0x66>
	{
		case 0:
			srd_set(0, SRD_D0 | SRD_DOT);
    246a:	6f eb       	ldi	r22, 0xBF	; 191
    246c:	80 e0       	ldi	r24, 0x00	; 0
    246e:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <srd_set>
			break;
    2472:	0f c0       	rjmp	.+30     	; 0x2492 <mr_main+0x66>
		case 1:
			srd_set(0, SRD_D1 | SRD_DOT);
    2474:	66 e8       	ldi	r22, 0x86	; 134
    2476:	80 e0       	ldi	r24, 0x00	; 0
    2478:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <srd_set>
			break;
    247c:	0a c0       	rjmp	.+20     	; 0x2492 <mr_main+0x66>
		case 2:
			srd_set(0, SRD_D2 | SRD_DOT);
    247e:	6b ed       	ldi	r22, 0xDB	; 219
    2480:	80 e0       	ldi	r24, 0x00	; 0
    2482:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <srd_set>
			break;
    2486:	05 c0       	rjmp	.+10     	; 0x2492 <mr_main+0x66>
		case 3:
			srd_set(0, SRD_D3 | SRD_DOT);
    2488:	6f ec       	ldi	r22, 0xCF	; 207
    248a:	80 e0       	ldi	r24, 0x00	; 0
    248c:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <srd_set>
			break;
    2490:	00 00       	nop
	}
	srd_setfloat(current_temp, 1, 1, 5);
    2492:	89 81       	ldd	r24, Y+1	; 0x01
    2494:	9a 81       	ldd	r25, Y+2	; 0x02
    2496:	ab 81       	ldd	r26, Y+3	; 0x03
    2498:	bc 81       	ldd	r27, Y+4	; 0x04
    249a:	05 e0       	ldi	r16, 0x05	; 5
    249c:	21 e0       	ldi	r18, 0x01	; 1
    249e:	41 e0       	ldi	r20, 0x01	; 1
    24a0:	bc 01       	movw	r22, r24
    24a2:	cd 01       	movw	r24, r26
    24a4:	0e 94 9e 1e 	call	0x3d3c	; 0x3d3c <srd_setfloat>
}
    24a8:	00 00       	nop
    24aa:	0f 90       	pop	r0
    24ac:	0f 90       	pop	r0
    24ae:	0f 90       	pop	r0
    24b0:	0f 90       	pop	r0
    24b2:	0f 90       	pop	r0
    24b4:	df 91       	pop	r29
    24b6:	cf 91       	pop	r28
    24b8:	0f 91       	pop	r16
    24ba:	08 95       	ret

000024bc <mr_main_menu>:

void mr_main_menu(uint8_t item_index)
{
    24bc:	cf 93       	push	r28
    24be:	df 93       	push	r29
    24c0:	1f 92       	push	r1
    24c2:	cd b7       	in	r28, 0x3d	; 61
    24c4:	de b7       	in	r29, 0x3e	; 62
    24c6:	89 83       	std	Y+1, r24	; 0x01
	switch (item_index)
    24c8:	89 81       	ldd	r24, Y+1	; 0x01
    24ca:	88 2f       	mov	r24, r24
    24cc:	90 e0       	ldi	r25, 0x00	; 0
    24ce:	82 30       	cpi	r24, 0x02	; 2
    24d0:	91 05       	cpc	r25, r1
    24d2:	49 f1       	breq	.+82     	; 0x2526 <mr_main_menu+0x6a>
    24d4:	83 30       	cpi	r24, 0x03	; 3
    24d6:	91 05       	cpc	r25, r1
    24d8:	2c f4       	brge	.+10     	; 0x24e4 <mr_main_menu+0x28>
    24da:	00 97       	sbiw	r24, 0x00	; 0
    24dc:	71 f0       	breq	.+28     	; 0x24fa <mr_main_menu+0x3e>
    24de:	01 97       	sbiw	r24, 0x01	; 1
    24e0:	89 f0       	breq	.+34     	; 0x2504 <mr_main_menu+0x48>
			break;
		case 5: // "LOAD.S."
			srd_set(0, SRD_CL); srd_set(1, SRD_CO); srd_set(2, SRD_CA); srd_set(3, SRD_CD | SRD_DOT); srd_set(4, SRD_CS | SRD_DOT);
			break;
	}
}
    24e2:	79 c0       	rjmp	.+242    	; 0x25d6 <mr_main_menu+0x11a>
	srd_setfloat(current_temp, 1, 1, 5);
}

void mr_main_menu(uint8_t item_index)
{
	switch (item_index)
    24e4:	84 30       	cpi	r24, 0x04	; 4
    24e6:	91 05       	cpc	r25, r1
    24e8:	09 f4       	brne	.+2      	; 0x24ec <mr_main_menu+0x30>
    24ea:	47 c0       	rjmp	.+142    	; 0x257a <mr_main_menu+0xbe>
    24ec:	84 30       	cpi	r24, 0x04	; 4
    24ee:	91 05       	cpc	r25, r1
    24f0:	5c f1       	brlt	.+86     	; 0x2548 <mr_main_menu+0x8c>
    24f2:	05 97       	sbiw	r24, 0x05	; 5
    24f4:	09 f4       	brne	.+2      	; 0x24f8 <mr_main_menu+0x3c>
    24f6:	5a c0       	rjmp	.+180    	; 0x25ac <mr_main_menu+0xf0>
			break;
		case 5: // "LOAD.S."
			srd_set(0, SRD_CL); srd_set(1, SRD_CO); srd_set(2, SRD_CA); srd_set(3, SRD_CD | SRD_DOT); srd_set(4, SRD_CS | SRD_DOT);
			break;
	}
}
    24f8:	6e c0       	rjmp	.+220    	; 0x25d6 <mr_main_menu+0x11a>
void mr_main_menu(uint8_t item_index)
{
	switch (item_index)
	{
		case 0: // "-"
			srd_set(0, SRD_MINUS);
    24fa:	60 e4       	ldi	r22, 0x40	; 64
    24fc:	80 e0       	ldi	r24, 0x00	; 0
    24fe:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <srd_set>
			break;
    2502:	69 c0       	rjmp	.+210    	; 0x25d6 <mr_main_menu+0x11a>
		case 1: // "HEAT"
			srd_set(0, SRD_CH); srd_set(1, SRD_CE); srd_set(2, SRD_CA); srd_set(3, SRD_CT);
    2504:	64 e7       	ldi	r22, 0x74	; 116
    2506:	80 e0       	ldi	r24, 0x00	; 0
    2508:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <srd_set>
    250c:	69 e7       	ldi	r22, 0x79	; 121
    250e:	81 e0       	ldi	r24, 0x01	; 1
    2510:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <srd_set>
    2514:	67 e7       	ldi	r22, 0x77	; 119
    2516:	82 e0       	ldi	r24, 0x02	; 2
    2518:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <srd_set>
    251c:	68 e7       	ldi	r22, 0x78	; 120
    251e:	83 e0       	ldi	r24, 0x03	; 3
    2520:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <srd_set>
			break;
    2524:	58 c0       	rjmp	.+176    	; 0x25d6 <mr_main_menu+0x11a>
		case 2: // "STIR"
			srd_set(0, SRD_CS); srd_set(1, SRD_CT); srd_set(2, SRD_CI); srd_set(3, SRD_CR);
    2526:	6d e6       	ldi	r22, 0x6D	; 109
    2528:	80 e0       	ldi	r24, 0x00	; 0
    252a:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <srd_set>
    252e:	68 e7       	ldi	r22, 0x78	; 120
    2530:	81 e0       	ldi	r24, 0x01	; 1
    2532:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <srd_set>
    2536:	66 e0       	ldi	r22, 0x06	; 6
    2538:	82 e0       	ldi	r24, 0x02	; 2
    253a:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <srd_set>
    253e:	60 e5       	ldi	r22, 0x50	; 80
    2540:	83 e0       	ldi	r24, 0x03	; 3
    2542:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <srd_set>
			break;
    2546:	47 c0       	rjmp	.+142    	; 0x25d6 <mr_main_menu+0x11a>
		case 3: // "T.CALIB"
			srd_set(0, SRD_CT | SRD_DOT); srd_set(1, SRD_CC); srd_set(2, SRD_CA); srd_set(3, SRD_CL); srd_set(4, SRD_CI); srd_set(5, SRD_CB);
    2548:	68 ef       	ldi	r22, 0xF8	; 248
    254a:	80 e0       	ldi	r24, 0x00	; 0
    254c:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <srd_set>
    2550:	69 e3       	ldi	r22, 0x39	; 57
    2552:	81 e0       	ldi	r24, 0x01	; 1
    2554:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <srd_set>
    2558:	67 e7       	ldi	r22, 0x77	; 119
    255a:	82 e0       	ldi	r24, 0x02	; 2
    255c:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <srd_set>
    2560:	68 e3       	ldi	r22, 0x38	; 56
    2562:	83 e0       	ldi	r24, 0x03	; 3
    2564:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <srd_set>
    2568:	66 e0       	ldi	r22, 0x06	; 6
    256a:	84 e0       	ldi	r24, 0x04	; 4
    256c:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <srd_set>
    2570:	6c e7       	ldi	r22, 0x7C	; 124
    2572:	85 e0       	ldi	r24, 0x05	; 5
    2574:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <srd_set>
			break;
    2578:	2e c0       	rjmp	.+92     	; 0x25d6 <mr_main_menu+0x11a>
		case 4: // "STORE.S."
			srd_set(0, SRD_CS); srd_set(1, SRD_CT); srd_set(2, SRD_CO); srd_set(3, SRD_CR); srd_set(4, SRD_CE | SRD_DOT); srd_set(5, SRD_CS | SRD_DOT);
    257a:	6d e6       	ldi	r22, 0x6D	; 109
    257c:	80 e0       	ldi	r24, 0x00	; 0
    257e:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <srd_set>
    2582:	68 e7       	ldi	r22, 0x78	; 120
    2584:	81 e0       	ldi	r24, 0x01	; 1
    2586:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <srd_set>
    258a:	6c e5       	ldi	r22, 0x5C	; 92
    258c:	82 e0       	ldi	r24, 0x02	; 2
    258e:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <srd_set>
    2592:	60 e5       	ldi	r22, 0x50	; 80
    2594:	83 e0       	ldi	r24, 0x03	; 3
    2596:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <srd_set>
    259a:	69 ef       	ldi	r22, 0xF9	; 249
    259c:	84 e0       	ldi	r24, 0x04	; 4
    259e:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <srd_set>
    25a2:	6d ee       	ldi	r22, 0xED	; 237
    25a4:	85 e0       	ldi	r24, 0x05	; 5
    25a6:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <srd_set>
			break;
    25aa:	15 c0       	rjmp	.+42     	; 0x25d6 <mr_main_menu+0x11a>
		case 5: // "LOAD.S."
			srd_set(0, SRD_CL); srd_set(1, SRD_CO); srd_set(2, SRD_CA); srd_set(3, SRD_CD | SRD_DOT); srd_set(4, SRD_CS | SRD_DOT);
    25ac:	68 e3       	ldi	r22, 0x38	; 56
    25ae:	80 e0       	ldi	r24, 0x00	; 0
    25b0:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <srd_set>
    25b4:	6c e5       	ldi	r22, 0x5C	; 92
    25b6:	81 e0       	ldi	r24, 0x01	; 1
    25b8:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <srd_set>
    25bc:	67 e7       	ldi	r22, 0x77	; 119
    25be:	82 e0       	ldi	r24, 0x02	; 2
    25c0:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <srd_set>
    25c4:	6e ed       	ldi	r22, 0xDE	; 222
    25c6:	83 e0       	ldi	r24, 0x03	; 3
    25c8:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <srd_set>
    25cc:	6d ee       	ldi	r22, 0xED	; 237
    25ce:	84 e0       	ldi	r24, 0x04	; 4
    25d0:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <srd_set>
			break;
    25d4:	00 00       	nop
	}
}
    25d6:	00 00       	nop
    25d8:	0f 90       	pop	r0
    25da:	df 91       	pop	r29
    25dc:	cf 91       	pop	r28
    25de:	08 95       	ret

000025e0 <mr_heater_menu>:

void mr_heater_menu(uint8_t item_index)
{
    25e0:	cf 93       	push	r28
    25e2:	df 93       	push	r29
    25e4:	1f 92       	push	r1
    25e6:	cd b7       	in	r28, 0x3d	; 61
    25e8:	de b7       	in	r29, 0x3e	; 62
    25ea:	89 83       	std	Y+1, r24	; 0x01
	switch (item_index)
    25ec:	89 81       	ldd	r24, Y+1	; 0x01
    25ee:	88 2f       	mov	r24, r24
    25f0:	90 e0       	ldi	r25, 0x00	; 0
    25f2:	82 30       	cpi	r24, 0x02	; 2
    25f4:	91 05       	cpc	r25, r1
    25f6:	89 f1       	breq	.+98     	; 0x265a <mr_heater_menu+0x7a>
    25f8:	83 30       	cpi	r24, 0x03	; 3
    25fa:	91 05       	cpc	r25, r1
    25fc:	2c f4       	brge	.+10     	; 0x2608 <mr_heater_menu+0x28>
    25fe:	00 97       	sbiw	r24, 0x00	; 0
    2600:	71 f0       	breq	.+28     	; 0x261e <mr_heater_menu+0x3e>
    2602:	01 97       	sbiw	r24, 0x01	; 1
    2604:	a9 f0       	breq	.+42     	; 0x2630 <mr_heater_menu+0x50>
			break;
		case 5: // "OFFSET"
			srd_set(0, SRD_CO); srd_set(1, SRD_CF); srd_set(2, SRD_CF); srd_set(3, SRD_CS);
			break;
	}
}
    2606:	69 c0       	rjmp	.+210    	; 0x26da <mr_heater_menu+0xfa>
	}
}

void mr_heater_menu(uint8_t item_index)
{
	switch (item_index)
    2608:	84 30       	cpi	r24, 0x04	; 4
    260a:	91 05       	cpc	r25, r1
    260c:	09 f4       	brne	.+2      	; 0x2610 <mr_heater_menu+0x30>
    260e:	47 c0       	rjmp	.+142    	; 0x269e <mr_heater_menu+0xbe>
    2610:	84 30       	cpi	r24, 0x04	; 4
    2612:	91 05       	cpc	r25, r1
    2614:	9c f1       	brlt	.+102    	; 0x267c <mr_heater_menu+0x9c>
    2616:	05 97       	sbiw	r24, 0x05	; 5
    2618:	09 f4       	brne	.+2      	; 0x261c <mr_heater_menu+0x3c>
    261a:	4e c0       	rjmp	.+156    	; 0x26b8 <mr_heater_menu+0xd8>
			break;
		case 5: // "OFFSET"
			srd_set(0, SRD_CO); srd_set(1, SRD_CF); srd_set(2, SRD_CF); srd_set(3, SRD_CS);
			break;
	}
}
    261c:	5e c0       	rjmp	.+188    	; 0x26da <mr_heater_menu+0xfa>
void mr_heater_menu(uint8_t item_index)
{
	switch (item_index)
	{
		case 0: // "--"
			srd_set(0, SRD_MINUS); srd_set(1, SRD_MINUS);
    261e:	60 e4       	ldi	r22, 0x40	; 64
    2620:	80 e0       	ldi	r24, 0x00	; 0
    2622:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <srd_set>
    2626:	60 e4       	ldi	r22, 0x40	; 64
    2628:	81 e0       	ldi	r24, 0x01	; 1
    262a:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <srd_set>
			break;
    262e:	55 c0       	rjmp	.+170    	; 0x26da <mr_heater_menu+0xfa>
		case 1: // "ONOFF"
			srd_set(0, SRD_CO); srd_set(1, SRD_CN); srd_set(2, SRD_CO); srd_set(3, SRD_CF); srd_set(4, SRD_CF);
    2630:	6c e5       	ldi	r22, 0x5C	; 92
    2632:	80 e0       	ldi	r24, 0x00	; 0
    2634:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <srd_set>
    2638:	64 e5       	ldi	r22, 0x54	; 84
    263a:	81 e0       	ldi	r24, 0x01	; 1
    263c:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <srd_set>
    2640:	6c e5       	ldi	r22, 0x5C	; 92
    2642:	82 e0       	ldi	r24, 0x02	; 2
    2644:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <srd_set>
    2648:	61 e7       	ldi	r22, 0x71	; 113
    264a:	83 e0       	ldi	r24, 0x03	; 3
    264c:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <srd_set>
    2650:	61 e7       	ldi	r22, 0x71	; 113
    2652:	84 e0       	ldi	r24, 0x04	; 4
    2654:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <srd_set>
			break;
    2658:	40 c0       	rjmp	.+128    	; 0x26da <mr_heater_menu+0xfa>
		case 2: // "TG.TPTR"
			srd_set(0, SRD_CT); srd_set(1, SRD_CG | SRD_DOT); srd_set(2, SRD_CT); srd_set(3, SRD_CP);
    265a:	68 e7       	ldi	r22, 0x78	; 120
    265c:	80 e0       	ldi	r24, 0x00	; 0
    265e:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <srd_set>
    2662:	6f ee       	ldi	r22, 0xEF	; 239
    2664:	81 e0       	ldi	r24, 0x01	; 1
    2666:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <srd_set>
    266a:	68 e7       	ldi	r22, 0x78	; 120
    266c:	82 e0       	ldi	r24, 0x02	; 2
    266e:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <srd_set>
    2672:	63 e7       	ldi	r22, 0x73	; 115
    2674:	83 e0       	ldi	r24, 0x03	; 3
    2676:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <srd_set>
			break;
    267a:	2f c0       	rjmp	.+94     	; 0x26da <mr_heater_menu+0xfa>
		case 3: // "TSEL"
			srd_set(0, SRD_CT | SRD_DOT); srd_set(1, SRD_CS); srd_set(2, SRD_CE); srd_set(3, SRD_CL);
    267c:	68 ef       	ldi	r22, 0xF8	; 248
    267e:	80 e0       	ldi	r24, 0x00	; 0
    2680:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <srd_set>
    2684:	6d e6       	ldi	r22, 0x6D	; 109
    2686:	81 e0       	ldi	r24, 0x01	; 1
    2688:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <srd_set>
    268c:	69 e7       	ldi	r22, 0x79	; 121
    268e:	82 e0       	ldi	r24, 0x02	; 2
    2690:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <srd_set>
    2694:	68 e3       	ldi	r22, 0x38	; 56
    2696:	83 e0       	ldi	r24, 0x03	; 3
    2698:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <srd_set>
			break;
    269c:	1e c0       	rjmp	.+60     	; 0x26da <mr_heater_menu+0xfa>
		case 4: // "PID"
			srd_set(0, SRD_CP); srd_set(1, SRD_CI); srd_set(2, SRD_CD);
    269e:	63 e7       	ldi	r22, 0x73	; 115
    26a0:	80 e0       	ldi	r24, 0x00	; 0
    26a2:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <srd_set>
    26a6:	66 e0       	ldi	r22, 0x06	; 6
    26a8:	81 e0       	ldi	r24, 0x01	; 1
    26aa:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <srd_set>
    26ae:	6e e5       	ldi	r22, 0x5E	; 94
    26b0:	82 e0       	ldi	r24, 0x02	; 2
    26b2:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <srd_set>
			break;
    26b6:	11 c0       	rjmp	.+34     	; 0x26da <mr_heater_menu+0xfa>
		case 5: // "OFFSET"
			srd_set(0, SRD_CO); srd_set(1, SRD_CF); srd_set(2, SRD_CF); srd_set(3, SRD_CS);
    26b8:	6c e5       	ldi	r22, 0x5C	; 92
    26ba:	80 e0       	ldi	r24, 0x00	; 0
    26bc:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <srd_set>
    26c0:	61 e7       	ldi	r22, 0x71	; 113
    26c2:	81 e0       	ldi	r24, 0x01	; 1
    26c4:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <srd_set>
    26c8:	61 e7       	ldi	r22, 0x71	; 113
    26ca:	82 e0       	ldi	r24, 0x02	; 2
    26cc:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <srd_set>
    26d0:	6d e6       	ldi	r22, 0x6D	; 109
    26d2:	83 e0       	ldi	r24, 0x03	; 3
    26d4:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <srd_set>
			break;
    26d8:	00 00       	nop
	}
}
    26da:	00 00       	nop
    26dc:	0f 90       	pop	r0
    26de:	df 91       	pop	r29
    26e0:	cf 91       	pop	r28
    26e2:	08 95       	ret

000026e4 <mr_stirrer_menu>:

void mr_stirrer_menu(uint8_t item_index)
{
    26e4:	cf 93       	push	r28
    26e6:	df 93       	push	r29
    26e8:	1f 92       	push	r1
    26ea:	cd b7       	in	r28, 0x3d	; 61
    26ec:	de b7       	in	r29, 0x3e	; 62
    26ee:	89 83       	std	Y+1, r24	; 0x01
	switch (item_index)
    26f0:	89 81       	ldd	r24, Y+1	; 0x01
    26f2:	88 2f       	mov	r24, r24
    26f4:	90 e0       	ldi	r25, 0x00	; 0
    26f6:	00 97       	sbiw	r24, 0x00	; 0
    26f8:	19 f0       	breq	.+6      	; 0x2700 <mr_stirrer_menu+0x1c>
    26fa:	01 97       	sbiw	r24, 0x01	; 1
    26fc:	51 f0       	breq	.+20     	; 0x2712 <mr_stirrer_menu+0x2e>
			break;
		case 1: // "SPEED"
			srd_set(0, SRD_CS); srd_set(1, SRD_CP); srd_set(2, SRD_CE); srd_set(3, SRD_CE); srd_set(4, SRD_CD);
			break;
	}
}
    26fe:	1e c0       	rjmp	.+60     	; 0x273c <mr_stirrer_menu+0x58>
void mr_stirrer_menu(uint8_t item_index)
{
	switch (item_index)
	{
		case 0: // "--"
			srd_set(0, SRD_MINUS); srd_set(1, SRD_MINUS);
    2700:	60 e4       	ldi	r22, 0x40	; 64
    2702:	80 e0       	ldi	r24, 0x00	; 0
    2704:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <srd_set>
    2708:	60 e4       	ldi	r22, 0x40	; 64
    270a:	81 e0       	ldi	r24, 0x01	; 1
    270c:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <srd_set>
			break;
    2710:	15 c0       	rjmp	.+42     	; 0x273c <mr_stirrer_menu+0x58>
		case 1: // "SPEED"
			srd_set(0, SRD_CS); srd_set(1, SRD_CP); srd_set(2, SRD_CE); srd_set(3, SRD_CE); srd_set(4, SRD_CD);
    2712:	6d e6       	ldi	r22, 0x6D	; 109
    2714:	80 e0       	ldi	r24, 0x00	; 0
    2716:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <srd_set>
    271a:	63 e7       	ldi	r22, 0x73	; 115
    271c:	81 e0       	ldi	r24, 0x01	; 1
    271e:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <srd_set>
    2722:	69 e7       	ldi	r22, 0x79	; 121
    2724:	82 e0       	ldi	r24, 0x02	; 2
    2726:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <srd_set>
    272a:	69 e7       	ldi	r22, 0x79	; 121
    272c:	83 e0       	ldi	r24, 0x03	; 3
    272e:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <srd_set>
    2732:	6e e5       	ldi	r22, 0x5E	; 94
    2734:	84 e0       	ldi	r24, 0x04	; 4
    2736:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <srd_set>
			break;
    273a:	00 00       	nop
	}
}
    273c:	00 00       	nop
    273e:	0f 90       	pop	r0
    2740:	df 91       	pop	r29
    2742:	cf 91       	pop	r28
    2744:	08 95       	ret

00002746 <mr_heater_menu_controlling_probe_select>:

void mr_heater_menu_controlling_probe_select(uint8_t tprobe_index, uint8_t selection_valid)
{
    2746:	cf 93       	push	r28
    2748:	df 93       	push	r29
    274a:	00 d0       	rcall	.+0      	; 0x274c <mr_heater_menu_controlling_probe_select+0x6>
    274c:	cd b7       	in	r28, 0x3d	; 61
    274e:	de b7       	in	r29, 0x3e	; 62
    2750:	89 83       	std	Y+1, r24	; 0x01
    2752:	6a 83       	std	Y+2, r22	; 0x02
	if(selection_valid)
    2754:	8a 81       	ldd	r24, Y+2	; 0x02
    2756:	88 23       	and	r24, r24
    2758:	09 f4       	brne	.+2      	; 0x275c <mr_heater_menu_controlling_probe_select+0x16>
    275a:	3f c0       	rjmp	.+126    	; 0x27da <mr_heater_menu_controlling_probe_select+0x94>
	{
		switch (tprobe_index)
    275c:	89 81       	ldd	r24, Y+1	; 0x01
    275e:	88 2f       	mov	r24, r24
    2760:	90 e0       	ldi	r25, 0x00	; 0
    2762:	81 30       	cpi	r24, 0x01	; 1
    2764:	91 05       	cpc	r25, r1
    2766:	a9 f0       	breq	.+42     	; 0x2792 <mr_heater_menu_controlling_probe_select+0x4c>
    2768:	82 30       	cpi	r24, 0x02	; 2
    276a:	91 05       	cpc	r25, r1
    276c:	1c f4       	brge	.+6      	; 0x2774 <mr_heater_menu_controlling_probe_select+0x2e>
    276e:	89 2b       	or	r24, r25
    2770:	39 f0       	breq	.+14     	; 0x2780 <mr_heater_menu_controlling_probe_select+0x3a>
    2772:	2a c0       	rjmp	.+84     	; 0x27c8 <mr_heater_menu_controlling_probe_select+0x82>
    2774:	82 30       	cpi	r24, 0x02	; 2
    2776:	91 05       	cpc	r25, r1
    2778:	a9 f0       	breq	.+42     	; 0x27a4 <mr_heater_menu_controlling_probe_select+0x5e>
    277a:	03 97       	sbiw	r24, 0x03	; 3
    277c:	e1 f0       	breq	.+56     	; 0x27b6 <mr_heater_menu_controlling_probe_select+0x70>
    277e:	24 c0       	rjmp	.+72     	; 0x27c8 <mr_heater_menu_controlling_probe_select+0x82>
		{
			case 0:
				srd_set(4, SRD_CT); srd_set(5, SRD_D0);
    2780:	68 e7       	ldi	r22, 0x78	; 120
    2782:	84 e0       	ldi	r24, 0x04	; 4
    2784:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <srd_set>
    2788:	6f e3       	ldi	r22, 0x3F	; 63
    278a:	85 e0       	ldi	r24, 0x05	; 5
    278c:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <srd_set>
				break;
    2790:	2d c0       	rjmp	.+90     	; 0x27ec <mr_heater_menu_controlling_probe_select+0xa6>
			case 1:
				srd_set(4, SRD_CT); srd_set(5, SRD_D1);
    2792:	68 e7       	ldi	r22, 0x78	; 120
    2794:	84 e0       	ldi	r24, 0x04	; 4
    2796:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <srd_set>
    279a:	66 e0       	ldi	r22, 0x06	; 6
    279c:	85 e0       	ldi	r24, 0x05	; 5
    279e:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <srd_set>
				break;
    27a2:	24 c0       	rjmp	.+72     	; 0x27ec <mr_heater_menu_controlling_probe_select+0xa6>
			case 2:
				srd_set(4, SRD_CT); srd_set(5, SRD_D2);
    27a4:	68 e7       	ldi	r22, 0x78	; 120
    27a6:	84 e0       	ldi	r24, 0x04	; 4
    27a8:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <srd_set>
    27ac:	6b e5       	ldi	r22, 0x5B	; 91
    27ae:	85 e0       	ldi	r24, 0x05	; 5
    27b0:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <srd_set>
				break;
    27b4:	1b c0       	rjmp	.+54     	; 0x27ec <mr_heater_menu_controlling_probe_select+0xa6>
			case 3:
				srd_set(4, SRD_CT); srd_set(5, SRD_D3);
    27b6:	68 e7       	ldi	r22, 0x78	; 120
    27b8:	84 e0       	ldi	r24, 0x04	; 4
    27ba:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <srd_set>
    27be:	6f e4       	ldi	r22, 0x4F	; 79
    27c0:	85 e0       	ldi	r24, 0x05	; 5
    27c2:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <srd_set>
				break;
    27c6:	12 c0       	rjmp	.+36     	; 0x27ec <mr_heater_menu_controlling_probe_select+0xa6>
			default:
				srd_set(0,SRD_CN); srd_set(1,SRD_CC);
    27c8:	64 e5       	ldi	r22, 0x54	; 84
    27ca:	80 e0       	ldi	r24, 0x00	; 0
    27cc:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <srd_set>
    27d0:	69 e3       	ldi	r22, 0x39	; 57
    27d2:	81 e0       	ldi	r24, 0x01	; 1
    27d4:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <srd_set>
	}
	else
	{
		srd_set(0,SRD_CN); srd_set(1,SRD_CC);
	}	
}
    27d8:	09 c0       	rjmp	.+18     	; 0x27ec <mr_heater_menu_controlling_probe_select+0xa6>
				srd_set(0,SRD_CN); srd_set(1,SRD_CC);
		}
	}
	else
	{
		srd_set(0,SRD_CN); srd_set(1,SRD_CC);
    27da:	64 e5       	ldi	r22, 0x54	; 84
    27dc:	80 e0       	ldi	r24, 0x00	; 0
    27de:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <srd_set>
    27e2:	69 e3       	ldi	r22, 0x39	; 57
    27e4:	81 e0       	ldi	r24, 0x01	; 1
    27e6:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <srd_set>
	}	
}
    27ea:	00 c0       	rjmp	.+0      	; 0x27ec <mr_heater_menu_controlling_probe_select+0xa6>
    27ec:	00 00       	nop
    27ee:	0f 90       	pop	r0
    27f0:	0f 90       	pop	r0
    27f2:	df 91       	pop	r29
    27f4:	cf 91       	pop	r28
    27f6:	08 95       	ret

000027f8 <mr_heater_menu_pid>:

void mr_heater_menu_pid(uint8_t item_index)
{
    27f8:	cf 93       	push	r28
    27fa:	df 93       	push	r29
    27fc:	1f 92       	push	r1
    27fe:	cd b7       	in	r28, 0x3d	; 61
    2800:	de b7       	in	r29, 0x3e	; 62
    2802:	89 83       	std	Y+1, r24	; 0x01
	switch (item_index)
    2804:	89 81       	ldd	r24, Y+1	; 0x01
    2806:	88 2f       	mov	r24, r24
    2808:	90 e0       	ldi	r25, 0x00	; 0
    280a:	81 30       	cpi	r24, 0x01	; 1
    280c:	91 05       	cpc	r25, r1
    280e:	c9 f0       	breq	.+50     	; 0x2842 <mr_heater_menu_pid+0x4a>
    2810:	82 30       	cpi	r24, 0x02	; 2
    2812:	91 05       	cpc	r25, r1
    2814:	1c f4       	brge	.+6      	; 0x281c <mr_heater_menu_pid+0x24>
    2816:	89 2b       	or	r24, r25
    2818:	39 f0       	breq	.+14     	; 0x2828 <mr_heater_menu_pid+0x30>
			break;
		case 3: // "D"
			srd_set(0, SRD_CD);
			break;
	}
}
    281a:	22 c0       	rjmp	.+68     	; 0x2860 <mr_heater_menu_pid+0x68>
	}	
}

void mr_heater_menu_pid(uint8_t item_index)
{
	switch (item_index)
    281c:	82 30       	cpi	r24, 0x02	; 2
    281e:	91 05       	cpc	r25, r1
    2820:	a9 f0       	breq	.+42     	; 0x284c <mr_heater_menu_pid+0x54>
    2822:	03 97       	sbiw	r24, 0x03	; 3
    2824:	c1 f0       	breq	.+48     	; 0x2856 <mr_heater_menu_pid+0x5e>
			break;
		case 3: // "D"
			srd_set(0, SRD_CD);
			break;
	}
}
    2826:	1c c0       	rjmp	.+56     	; 0x2860 <mr_heater_menu_pid+0x68>
void mr_heater_menu_pid(uint8_t item_index)
{
	switch (item_index)
	{
		case 0: // "---"
			srd_set(0, SRD_MINUS); srd_set(1, SRD_MINUS); srd_set(2, SRD_MINUS);
    2828:	60 e4       	ldi	r22, 0x40	; 64
    282a:	80 e0       	ldi	r24, 0x00	; 0
    282c:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <srd_set>
    2830:	60 e4       	ldi	r22, 0x40	; 64
    2832:	81 e0       	ldi	r24, 0x01	; 1
    2834:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <srd_set>
    2838:	60 e4       	ldi	r22, 0x40	; 64
    283a:	82 e0       	ldi	r24, 0x02	; 2
    283c:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <srd_set>
			break;
    2840:	0f c0       	rjmp	.+30     	; 0x2860 <mr_heater_menu_pid+0x68>
		case 1: // "P"
			srd_set(0, SRD_CP);
    2842:	63 e7       	ldi	r22, 0x73	; 115
    2844:	80 e0       	ldi	r24, 0x00	; 0
    2846:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <srd_set>
			break;
    284a:	0a c0       	rjmp	.+20     	; 0x2860 <mr_heater_menu_pid+0x68>
		case 2: // "I"
			srd_set(0, SRD_CI);
    284c:	66 e0       	ldi	r22, 0x06	; 6
    284e:	80 e0       	ldi	r24, 0x00	; 0
    2850:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <srd_set>
			break;
    2854:	05 c0       	rjmp	.+10     	; 0x2860 <mr_heater_menu_pid+0x68>
		case 3: // "D"
			srd_set(0, SRD_CD);
    2856:	6e e5       	ldi	r22, 0x5E	; 94
    2858:	80 e0       	ldi	r24, 0x00	; 0
    285a:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <srd_set>
			break;
    285e:	00 00       	nop
	}
}
    2860:	00 00       	nop
    2862:	0f 90       	pop	r0
    2864:	df 91       	pop	r29
    2866:	cf 91       	pop	r28
    2868:	08 95       	ret

0000286a <mr_heater_menu_onoff>:

void mr_heater_menu_onoff(uint8_t onoff)
{
    286a:	cf 93       	push	r28
    286c:	df 93       	push	r29
    286e:	1f 92       	push	r1
    2870:	cd b7       	in	r28, 0x3d	; 61
    2872:	de b7       	in	r29, 0x3e	; 62
    2874:	89 83       	std	Y+1, r24	; 0x01
	if(onoff)
    2876:	89 81       	ldd	r24, Y+1	; 0x01
    2878:	88 23       	and	r24, r24
    287a:	69 f0       	breq	.+26     	; 0x2896 <mr_heater_menu_onoff+0x2c>
	{
		srd_set(0, SRD_E | SRD_F); srd_set(1, SRD_CO); srd_set(2, SRD_CN);
    287c:	60 e3       	ldi	r22, 0x30	; 48
    287e:	80 e0       	ldi	r24, 0x00	; 0
    2880:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <srd_set>
    2884:	6c e5       	ldi	r22, 0x5C	; 92
    2886:	81 e0       	ldi	r24, 0x01	; 1
    2888:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <srd_set>
    288c:	64 e5       	ldi	r22, 0x54	; 84
    288e:	82 e0       	ldi	r24, 0x02	; 2
    2890:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <srd_set>
	}
	else
	{
		srd_set(0, SRD_E | SRD_F); srd_set(1, SRD_CO); srd_set(2, SRD_CF); srd_set(3, SRD_CF);
	}
}
    2894:	10 c0       	rjmp	.+32     	; 0x28b6 <mr_heater_menu_onoff+0x4c>
	{
		srd_set(0, SRD_E | SRD_F); srd_set(1, SRD_CO); srd_set(2, SRD_CN);
	}
	else
	{
		srd_set(0, SRD_E | SRD_F); srd_set(1, SRD_CO); srd_set(2, SRD_CF); srd_set(3, SRD_CF);
    2896:	60 e3       	ldi	r22, 0x30	; 48
    2898:	80 e0       	ldi	r24, 0x00	; 0
    289a:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <srd_set>
    289e:	6c e5       	ldi	r22, 0x5C	; 92
    28a0:	81 e0       	ldi	r24, 0x01	; 1
    28a2:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <srd_set>
    28a6:	61 e7       	ldi	r22, 0x71	; 113
    28a8:	82 e0       	ldi	r24, 0x02	; 2
    28aa:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <srd_set>
    28ae:	61 e7       	ldi	r22, 0x71	; 113
    28b0:	83 e0       	ldi	r24, 0x03	; 3
    28b2:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <srd_set>
	}
}
    28b6:	00 00       	nop
    28b8:	0f 90       	pop	r0
    28ba:	df 91       	pop	r29
    28bc:	cf 91       	pop	r28
    28be:	08 95       	ret

000028c0 <mr_heater_menu_target_temp>:

void mr_heater_menu_target_temp(float temp)
{
    28c0:	0f 93       	push	r16
    28c2:	cf 93       	push	r28
    28c4:	df 93       	push	r29
    28c6:	00 d0       	rcall	.+0      	; 0x28c8 <mr_heater_menu_target_temp+0x8>
    28c8:	00 d0       	rcall	.+0      	; 0x28ca <mr_heater_menu_target_temp+0xa>
    28ca:	cd b7       	in	r28, 0x3d	; 61
    28cc:	de b7       	in	r29, 0x3e	; 62
    28ce:	69 83       	std	Y+1, r22	; 0x01
    28d0:	7a 83       	std	Y+2, r23	; 0x02
    28d2:	8b 83       	std	Y+3, r24	; 0x03
    28d4:	9c 83       	std	Y+4, r25	; 0x04
	srd_set(0, SRD_E | SRD_F);
    28d6:	60 e3       	ldi	r22, 0x30	; 48
    28d8:	80 e0       	ldi	r24, 0x00	; 0
    28da:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <srd_set>
	srd_setfloat(temp, 1, 1, 5);
    28de:	89 81       	ldd	r24, Y+1	; 0x01
    28e0:	9a 81       	ldd	r25, Y+2	; 0x02
    28e2:	ab 81       	ldd	r26, Y+3	; 0x03
    28e4:	bc 81       	ldd	r27, Y+4	; 0x04
    28e6:	05 e0       	ldi	r16, 0x05	; 5
    28e8:	21 e0       	ldi	r18, 0x01	; 1
    28ea:	41 e0       	ldi	r20, 0x01	; 1
    28ec:	bc 01       	movw	r22, r24
    28ee:	cd 01       	movw	r24, r26
    28f0:	0e 94 9e 1e 	call	0x3d3c	; 0x3d3c <srd_setfloat>
}
    28f4:	00 00       	nop
    28f6:	0f 90       	pop	r0
    28f8:	0f 90       	pop	r0
    28fa:	0f 90       	pop	r0
    28fc:	0f 90       	pop	r0
    28fe:	df 91       	pop	r29
    2900:	cf 91       	pop	r28
    2902:	0f 91       	pop	r16
    2904:	08 95       	ret

00002906 <mr_heater_menu_pid_p>:

void mr_heater_menu_pid_p(float pid_p)
{
    2906:	0f 93       	push	r16
    2908:	cf 93       	push	r28
    290a:	df 93       	push	r29
    290c:	00 d0       	rcall	.+0      	; 0x290e <mr_heater_menu_pid_p+0x8>
    290e:	00 d0       	rcall	.+0      	; 0x2910 <mr_heater_menu_pid_p+0xa>
    2910:	cd b7       	in	r28, 0x3d	; 61
    2912:	de b7       	in	r29, 0x3e	; 62
    2914:	69 83       	std	Y+1, r22	; 0x01
    2916:	7a 83       	std	Y+2, r23	; 0x02
    2918:	8b 83       	std	Y+3, r24	; 0x03
    291a:	9c 83       	std	Y+4, r25	; 0x04
	srd_set(0, SRD_CP);
    291c:	63 e7       	ldi	r22, 0x73	; 115
    291e:	80 e0       	ldi	r24, 0x00	; 0
    2920:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <srd_set>
	srd_setfloat(pid_p, 1, 2, 5);
    2924:	89 81       	ldd	r24, Y+1	; 0x01
    2926:	9a 81       	ldd	r25, Y+2	; 0x02
    2928:	ab 81       	ldd	r26, Y+3	; 0x03
    292a:	bc 81       	ldd	r27, Y+4	; 0x04
    292c:	05 e0       	ldi	r16, 0x05	; 5
    292e:	22 e0       	ldi	r18, 0x02	; 2
    2930:	41 e0       	ldi	r20, 0x01	; 1
    2932:	bc 01       	movw	r22, r24
    2934:	cd 01       	movw	r24, r26
    2936:	0e 94 9e 1e 	call	0x3d3c	; 0x3d3c <srd_setfloat>
}
    293a:	00 00       	nop
    293c:	0f 90       	pop	r0
    293e:	0f 90       	pop	r0
    2940:	0f 90       	pop	r0
    2942:	0f 90       	pop	r0
    2944:	df 91       	pop	r29
    2946:	cf 91       	pop	r28
    2948:	0f 91       	pop	r16
    294a:	08 95       	ret

0000294c <mr_heater_menu_pid_i>:

void mr_heater_menu_pid_i(float pid_i)
{
    294c:	0f 93       	push	r16
    294e:	cf 93       	push	r28
    2950:	df 93       	push	r29
    2952:	00 d0       	rcall	.+0      	; 0x2954 <mr_heater_menu_pid_i+0x8>
    2954:	00 d0       	rcall	.+0      	; 0x2956 <mr_heater_menu_pid_i+0xa>
    2956:	cd b7       	in	r28, 0x3d	; 61
    2958:	de b7       	in	r29, 0x3e	; 62
    295a:	69 83       	std	Y+1, r22	; 0x01
    295c:	7a 83       	std	Y+2, r23	; 0x02
    295e:	8b 83       	std	Y+3, r24	; 0x03
    2960:	9c 83       	std	Y+4, r25	; 0x04
	srd_set(0, SRD_CI);
    2962:	66 e0       	ldi	r22, 0x06	; 6
    2964:	80 e0       	ldi	r24, 0x00	; 0
    2966:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <srd_set>
	srd_setfloat(pid_i, 1, 2, 5);
    296a:	89 81       	ldd	r24, Y+1	; 0x01
    296c:	9a 81       	ldd	r25, Y+2	; 0x02
    296e:	ab 81       	ldd	r26, Y+3	; 0x03
    2970:	bc 81       	ldd	r27, Y+4	; 0x04
    2972:	05 e0       	ldi	r16, 0x05	; 5
    2974:	22 e0       	ldi	r18, 0x02	; 2
    2976:	41 e0       	ldi	r20, 0x01	; 1
    2978:	bc 01       	movw	r22, r24
    297a:	cd 01       	movw	r24, r26
    297c:	0e 94 9e 1e 	call	0x3d3c	; 0x3d3c <srd_setfloat>
}
    2980:	00 00       	nop
    2982:	0f 90       	pop	r0
    2984:	0f 90       	pop	r0
    2986:	0f 90       	pop	r0
    2988:	0f 90       	pop	r0
    298a:	df 91       	pop	r29
    298c:	cf 91       	pop	r28
    298e:	0f 91       	pop	r16
    2990:	08 95       	ret

00002992 <mr_heater_menu_pid_d>:

void mr_heater_menu_pid_d(float pid_d)
{
    2992:	0f 93       	push	r16
    2994:	cf 93       	push	r28
    2996:	df 93       	push	r29
    2998:	00 d0       	rcall	.+0      	; 0x299a <mr_heater_menu_pid_d+0x8>
    299a:	00 d0       	rcall	.+0      	; 0x299c <mr_heater_menu_pid_d+0xa>
    299c:	cd b7       	in	r28, 0x3d	; 61
    299e:	de b7       	in	r29, 0x3e	; 62
    29a0:	69 83       	std	Y+1, r22	; 0x01
    29a2:	7a 83       	std	Y+2, r23	; 0x02
    29a4:	8b 83       	std	Y+3, r24	; 0x03
    29a6:	9c 83       	std	Y+4, r25	; 0x04
	srd_set(0, SRD_CD);
    29a8:	6e e5       	ldi	r22, 0x5E	; 94
    29aa:	80 e0       	ldi	r24, 0x00	; 0
    29ac:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <srd_set>
	srd_setfloat(pid_d, 1, 2, 5);
    29b0:	89 81       	ldd	r24, Y+1	; 0x01
    29b2:	9a 81       	ldd	r25, Y+2	; 0x02
    29b4:	ab 81       	ldd	r26, Y+3	; 0x03
    29b6:	bc 81       	ldd	r27, Y+4	; 0x04
    29b8:	05 e0       	ldi	r16, 0x05	; 5
    29ba:	22 e0       	ldi	r18, 0x02	; 2
    29bc:	41 e0       	ldi	r20, 0x01	; 1
    29be:	bc 01       	movw	r22, r24
    29c0:	cd 01       	movw	r24, r26
    29c2:	0e 94 9e 1e 	call	0x3d3c	; 0x3d3c <srd_setfloat>
}
    29c6:	00 00       	nop
    29c8:	0f 90       	pop	r0
    29ca:	0f 90       	pop	r0
    29cc:	0f 90       	pop	r0
    29ce:	0f 90       	pop	r0
    29d0:	df 91       	pop	r29
    29d2:	cf 91       	pop	r28
    29d4:	0f 91       	pop	r16
    29d6:	08 95       	ret

000029d8 <mr_heater_menu_offset>:

void mr_heater_menu_offset(float offset)
{
    29d8:	0f 93       	push	r16
    29da:	cf 93       	push	r28
    29dc:	df 93       	push	r29
    29de:	00 d0       	rcall	.+0      	; 0x29e0 <mr_heater_menu_offset+0x8>
    29e0:	00 d0       	rcall	.+0      	; 0x29e2 <mr_heater_menu_offset+0xa>
    29e2:	cd b7       	in	r28, 0x3d	; 61
    29e4:	de b7       	in	r29, 0x3e	; 62
    29e6:	69 83       	std	Y+1, r22	; 0x01
    29e8:	7a 83       	std	Y+2, r23	; 0x02
    29ea:	8b 83       	std	Y+3, r24	; 0x03
    29ec:	9c 83       	std	Y+4, r25	; 0x04
	srd_set(0, SRD_E | SRD_F);
    29ee:	60 e3       	ldi	r22, 0x30	; 48
    29f0:	80 e0       	ldi	r24, 0x00	; 0
    29f2:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <srd_set>
	srd_setfloat(offset, 1, 1, 5);
    29f6:	89 81       	ldd	r24, Y+1	; 0x01
    29f8:	9a 81       	ldd	r25, Y+2	; 0x02
    29fa:	ab 81       	ldd	r26, Y+3	; 0x03
    29fc:	bc 81       	ldd	r27, Y+4	; 0x04
    29fe:	05 e0       	ldi	r16, 0x05	; 5
    2a00:	21 e0       	ldi	r18, 0x01	; 1
    2a02:	41 e0       	ldi	r20, 0x01	; 1
    2a04:	bc 01       	movw	r22, r24
    2a06:	cd 01       	movw	r24, r26
    2a08:	0e 94 9e 1e 	call	0x3d3c	; 0x3d3c <srd_setfloat>
}
    2a0c:	00 00       	nop
    2a0e:	0f 90       	pop	r0
    2a10:	0f 90       	pop	r0
    2a12:	0f 90       	pop	r0
    2a14:	0f 90       	pop	r0
    2a16:	df 91       	pop	r29
    2a18:	cf 91       	pop	r28
    2a1a:	0f 91       	pop	r16
    2a1c:	08 95       	ret

00002a1e <mr_stirrer_menu_dc>:

void mr_stirrer_menu_dc(uint8_t dutycycle)
{
    2a1e:	cf 93       	push	r28
    2a20:	df 93       	push	r29
    2a22:	1f 92       	push	r1
    2a24:	cd b7       	in	r28, 0x3d	; 61
    2a26:	de b7       	in	r29, 0x3e	; 62
    2a28:	89 83       	std	Y+1, r24	; 0x01
	srd_set(0, SRD_E | SRD_F);
    2a2a:	60 e3       	ldi	r22, 0x30	; 48
    2a2c:	80 e0       	ldi	r24, 0x00	; 0
    2a2e:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <srd_set>
	if(dutycycle > 0)
    2a32:	89 81       	ldd	r24, Y+1	; 0x01
    2a34:	88 23       	and	r24, r24
    2a36:	41 f0       	breq	.+16     	; 0x2a48 <mr_stirrer_menu_dc+0x2a>
	{		
		srd_setint16((int16_t)dutycycle, 1, 5);
    2a38:	89 81       	ldd	r24, Y+1	; 0x01
    2a3a:	88 2f       	mov	r24, r24
    2a3c:	90 e0       	ldi	r25, 0x00	; 0
    2a3e:	45 e0       	ldi	r20, 0x05	; 5
    2a40:	61 e0       	ldi	r22, 0x01	; 1
    2a42:	0e 94 d6 1e 	call	0x3dac	; 0x3dac <srd_setint16>
	}
	else
	{
		srd_set(1, SRD_CO); srd_set(2, SRD_CF); srd_set(3, SRD_CF); 
	}	
}
    2a46:	0c c0       	rjmp	.+24     	; 0x2a60 <mr_stirrer_menu_dc+0x42>
	{		
		srd_setint16((int16_t)dutycycle, 1, 5);
	}
	else
	{
		srd_set(1, SRD_CO); srd_set(2, SRD_CF); srd_set(3, SRD_CF); 
    2a48:	6c e5       	ldi	r22, 0x5C	; 92
    2a4a:	81 e0       	ldi	r24, 0x01	; 1
    2a4c:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <srd_set>
    2a50:	61 e7       	ldi	r22, 0x71	; 113
    2a52:	82 e0       	ldi	r24, 0x02	; 2
    2a54:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <srd_set>
    2a58:	61 e7       	ldi	r22, 0x71	; 113
    2a5a:	83 e0       	ldi	r24, 0x03	; 3
    2a5c:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <srd_set>
	}	
}
    2a60:	00 00       	nop
    2a62:	0f 90       	pop	r0
    2a64:	df 91       	pop	r29
    2a66:	cf 91       	pop	r28
    2a68:	08 95       	ret

00002a6a <mr_tprobe_menu>:

void mr_tprobe_menu(uint8_t menu_index)
{
    2a6a:	cf 93       	push	r28
    2a6c:	df 93       	push	r29
    2a6e:	1f 92       	push	r1
    2a70:	cd b7       	in	r28, 0x3d	; 61
    2a72:	de b7       	in	r29, 0x3e	; 62
    2a74:	89 83       	std	Y+1, r24	; 0x01
	switch(menu_index)
    2a76:	89 81       	ldd	r24, Y+1	; 0x01
    2a78:	88 2f       	mov	r24, r24
    2a7a:	90 e0       	ldi	r25, 0x00	; 0
    2a7c:	82 30       	cpi	r24, 0x02	; 2
    2a7e:	91 05       	cpc	r25, r1
    2a80:	01 f1       	breq	.+64     	; 0x2ac2 <mr_tprobe_menu+0x58>
    2a82:	83 30       	cpi	r24, 0x03	; 3
    2a84:	91 05       	cpc	r25, r1
    2a86:	2c f4       	brge	.+10     	; 0x2a92 <mr_tprobe_menu+0x28>
    2a88:	00 97       	sbiw	r24, 0x00	; 0
    2a8a:	49 f0       	breq	.+18     	; 0x2a9e <mr_tprobe_menu+0x34>
    2a8c:	01 97       	sbiw	r24, 0x01	; 1
    2a8e:	81 f0       	breq	.+32     	; 0x2ab0 <mr_tprobe_menu+0x46>
			break;
		case 4: // thermistor 3
			srd_set(0, SRD_CT); srd_set(1, SRD_D3);
			break;
	}
}
    2a90:	33 c0       	rjmp	.+102    	; 0x2af8 <mr_tprobe_menu+0x8e>
	}	
}

void mr_tprobe_menu(uint8_t menu_index)
{
	switch(menu_index)
    2a92:	83 30       	cpi	r24, 0x03	; 3
    2a94:	91 05       	cpc	r25, r1
    2a96:	f1 f0       	breq	.+60     	; 0x2ad4 <mr_tprobe_menu+0x6a>
    2a98:	04 97       	sbiw	r24, 0x04	; 4
    2a9a:	29 f1       	breq	.+74     	; 0x2ae6 <mr_tprobe_menu+0x7c>
			break;
		case 4: // thermistor 3
			srd_set(0, SRD_CT); srd_set(1, SRD_D3);
			break;
	}
}
    2a9c:	2d c0       	rjmp	.+90     	; 0x2af8 <mr_tprobe_menu+0x8e>
void mr_tprobe_menu(uint8_t menu_index)
{
	switch(menu_index)
	{
		case 0: // "--"
			srd_set(0, SRD_MINUS); srd_set(1, SRD_MINUS);
    2a9e:	60 e4       	ldi	r22, 0x40	; 64
    2aa0:	80 e0       	ldi	r24, 0x00	; 0
    2aa2:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <srd_set>
    2aa6:	60 e4       	ldi	r22, 0x40	; 64
    2aa8:	81 e0       	ldi	r24, 0x01	; 1
    2aaa:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <srd_set>
			break;
    2aae:	24 c0       	rjmp	.+72     	; 0x2af8 <mr_tprobe_menu+0x8e>
		case 1: // thermistor 0
			srd_set(0, SRD_CT); srd_set(1, SRD_D0);
    2ab0:	68 e7       	ldi	r22, 0x78	; 120
    2ab2:	80 e0       	ldi	r24, 0x00	; 0
    2ab4:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <srd_set>
    2ab8:	6f e3       	ldi	r22, 0x3F	; 63
    2aba:	81 e0       	ldi	r24, 0x01	; 1
    2abc:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <srd_set>
			break;
    2ac0:	1b c0       	rjmp	.+54     	; 0x2af8 <mr_tprobe_menu+0x8e>
		case 2: // thermistor 1
			srd_set(0, SRD_CT); srd_set(1, SRD_D1);
    2ac2:	68 e7       	ldi	r22, 0x78	; 120
    2ac4:	80 e0       	ldi	r24, 0x00	; 0
    2ac6:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <srd_set>
    2aca:	66 e0       	ldi	r22, 0x06	; 6
    2acc:	81 e0       	ldi	r24, 0x01	; 1
    2ace:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <srd_set>
			break;
    2ad2:	12 c0       	rjmp	.+36     	; 0x2af8 <mr_tprobe_menu+0x8e>
		case 3: // thermistor 2
			srd_set(0, SRD_CT); srd_set(1, SRD_D2);
    2ad4:	68 e7       	ldi	r22, 0x78	; 120
    2ad6:	80 e0       	ldi	r24, 0x00	; 0
    2ad8:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <srd_set>
    2adc:	6b e5       	ldi	r22, 0x5B	; 91
    2ade:	81 e0       	ldi	r24, 0x01	; 1
    2ae0:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <srd_set>
			break;
    2ae4:	09 c0       	rjmp	.+18     	; 0x2af8 <mr_tprobe_menu+0x8e>
		case 4: // thermistor 3
			srd_set(0, SRD_CT); srd_set(1, SRD_D3);
    2ae6:	68 e7       	ldi	r22, 0x78	; 120
    2ae8:	80 e0       	ldi	r24, 0x00	; 0
    2aea:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <srd_set>
    2aee:	6f e4       	ldi	r22, 0x4F	; 79
    2af0:	81 e0       	ldi	r24, 0x01	; 1
    2af2:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <srd_set>
			break;
    2af6:	00 00       	nop
	}
}
    2af8:	00 00       	nop
    2afa:	0f 90       	pop	r0
    2afc:	df 91       	pop	r29
    2afe:	cf 91       	pop	r28
    2b00:	08 95       	ret

00002b02 <mr_tprobe_calib_menu>:

void mr_tprobe_calib_menu(float resistance)
{
    2b02:	0f 93       	push	r16
    2b04:	cf 93       	push	r28
    2b06:	df 93       	push	r29
    2b08:	00 d0       	rcall	.+0      	; 0x2b0a <mr_tprobe_calib_menu+0x8>
    2b0a:	00 d0       	rcall	.+0      	; 0x2b0c <mr_tprobe_calib_menu+0xa>
    2b0c:	cd b7       	in	r28, 0x3d	; 61
    2b0e:	de b7       	in	r29, 0x3e	; 62
    2b10:	69 83       	std	Y+1, r22	; 0x01
    2b12:	7a 83       	std	Y+2, r23	; 0x02
    2b14:	8b 83       	std	Y+3, r24	; 0x03
    2b16:	9c 83       	std	Y+4, r25	; 0x04
	srd_setfloat(fabs(resistance) / 1000, 0, 3, 6);
    2b18:	89 81       	ldd	r24, Y+1	; 0x01
    2b1a:	9a 81       	ldd	r25, Y+2	; 0x02
    2b1c:	ab 81       	ldd	r26, Y+3	; 0x03
    2b1e:	bc 81       	ldd	r27, Y+4	; 0x04
    2b20:	bf 77       	andi	r27, 0x7F	; 127
    2b22:	20 e0       	ldi	r18, 0x00	; 0
    2b24:	30 e0       	ldi	r19, 0x00	; 0
    2b26:	4a e7       	ldi	r20, 0x7A	; 122
    2b28:	54 e4       	ldi	r21, 0x44	; 68
    2b2a:	bc 01       	movw	r22, r24
    2b2c:	cd 01       	movw	r24, r26
    2b2e:	0e 94 d5 25 	call	0x4baa	; 0x4baa <__divsf3>
    2b32:	dc 01       	movw	r26, r24
    2b34:	cb 01       	movw	r24, r22
    2b36:	06 e0       	ldi	r16, 0x06	; 6
    2b38:	23 e0       	ldi	r18, 0x03	; 3
    2b3a:	40 e0       	ldi	r20, 0x00	; 0
    2b3c:	bc 01       	movw	r22, r24
    2b3e:	cd 01       	movw	r24, r26
    2b40:	0e 94 9e 1e 	call	0x3d3c	; 0x3d3c <srd_setfloat>
}
    2b44:	00 00       	nop
    2b46:	0f 90       	pop	r0
    2b48:	0f 90       	pop	r0
    2b4a:	0f 90       	pop	r0
    2b4c:	0f 90       	pop	r0
    2b4e:	df 91       	pop	r29
    2b50:	cf 91       	pop	r28
    2b52:	0f 91       	pop	r16
    2b54:	08 95       	ret

00002b56 <mr_tprobe_calib_menu_nc>:

void mr_tprobe_calib_menu_nc()
{
    2b56:	cf 93       	push	r28
    2b58:	df 93       	push	r29
    2b5a:	cd b7       	in	r28, 0x3d	; 61
    2b5c:	de b7       	in	r29, 0x3e	; 62
	srd_set(0,SRD_CN); srd_set(1,SRD_CC);
    2b5e:	64 e5       	ldi	r22, 0x54	; 84
    2b60:	80 e0       	ldi	r24, 0x00	; 0
    2b62:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <srd_set>
    2b66:	69 e3       	ldi	r22, 0x39	; 57
    2b68:	81 e0       	ldi	r24, 0x01	; 1
    2b6a:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <srd_set>
}
    2b6e:	00 00       	nop
    2b70:	df 91       	pop	r29
    2b72:	cf 91       	pop	r28
    2b74:	08 95       	ret

00002b76 <mr_thermistor_error>:

void mr_thermistor_error(ErrorCode error)
{
    2b76:	cf 93       	push	r28
    2b78:	df 93       	push	r29
    2b7a:	1f 92       	push	r1
    2b7c:	cd b7       	in	r28, 0x3d	; 61
    2b7e:	de b7       	in	r29, 0x3e	; 62
    2b80:	89 83       	std	Y+1, r24	; 0x01
	srd_set(0, SRD_CT); srd_set(1, SRD_CH | SRD_DOT);
    2b82:	68 e7       	ldi	r22, 0x78	; 120
    2b84:	80 e0       	ldi	r24, 0x00	; 0
    2b86:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <srd_set>
    2b8a:	64 ef       	ldi	r22, 0xF4	; 244
    2b8c:	81 e0       	ldi	r24, 0x01	; 1
    2b8e:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <srd_set>
	switch(error)
    2b92:	89 81       	ldd	r24, Y+1	; 0x01
    2b94:	88 2f       	mov	r24, r24
    2b96:	90 e0       	ldi	r25, 0x00	; 0
    2b98:	82 30       	cpi	r24, 0x02	; 2
    2b9a:	91 05       	cpc	r25, r1
    2b9c:	61 f0       	breq	.+24     	; 0x2bb6 <mr_thermistor_error+0x40>
    2b9e:	83 30       	cpi	r24, 0x03	; 3
    2ba0:	91 05       	cpc	r25, r1
    2ba2:	1c f4       	brge	.+6      	; 0x2baa <mr_thermistor_error+0x34>
    2ba4:	01 97       	sbiw	r24, 0x01	; 1
    2ba6:	c1 f0       	breq	.+48     	; 0x2bd8 <mr_thermistor_error+0x62>
			break;
		case EC_NO_CONTROLLING_TPROBE:
			srd_set(2, SRD_CN); srd_set(3, SRD_CO); srd_set(4, SRD_CP); srd_set(5, SRD_CE);
			break;
		default:
			break;
    2ba8:	4a c0       	rjmp	.+148    	; 0x2c3e <mr_thermistor_error+0xc8>
}

void mr_thermistor_error(ErrorCode error)
{
	srd_set(0, SRD_CT); srd_set(1, SRD_CH | SRD_DOT);
	switch(error)
    2baa:	83 30       	cpi	r24, 0x03	; 3
    2bac:	91 05       	cpc	r25, r1
    2bae:	29 f1       	breq	.+74     	; 0x2bfa <mr_thermistor_error+0x84>
    2bb0:	04 97       	sbiw	r24, 0x04	; 4
    2bb2:	a1 f1       	breq	.+104    	; 0x2c1c <mr_thermistor_error+0xa6>
			break;
		case EC_NO_CONTROLLING_TPROBE:
			srd_set(2, SRD_CN); srd_set(3, SRD_CO); srd_set(4, SRD_CP); srd_set(5, SRD_CE);
			break;
		default:
			break;
    2bb4:	44 c0       	rjmp	.+136    	; 0x2c3e <mr_thermistor_error+0xc8>
{
	srd_set(0, SRD_CT); srd_set(1, SRD_CH | SRD_DOT);
	switch(error)
	{
		case EC_THERMISTOR_SHORT_CIRCUIT:
			srd_set(2, SRD_CS); srd_set(3, SRD_CH); srd_set(4, SRD_CR); srd_set(5, SRD_CT);
    2bb6:	6d e6       	ldi	r22, 0x6D	; 109
    2bb8:	82 e0       	ldi	r24, 0x02	; 2
    2bba:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <srd_set>
    2bbe:	64 e7       	ldi	r22, 0x74	; 116
    2bc0:	83 e0       	ldi	r24, 0x03	; 3
    2bc2:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <srd_set>
    2bc6:	60 e5       	ldi	r22, 0x50	; 80
    2bc8:	84 e0       	ldi	r24, 0x04	; 4
    2bca:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <srd_set>
    2bce:	68 e7       	ldi	r22, 0x78	; 120
    2bd0:	85 e0       	ldi	r24, 0x05	; 5
    2bd2:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <srd_set>
			break;
    2bd6:	33 c0       	rjmp	.+102    	; 0x2c3e <mr_thermistor_error+0xc8>
		case EC_THERMISTOR_OPEN_CIRCUIT:
			srd_set(2, SRD_CO); srd_set(3, SRD_CP); srd_set(4, SRD_CE); srd_set(5, SRD_CN);
    2bd8:	6c e5       	ldi	r22, 0x5C	; 92
    2bda:	82 e0       	ldi	r24, 0x02	; 2
    2bdc:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <srd_set>
    2be0:	63 e7       	ldi	r22, 0x73	; 115
    2be2:	83 e0       	ldi	r24, 0x03	; 3
    2be4:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <srd_set>
    2be8:	69 e7       	ldi	r22, 0x79	; 121
    2bea:	84 e0       	ldi	r24, 0x04	; 4
    2bec:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <srd_set>
    2bf0:	64 e5       	ldi	r22, 0x54	; 84
    2bf2:	85 e0       	ldi	r24, 0x05	; 5
    2bf4:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <srd_set>
			break;
    2bf8:	22 c0       	rjmp	.+68     	; 0x2c3e <mr_thermistor_error+0xc8>
		case EC_THERMISTOR_NOT_RESPONDING:
			srd_set(2, SRD_CN); srd_set(3, SRD_CR); srd_set(4, SRD_CE); srd_set(5, SRD_CS);
    2bfa:	64 e5       	ldi	r22, 0x54	; 84
    2bfc:	82 e0       	ldi	r24, 0x02	; 2
    2bfe:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <srd_set>
    2c02:	60 e5       	ldi	r22, 0x50	; 80
    2c04:	83 e0       	ldi	r24, 0x03	; 3
    2c06:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <srd_set>
    2c0a:	69 e7       	ldi	r22, 0x79	; 121
    2c0c:	84 e0       	ldi	r24, 0x04	; 4
    2c0e:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <srd_set>
    2c12:	6d e6       	ldi	r22, 0x6D	; 109
    2c14:	85 e0       	ldi	r24, 0x05	; 5
    2c16:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <srd_set>
			break;
    2c1a:	11 c0       	rjmp	.+34     	; 0x2c3e <mr_thermistor_error+0xc8>
		case EC_NO_CONTROLLING_TPROBE:
			srd_set(2, SRD_CN); srd_set(3, SRD_CO); srd_set(4, SRD_CP); srd_set(5, SRD_CE);
    2c1c:	64 e5       	ldi	r22, 0x54	; 84
    2c1e:	82 e0       	ldi	r24, 0x02	; 2
    2c20:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <srd_set>
    2c24:	6c e5       	ldi	r22, 0x5C	; 92
    2c26:	83 e0       	ldi	r24, 0x03	; 3
    2c28:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <srd_set>
    2c2c:	63 e7       	ldi	r22, 0x73	; 115
    2c2e:	84 e0       	ldi	r24, 0x04	; 4
    2c30:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <srd_set>
    2c34:	69 e7       	ldi	r22, 0x79	; 121
    2c36:	85 e0       	ldi	r24, 0x05	; 5
    2c38:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <srd_set>
			break;
    2c3c:	00 00       	nop
		default:
			break;
	}
    2c3e:	00 00       	nop
    2c40:	0f 90       	pop	r0
    2c42:	df 91       	pop	r29
    2c44:	cf 91       	pop	r28
    2c46:	08 95       	ret

00002c48 <decpowi16>:
	return num1 < num2 ? num1 : num2;
}
uint64_t umin64(uint64_t num1, uint64_t num2)
{
	return num1 < num2 ? num1 : num2;
}
    2c48:	cf 93       	push	r28
    2c4a:	df 93       	push	r29
    2c4c:	00 d0       	rcall	.+0      	; 0x2c4e <decpowi16+0x6>
    2c4e:	00 d0       	rcall	.+0      	; 0x2c50 <decpowi16+0x8>
    2c50:	1f 92       	push	r1
    2c52:	cd b7       	in	r28, 0x3d	; 61
    2c54:	de b7       	in	r29, 0x3e	; 62
    2c56:	9d 83       	std	Y+5, r25	; 0x05
    2c58:	8c 83       	std	Y+4, r24	; 0x04
    2c5a:	8c 81       	ldd	r24, Y+4	; 0x04
    2c5c:	9d 81       	ldd	r25, Y+5	; 0x05
    2c5e:	99 23       	and	r25, r25
    2c60:	14 f4       	brge	.+4      	; 0x2c66 <decpowi16+0x1e>
    2c62:	0e 94 03 29 	call	0x5206	; 0x5206 <abort>
    2c66:	81 e0       	ldi	r24, 0x01	; 1
    2c68:	90 e0       	ldi	r25, 0x00	; 0
    2c6a:	9a 83       	std	Y+2, r25	; 0x02
    2c6c:	89 83       	std	Y+1, r24	; 0x01
    2c6e:	1b 82       	std	Y+3, r1	; 0x03
    2c70:	10 c0       	rjmp	.+32     	; 0x2c92 <decpowi16+0x4a>
    2c72:	89 81       	ldd	r24, Y+1	; 0x01
    2c74:	9a 81       	ldd	r25, Y+2	; 0x02
    2c76:	88 0f       	add	r24, r24
    2c78:	99 1f       	adc	r25, r25
    2c7a:	9c 01       	movw	r18, r24
    2c7c:	22 0f       	add	r18, r18
    2c7e:	33 1f       	adc	r19, r19
    2c80:	22 0f       	add	r18, r18
    2c82:	33 1f       	adc	r19, r19
    2c84:	82 0f       	add	r24, r18
    2c86:	93 1f       	adc	r25, r19
    2c88:	9a 83       	std	Y+2, r25	; 0x02
    2c8a:	89 83       	std	Y+1, r24	; 0x01
    2c8c:	8b 81       	ldd	r24, Y+3	; 0x03
    2c8e:	8f 5f       	subi	r24, 0xFF	; 255
    2c90:	8b 83       	std	Y+3, r24	; 0x03
    2c92:	8b 81       	ldd	r24, Y+3	; 0x03
    2c94:	28 2f       	mov	r18, r24
    2c96:	30 e0       	ldi	r19, 0x00	; 0
    2c98:	8c 81       	ldd	r24, Y+4	; 0x04
    2c9a:	9d 81       	ldd	r25, Y+5	; 0x05
    2c9c:	28 17       	cp	r18, r24
    2c9e:	39 07       	cpc	r19, r25
    2ca0:	44 f3       	brlt	.-48     	; 0x2c72 <decpowi16+0x2a>
    2ca2:	89 81       	ldd	r24, Y+1	; 0x01
    2ca4:	9a 81       	ldd	r25, Y+2	; 0x02
    2ca6:	0f 90       	pop	r0
    2ca8:	0f 90       	pop	r0
    2caa:	0f 90       	pop	r0
    2cac:	0f 90       	pop	r0
    2cae:	0f 90       	pop	r0
    2cb0:	df 91       	pop	r29
    2cb2:	cf 91       	pop	r28
    2cb4:	08 95       	ret

00002cb6 <imax8>:
    2cb6:	cf 93       	push	r28
    2cb8:	df 93       	push	r29
    2cba:	00 d0       	rcall	.+0      	; 0x2cbc <imax8+0x6>
    2cbc:	cd b7       	in	r28, 0x3d	; 61
    2cbe:	de b7       	in	r29, 0x3e	; 62
    2cc0:	89 83       	std	Y+1, r24	; 0x01
    2cc2:	6a 83       	std	Y+2, r22	; 0x02
    2cc4:	99 81       	ldd	r25, Y+1	; 0x01
    2cc6:	8a 81       	ldd	r24, Y+2	; 0x02
    2cc8:	89 17       	cp	r24, r25
    2cca:	0c f4       	brge	.+2      	; 0x2cce <imax8+0x18>
    2ccc:	89 2f       	mov	r24, r25
    2cce:	0f 90       	pop	r0
    2cd0:	0f 90       	pop	r0
    2cd2:	df 91       	pop	r29
    2cd4:	cf 91       	pop	r28
    2cd6:	08 95       	ret

00002cd8 <imax16>:
    2cd8:	cf 93       	push	r28
    2cda:	df 93       	push	r29
    2cdc:	00 d0       	rcall	.+0      	; 0x2cde <imax16+0x6>
    2cde:	00 d0       	rcall	.+0      	; 0x2ce0 <imax16+0x8>
    2ce0:	cd b7       	in	r28, 0x3d	; 61
    2ce2:	de b7       	in	r29, 0x3e	; 62
    2ce4:	9a 83       	std	Y+2, r25	; 0x02
    2ce6:	89 83       	std	Y+1, r24	; 0x01
    2ce8:	7c 83       	std	Y+4, r23	; 0x04
    2cea:	6b 83       	std	Y+3, r22	; 0x03
    2cec:	29 81       	ldd	r18, Y+1	; 0x01
    2cee:	3a 81       	ldd	r19, Y+2	; 0x02
    2cf0:	8b 81       	ldd	r24, Y+3	; 0x03
    2cf2:	9c 81       	ldd	r25, Y+4	; 0x04
    2cf4:	82 17       	cp	r24, r18
    2cf6:	93 07       	cpc	r25, r19
    2cf8:	0c f4       	brge	.+2      	; 0x2cfc <imax16+0x24>
    2cfa:	c9 01       	movw	r24, r18
    2cfc:	0f 90       	pop	r0
    2cfe:	0f 90       	pop	r0
    2d00:	0f 90       	pop	r0
    2d02:	0f 90       	pop	r0
    2d04:	df 91       	pop	r29
    2d06:	cf 91       	pop	r28
    2d08:	08 95       	ret

00002d0a <imin8>:
    2d0a:	cf 93       	push	r28
    2d0c:	df 93       	push	r29
    2d0e:	00 d0       	rcall	.+0      	; 0x2d10 <imin8+0x6>
    2d10:	cd b7       	in	r28, 0x3d	; 61
    2d12:	de b7       	in	r29, 0x3e	; 62
    2d14:	89 83       	std	Y+1, r24	; 0x01
    2d16:	6a 83       	std	Y+2, r22	; 0x02
    2d18:	99 81       	ldd	r25, Y+1	; 0x01
    2d1a:	8a 81       	ldd	r24, Y+2	; 0x02
    2d1c:	98 17       	cp	r25, r24
    2d1e:	0c f4       	brge	.+2      	; 0x2d22 <imin8+0x18>
    2d20:	89 2f       	mov	r24, r25
    2d22:	0f 90       	pop	r0
    2d24:	0f 90       	pop	r0
    2d26:	df 91       	pop	r29
    2d28:	cf 91       	pop	r28
    2d2a:	08 95       	ret

00002d2c <imin16>:
    2d2c:	cf 93       	push	r28
    2d2e:	df 93       	push	r29
    2d30:	00 d0       	rcall	.+0      	; 0x2d32 <imin16+0x6>
    2d32:	00 d0       	rcall	.+0      	; 0x2d34 <imin16+0x8>
    2d34:	cd b7       	in	r28, 0x3d	; 61
    2d36:	de b7       	in	r29, 0x3e	; 62
    2d38:	9a 83       	std	Y+2, r25	; 0x02
    2d3a:	89 83       	std	Y+1, r24	; 0x01
    2d3c:	7c 83       	std	Y+4, r23	; 0x04
    2d3e:	6b 83       	std	Y+3, r22	; 0x03
    2d40:	29 81       	ldd	r18, Y+1	; 0x01
    2d42:	3a 81       	ldd	r19, Y+2	; 0x02
    2d44:	8b 81       	ldd	r24, Y+3	; 0x03
    2d46:	9c 81       	ldd	r25, Y+4	; 0x04
    2d48:	28 17       	cp	r18, r24
    2d4a:	39 07       	cpc	r19, r25
    2d4c:	0c f4       	brge	.+2      	; 0x2d50 <imin16+0x24>
    2d4e:	c9 01       	movw	r24, r18
    2d50:	0f 90       	pop	r0
    2d52:	0f 90       	pop	r0
    2d54:	0f 90       	pop	r0
    2d56:	0f 90       	pop	r0
    2d58:	df 91       	pop	r29
    2d5a:	cf 91       	pop	r28
    2d5c:	08 95       	ret

00002d5e <umax8>:
    2d5e:	cf 93       	push	r28
    2d60:	df 93       	push	r29
    2d62:	00 d0       	rcall	.+0      	; 0x2d64 <umax8+0x6>
    2d64:	cd b7       	in	r28, 0x3d	; 61
    2d66:	de b7       	in	r29, 0x3e	; 62
    2d68:	89 83       	std	Y+1, r24	; 0x01
    2d6a:	6a 83       	std	Y+2, r22	; 0x02
    2d6c:	99 81       	ldd	r25, Y+1	; 0x01
    2d6e:	8a 81       	ldd	r24, Y+2	; 0x02
    2d70:	89 17       	cp	r24, r25
    2d72:	08 f4       	brcc	.+2      	; 0x2d76 <umax8+0x18>
    2d74:	89 2f       	mov	r24, r25
    2d76:	0f 90       	pop	r0
    2d78:	0f 90       	pop	r0
    2d7a:	df 91       	pop	r29
    2d7c:	cf 91       	pop	r28
    2d7e:	08 95       	ret

00002d80 <umin8>:
    2d80:	cf 93       	push	r28
    2d82:	df 93       	push	r29
    2d84:	00 d0       	rcall	.+0      	; 0x2d86 <umin8+0x6>
    2d86:	cd b7       	in	r28, 0x3d	; 61
    2d88:	de b7       	in	r29, 0x3e	; 62
    2d8a:	89 83       	std	Y+1, r24	; 0x01
    2d8c:	6a 83       	std	Y+2, r22	; 0x02
    2d8e:	99 81       	ldd	r25, Y+1	; 0x01
    2d90:	8a 81       	ldd	r24, Y+2	; 0x02
    2d92:	98 17       	cp	r25, r24
    2d94:	08 f4       	brcc	.+2      	; 0x2d98 <umin8+0x18>
    2d96:	89 2f       	mov	r24, r25
    2d98:	0f 90       	pop	r0
    2d9a:	0f 90       	pop	r0
    2d9c:	df 91       	pop	r29
    2d9e:	cf 91       	pop	r28
    2da0:	08 95       	ret

00002da2 <fmax>:
float fmax(float num1, float num2)
{
    2da2:	cf 93       	push	r28
    2da4:	df 93       	push	r29
    2da6:	cd b7       	in	r28, 0x3d	; 61
    2da8:	de b7       	in	r29, 0x3e	; 62
    2daa:	28 97       	sbiw	r28, 0x08	; 8
    2dac:	0f b6       	in	r0, 0x3f	; 63
    2dae:	f8 94       	cli
    2db0:	de bf       	out	0x3e, r29	; 62
    2db2:	0f be       	out	0x3f, r0	; 63
    2db4:	cd bf       	out	0x3d, r28	; 61
    2db6:	69 83       	std	Y+1, r22	; 0x01
    2db8:	7a 83       	std	Y+2, r23	; 0x02
    2dba:	8b 83       	std	Y+3, r24	; 0x03
    2dbc:	9c 83       	std	Y+4, r25	; 0x04
    2dbe:	2d 83       	std	Y+5, r18	; 0x05
    2dc0:	3e 83       	std	Y+6, r19	; 0x06
    2dc2:	4f 83       	std	Y+7, r20	; 0x07
    2dc4:	58 87       	std	Y+8, r21	; 0x08
	return num1 > num2 ? num1 : num2;
    2dc6:	2d 81       	ldd	r18, Y+5	; 0x05
    2dc8:	3e 81       	ldd	r19, Y+6	; 0x06
    2dca:	4f 81       	ldd	r20, Y+7	; 0x07
    2dcc:	58 85       	ldd	r21, Y+8	; 0x08
    2dce:	69 81       	ldd	r22, Y+1	; 0x01
    2dd0:	7a 81       	ldd	r23, Y+2	; 0x02
    2dd2:	8b 81       	ldd	r24, Y+3	; 0x03
    2dd4:	9c 81       	ldd	r25, Y+4	; 0x04
    2dd6:	0e 94 7b 27 	call	0x4ef6	; 0x4ef6 <__gesf2>
    2dda:	18 16       	cp	r1, r24
    2ddc:	2c f4       	brge	.+10     	; 0x2de8 <fmax+0x46>
    2dde:	89 81       	ldd	r24, Y+1	; 0x01
    2de0:	9a 81       	ldd	r25, Y+2	; 0x02
    2de2:	ab 81       	ldd	r26, Y+3	; 0x03
    2de4:	bc 81       	ldd	r27, Y+4	; 0x04
    2de6:	04 c0       	rjmp	.+8      	; 0x2df0 <fmax+0x4e>
    2de8:	8d 81       	ldd	r24, Y+5	; 0x05
    2dea:	9e 81       	ldd	r25, Y+6	; 0x06
    2dec:	af 81       	ldd	r26, Y+7	; 0x07
    2dee:	b8 85       	ldd	r27, Y+8	; 0x08
}
    2df0:	bc 01       	movw	r22, r24
    2df2:	cd 01       	movw	r24, r26
    2df4:	28 96       	adiw	r28, 0x08	; 8
    2df6:	0f b6       	in	r0, 0x3f	; 63
    2df8:	f8 94       	cli
    2dfa:	de bf       	out	0x3e, r29	; 62
    2dfc:	0f be       	out	0x3f, r0	; 63
    2dfe:	cd bf       	out	0x3d, r28	; 61
    2e00:	df 91       	pop	r29
    2e02:	cf 91       	pop	r28
    2e04:	08 95       	ret

00002e06 <fmin>:
float fmin(float num1, float num2)
{
    2e06:	cf 93       	push	r28
    2e08:	df 93       	push	r29
    2e0a:	cd b7       	in	r28, 0x3d	; 61
    2e0c:	de b7       	in	r29, 0x3e	; 62
    2e0e:	28 97       	sbiw	r28, 0x08	; 8
    2e10:	0f b6       	in	r0, 0x3f	; 63
    2e12:	f8 94       	cli
    2e14:	de bf       	out	0x3e, r29	; 62
    2e16:	0f be       	out	0x3f, r0	; 63
    2e18:	cd bf       	out	0x3d, r28	; 61
    2e1a:	69 83       	std	Y+1, r22	; 0x01
    2e1c:	7a 83       	std	Y+2, r23	; 0x02
    2e1e:	8b 83       	std	Y+3, r24	; 0x03
    2e20:	9c 83       	std	Y+4, r25	; 0x04
    2e22:	2d 83       	std	Y+5, r18	; 0x05
    2e24:	3e 83       	std	Y+6, r19	; 0x06
    2e26:	4f 83       	std	Y+7, r20	; 0x07
    2e28:	58 87       	std	Y+8, r21	; 0x08
	return num1 < num2 ? num1 : num2;
    2e2a:	2d 81       	ldd	r18, Y+5	; 0x05
    2e2c:	3e 81       	ldd	r19, Y+6	; 0x06
    2e2e:	4f 81       	ldd	r20, Y+7	; 0x07
    2e30:	58 85       	ldd	r21, Y+8	; 0x08
    2e32:	69 81       	ldd	r22, Y+1	; 0x01
    2e34:	7a 81       	ldd	r23, Y+2	; 0x02
    2e36:	8b 81       	ldd	r24, Y+3	; 0x03
    2e38:	9c 81       	ldd	r25, Y+4	; 0x04
    2e3a:	0e 94 d0 25 	call	0x4ba0	; 0x4ba0 <__cmpsf2>
    2e3e:	88 23       	and	r24, r24
    2e40:	2c f4       	brge	.+10     	; 0x2e4c <fmin+0x46>
    2e42:	89 81       	ldd	r24, Y+1	; 0x01
    2e44:	9a 81       	ldd	r25, Y+2	; 0x02
    2e46:	ab 81       	ldd	r26, Y+3	; 0x03
    2e48:	bc 81       	ldd	r27, Y+4	; 0x04
    2e4a:	04 c0       	rjmp	.+8      	; 0x2e54 <fmin+0x4e>
    2e4c:	8d 81       	ldd	r24, Y+5	; 0x05
    2e4e:	9e 81       	ldd	r25, Y+6	; 0x06
    2e50:	af 81       	ldd	r26, Y+7	; 0x07
    2e52:	b8 85       	ldd	r27, Y+8	; 0x08
}
    2e54:	bc 01       	movw	r22, r24
    2e56:	cd 01       	movw	r24, r26
    2e58:	28 96       	adiw	r28, 0x08	; 8
    2e5a:	0f b6       	in	r0, 0x3f	; 63
    2e5c:	f8 94       	cli
    2e5e:	de bf       	out	0x3e, r29	; 62
    2e60:	0f be       	out	0x3f, r0	; 63
    2e62:	cd bf       	out	0x3d, r28	; 61
    2e64:	df 91       	pop	r29
    2e66:	cf 91       	pop	r28
    2e68:	08 95       	ret

00002e6a <pid_init>:

#include "PID.h"
#include "my_util.h"

void pid_init(pid_state_t* state, float pid_p, float pid_i, float pid_d, float control_min, float control_max)
{
    2e6a:	8f 92       	push	r8
    2e6c:	9f 92       	push	r9
    2e6e:	af 92       	push	r10
    2e70:	bf 92       	push	r11
    2e72:	cf 92       	push	r12
    2e74:	df 92       	push	r13
    2e76:	ef 92       	push	r14
    2e78:	ff 92       	push	r15
    2e7a:	0f 93       	push	r16
    2e7c:	1f 93       	push	r17
    2e7e:	cf 93       	push	r28
    2e80:	df 93       	push	r29
    2e82:	cd b7       	in	r28, 0x3d	; 61
    2e84:	de b7       	in	r29, 0x3e	; 62
    2e86:	62 97       	sbiw	r28, 0x12	; 18
    2e88:	0f b6       	in	r0, 0x3f	; 63
    2e8a:	f8 94       	cli
    2e8c:	de bf       	out	0x3e, r29	; 62
    2e8e:	0f be       	out	0x3f, r0	; 63
    2e90:	cd bf       	out	0x3d, r28	; 61
    2e92:	9a 83       	std	Y+2, r25	; 0x02
    2e94:	89 83       	std	Y+1, r24	; 0x01
    2e96:	4b 83       	std	Y+3, r20	; 0x03
    2e98:	5c 83       	std	Y+4, r21	; 0x04
    2e9a:	6d 83       	std	Y+5, r22	; 0x05
    2e9c:	7e 83       	std	Y+6, r23	; 0x06
    2e9e:	0f 83       	std	Y+7, r16	; 0x07
    2ea0:	18 87       	std	Y+8, r17	; 0x08
    2ea2:	29 87       	std	Y+9, r18	; 0x09
    2ea4:	3a 87       	std	Y+10, r19	; 0x0a
    2ea6:	cb 86       	std	Y+11, r12	; 0x0b
    2ea8:	dc 86       	std	Y+12, r13	; 0x0c
    2eaa:	ed 86       	std	Y+13, r14	; 0x0d
    2eac:	fe 86       	std	Y+14, r15	; 0x0e
    2eae:	8f 86       	std	Y+15, r8	; 0x0f
    2eb0:	98 8a       	std	Y+16, r9	; 0x10
    2eb2:	a9 8a       	std	Y+17, r10	; 0x11
    2eb4:	ba 8a       	std	Y+18, r11	; 0x12
	state->kp = pid_p;
    2eb6:	29 81       	ldd	r18, Y+1	; 0x01
    2eb8:	3a 81       	ldd	r19, Y+2	; 0x02
    2eba:	8b 81       	ldd	r24, Y+3	; 0x03
    2ebc:	9c 81       	ldd	r25, Y+4	; 0x04
    2ebe:	ad 81       	ldd	r26, Y+5	; 0x05
    2ec0:	be 81       	ldd	r27, Y+6	; 0x06
    2ec2:	f9 01       	movw	r30, r18
    2ec4:	80 87       	std	Z+8, r24	; 0x08
    2ec6:	91 87       	std	Z+9, r25	; 0x09
    2ec8:	a2 87       	std	Z+10, r26	; 0x0a
    2eca:	b3 87       	std	Z+11, r27	; 0x0b
	state->ki = pid_i;
    2ecc:	29 81       	ldd	r18, Y+1	; 0x01
    2ece:	3a 81       	ldd	r19, Y+2	; 0x02
    2ed0:	8f 81       	ldd	r24, Y+7	; 0x07
    2ed2:	98 85       	ldd	r25, Y+8	; 0x08
    2ed4:	a9 85       	ldd	r26, Y+9	; 0x09
    2ed6:	ba 85       	ldd	r27, Y+10	; 0x0a
    2ed8:	f9 01       	movw	r30, r18
    2eda:	84 87       	std	Z+12, r24	; 0x0c
    2edc:	95 87       	std	Z+13, r25	; 0x0d
    2ede:	a6 87       	std	Z+14, r26	; 0x0e
    2ee0:	b7 87       	std	Z+15, r27	; 0x0f
	state->kd = pid_d;
    2ee2:	29 81       	ldd	r18, Y+1	; 0x01
    2ee4:	3a 81       	ldd	r19, Y+2	; 0x02
    2ee6:	8b 85       	ldd	r24, Y+11	; 0x0b
    2ee8:	9c 85       	ldd	r25, Y+12	; 0x0c
    2eea:	ad 85       	ldd	r26, Y+13	; 0x0d
    2eec:	be 85       	ldd	r27, Y+14	; 0x0e
    2eee:	f9 01       	movw	r30, r18
    2ef0:	80 8b       	std	Z+16, r24	; 0x10
    2ef2:	91 8b       	std	Z+17, r25	; 0x11
    2ef4:	a2 8b       	std	Z+18, r26	; 0x12
    2ef6:	b3 8b       	std	Z+19, r27	; 0x13
	state->control_max = control_max;
    2ef8:	29 81       	ldd	r18, Y+1	; 0x01
    2efa:	3a 81       	ldd	r19, Y+2	; 0x02
    2efc:	89 a1       	ldd	r24, Y+33	; 0x21
    2efe:	9a a1       	ldd	r25, Y+34	; 0x22
    2f00:	ab a1       	ldd	r26, Y+35	; 0x23
    2f02:	bc a1       	ldd	r27, Y+36	; 0x24
    2f04:	f9 01       	movw	r30, r18
    2f06:	80 8f       	std	Z+24, r24	; 0x18
    2f08:	91 8f       	std	Z+25, r25	; 0x19
    2f0a:	a2 8f       	std	Z+26, r26	; 0x1a
    2f0c:	b3 8f       	std	Z+27, r27	; 0x1b
	state->control_min = control_min;
    2f0e:	29 81       	ldd	r18, Y+1	; 0x01
    2f10:	3a 81       	ldd	r19, Y+2	; 0x02
    2f12:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f14:	98 89       	ldd	r25, Y+16	; 0x10
    2f16:	a9 89       	ldd	r26, Y+17	; 0x11
    2f18:	ba 89       	ldd	r27, Y+18	; 0x12
    2f1a:	f9 01       	movw	r30, r18
    2f1c:	84 8b       	std	Z+20, r24	; 0x14
    2f1e:	95 8b       	std	Z+21, r25	; 0x15
    2f20:	a6 8b       	std	Z+22, r26	; 0x16
    2f22:	b7 8b       	std	Z+23, r27	; 0x17
	
	state->old_process_value = 0.0;
    2f24:	89 81       	ldd	r24, Y+1	; 0x01
    2f26:	9a 81       	ldd	r25, Y+2	; 0x02
    2f28:	fc 01       	movw	r30, r24
    2f2a:	10 82       	st	Z, r1
    2f2c:	11 82       	std	Z+1, r1	; 0x01
    2f2e:	12 82       	std	Z+2, r1	; 0x02
    2f30:	13 82       	std	Z+3, r1	; 0x03
	state->sum_error = 0.0;
    2f32:	89 81       	ldd	r24, Y+1	; 0x01
    2f34:	9a 81       	ldd	r25, Y+2	; 0x02
    2f36:	fc 01       	movw	r30, r24
    2f38:	14 82       	std	Z+4, r1	; 0x04
    2f3a:	15 82       	std	Z+5, r1	; 0x05
    2f3c:	16 82       	std	Z+6, r1	; 0x06
    2f3e:	17 82       	std	Z+7, r1	; 0x07
}
    2f40:	00 00       	nop
    2f42:	62 96       	adiw	r28, 0x12	; 18
    2f44:	0f b6       	in	r0, 0x3f	; 63
    2f46:	f8 94       	cli
    2f48:	de bf       	out	0x3e, r29	; 62
    2f4a:	0f be       	out	0x3f, r0	; 63
    2f4c:	cd bf       	out	0x3d, r28	; 61
    2f4e:	df 91       	pop	r29
    2f50:	cf 91       	pop	r28
    2f52:	1f 91       	pop	r17
    2f54:	0f 91       	pop	r16
    2f56:	ff 90       	pop	r15
    2f58:	ef 90       	pop	r14
    2f5a:	df 90       	pop	r13
    2f5c:	cf 90       	pop	r12
    2f5e:	bf 90       	pop	r11
    2f60:	af 90       	pop	r10
    2f62:	9f 90       	pop	r9
    2f64:	8f 90       	pop	r8
    2f66:	08 95       	ret

00002f68 <pid_set_params>:

void pid_set_params(pid_state_t* state, float pid_p, float pid_i, float pid_d, float control_min, float control_max)
{
    2f68:	8f 92       	push	r8
    2f6a:	9f 92       	push	r9
    2f6c:	af 92       	push	r10
    2f6e:	bf 92       	push	r11
    2f70:	cf 92       	push	r12
    2f72:	df 92       	push	r13
    2f74:	ef 92       	push	r14
    2f76:	ff 92       	push	r15
    2f78:	0f 93       	push	r16
    2f7a:	1f 93       	push	r17
    2f7c:	cf 93       	push	r28
    2f7e:	df 93       	push	r29
    2f80:	cd b7       	in	r28, 0x3d	; 61
    2f82:	de b7       	in	r29, 0x3e	; 62
    2f84:	62 97       	sbiw	r28, 0x12	; 18
    2f86:	0f b6       	in	r0, 0x3f	; 63
    2f88:	f8 94       	cli
    2f8a:	de bf       	out	0x3e, r29	; 62
    2f8c:	0f be       	out	0x3f, r0	; 63
    2f8e:	cd bf       	out	0x3d, r28	; 61
    2f90:	9a 83       	std	Y+2, r25	; 0x02
    2f92:	89 83       	std	Y+1, r24	; 0x01
    2f94:	4b 83       	std	Y+3, r20	; 0x03
    2f96:	5c 83       	std	Y+4, r21	; 0x04
    2f98:	6d 83       	std	Y+5, r22	; 0x05
    2f9a:	7e 83       	std	Y+6, r23	; 0x06
    2f9c:	0f 83       	std	Y+7, r16	; 0x07
    2f9e:	18 87       	std	Y+8, r17	; 0x08
    2fa0:	29 87       	std	Y+9, r18	; 0x09
    2fa2:	3a 87       	std	Y+10, r19	; 0x0a
    2fa4:	cb 86       	std	Y+11, r12	; 0x0b
    2fa6:	dc 86       	std	Y+12, r13	; 0x0c
    2fa8:	ed 86       	std	Y+13, r14	; 0x0d
    2faa:	fe 86       	std	Y+14, r15	; 0x0e
    2fac:	8f 86       	std	Y+15, r8	; 0x0f
    2fae:	98 8a       	std	Y+16, r9	; 0x10
    2fb0:	a9 8a       	std	Y+17, r10	; 0x11
    2fb2:	ba 8a       	std	Y+18, r11	; 0x12
	state->kp = pid_p;
    2fb4:	29 81       	ldd	r18, Y+1	; 0x01
    2fb6:	3a 81       	ldd	r19, Y+2	; 0x02
    2fb8:	8b 81       	ldd	r24, Y+3	; 0x03
    2fba:	9c 81       	ldd	r25, Y+4	; 0x04
    2fbc:	ad 81       	ldd	r26, Y+5	; 0x05
    2fbe:	be 81       	ldd	r27, Y+6	; 0x06
    2fc0:	f9 01       	movw	r30, r18
    2fc2:	80 87       	std	Z+8, r24	; 0x08
    2fc4:	91 87       	std	Z+9, r25	; 0x09
    2fc6:	a2 87       	std	Z+10, r26	; 0x0a
    2fc8:	b3 87       	std	Z+11, r27	; 0x0b
	state->ki = pid_i;
    2fca:	29 81       	ldd	r18, Y+1	; 0x01
    2fcc:	3a 81       	ldd	r19, Y+2	; 0x02
    2fce:	8f 81       	ldd	r24, Y+7	; 0x07
    2fd0:	98 85       	ldd	r25, Y+8	; 0x08
    2fd2:	a9 85       	ldd	r26, Y+9	; 0x09
    2fd4:	ba 85       	ldd	r27, Y+10	; 0x0a
    2fd6:	f9 01       	movw	r30, r18
    2fd8:	84 87       	std	Z+12, r24	; 0x0c
    2fda:	95 87       	std	Z+13, r25	; 0x0d
    2fdc:	a6 87       	std	Z+14, r26	; 0x0e
    2fde:	b7 87       	std	Z+15, r27	; 0x0f
	state->kd = pid_d;
    2fe0:	29 81       	ldd	r18, Y+1	; 0x01
    2fe2:	3a 81       	ldd	r19, Y+2	; 0x02
    2fe4:	8b 85       	ldd	r24, Y+11	; 0x0b
    2fe6:	9c 85       	ldd	r25, Y+12	; 0x0c
    2fe8:	ad 85       	ldd	r26, Y+13	; 0x0d
    2fea:	be 85       	ldd	r27, Y+14	; 0x0e
    2fec:	f9 01       	movw	r30, r18
    2fee:	80 8b       	std	Z+16, r24	; 0x10
    2ff0:	91 8b       	std	Z+17, r25	; 0x11
    2ff2:	a2 8b       	std	Z+18, r26	; 0x12
    2ff4:	b3 8b       	std	Z+19, r27	; 0x13
	state->control_max = control_max;
    2ff6:	29 81       	ldd	r18, Y+1	; 0x01
    2ff8:	3a 81       	ldd	r19, Y+2	; 0x02
    2ffa:	89 a1       	ldd	r24, Y+33	; 0x21
    2ffc:	9a a1       	ldd	r25, Y+34	; 0x22
    2ffe:	ab a1       	ldd	r26, Y+35	; 0x23
    3000:	bc a1       	ldd	r27, Y+36	; 0x24
    3002:	f9 01       	movw	r30, r18
    3004:	80 8f       	std	Z+24, r24	; 0x18
    3006:	91 8f       	std	Z+25, r25	; 0x19
    3008:	a2 8f       	std	Z+26, r26	; 0x1a
    300a:	b3 8f       	std	Z+27, r27	; 0x1b
	state->control_min = control_min;
    300c:	29 81       	ldd	r18, Y+1	; 0x01
    300e:	3a 81       	ldd	r19, Y+2	; 0x02
    3010:	8f 85       	ldd	r24, Y+15	; 0x0f
    3012:	98 89       	ldd	r25, Y+16	; 0x10
    3014:	a9 89       	ldd	r26, Y+17	; 0x11
    3016:	ba 89       	ldd	r27, Y+18	; 0x12
    3018:	f9 01       	movw	r30, r18
    301a:	84 8b       	std	Z+20, r24	; 0x14
    301c:	95 8b       	std	Z+21, r25	; 0x15
    301e:	a6 8b       	std	Z+22, r26	; 0x16
    3020:	b7 8b       	std	Z+23, r27	; 0x17
	
	state->old_process_value = 0.0;
    3022:	89 81       	ldd	r24, Y+1	; 0x01
    3024:	9a 81       	ldd	r25, Y+2	; 0x02
    3026:	fc 01       	movw	r30, r24
    3028:	10 82       	st	Z, r1
    302a:	11 82       	std	Z+1, r1	; 0x01
    302c:	12 82       	std	Z+2, r1	; 0x02
    302e:	13 82       	std	Z+3, r1	; 0x03
	state->sum_error = 0.0;
    3030:	89 81       	ldd	r24, Y+1	; 0x01
    3032:	9a 81       	ldd	r25, Y+2	; 0x02
    3034:	fc 01       	movw	r30, r24
    3036:	14 82       	std	Z+4, r1	; 0x04
    3038:	15 82       	std	Z+5, r1	; 0x05
    303a:	16 82       	std	Z+6, r1	; 0x06
    303c:	17 82       	std	Z+7, r1	; 0x07
}
    303e:	00 00       	nop
    3040:	62 96       	adiw	r28, 0x12	; 18
    3042:	0f b6       	in	r0, 0x3f	; 63
    3044:	f8 94       	cli
    3046:	de bf       	out	0x3e, r29	; 62
    3048:	0f be       	out	0x3f, r0	; 63
    304a:	cd bf       	out	0x3d, r28	; 61
    304c:	df 91       	pop	r29
    304e:	cf 91       	pop	r28
    3050:	1f 91       	pop	r17
    3052:	0f 91       	pop	r16
    3054:	ff 90       	pop	r15
    3056:	ef 90       	pop	r14
    3058:	df 90       	pop	r13
    305a:	cf 90       	pop	r12
    305c:	bf 90       	pop	r11
    305e:	af 90       	pop	r10
    3060:	9f 90       	pop	r9
    3062:	8f 90       	pop	r8
    3064:	08 95       	ret

00003066 <pid_step>:

float pid_step(pid_state_t* state, float process_value, float set_value)
{
    3066:	8f 92       	push	r8
    3068:	9f 92       	push	r9
    306a:	af 92       	push	r10
    306c:	bf 92       	push	r11
    306e:	cf 92       	push	r12
    3070:	df 92       	push	r13
    3072:	ef 92       	push	r14
    3074:	ff 92       	push	r15
    3076:	0f 93       	push	r16
    3078:	1f 93       	push	r17
    307a:	cf 93       	push	r28
    307c:	df 93       	push	r29
    307e:	cd b7       	in	r28, 0x3d	; 61
    3080:	de b7       	in	r29, 0x3e	; 62
    3082:	6e 97       	sbiw	r28, 0x1e	; 30
    3084:	0f b6       	in	r0, 0x3f	; 63
    3086:	f8 94       	cli
    3088:	de bf       	out	0x3e, r29	; 62
    308a:	0f be       	out	0x3f, r0	; 63
    308c:	cd bf       	out	0x3d, r28	; 61
    308e:	9e 8b       	std	Y+22, r25	; 0x16
    3090:	8d 8b       	std	Y+21, r24	; 0x15
    3092:	4f 8b       	std	Y+23, r20	; 0x17
    3094:	58 8f       	std	Y+24, r21	; 0x18
    3096:	69 8f       	std	Y+25, r22	; 0x19
    3098:	7a 8f       	std	Y+26, r23	; 0x1a
    309a:	0b 8f       	std	Y+27, r16	; 0x1b
    309c:	1c 8f       	std	Y+28, r17	; 0x1c
    309e:	2d 8f       	std	Y+29, r18	; 0x1d
    30a0:	3e 8f       	std	Y+30, r19	; 0x1e
	// error
	float error = set_value - process_value;
    30a2:	2f 89       	ldd	r18, Y+23	; 0x17
    30a4:	38 8d       	ldd	r19, Y+24	; 0x18
    30a6:	49 8d       	ldd	r20, Y+25	; 0x19
    30a8:	5a 8d       	ldd	r21, Y+26	; 0x1a
    30aa:	6b 8d       	ldd	r22, Y+27	; 0x1b
    30ac:	7c 8d       	ldd	r23, Y+28	; 0x1c
    30ae:	8d 8d       	ldd	r24, Y+29	; 0x1d
    30b0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    30b2:	0e 94 63 25 	call	0x4ac6	; 0x4ac6 <__subsf3>
    30b6:	dc 01       	movw	r26, r24
    30b8:	cb 01       	movw	r24, r22
    30ba:	89 83       	std	Y+1, r24	; 0x01
    30bc:	9a 83       	std	Y+2, r25	; 0x02
    30be:	ab 83       	std	Y+3, r26	; 0x03
    30c0:	bc 83       	std	Y+4, r27	; 0x04
	// proportional term
	float p_term = state->kp * error;
    30c2:	8d 89       	ldd	r24, Y+21	; 0x15
    30c4:	9e 89       	ldd	r25, Y+22	; 0x16
    30c6:	fc 01       	movw	r30, r24
    30c8:	80 85       	ldd	r24, Z+8	; 0x08
    30ca:	91 85       	ldd	r25, Z+9	; 0x09
    30cc:	a2 85       	ldd	r26, Z+10	; 0x0a
    30ce:	b3 85       	ldd	r27, Z+11	; 0x0b
    30d0:	29 81       	ldd	r18, Y+1	; 0x01
    30d2:	3a 81       	ldd	r19, Y+2	; 0x02
    30d4:	4b 81       	ldd	r20, Y+3	; 0x03
    30d6:	5c 81       	ldd	r21, Y+4	; 0x04
    30d8:	bc 01       	movw	r22, r24
    30da:	cd 01       	movw	r24, r26
    30dc:	0e 94 d0 27 	call	0x4fa0	; 0x4fa0 <__mulsf3>
    30e0:	dc 01       	movw	r26, r24
    30e2:	cb 01       	movw	r24, r22
    30e4:	8d 83       	std	Y+5, r24	; 0x05
    30e6:	9e 83       	std	Y+6, r25	; 0x06
    30e8:	af 83       	std	Y+7, r26	; 0x07
    30ea:	b8 87       	std	Y+8, r27	; 0x08
	// integral term
	float i_term = state->ki * (state->sum_error + error);
    30ec:	8d 89       	ldd	r24, Y+21	; 0x15
    30ee:	9e 89       	ldd	r25, Y+22	; 0x16
    30f0:	fc 01       	movw	r30, r24
    30f2:	c4 84       	ldd	r12, Z+12	; 0x0c
    30f4:	d5 84       	ldd	r13, Z+13	; 0x0d
    30f6:	e6 84       	ldd	r14, Z+14	; 0x0e
    30f8:	f7 84       	ldd	r15, Z+15	; 0x0f
    30fa:	8d 89       	ldd	r24, Y+21	; 0x15
    30fc:	9e 89       	ldd	r25, Y+22	; 0x16
    30fe:	fc 01       	movw	r30, r24
    3100:	84 81       	ldd	r24, Z+4	; 0x04
    3102:	95 81       	ldd	r25, Z+5	; 0x05
    3104:	a6 81       	ldd	r26, Z+6	; 0x06
    3106:	b7 81       	ldd	r27, Z+7	; 0x07
    3108:	29 81       	ldd	r18, Y+1	; 0x01
    310a:	3a 81       	ldd	r19, Y+2	; 0x02
    310c:	4b 81       	ldd	r20, Y+3	; 0x03
    310e:	5c 81       	ldd	r21, Y+4	; 0x04
    3110:	bc 01       	movw	r22, r24
    3112:	cd 01       	movw	r24, r26
    3114:	0e 94 64 25 	call	0x4ac8	; 0x4ac8 <__addsf3>
    3118:	dc 01       	movw	r26, r24
    311a:	cb 01       	movw	r24, r22
    311c:	9c 01       	movw	r18, r24
    311e:	ad 01       	movw	r20, r26
    3120:	c7 01       	movw	r24, r14
    3122:	b6 01       	movw	r22, r12
    3124:	0e 94 d0 27 	call	0x4fa0	; 0x4fa0 <__mulsf3>
    3128:	dc 01       	movw	r26, r24
    312a:	cb 01       	movw	r24, r22
    312c:	89 87       	std	Y+9, r24	; 0x09
    312e:	9a 87       	std	Y+10, r25	; 0x0a
    3130:	ab 87       	std	Y+11, r26	; 0x0b
    3132:	bc 87       	std	Y+12, r27	; 0x0c
	// derivative term
	float d_term = state->kd * (process_value - state->old_process_value);
    3134:	8d 89       	ldd	r24, Y+21	; 0x15
    3136:	9e 89       	ldd	r25, Y+22	; 0x16
    3138:	fc 01       	movw	r30, r24
    313a:	c0 88       	ldd	r12, Z+16	; 0x10
    313c:	d1 88       	ldd	r13, Z+17	; 0x11
    313e:	e2 88       	ldd	r14, Z+18	; 0x12
    3140:	f3 88       	ldd	r15, Z+19	; 0x13
    3142:	8d 89       	ldd	r24, Y+21	; 0x15
    3144:	9e 89       	ldd	r25, Y+22	; 0x16
    3146:	fc 01       	movw	r30, r24
    3148:	80 81       	ld	r24, Z
    314a:	91 81       	ldd	r25, Z+1	; 0x01
    314c:	a2 81       	ldd	r26, Z+2	; 0x02
    314e:	b3 81       	ldd	r27, Z+3	; 0x03
    3150:	9c 01       	movw	r18, r24
    3152:	ad 01       	movw	r20, r26
    3154:	6f 89       	ldd	r22, Y+23	; 0x17
    3156:	78 8d       	ldd	r23, Y+24	; 0x18
    3158:	89 8d       	ldd	r24, Y+25	; 0x19
    315a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    315c:	0e 94 63 25 	call	0x4ac6	; 0x4ac6 <__subsf3>
    3160:	dc 01       	movw	r26, r24
    3162:	cb 01       	movw	r24, r22
    3164:	9c 01       	movw	r18, r24
    3166:	ad 01       	movw	r20, r26
    3168:	c7 01       	movw	r24, r14
    316a:	b6 01       	movw	r22, r12
    316c:	0e 94 d0 27 	call	0x4fa0	; 0x4fa0 <__mulsf3>
    3170:	dc 01       	movw	r26, r24
    3172:	cb 01       	movw	r24, r22
    3174:	8d 87       	std	Y+13, r24	; 0x0d
    3176:	9e 87       	std	Y+14, r25	; 0x0e
    3178:	af 87       	std	Y+15, r26	; 0x0f
    317a:	b8 8b       	std	Y+16, r27	; 0x10
	state->old_process_value = process_value;
    317c:	2d 89       	ldd	r18, Y+21	; 0x15
    317e:	3e 89       	ldd	r19, Y+22	; 0x16
    3180:	8f 89       	ldd	r24, Y+23	; 0x17
    3182:	98 8d       	ldd	r25, Y+24	; 0x18
    3184:	a9 8d       	ldd	r26, Y+25	; 0x19
    3186:	ba 8d       	ldd	r27, Y+26	; 0x1a
    3188:	f9 01       	movw	r30, r18
    318a:	80 83       	st	Z, r24
    318c:	91 83       	std	Z+1, r25	; 0x01
    318e:	a2 83       	std	Z+2, r26	; 0x02
    3190:	b3 83       	std	Z+3, r27	; 0x03
	
	// clamping the integrator
	float control = p_term + i_term + d_term;
    3192:	29 85       	ldd	r18, Y+9	; 0x09
    3194:	3a 85       	ldd	r19, Y+10	; 0x0a
    3196:	4b 85       	ldd	r20, Y+11	; 0x0b
    3198:	5c 85       	ldd	r21, Y+12	; 0x0c
    319a:	6d 81       	ldd	r22, Y+5	; 0x05
    319c:	7e 81       	ldd	r23, Y+6	; 0x06
    319e:	8f 81       	ldd	r24, Y+7	; 0x07
    31a0:	98 85       	ldd	r25, Y+8	; 0x08
    31a2:	0e 94 64 25 	call	0x4ac8	; 0x4ac8 <__addsf3>
    31a6:	dc 01       	movw	r26, r24
    31a8:	cb 01       	movw	r24, r22
    31aa:	2d 85       	ldd	r18, Y+13	; 0x0d
    31ac:	3e 85       	ldd	r19, Y+14	; 0x0e
    31ae:	4f 85       	ldd	r20, Y+15	; 0x0f
    31b0:	58 89       	ldd	r21, Y+16	; 0x10
    31b2:	bc 01       	movw	r22, r24
    31b4:	cd 01       	movw	r24, r26
    31b6:	0e 94 64 25 	call	0x4ac8	; 0x4ac8 <__addsf3>
    31ba:	dc 01       	movw	r26, r24
    31bc:	cb 01       	movw	r24, r22
    31be:	89 8b       	std	Y+17, r24	; 0x11
    31c0:	9a 8b       	std	Y+18, r25	; 0x12
    31c2:	ab 8b       	std	Y+19, r26	; 0x13
    31c4:	bc 8b       	std	Y+20, r27	; 0x14
	if(control >= state->control_min && control <= state->control_max)
    31c6:	8d 89       	ldd	r24, Y+21	; 0x15
    31c8:	9e 89       	ldd	r25, Y+22	; 0x16
    31ca:	fc 01       	movw	r30, r24
    31cc:	84 89       	ldd	r24, Z+20	; 0x14
    31ce:	95 89       	ldd	r25, Z+21	; 0x15
    31d0:	a6 89       	ldd	r26, Z+22	; 0x16
    31d2:	b7 89       	ldd	r27, Z+23	; 0x17
    31d4:	29 89       	ldd	r18, Y+17	; 0x11
    31d6:	3a 89       	ldd	r19, Y+18	; 0x12
    31d8:	4b 89       	ldd	r20, Y+19	; 0x13
    31da:	5c 89       	ldd	r21, Y+20	; 0x14
    31dc:	bc 01       	movw	r22, r24
    31de:	cd 01       	movw	r24, r26
    31e0:	0e 94 d0 25 	call	0x4ba0	; 0x4ba0 <__cmpsf2>
    31e4:	18 16       	cp	r1, r24
    31e6:	74 f1       	brlt	.+92     	; 0x3244 <pid_step+0x1de>
    31e8:	8d 89       	ldd	r24, Y+21	; 0x15
    31ea:	9e 89       	ldd	r25, Y+22	; 0x16
    31ec:	fc 01       	movw	r30, r24
    31ee:	80 8d       	ldd	r24, Z+24	; 0x18
    31f0:	91 8d       	ldd	r25, Z+25	; 0x19
    31f2:	a2 8d       	ldd	r26, Z+26	; 0x1a
    31f4:	b3 8d       	ldd	r27, Z+27	; 0x1b
    31f6:	29 89       	ldd	r18, Y+17	; 0x11
    31f8:	3a 89       	ldd	r19, Y+18	; 0x12
    31fa:	4b 89       	ldd	r20, Y+19	; 0x13
    31fc:	5c 89       	ldd	r21, Y+20	; 0x14
    31fe:	bc 01       	movw	r22, r24
    3200:	cd 01       	movw	r24, r26
    3202:	0e 94 7b 27 	call	0x4ef6	; 0x4ef6 <__gesf2>
    3206:	88 23       	and	r24, r24
    3208:	ec f0       	brlt	.+58     	; 0x3244 <pid_step+0x1de>
	{
		state->sum_error += error;
    320a:	8d 89       	ldd	r24, Y+21	; 0x15
    320c:	9e 89       	ldd	r25, Y+22	; 0x16
    320e:	fc 01       	movw	r30, r24
    3210:	84 81       	ldd	r24, Z+4	; 0x04
    3212:	95 81       	ldd	r25, Z+5	; 0x05
    3214:	a6 81       	ldd	r26, Z+6	; 0x06
    3216:	b7 81       	ldd	r27, Z+7	; 0x07
    3218:	29 81       	ldd	r18, Y+1	; 0x01
    321a:	3a 81       	ldd	r19, Y+2	; 0x02
    321c:	4b 81       	ldd	r20, Y+3	; 0x03
    321e:	5c 81       	ldd	r21, Y+4	; 0x04
    3220:	bc 01       	movw	r22, r24
    3222:	cd 01       	movw	r24, r26
    3224:	0e 94 64 25 	call	0x4ac8	; 0x4ac8 <__addsf3>
    3228:	dc 01       	movw	r26, r24
    322a:	cb 01       	movw	r24, r22
    322c:	2d 89       	ldd	r18, Y+21	; 0x15
    322e:	3e 89       	ldd	r19, Y+22	; 0x16
    3230:	f9 01       	movw	r30, r18
    3232:	84 83       	std	Z+4, r24	; 0x04
    3234:	95 83       	std	Z+5, r25	; 0x05
    3236:	a6 83       	std	Z+6, r26	; 0x06
    3238:	b7 83       	std	Z+7, r27	; 0x07
		return control;
    323a:	89 89       	ldd	r24, Y+17	; 0x11
    323c:	9a 89       	ldd	r25, Y+18	; 0x12
    323e:	ab 89       	ldd	r26, Y+19	; 0x13
    3240:	bc 89       	ldd	r27, Y+20	; 0x14
    3242:	46 c0       	rjmp	.+140    	; 0x32d0 <pid_step+0x26a>
	}
	else
	{
		return fmax(fmin(p_term + state->ki * state->sum_error + d_term, state->control_max), state->control_min);
    3244:	8d 89       	ldd	r24, Y+21	; 0x15
    3246:	9e 89       	ldd	r25, Y+22	; 0x16
    3248:	fc 01       	movw	r30, r24
    324a:	c4 88       	ldd	r12, Z+20	; 0x14
    324c:	d5 88       	ldd	r13, Z+21	; 0x15
    324e:	e6 88       	ldd	r14, Z+22	; 0x16
    3250:	f7 88       	ldd	r15, Z+23	; 0x17
    3252:	8d 89       	ldd	r24, Y+21	; 0x15
    3254:	9e 89       	ldd	r25, Y+22	; 0x16
    3256:	fc 01       	movw	r30, r24
    3258:	80 8c       	ldd	r8, Z+24	; 0x18
    325a:	91 8c       	ldd	r9, Z+25	; 0x19
    325c:	a2 8c       	ldd	r10, Z+26	; 0x1a
    325e:	b3 8c       	ldd	r11, Z+27	; 0x1b
    3260:	8d 89       	ldd	r24, Y+21	; 0x15
    3262:	9e 89       	ldd	r25, Y+22	; 0x16
    3264:	fc 01       	movw	r30, r24
    3266:	84 85       	ldd	r24, Z+12	; 0x0c
    3268:	95 85       	ldd	r25, Z+13	; 0x0d
    326a:	a6 85       	ldd	r26, Z+14	; 0x0e
    326c:	b7 85       	ldd	r27, Z+15	; 0x0f
    326e:	2d 89       	ldd	r18, Y+21	; 0x15
    3270:	3e 89       	ldd	r19, Y+22	; 0x16
    3272:	f9 01       	movw	r30, r18
    3274:	24 81       	ldd	r18, Z+4	; 0x04
    3276:	35 81       	ldd	r19, Z+5	; 0x05
    3278:	46 81       	ldd	r20, Z+6	; 0x06
    327a:	57 81       	ldd	r21, Z+7	; 0x07
    327c:	bc 01       	movw	r22, r24
    327e:	cd 01       	movw	r24, r26
    3280:	0e 94 d0 27 	call	0x4fa0	; 0x4fa0 <__mulsf3>
    3284:	dc 01       	movw	r26, r24
    3286:	cb 01       	movw	r24, r22
    3288:	2d 81       	ldd	r18, Y+5	; 0x05
    328a:	3e 81       	ldd	r19, Y+6	; 0x06
    328c:	4f 81       	ldd	r20, Y+7	; 0x07
    328e:	58 85       	ldd	r21, Y+8	; 0x08
    3290:	bc 01       	movw	r22, r24
    3292:	cd 01       	movw	r24, r26
    3294:	0e 94 64 25 	call	0x4ac8	; 0x4ac8 <__addsf3>
    3298:	dc 01       	movw	r26, r24
    329a:	cb 01       	movw	r24, r22
    329c:	2d 85       	ldd	r18, Y+13	; 0x0d
    329e:	3e 85       	ldd	r19, Y+14	; 0x0e
    32a0:	4f 85       	ldd	r20, Y+15	; 0x0f
    32a2:	58 89       	ldd	r21, Y+16	; 0x10
    32a4:	bc 01       	movw	r22, r24
    32a6:	cd 01       	movw	r24, r26
    32a8:	0e 94 64 25 	call	0x4ac8	; 0x4ac8 <__addsf3>
    32ac:	dc 01       	movw	r26, r24
    32ae:	cb 01       	movw	r24, r22
    32b0:	a5 01       	movw	r20, r10
    32b2:	94 01       	movw	r18, r8
    32b4:	bc 01       	movw	r22, r24
    32b6:	cd 01       	movw	r24, r26
    32b8:	0e 94 03 17 	call	0x2e06	; 0x2e06 <fmin>
    32bc:	dc 01       	movw	r26, r24
    32be:	cb 01       	movw	r24, r22
    32c0:	a7 01       	movw	r20, r14
    32c2:	96 01       	movw	r18, r12
    32c4:	bc 01       	movw	r22, r24
    32c6:	cd 01       	movw	r24, r26
    32c8:	0e 94 d1 16 	call	0x2da2	; 0x2da2 <fmax>
    32cc:	dc 01       	movw	r26, r24
    32ce:	cb 01       	movw	r24, r22
	}	
}
    32d0:	bc 01       	movw	r22, r24
    32d2:	cd 01       	movw	r24, r26
    32d4:	6e 96       	adiw	r28, 0x1e	; 30
    32d6:	0f b6       	in	r0, 0x3f	; 63
    32d8:	f8 94       	cli
    32da:	de bf       	out	0x3e, r29	; 62
    32dc:	0f be       	out	0x3f, r0	; 63
    32de:	cd bf       	out	0x3d, r28	; 61
    32e0:	df 91       	pop	r29
    32e2:	cf 91       	pop	r28
    32e4:	1f 91       	pop	r17
    32e6:	0f 91       	pop	r16
    32e8:	ff 90       	pop	r15
    32ea:	ef 90       	pop	r14
    32ec:	df 90       	pop	r13
    32ee:	cf 90       	pop	r12
    32f0:	bf 90       	pop	r11
    32f2:	af 90       	pop	r10
    32f4:	9f 90       	pop	r9
    32f6:	8f 90       	pop	r8
    32f8:	08 95       	ret

000032fa <pid_reset>:

void pid_reset(pid_state_t* state)
{
    32fa:	cf 93       	push	r28
    32fc:	df 93       	push	r29
    32fe:	00 d0       	rcall	.+0      	; 0x3300 <pid_reset+0x6>
    3300:	cd b7       	in	r28, 0x3d	; 61
    3302:	de b7       	in	r29, 0x3e	; 62
    3304:	9a 83       	std	Y+2, r25	; 0x02
    3306:	89 83       	std	Y+1, r24	; 0x01
	state->old_process_value = 0.0;
    3308:	89 81       	ldd	r24, Y+1	; 0x01
    330a:	9a 81       	ldd	r25, Y+2	; 0x02
    330c:	fc 01       	movw	r30, r24
    330e:	10 82       	st	Z, r1
    3310:	11 82       	std	Z+1, r1	; 0x01
    3312:	12 82       	std	Z+2, r1	; 0x02
    3314:	13 82       	std	Z+3, r1	; 0x03
	state->sum_error = 0.0;
    3316:	89 81       	ldd	r24, Y+1	; 0x01
    3318:	9a 81       	ldd	r25, Y+2	; 0x02
    331a:	fc 01       	movw	r30, r24
    331c:	14 82       	std	Z+4, r1	; 0x04
    331e:	15 82       	std	Z+5, r1	; 0x05
    3320:	16 82       	std	Z+6, r1	; 0x06
    3322:	17 82       	std	Z+7, r1	; 0x07
    3324:	00 00       	nop
    3326:	0f 90       	pop	r0
    3328:	0f 90       	pop	r0
    332a:	df 91       	pop	r29
    332c:	cf 91       	pop	r28
    332e:	08 95       	ret

00003330 <__iCliRetVal>:
    sei();
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    3330:	cf 93       	push	r28
    3332:	df 93       	push	r29
    3334:	cd b7       	in	r28, 0x3d	; 61
    3336:	de b7       	in	r29, 0x3e	; 62
    cli();
    3338:	f8 94       	cli
    return 1;
    333a:	81 e0       	ldi	r24, 0x01	; 1
}
    333c:	df 91       	pop	r29
    333e:	cf 91       	pop	r28
    3340:	08 95       	ret

00003342 <__iRestore>:
    __asm__ volatile ("" ::: "memory");
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    3342:	cf 93       	push	r28
    3344:	df 93       	push	r29
    3346:	00 d0       	rcall	.+0      	; 0x3348 <__iRestore+0x6>
    3348:	cd b7       	in	r28, 0x3d	; 61
    334a:	de b7       	in	r29, 0x3e	; 62
    334c:	9a 83       	std	Y+2, r25	; 0x02
    334e:	89 83       	std	Y+1, r24	; 0x01
    SREG = *__s;
    3350:	8f e5       	ldi	r24, 0x5F	; 95
    3352:	90 e0       	ldi	r25, 0x00	; 0
    3354:	29 81       	ldd	r18, Y+1	; 0x01
    3356:	3a 81       	ldd	r19, Y+2	; 0x02
    3358:	f9 01       	movw	r30, r18
    335a:	20 81       	ld	r18, Z
    335c:	fc 01       	movw	r30, r24
    335e:	20 83       	st	Z, r18
    __asm__ volatile ("" ::: "memory");
}
    3360:	00 00       	nop
    3362:	0f 90       	pop	r0
    3364:	0f 90       	pop	r0
    3366:	df 91       	pop	r29
    3368:	cf 91       	pop	r28
    336a:	08 95       	ret

0000336c <rotenc_init>:
static volatile int16_t rotenc_delta;

// ------------------------------------ PUBLIC -------------------------------------------

void rotenc_init()
{
    336c:	cf 93       	push	r28
    336e:	df 93       	push	r29
    3370:	cd b7       	in	r28, 0x3d	; 61
    3372:	de b7       	in	r29, 0x3e	; 62
	// set data dir
	ROT_ENC_DDR &= ~ROT_ENC_PIN_MASK;
    3374:	84 e2       	ldi	r24, 0x24	; 36
    3376:	90 e0       	ldi	r25, 0x00	; 0
    3378:	24 e2       	ldi	r18, 0x24	; 36
    337a:	30 e0       	ldi	r19, 0x00	; 0
    337c:	f9 01       	movw	r30, r18
    337e:	20 81       	ld	r18, Z
    3380:	23 7f       	andi	r18, 0xF3	; 243
    3382:	fc 01       	movw	r30, r24
    3384:	20 83       	st	Z, r18
	// enable internal pullups
	ROT_ENC_PORT |= ROT_ENC_PIN_MASK;
    3386:	85 e2       	ldi	r24, 0x25	; 37
    3388:	90 e0       	ldi	r25, 0x00	; 0
    338a:	25 e2       	ldi	r18, 0x25	; 37
    338c:	30 e0       	ldi	r19, 0x00	; 0
    338e:	f9 01       	movw	r30, r18
    3390:	20 81       	ld	r18, Z
    3392:	2c 60       	ori	r18, 0x0C	; 12
    3394:	fc 01       	movw	r30, r24
    3396:	20 83       	st	Z, r18
	
	rotenc_delta = 0;
    3398:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <rotenc_delta+0x1>
    339c:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <rotenc_delta>
	if(ROT_ENC_READ_A) rotenc_last = 2;
    33a0:	83 e2       	ldi	r24, 0x23	; 35
    33a2:	90 e0       	ldi	r25, 0x00	; 0
    33a4:	fc 01       	movw	r30, r24
    33a6:	80 81       	ld	r24, Z
    33a8:	88 2f       	mov	r24, r24
    33aa:	90 e0       	ldi	r25, 0x00	; 0
    33ac:	84 70       	andi	r24, 0x04	; 4
    33ae:	99 27       	eor	r25, r25
    33b0:	89 2b       	or	r24, r25
    33b2:	19 f4       	brne	.+6      	; 0x33ba <rotenc_init+0x4e>
    33b4:	82 e0       	ldi	r24, 0x02	; 2
    33b6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	if(ROT_ENC_READ_B) rotenc_last |= 1;
    33ba:	83 e2       	ldi	r24, 0x23	; 35
    33bc:	90 e0       	ldi	r25, 0x00	; 0
    33be:	fc 01       	movw	r30, r24
    33c0:	80 81       	ld	r24, Z
    33c2:	88 2f       	mov	r24, r24
    33c4:	90 e0       	ldi	r25, 0x00	; 0
    33c6:	88 70       	andi	r24, 0x08	; 8
    33c8:	99 27       	eor	r25, r25
    33ca:	89 2b       	or	r24, r25
    33cc:	29 f4       	brne	.+10     	; 0x33d8 <rotenc_init+0x6c>
    33ce:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
    33d2:	81 60       	ori	r24, 0x01	; 1
    33d4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
}
    33d8:	00 00       	nop
    33da:	df 91       	pop	r29
    33dc:	cf 91       	pop	r28
    33de:	08 95       	ret

000033e0 <rotenc_shutdown>:

void rotenc_shutdown()
{
    33e0:	cf 93       	push	r28
    33e2:	df 93       	push	r29
    33e4:	cd b7       	in	r28, 0x3d	; 61
    33e6:	de b7       	in	r29, 0x3e	; 62
	rotenc_delta = 0;
    33e8:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <rotenc_delta+0x1>
    33ec:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <rotenc_delta>
	// disable internal pullups
	ROT_ENC_PORT &= ~ROT_ENC_PIN_MASK;
    33f0:	85 e2       	ldi	r24, 0x25	; 37
    33f2:	90 e0       	ldi	r25, 0x00	; 0
    33f4:	25 e2       	ldi	r18, 0x25	; 37
    33f6:	30 e0       	ldi	r19, 0x00	; 0
    33f8:	f9 01       	movw	r30, r18
    33fa:	20 81       	ld	r18, Z
    33fc:	23 7f       	andi	r18, 0xF3	; 243
    33fe:	fc 01       	movw	r30, r24
    3400:	20 83       	st	Z, r18
}
    3402:	00 00       	nop
    3404:	df 91       	pop	r29
    3406:	cf 91       	pop	r28
    3408:	08 95       	ret

0000340a <rotenc_get_inc>:

int16_t rotenc_get_inc()
{
    340a:	cf 93       	push	r28
    340c:	df 93       	push	r29
    340e:	00 d0       	rcall	.+0      	; 0x3410 <rotenc_get_inc+0x6>
    3410:	00 d0       	rcall	.+0      	; 0x3412 <rotenc_get_inc+0x8>
    3412:	cd b7       	in	r28, 0x3d	; 61
    3414:	de b7       	in	r29, 0x3e	; 62
	int16_t res;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    3416:	8f e5       	ldi	r24, 0x5F	; 95
    3418:	90 e0       	ldi	r25, 0x00	; 0
    341a:	fc 01       	movw	r30, r24
    341c:	80 81       	ld	r24, Z
    341e:	8c 83       	std	Y+4, r24	; 0x04
    3420:	0e 94 98 19 	call	0x3330	; 0x3330 <__iCliRetVal>
    3424:	8b 83       	std	Y+3, r24	; 0x03
    3426:	0b c0       	rjmp	.+22     	; 0x343e <rotenc_get_inc+0x34>
	{
		res = rotenc_delta;
    3428:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <rotenc_delta>
    342c:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <rotenc_delta+0x1>
    3430:	9a 83       	std	Y+2, r25	; 0x02
    3432:	89 83       	std	Y+1, r24	; 0x01
		rotenc_delta = 0;
    3434:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <rotenc_delta+0x1>
    3438:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <rotenc_delta>
}

int16_t rotenc_get_inc()
{
	int16_t res;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    343c:	1b 82       	std	Y+3, r1	; 0x03
    343e:	8b 81       	ldd	r24, Y+3	; 0x03
    3440:	88 23       	and	r24, r24
    3442:	91 f7       	brne	.-28     	; 0x3428 <rotenc_get_inc+0x1e>
    3444:	ce 01       	movw	r24, r28
    3446:	04 96       	adiw	r24, 0x04	; 4
    3448:	0e 94 a1 19 	call	0x3342	; 0x3342 <__iRestore>
	{
		res = rotenc_delta;
		rotenc_delta = 0;
	}
	return res;
    344c:	89 81       	ldd	r24, Y+1	; 0x01
    344e:	9a 81       	ldd	r25, Y+2	; 0x02
}
    3450:	0f 90       	pop	r0
    3452:	0f 90       	pop	r0
    3454:	0f 90       	pop	r0
    3456:	0f 90       	pop	r0
    3458:	df 91       	pop	r29
    345a:	cf 91       	pop	r28
    345c:	08 95       	ret

0000345e <rotenc_update>:

void rotenc_update()
{
    345e:	cf 93       	push	r28
    3460:	df 93       	push	r29
    3462:	00 d0       	rcall	.+0      	; 0x3464 <rotenc_update+0x6>
    3464:	00 d0       	rcall	.+0      	; 0x3466 <rotenc_update+0x8>
    3466:	cd b7       	in	r28, 0x3d	; 61
    3468:	de b7       	in	r29, 0x3e	; 62
	// combine old and new state into one byte and use as address for the LUT.
	// shift old state
	rotenc_last = (rotenc_last << 2) & 0x0F;
    346a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
    346e:	88 2f       	mov	r24, r24
    3470:	90 e0       	ldi	r25, 0x00	; 0
    3472:	88 0f       	add	r24, r24
    3474:	99 1f       	adc	r25, r25
    3476:	88 0f       	add	r24, r24
    3478:	99 1f       	adc	r25, r25
    347a:	8f 70       	andi	r24, 0x0F	; 15
    347c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	// write new state
	if(ROT_ENC_READ_A) rotenc_last |= 2;
    3480:	83 e2       	ldi	r24, 0x23	; 35
    3482:	90 e0       	ldi	r25, 0x00	; 0
    3484:	fc 01       	movw	r30, r24
    3486:	80 81       	ld	r24, Z
    3488:	88 2f       	mov	r24, r24
    348a:	90 e0       	ldi	r25, 0x00	; 0
    348c:	84 70       	andi	r24, 0x04	; 4
    348e:	99 27       	eor	r25, r25
    3490:	89 2b       	or	r24, r25
    3492:	29 f4       	brne	.+10     	; 0x349e <rotenc_update+0x40>
    3494:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
    3498:	82 60       	ori	r24, 0x02	; 2
    349a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	if(ROT_ENC_READ_B) rotenc_last |= 1;
    349e:	83 e2       	ldi	r24, 0x23	; 35
    34a0:	90 e0       	ldi	r25, 0x00	; 0
    34a2:	fc 01       	movw	r30, r24
    34a4:	80 81       	ld	r24, Z
    34a6:	88 2f       	mov	r24, r24
    34a8:	90 e0       	ldi	r25, 0x00	; 0
    34aa:	88 70       	andi	r24, 0x08	; 8
    34ac:	99 27       	eor	r25, r25
    34ae:	89 2b       	or	r24, r25
    34b0:	29 f4       	brne	.+10     	; 0x34bc <rotenc_update+0x5e>
    34b2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
    34b6:	81 60       	ori	r24, 0x01	; 1
    34b8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	
	// retrieve increment value from LUT
	rotenc_delta += (int16_t)pgm_read_word(&rotenc_decoder_lut[rotenc_last]) * ROT_ENC_SIGN_MUL;
    34bc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
    34c0:	88 2f       	mov	r24, r24
    34c2:	90 e0       	ldi	r25, 0x00	; 0
    34c4:	88 0f       	add	r24, r24
    34c6:	99 1f       	adc	r25, r25
    34c8:	86 51       	subi	r24, 0x16	; 22
    34ca:	9f 4f       	sbci	r25, 0xFF	; 255
    34cc:	9a 83       	std	Y+2, r25	; 0x02
    34ce:	89 83       	std	Y+1, r24	; 0x01
    34d0:	89 81       	ldd	r24, Y+1	; 0x01
    34d2:	9a 81       	ldd	r25, Y+2	; 0x02
    34d4:	fc 01       	movw	r30, r24
    34d6:	25 91       	lpm	r18, Z+
    34d8:	34 91       	lpm	r19, Z
    34da:	cf 01       	movw	r24, r30
    34dc:	3c 83       	std	Y+4, r19	; 0x04
    34de:	2b 83       	std	Y+3, r18	; 0x03
    34e0:	9a 83       	std	Y+2, r25	; 0x02
    34e2:	89 83       	std	Y+1, r24	; 0x01
    34e4:	8b 81       	ldd	r24, Y+3	; 0x03
    34e6:	9c 81       	ldd	r25, Y+4	; 0x04
    34e8:	9c 01       	movw	r18, r24
    34ea:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <rotenc_delta>
    34ee:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <rotenc_delta+0x1>
    34f2:	82 0f       	add	r24, r18
    34f4:	93 1f       	adc	r25, r19
    34f6:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <rotenc_delta+0x1>
    34fa:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <rotenc_delta>
	
	// clamp delta to prevent overflows
	rotenc_delta = imax16(ROT_ENC_MIN_DELTA, imin16(ROT_ENC_MAX_DELTA, rotenc_delta));
    34fe:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <rotenc_delta>
    3502:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <rotenc_delta+0x1>
    3506:	bc 01       	movw	r22, r24
    3508:	88 ee       	ldi	r24, 0xE8	; 232
    350a:	93 e0       	ldi	r25, 0x03	; 3
    350c:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <imin16>
    3510:	bc 01       	movw	r22, r24
    3512:	88 e1       	ldi	r24, 0x18	; 24
    3514:	9c ef       	ldi	r25, 0xFC	; 252
    3516:	0e 94 6c 16 	call	0x2cd8	; 0x2cd8 <imax16>
    351a:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <rotenc_delta+0x1>
    351e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <rotenc_delta>
}
    3522:	00 00       	nop
    3524:	0f 90       	pop	r0
    3526:	0f 90       	pop	r0
    3528:	0f 90       	pop	r0
    352a:	0f 90       	pop	r0
    352c:	df 91       	pop	r29
    352e:	cf 91       	pop	r28
    3530:	08 95       	ret

00003532 <shreg_init>:
		SH_REG_PORT |= (1 << SH_REG_SCK);
		SH_REG_DELAY
		SH_REG_PORT &= ~(1 << SH_REG_SCK);
		SH_REG_DELAY
	}
}
    3532:	cf 93       	push	r28
    3534:	df 93       	push	r29
    3536:	cd b7       	in	r28, 0x3d	; 61
    3538:	de b7       	in	r29, 0x3e	; 62
    353a:	84 e2       	ldi	r24, 0x24	; 36
    353c:	90 e0       	ldi	r25, 0x00	; 0
    353e:	24 e2       	ldi	r18, 0x24	; 36
    3540:	30 e0       	ldi	r19, 0x00	; 0
    3542:	f9 01       	movw	r30, r18
    3544:	20 81       	ld	r18, Z
    3546:	20 6f       	ori	r18, 0xF0	; 240
    3548:	fc 01       	movw	r30, r24
    354a:	20 83       	st	Z, r18
    354c:	85 e2       	ldi	r24, 0x25	; 37
    354e:	90 e0       	ldi	r25, 0x00	; 0
    3550:	25 e2       	ldi	r18, 0x25	; 37
    3552:	30 e0       	ldi	r19, 0x00	; 0
    3554:	f9 01       	movw	r30, r18
    3556:	20 81       	ld	r18, Z
    3558:	2f 71       	andi	r18, 0x1F	; 31
    355a:	fc 01       	movw	r30, r24
    355c:	20 83       	st	Z, r18
    355e:	85 e2       	ldi	r24, 0x25	; 37
    3560:	90 e0       	ldi	r25, 0x00	; 0
    3562:	25 e2       	ldi	r18, 0x25	; 37
    3564:	30 e0       	ldi	r19, 0x00	; 0
    3566:	f9 01       	movw	r30, r18
    3568:	20 81       	ld	r18, Z
    356a:	20 61       	ori	r18, 0x10	; 16
    356c:	fc 01       	movw	r30, r24
    356e:	20 83       	st	Z, r18
    3570:	0e 94 3e 1b 	call	0x367c	; 0x367c <shreg_clear>
    3574:	0e 94 72 1b 	call	0x36e4	; 0x36e4 <shreg_out>
    3578:	00 00       	nop
    357a:	df 91       	pop	r29
    357c:	cf 91       	pop	r28
    357e:	08 95       	ret

00003580 <shreg_shutdown>:
    3580:	cf 93       	push	r28
    3582:	df 93       	push	r29
    3584:	cd b7       	in	r28, 0x3d	; 61
    3586:	de b7       	in	r29, 0x3e	; 62
    3588:	0e 94 3e 1b 	call	0x367c	; 0x367c <shreg_clear>
    358c:	0e 94 72 1b 	call	0x36e4	; 0x36e4 <shreg_out>
    3590:	00 00       	nop
    3592:	df 91       	pop	r29
    3594:	cf 91       	pop	r28
    3596:	08 95       	ret

00003598 <shreg_write_bit>:
    3598:	cf 93       	push	r28
    359a:	df 93       	push	r29
    359c:	1f 92       	push	r1
    359e:	cd b7       	in	r28, 0x3d	; 61
    35a0:	de b7       	in	r29, 0x3e	; 62
    35a2:	89 83       	std	Y+1, r24	; 0x01
    35a4:	85 e2       	ldi	r24, 0x25	; 37
    35a6:	90 e0       	ldi	r25, 0x00	; 0
    35a8:	25 e2       	ldi	r18, 0x25	; 37
    35aa:	30 e0       	ldi	r19, 0x00	; 0
    35ac:	f9 01       	movw	r30, r18
    35ae:	20 81       	ld	r18, Z
    35b0:	42 2f       	mov	r20, r18
    35b2:	4f 77       	andi	r20, 0x7F	; 127
    35b4:	29 81       	ldd	r18, Y+1	; 0x01
    35b6:	22 2f       	mov	r18, r18
    35b8:	30 e0       	ldi	r19, 0x00	; 0
    35ba:	36 95       	lsr	r19
    35bc:	32 2f       	mov	r19, r18
    35be:	22 27       	eor	r18, r18
    35c0:	37 95       	ror	r19
    35c2:	27 95       	ror	r18
    35c4:	24 2b       	or	r18, r20
    35c6:	fc 01       	movw	r30, r24
    35c8:	20 83       	st	Z, r18
    35ca:	0e 94 58 1b 	call	0x36b0	; 0x36b0 <shreg_shift>
    35ce:	00 00       	nop
    35d0:	0f 90       	pop	r0
    35d2:	df 91       	pop	r29
    35d4:	cf 91       	pop	r28
    35d6:	08 95       	ret

000035d8 <shreg_write_byte>:
    35d8:	cf 93       	push	r28
    35da:	df 93       	push	r29
    35dc:	00 d0       	rcall	.+0      	; 0x35de <shreg_write_byte+0x6>
    35de:	cd b7       	in	r28, 0x3d	; 61
    35e0:	de b7       	in	r29, 0x3e	; 62
    35e2:	8a 83       	std	Y+2, r24	; 0x02
    35e4:	19 82       	std	Y+1, r1	; 0x01
    35e6:	11 c0       	rjmp	.+34     	; 0x360a <shreg_write_byte+0x32>
    35e8:	8a 81       	ldd	r24, Y+2	; 0x02
    35ea:	88 2f       	mov	r24, r24
    35ec:	90 e0       	ldi	r25, 0x00	; 0
    35ee:	29 81       	ldd	r18, Y+1	; 0x01
    35f0:	22 2f       	mov	r18, r18
    35f2:	30 e0       	ldi	r19, 0x00	; 0
    35f4:	02 c0       	rjmp	.+4      	; 0x35fa <shreg_write_byte+0x22>
    35f6:	95 95       	asr	r25
    35f8:	87 95       	ror	r24
    35fa:	2a 95       	dec	r18
    35fc:	e2 f7       	brpl	.-8      	; 0x35f6 <shreg_write_byte+0x1e>
    35fe:	81 70       	andi	r24, 0x01	; 1
    3600:	0e 94 cc 1a 	call	0x3598	; 0x3598 <shreg_write_bit>
    3604:	89 81       	ldd	r24, Y+1	; 0x01
    3606:	8f 5f       	subi	r24, 0xFF	; 255
    3608:	89 83       	std	Y+1, r24	; 0x01
    360a:	89 81       	ldd	r24, Y+1	; 0x01
    360c:	88 30       	cpi	r24, 0x08	; 8
    360e:	60 f3       	brcs	.-40     	; 0x35e8 <shreg_write_byte+0x10>
    3610:	00 00       	nop
    3612:	0f 90       	pop	r0
    3614:	0f 90       	pop	r0
    3616:	df 91       	pop	r29
    3618:	cf 91       	pop	r28
    361a:	08 95       	ret

0000361c <shreg_write_bytes>:
    361c:	cf 93       	push	r28
    361e:	df 93       	push	r29
    3620:	00 d0       	rcall	.+0      	; 0x3622 <shreg_write_bytes+0x6>
    3622:	00 d0       	rcall	.+0      	; 0x3624 <shreg_write_bytes+0x8>
    3624:	cd b7       	in	r28, 0x3d	; 61
    3626:	de b7       	in	r29, 0x3e	; 62
    3628:	9b 83       	std	Y+3, r25	; 0x03
    362a:	8a 83       	std	Y+2, r24	; 0x02
    362c:	6c 83       	std	Y+4, r22	; 0x04
    362e:	19 82       	std	Y+1, r1	; 0x01
    3630:	19 c0       	rjmp	.+50     	; 0x3664 <shreg_write_bytes+0x48>
    3632:	8c 81       	ldd	r24, Y+4	; 0x04
    3634:	88 2f       	mov	r24, r24
    3636:	90 e0       	ldi	r25, 0x00	; 0
    3638:	9c 01       	movw	r18, r24
    363a:	21 50       	subi	r18, 0x01	; 1
    363c:	31 09       	sbc	r19, r1
    363e:	89 81       	ldd	r24, Y+1	; 0x01
    3640:	88 2f       	mov	r24, r24
    3642:	90 e0       	ldi	r25, 0x00	; 0
    3644:	a9 01       	movw	r20, r18
    3646:	48 1b       	sub	r20, r24
    3648:	59 0b       	sbc	r21, r25
    364a:	ca 01       	movw	r24, r20
    364c:	9c 01       	movw	r18, r24
    364e:	8a 81       	ldd	r24, Y+2	; 0x02
    3650:	9b 81       	ldd	r25, Y+3	; 0x03
    3652:	82 0f       	add	r24, r18
    3654:	93 1f       	adc	r25, r19
    3656:	fc 01       	movw	r30, r24
    3658:	80 81       	ld	r24, Z
    365a:	0e 94 ec 1a 	call	0x35d8	; 0x35d8 <shreg_write_byte>
    365e:	89 81       	ldd	r24, Y+1	; 0x01
    3660:	8f 5f       	subi	r24, 0xFF	; 255
    3662:	89 83       	std	Y+1, r24	; 0x01
    3664:	99 81       	ldd	r25, Y+1	; 0x01
    3666:	8c 81       	ldd	r24, Y+4	; 0x04
    3668:	98 17       	cp	r25, r24
    366a:	18 f3       	brcs	.-58     	; 0x3632 <shreg_write_bytes+0x16>
    366c:	00 00       	nop
    366e:	0f 90       	pop	r0
    3670:	0f 90       	pop	r0
    3672:	0f 90       	pop	r0
    3674:	0f 90       	pop	r0
    3676:	df 91       	pop	r29
    3678:	cf 91       	pop	r28
    367a:	08 95       	ret

0000367c <shreg_clear>:
    367c:	cf 93       	push	r28
    367e:	df 93       	push	r29
    3680:	cd b7       	in	r28, 0x3d	; 61
    3682:	de b7       	in	r29, 0x3e	; 62
    3684:	85 e2       	ldi	r24, 0x25	; 37
    3686:	90 e0       	ldi	r25, 0x00	; 0
    3688:	25 e2       	ldi	r18, 0x25	; 37
    368a:	30 e0       	ldi	r19, 0x00	; 0
    368c:	f9 01       	movw	r30, r18
    368e:	20 81       	ld	r18, Z
    3690:	2f 7e       	andi	r18, 0xEF	; 239
    3692:	fc 01       	movw	r30, r24
    3694:	20 83       	st	Z, r18
    3696:	85 e2       	ldi	r24, 0x25	; 37
    3698:	90 e0       	ldi	r25, 0x00	; 0
    369a:	25 e2       	ldi	r18, 0x25	; 37
    369c:	30 e0       	ldi	r19, 0x00	; 0
    369e:	f9 01       	movw	r30, r18
    36a0:	20 81       	ld	r18, Z
    36a2:	20 61       	ori	r18, 0x10	; 16
    36a4:	fc 01       	movw	r30, r24
    36a6:	20 83       	st	Z, r18
    36a8:	00 00       	nop
    36aa:	df 91       	pop	r29
    36ac:	cf 91       	pop	r28
    36ae:	08 95       	ret

000036b0 <shreg_shift>:
    36b0:	cf 93       	push	r28
    36b2:	df 93       	push	r29
    36b4:	cd b7       	in	r28, 0x3d	; 61
    36b6:	de b7       	in	r29, 0x3e	; 62
    36b8:	85 e2       	ldi	r24, 0x25	; 37
    36ba:	90 e0       	ldi	r25, 0x00	; 0
    36bc:	25 e2       	ldi	r18, 0x25	; 37
    36be:	30 e0       	ldi	r19, 0x00	; 0
    36c0:	f9 01       	movw	r30, r18
    36c2:	20 81       	ld	r18, Z
    36c4:	20 62       	ori	r18, 0x20	; 32
    36c6:	fc 01       	movw	r30, r24
    36c8:	20 83       	st	Z, r18
    36ca:	85 e2       	ldi	r24, 0x25	; 37
    36cc:	90 e0       	ldi	r25, 0x00	; 0
    36ce:	25 e2       	ldi	r18, 0x25	; 37
    36d0:	30 e0       	ldi	r19, 0x00	; 0
    36d2:	f9 01       	movw	r30, r18
    36d4:	20 81       	ld	r18, Z
    36d6:	2f 7d       	andi	r18, 0xDF	; 223
    36d8:	fc 01       	movw	r30, r24
    36da:	20 83       	st	Z, r18
    36dc:	00 00       	nop
    36de:	df 91       	pop	r29
    36e0:	cf 91       	pop	r28
    36e2:	08 95       	ret

000036e4 <shreg_out>:

void shreg_out()
{
    36e4:	cf 93       	push	r28
    36e6:	df 93       	push	r29
    36e8:	cd b7       	in	r28, 0x3d	; 61
    36ea:	de b7       	in	r29, 0x3e	; 62
	SH_REG_PORT |= (1 << SH_REG_RCK);
    36ec:	85 e2       	ldi	r24, 0x25	; 37
    36ee:	90 e0       	ldi	r25, 0x00	; 0
    36f0:	25 e2       	ldi	r18, 0x25	; 37
    36f2:	30 e0       	ldi	r19, 0x00	; 0
    36f4:	f9 01       	movw	r30, r18
    36f6:	20 81       	ld	r18, Z
    36f8:	20 64       	ori	r18, 0x40	; 64
    36fa:	fc 01       	movw	r30, r24
    36fc:	20 83       	st	Z, r18
	SH_REG_DELAY
	SH_REG_PORT &= ~(1 << SH_REG_RCK);
    36fe:	85 e2       	ldi	r24, 0x25	; 37
    3700:	90 e0       	ldi	r25, 0x00	; 0
    3702:	25 e2       	ldi	r18, 0x25	; 37
    3704:	30 e0       	ldi	r19, 0x00	; 0
    3706:	f9 01       	movw	r30, r18
    3708:	20 81       	ld	r18, Z
    370a:	2f 7b       	andi	r18, 0xBF	; 191
    370c:	fc 01       	movw	r30, r24
    370e:	20 83       	st	Z, r18
	SH_REG_DELAY
    3710:	00 00       	nop
    3712:	df 91       	pop	r29
    3714:	cf 91       	pop	r28
    3716:	08 95       	ret

00003718 <srd_dig_to_pattern>:
	for(uint8_t i = 0; i < length; ++i)
	{
		srd_set(i + index, patterns[i]);
	}
	return TRUE;
}
    3718:	cf 93       	push	r28
    371a:	df 93       	push	r29
    371c:	1f 92       	push	r1
    371e:	cd b7       	in	r28, 0x3d	; 61
    3720:	de b7       	in	r29, 0x3e	; 62
    3722:	89 83       	std	Y+1, r24	; 0x01
    3724:	89 81       	ldd	r24, Y+1	; 0x01
    3726:	88 2f       	mov	r24, r24
    3728:	90 e0       	ldi	r25, 0x00	; 0
    372a:	09 2e       	mov	r0, r25
    372c:	00 0c       	add	r0, r0
    372e:	aa 0b       	sbc	r26, r26
    3730:	bb 0b       	sbc	r27, r27
    3732:	40 e0       	ldi	r20, 0x00	; 0
    3734:	50 e0       	ldi	r21, 0x00	; 0
    3736:	29 e0       	ldi	r18, 0x09	; 9
    3738:	30 e0       	ldi	r19, 0x00	; 0
    373a:	84 1b       	sub	r24, r20
    373c:	95 0b       	sbc	r25, r21
    373e:	28 17       	cp	r18, r24
    3740:	39 07       	cpc	r19, r25
    3742:	c8 f0       	brcs	.+50     	; 0x3776 <srd_dig_to_pattern+0x5e>
    3744:	82 5c       	subi	r24, 0xC2	; 194
    3746:	9f 4f       	sbci	r25, 0xFF	; 255
    3748:	fc 01       	movw	r30, r24
    374a:	0c 94 a8 28 	jmp	0x5150	; 0x5150 <__tablejump2__>
    374e:	8f e3       	ldi	r24, 0x3F	; 63
    3750:	13 c0       	rjmp	.+38     	; 0x3778 <srd_dig_to_pattern+0x60>
    3752:	86 e0       	ldi	r24, 0x06	; 6
    3754:	11 c0       	rjmp	.+34     	; 0x3778 <srd_dig_to_pattern+0x60>
    3756:	8b e5       	ldi	r24, 0x5B	; 91
    3758:	0f c0       	rjmp	.+30     	; 0x3778 <srd_dig_to_pattern+0x60>
    375a:	8f e4       	ldi	r24, 0x4F	; 79
    375c:	0d c0       	rjmp	.+26     	; 0x3778 <srd_dig_to_pattern+0x60>
    375e:	86 e6       	ldi	r24, 0x66	; 102
    3760:	0b c0       	rjmp	.+22     	; 0x3778 <srd_dig_to_pattern+0x60>
    3762:	8d e6       	ldi	r24, 0x6D	; 109
    3764:	09 c0       	rjmp	.+18     	; 0x3778 <srd_dig_to_pattern+0x60>
    3766:	8d e7       	ldi	r24, 0x7D	; 125
    3768:	07 c0       	rjmp	.+14     	; 0x3778 <srd_dig_to_pattern+0x60>
    376a:	87 e0       	ldi	r24, 0x07	; 7
    376c:	05 c0       	rjmp	.+10     	; 0x3778 <srd_dig_to_pattern+0x60>
    376e:	8f e7       	ldi	r24, 0x7F	; 127
    3770:	03 c0       	rjmp	.+6      	; 0x3778 <srd_dig_to_pattern+0x60>
    3772:	8f e6       	ldi	r24, 0x6F	; 111
    3774:	01 c0       	rjmp	.+2      	; 0x3778 <srd_dig_to_pattern+0x60>
    3776:	8f e3       	ldi	r24, 0x3F	; 63
    3778:	0f 90       	pop	r0
    377a:	df 91       	pop	r29
    377c:	cf 91       	pop	r28
    377e:	08 95       	ret

00003780 <srd_ctd>:
    3780:	cf 93       	push	r28
    3782:	df 93       	push	r29
    3784:	00 d0       	rcall	.+0      	; 0x3786 <srd_ctd+0x6>
    3786:	1f 92       	push	r1
    3788:	cd b7       	in	r28, 0x3d	; 61
    378a:	de b7       	in	r29, 0x3e	; 62
    378c:	9b 83       	std	Y+3, r25	; 0x03
    378e:	8a 83       	std	Y+2, r24	; 0x02
    3790:	8a 81       	ldd	r24, Y+2	; 0x02
    3792:	9b 81       	ldd	r25, Y+3	; 0x03
    3794:	89 2b       	or	r24, r25
    3796:	11 f4       	brne	.+4      	; 0x379c <srd_ctd+0x1c>
    3798:	81 e0       	ldi	r24, 0x01	; 1
    379a:	1b c0       	rjmp	.+54     	; 0x37d2 <srd_ctd+0x52>
    379c:	19 82       	std	Y+1, r1	; 0x01
    379e:	8a 81       	ldd	r24, Y+2	; 0x02
    37a0:	9b 81       	ldd	r25, Y+3	; 0x03
    37a2:	99 23       	and	r25, r25
    37a4:	8c f4       	brge	.+34     	; 0x37c8 <srd_ctd+0x48>
    37a6:	89 81       	ldd	r24, Y+1	; 0x01
    37a8:	8f 5f       	subi	r24, 0xFF	; 255
    37aa:	89 83       	std	Y+1, r24	; 0x01
    37ac:	0d c0       	rjmp	.+26     	; 0x37c8 <srd_ctd+0x48>
    37ae:	8a 81       	ldd	r24, Y+2	; 0x02
    37b0:	9b 81       	ldd	r25, Y+3	; 0x03
    37b2:	2a e0       	ldi	r18, 0x0A	; 10
    37b4:	30 e0       	ldi	r19, 0x00	; 0
    37b6:	b9 01       	movw	r22, r18
    37b8:	0e 94 72 28 	call	0x50e4	; 0x50e4 <__divmodhi4>
    37bc:	cb 01       	movw	r24, r22
    37be:	9b 83       	std	Y+3, r25	; 0x03
    37c0:	8a 83       	std	Y+2, r24	; 0x02
    37c2:	89 81       	ldd	r24, Y+1	; 0x01
    37c4:	8f 5f       	subi	r24, 0xFF	; 255
    37c6:	89 83       	std	Y+1, r24	; 0x01
    37c8:	8a 81       	ldd	r24, Y+2	; 0x02
    37ca:	9b 81       	ldd	r25, Y+3	; 0x03
    37cc:	89 2b       	or	r24, r25
    37ce:	79 f7       	brne	.-34     	; 0x37ae <srd_ctd+0x2e>
    37d0:	89 81       	ldd	r24, Y+1	; 0x01
    37d2:	0f 90       	pop	r0
    37d4:	0f 90       	pop	r0
    37d6:	0f 90       	pop	r0
    37d8:	df 91       	pop	r29
    37da:	cf 91       	pop	r28
    37dc:	08 95       	ret

000037de <srd_signed_ctd>:
    37de:	cf 93       	push	r28
    37e0:	df 93       	push	r29
    37e2:	00 d0       	rcall	.+0      	; 0x37e4 <srd_signed_ctd+0x6>
    37e4:	00 d0       	rcall	.+0      	; 0x37e6 <srd_signed_ctd+0x8>
    37e6:	cd b7       	in	r28, 0x3d	; 61
    37e8:	de b7       	in	r29, 0x3e	; 62
    37ea:	9b 83       	std	Y+3, r25	; 0x03
    37ec:	8a 83       	std	Y+2, r24	; 0x02
    37ee:	6c 83       	std	Y+4, r22	; 0x04
    37f0:	8a 81       	ldd	r24, Y+2	; 0x02
    37f2:	9b 81       	ldd	r25, Y+3	; 0x03
    37f4:	89 2b       	or	r24, r25
    37f6:	39 f4       	brne	.+14     	; 0x3806 <srd_signed_ctd+0x28>
    37f8:	8c 81       	ldd	r24, Y+4	; 0x04
    37fa:	88 23       	and	r24, r24
    37fc:	11 f0       	breq	.+4      	; 0x3802 <srd_signed_ctd+0x24>
    37fe:	82 e0       	ldi	r24, 0x02	; 2
    3800:	1c c0       	rjmp	.+56     	; 0x383a <srd_signed_ctd+0x5c>
    3802:	81 e0       	ldi	r24, 0x01	; 1
    3804:	1a c0       	rjmp	.+52     	; 0x383a <srd_signed_ctd+0x5c>
    3806:	19 82       	std	Y+1, r1	; 0x01
    3808:	8c 81       	ldd	r24, Y+4	; 0x04
    380a:	88 23       	and	r24, r24
    380c:	89 f0       	breq	.+34     	; 0x3830 <srd_signed_ctd+0x52>
    380e:	89 81       	ldd	r24, Y+1	; 0x01
    3810:	8f 5f       	subi	r24, 0xFF	; 255
    3812:	89 83       	std	Y+1, r24	; 0x01
    3814:	0d c0       	rjmp	.+26     	; 0x3830 <srd_signed_ctd+0x52>
    3816:	8a 81       	ldd	r24, Y+2	; 0x02
    3818:	9b 81       	ldd	r25, Y+3	; 0x03
    381a:	2a e0       	ldi	r18, 0x0A	; 10
    381c:	30 e0       	ldi	r19, 0x00	; 0
    381e:	b9 01       	movw	r22, r18
    3820:	0e 94 72 28 	call	0x50e4	; 0x50e4 <__divmodhi4>
    3824:	cb 01       	movw	r24, r22
    3826:	9b 83       	std	Y+3, r25	; 0x03
    3828:	8a 83       	std	Y+2, r24	; 0x02
    382a:	89 81       	ldd	r24, Y+1	; 0x01
    382c:	8f 5f       	subi	r24, 0xFF	; 255
    382e:	89 83       	std	Y+1, r24	; 0x01
    3830:	8a 81       	ldd	r24, Y+2	; 0x02
    3832:	9b 81       	ldd	r25, Y+3	; 0x03
    3834:	89 2b       	or	r24, r25
    3836:	79 f7       	brne	.-34     	; 0x3816 <srd_signed_ctd+0x38>
    3838:	89 81       	ldd	r24, Y+1	; 0x01
    383a:	0f 90       	pop	r0
    383c:	0f 90       	pop	r0
    383e:	0f 90       	pop	r0
    3840:	0f 90       	pop	r0
    3842:	df 91       	pop	r29
    3844:	cf 91       	pop	r28
    3846:	08 95       	ret

00003848 <srd_int16_to_patterns>:
    3848:	0f 93       	push	r16
    384a:	1f 93       	push	r17
    384c:	cf 93       	push	r28
    384e:	df 93       	push	r29
    3850:	cd b7       	in	r28, 0x3d	; 61
    3852:	de b7       	in	r29, 0x3e	; 62
    3854:	27 97       	sbiw	r28, 0x07	; 7
    3856:	0f b6       	in	r0, 0x3f	; 63
    3858:	f8 94       	cli
    385a:	de bf       	out	0x3e, r29	; 62
    385c:	0f be       	out	0x3f, r0	; 63
    385e:	cd bf       	out	0x3d, r28	; 61
    3860:	9c 83       	std	Y+4, r25	; 0x04
    3862:	8b 83       	std	Y+3, r24	; 0x03
    3864:	7e 83       	std	Y+6, r23	; 0x06
    3866:	6d 83       	std	Y+5, r22	; 0x05
    3868:	4f 83       	std	Y+7, r20	; 0x07
    386a:	19 82       	std	Y+1, r1	; 0x01
    386c:	8c 81       	ldd	r24, Y+4	; 0x04
    386e:	88 1f       	adc	r24, r24
    3870:	88 27       	eor	r24, r24
    3872:	88 1f       	adc	r24, r24
    3874:	8a 83       	std	Y+2, r24	; 0x02
    3876:	8a 81       	ldd	r24, Y+2	; 0x02
    3878:	88 23       	and	r24, r24
    387a:	39 f0       	breq	.+14     	; 0x388a <srd_int16_to_patterns+0x42>
    387c:	8b 81       	ldd	r24, Y+3	; 0x03
    387e:	9c 81       	ldd	r25, Y+4	; 0x04
    3880:	91 95       	neg	r25
    3882:	81 95       	neg	r24
    3884:	91 09       	sbc	r25, r1
    3886:	9c 83       	std	Y+4, r25	; 0x04
    3888:	8b 83       	std	Y+3, r24	; 0x03
    388a:	8b 81       	ldd	r24, Y+3	; 0x03
    388c:	9c 81       	ldd	r25, Y+4	; 0x04
    388e:	89 2b       	or	r24, r25
    3890:	d1 f5       	brne	.+116    	; 0x3906 <srd_int16_to_patterns+0xbe>
    3892:	8f 81       	ldd	r24, Y+7	; 0x07
    3894:	88 2f       	mov	r24, r24
    3896:	90 e0       	ldi	r25, 0x00	; 0
    3898:	01 97       	sbiw	r24, 0x01	; 1
    389a:	2d 81       	ldd	r18, Y+5	; 0x05
    389c:	3e 81       	ldd	r19, Y+6	; 0x06
    389e:	82 0f       	add	r24, r18
    38a0:	93 1f       	adc	r25, r19
    38a2:	2f e3       	ldi	r18, 0x3F	; 63
    38a4:	fc 01       	movw	r30, r24
    38a6:	20 83       	st	Z, r18
    38a8:	89 81       	ldd	r24, Y+1	; 0x01
    38aa:	8f 5f       	subi	r24, 0xFF	; 255
    38ac:	89 83       	std	Y+1, r24	; 0x01
    38ae:	45 c0       	rjmp	.+138    	; 0x393a <srd_int16_to_patterns+0xf2>
    38b0:	8f 81       	ldd	r24, Y+7	; 0x07
    38b2:	88 2f       	mov	r24, r24
    38b4:	90 e0       	ldi	r25, 0x00	; 0
    38b6:	9c 01       	movw	r18, r24
    38b8:	21 50       	subi	r18, 0x01	; 1
    38ba:	31 09       	sbc	r19, r1
    38bc:	89 81       	ldd	r24, Y+1	; 0x01
    38be:	91 e0       	ldi	r25, 0x01	; 1
    38c0:	98 0f       	add	r25, r24
    38c2:	99 83       	std	Y+1, r25	; 0x01
    38c4:	88 2f       	mov	r24, r24
    38c6:	90 e0       	ldi	r25, 0x00	; 0
    38c8:	a9 01       	movw	r20, r18
    38ca:	48 1b       	sub	r20, r24
    38cc:	59 0b       	sbc	r21, r25
    38ce:	ca 01       	movw	r24, r20
    38d0:	9c 01       	movw	r18, r24
    38d2:	8d 81       	ldd	r24, Y+5	; 0x05
    38d4:	9e 81       	ldd	r25, Y+6	; 0x06
    38d6:	8c 01       	movw	r16, r24
    38d8:	02 0f       	add	r16, r18
    38da:	13 1f       	adc	r17, r19
    38dc:	8b 81       	ldd	r24, Y+3	; 0x03
    38de:	9c 81       	ldd	r25, Y+4	; 0x04
    38e0:	2a e0       	ldi	r18, 0x0A	; 10
    38e2:	30 e0       	ldi	r19, 0x00	; 0
    38e4:	b9 01       	movw	r22, r18
    38e6:	0e 94 72 28 	call	0x50e4	; 0x50e4 <__divmodhi4>
    38ea:	0e 94 8c 1b 	call	0x3718	; 0x3718 <srd_dig_to_pattern>
    38ee:	f8 01       	movw	r30, r16
    38f0:	80 83       	st	Z, r24
    38f2:	8b 81       	ldd	r24, Y+3	; 0x03
    38f4:	9c 81       	ldd	r25, Y+4	; 0x04
    38f6:	2a e0       	ldi	r18, 0x0A	; 10
    38f8:	30 e0       	ldi	r19, 0x00	; 0
    38fa:	b9 01       	movw	r22, r18
    38fc:	0e 94 72 28 	call	0x50e4	; 0x50e4 <__divmodhi4>
    3900:	cb 01       	movw	r24, r22
    3902:	9c 83       	std	Y+4, r25	; 0x04
    3904:	8b 83       	std	Y+3, r24	; 0x03
    3906:	8b 81       	ldd	r24, Y+3	; 0x03
    3908:	9c 81       	ldd	r25, Y+4	; 0x04
    390a:	18 16       	cp	r1, r24
    390c:	19 06       	cpc	r1, r25
    390e:	ac f4       	brge	.+42     	; 0x393a <srd_int16_to_patterns+0xf2>
    3910:	89 81       	ldd	r24, Y+1	; 0x01
    3912:	28 2f       	mov	r18, r24
    3914:	30 e0       	ldi	r19, 0x00	; 0
    3916:	8f 81       	ldd	r24, Y+7	; 0x07
    3918:	48 2f       	mov	r20, r24
    391a:	50 e0       	ldi	r21, 0x00	; 0
    391c:	81 e0       	ldi	r24, 0x01	; 1
    391e:	9a 81       	ldd	r25, Y+2	; 0x02
    3920:	99 23       	and	r25, r25
    3922:	09 f4       	brne	.+2      	; 0x3926 <srd_int16_to_patterns+0xde>
    3924:	80 e0       	ldi	r24, 0x00	; 0
    3926:	88 2f       	mov	r24, r24
    3928:	90 e0       	ldi	r25, 0x00	; 0
    392a:	ba 01       	movw	r22, r20
    392c:	68 1b       	sub	r22, r24
    392e:	79 0b       	sbc	r23, r25
    3930:	cb 01       	movw	r24, r22
    3932:	28 17       	cp	r18, r24
    3934:	39 07       	cpc	r19, r25
    3936:	0c f4       	brge	.+2      	; 0x393a <srd_int16_to_patterns+0xf2>
    3938:	bb cf       	rjmp	.-138    	; 0x38b0 <srd_int16_to_patterns+0x68>
    393a:	8a 81       	ldd	r24, Y+2	; 0x02
    393c:	88 23       	and	r24, r24
    393e:	a9 f0       	breq	.+42     	; 0x396a <srd_int16_to_patterns+0x122>
    3940:	8f 81       	ldd	r24, Y+7	; 0x07
    3942:	88 2f       	mov	r24, r24
    3944:	90 e0       	ldi	r25, 0x00	; 0
    3946:	9c 01       	movw	r18, r24
    3948:	21 50       	subi	r18, 0x01	; 1
    394a:	31 09       	sbc	r19, r1
    394c:	89 81       	ldd	r24, Y+1	; 0x01
    394e:	88 2f       	mov	r24, r24
    3950:	90 e0       	ldi	r25, 0x00	; 0
    3952:	f9 01       	movw	r30, r18
    3954:	e8 1b       	sub	r30, r24
    3956:	f9 0b       	sbc	r31, r25
    3958:	cf 01       	movw	r24, r30
    395a:	9c 01       	movw	r18, r24
    395c:	8d 81       	ldd	r24, Y+5	; 0x05
    395e:	9e 81       	ldd	r25, Y+6	; 0x06
    3960:	82 0f       	add	r24, r18
    3962:	93 1f       	adc	r25, r19
    3964:	20 e4       	ldi	r18, 0x40	; 64
    3966:	fc 01       	movw	r30, r24
    3968:	20 83       	st	Z, r18
    396a:	81 e0       	ldi	r24, 0x01	; 1
    396c:	27 96       	adiw	r28, 0x07	; 7
    396e:	0f b6       	in	r0, 0x3f	; 63
    3970:	f8 94       	cli
    3972:	de bf       	out	0x3e, r29	; 62
    3974:	0f be       	out	0x3f, r0	; 63
    3976:	cd bf       	out	0x3d, r28	; 61
    3978:	df 91       	pop	r29
    397a:	cf 91       	pop	r28
    397c:	1f 91       	pop	r17
    397e:	0f 91       	pop	r16
    3980:	08 95       	ret

00003982 <srd_signed_int16_to_patterns>:
    3982:	0f 93       	push	r16
    3984:	1f 93       	push	r17
    3986:	cf 93       	push	r28
    3988:	df 93       	push	r29
    398a:	cd b7       	in	r28, 0x3d	; 61
    398c:	de b7       	in	r29, 0x3e	; 62
    398e:	27 97       	sbiw	r28, 0x07	; 7
    3990:	0f b6       	in	r0, 0x3f	; 63
    3992:	f8 94       	cli
    3994:	de bf       	out	0x3e, r29	; 62
    3996:	0f be       	out	0x3f, r0	; 63
    3998:	cd bf       	out	0x3d, r28	; 61
    399a:	9b 83       	std	Y+3, r25	; 0x03
    399c:	8a 83       	std	Y+2, r24	; 0x02
    399e:	6c 83       	std	Y+4, r22	; 0x04
    39a0:	5e 83       	std	Y+6, r21	; 0x06
    39a2:	4d 83       	std	Y+5, r20	; 0x05
    39a4:	2f 83       	std	Y+7, r18	; 0x07
    39a6:	19 82       	std	Y+1, r1	; 0x01
    39a8:	8c 81       	ldd	r24, Y+4	; 0x04
    39aa:	88 23       	and	r24, r24
    39ac:	39 f0       	breq	.+14     	; 0x39bc <srd_signed_int16_to_patterns+0x3a>
    39ae:	8a 81       	ldd	r24, Y+2	; 0x02
    39b0:	9b 81       	ldd	r25, Y+3	; 0x03
    39b2:	91 95       	neg	r25
    39b4:	81 95       	neg	r24
    39b6:	91 09       	sbc	r25, r1
    39b8:	9b 83       	std	Y+3, r25	; 0x03
    39ba:	8a 83       	std	Y+2, r24	; 0x02
    39bc:	8a 81       	ldd	r24, Y+2	; 0x02
    39be:	9b 81       	ldd	r25, Y+3	; 0x03
    39c0:	89 2b       	or	r24, r25
    39c2:	d1 f5       	brne	.+116    	; 0x3a38 <srd_signed_int16_to_patterns+0xb6>
    39c4:	8f 81       	ldd	r24, Y+7	; 0x07
    39c6:	88 2f       	mov	r24, r24
    39c8:	90 e0       	ldi	r25, 0x00	; 0
    39ca:	01 97       	sbiw	r24, 0x01	; 1
    39cc:	2d 81       	ldd	r18, Y+5	; 0x05
    39ce:	3e 81       	ldd	r19, Y+6	; 0x06
    39d0:	82 0f       	add	r24, r18
    39d2:	93 1f       	adc	r25, r19
    39d4:	2f e3       	ldi	r18, 0x3F	; 63
    39d6:	fc 01       	movw	r30, r24
    39d8:	20 83       	st	Z, r18
    39da:	89 81       	ldd	r24, Y+1	; 0x01
    39dc:	8f 5f       	subi	r24, 0xFF	; 255
    39de:	89 83       	std	Y+1, r24	; 0x01
    39e0:	45 c0       	rjmp	.+138    	; 0x3a6c <srd_signed_int16_to_patterns+0xea>
    39e2:	8f 81       	ldd	r24, Y+7	; 0x07
    39e4:	88 2f       	mov	r24, r24
    39e6:	90 e0       	ldi	r25, 0x00	; 0
    39e8:	9c 01       	movw	r18, r24
    39ea:	21 50       	subi	r18, 0x01	; 1
    39ec:	31 09       	sbc	r19, r1
    39ee:	89 81       	ldd	r24, Y+1	; 0x01
    39f0:	91 e0       	ldi	r25, 0x01	; 1
    39f2:	98 0f       	add	r25, r24
    39f4:	99 83       	std	Y+1, r25	; 0x01
    39f6:	88 2f       	mov	r24, r24
    39f8:	90 e0       	ldi	r25, 0x00	; 0
    39fa:	a9 01       	movw	r20, r18
    39fc:	48 1b       	sub	r20, r24
    39fe:	59 0b       	sbc	r21, r25
    3a00:	ca 01       	movw	r24, r20
    3a02:	9c 01       	movw	r18, r24
    3a04:	8d 81       	ldd	r24, Y+5	; 0x05
    3a06:	9e 81       	ldd	r25, Y+6	; 0x06
    3a08:	8c 01       	movw	r16, r24
    3a0a:	02 0f       	add	r16, r18
    3a0c:	13 1f       	adc	r17, r19
    3a0e:	8a 81       	ldd	r24, Y+2	; 0x02
    3a10:	9b 81       	ldd	r25, Y+3	; 0x03
    3a12:	2a e0       	ldi	r18, 0x0A	; 10
    3a14:	30 e0       	ldi	r19, 0x00	; 0
    3a16:	b9 01       	movw	r22, r18
    3a18:	0e 94 72 28 	call	0x50e4	; 0x50e4 <__divmodhi4>
    3a1c:	0e 94 8c 1b 	call	0x3718	; 0x3718 <srd_dig_to_pattern>
    3a20:	f8 01       	movw	r30, r16
    3a22:	80 83       	st	Z, r24
    3a24:	8a 81       	ldd	r24, Y+2	; 0x02
    3a26:	9b 81       	ldd	r25, Y+3	; 0x03
    3a28:	2a e0       	ldi	r18, 0x0A	; 10
    3a2a:	30 e0       	ldi	r19, 0x00	; 0
    3a2c:	b9 01       	movw	r22, r18
    3a2e:	0e 94 72 28 	call	0x50e4	; 0x50e4 <__divmodhi4>
    3a32:	cb 01       	movw	r24, r22
    3a34:	9b 83       	std	Y+3, r25	; 0x03
    3a36:	8a 83       	std	Y+2, r24	; 0x02
    3a38:	8a 81       	ldd	r24, Y+2	; 0x02
    3a3a:	9b 81       	ldd	r25, Y+3	; 0x03
    3a3c:	18 16       	cp	r1, r24
    3a3e:	19 06       	cpc	r1, r25
    3a40:	ac f4       	brge	.+42     	; 0x3a6c <srd_signed_int16_to_patterns+0xea>
    3a42:	89 81       	ldd	r24, Y+1	; 0x01
    3a44:	28 2f       	mov	r18, r24
    3a46:	30 e0       	ldi	r19, 0x00	; 0
    3a48:	8f 81       	ldd	r24, Y+7	; 0x07
    3a4a:	48 2f       	mov	r20, r24
    3a4c:	50 e0       	ldi	r21, 0x00	; 0
    3a4e:	81 e0       	ldi	r24, 0x01	; 1
    3a50:	9c 81       	ldd	r25, Y+4	; 0x04
    3a52:	99 23       	and	r25, r25
    3a54:	09 f4       	brne	.+2      	; 0x3a58 <srd_signed_int16_to_patterns+0xd6>
    3a56:	80 e0       	ldi	r24, 0x00	; 0
    3a58:	88 2f       	mov	r24, r24
    3a5a:	90 e0       	ldi	r25, 0x00	; 0
    3a5c:	ba 01       	movw	r22, r20
    3a5e:	68 1b       	sub	r22, r24
    3a60:	79 0b       	sbc	r23, r25
    3a62:	cb 01       	movw	r24, r22
    3a64:	28 17       	cp	r18, r24
    3a66:	39 07       	cpc	r19, r25
    3a68:	0c f4       	brge	.+2      	; 0x3a6c <srd_signed_int16_to_patterns+0xea>
    3a6a:	bb cf       	rjmp	.-138    	; 0x39e2 <srd_signed_int16_to_patterns+0x60>
    3a6c:	8c 81       	ldd	r24, Y+4	; 0x04
    3a6e:	88 23       	and	r24, r24
    3a70:	a9 f0       	breq	.+42     	; 0x3a9c <srd_signed_int16_to_patterns+0x11a>
    3a72:	8f 81       	ldd	r24, Y+7	; 0x07
    3a74:	88 2f       	mov	r24, r24
    3a76:	90 e0       	ldi	r25, 0x00	; 0
    3a78:	9c 01       	movw	r18, r24
    3a7a:	21 50       	subi	r18, 0x01	; 1
    3a7c:	31 09       	sbc	r19, r1
    3a7e:	89 81       	ldd	r24, Y+1	; 0x01
    3a80:	88 2f       	mov	r24, r24
    3a82:	90 e0       	ldi	r25, 0x00	; 0
    3a84:	f9 01       	movw	r30, r18
    3a86:	e8 1b       	sub	r30, r24
    3a88:	f9 0b       	sbc	r31, r25
    3a8a:	cf 01       	movw	r24, r30
    3a8c:	9c 01       	movw	r18, r24
    3a8e:	8d 81       	ldd	r24, Y+5	; 0x05
    3a90:	9e 81       	ldd	r25, Y+6	; 0x06
    3a92:	82 0f       	add	r24, r18
    3a94:	93 1f       	adc	r25, r19
    3a96:	20 e4       	ldi	r18, 0x40	; 64
    3a98:	fc 01       	movw	r30, r24
    3a9a:	20 83       	st	Z, r18
    3a9c:	81 e0       	ldi	r24, 0x01	; 1
    3a9e:	27 96       	adiw	r28, 0x07	; 7
    3aa0:	0f b6       	in	r0, 0x3f	; 63
    3aa2:	f8 94       	cli
    3aa4:	de bf       	out	0x3e, r29	; 62
    3aa6:	0f be       	out	0x3f, r0	; 63
    3aa8:	cd bf       	out	0x3d, r28	; 61
    3aaa:	df 91       	pop	r29
    3aac:	cf 91       	pop	r28
    3aae:	1f 91       	pop	r17
    3ab0:	0f 91       	pop	r16
    3ab2:	08 95       	ret

00003ab4 <srd_float_to_patterns>:
    3ab4:	cf 92       	push	r12
    3ab6:	df 92       	push	r13
    3ab8:	ef 92       	push	r14
    3aba:	ff 92       	push	r15
    3abc:	0f 93       	push	r16
    3abe:	1f 93       	push	r17
    3ac0:	cf 93       	push	r28
    3ac2:	df 93       	push	r29
    3ac4:	cd b7       	in	r28, 0x3d	; 61
    3ac6:	de b7       	in	r29, 0x3e	; 62
    3ac8:	61 97       	sbiw	r28, 0x11	; 17
    3aca:	0f b6       	in	r0, 0x3f	; 63
    3acc:	f8 94       	cli
    3ace:	de bf       	out	0x3e, r29	; 62
    3ad0:	0f be       	out	0x3f, r0	; 63
    3ad2:	cd bf       	out	0x3d, r28	; 61
    3ad4:	6a 87       	std	Y+10, r22	; 0x0a
    3ad6:	7b 87       	std	Y+11, r23	; 0x0b
    3ad8:	8c 87       	std	Y+12, r24	; 0x0c
    3ada:	9d 87       	std	Y+13, r25	; 0x0d
    3adc:	4e 87       	std	Y+14, r20	; 0x0e
    3ade:	38 8b       	std	Y+16, r19	; 0x10
    3ae0:	2f 87       	std	Y+15, r18	; 0x0f
    3ae2:	09 8b       	std	Y+17, r16	; 0x11
    3ae4:	11 e0       	ldi	r17, 0x01	; 1
    3ae6:	20 e0       	ldi	r18, 0x00	; 0
    3ae8:	30 e0       	ldi	r19, 0x00	; 0
    3aea:	a9 01       	movw	r20, r18
    3aec:	6a 85       	ldd	r22, Y+10	; 0x0a
    3aee:	7b 85       	ldd	r23, Y+11	; 0x0b
    3af0:	8c 85       	ldd	r24, Y+12	; 0x0c
    3af2:	9d 85       	ldd	r25, Y+13	; 0x0d
    3af4:	0e 94 d0 25 	call	0x4ba0	; 0x4ba0 <__cmpsf2>
    3af8:	88 23       	and	r24, r24
    3afa:	0c f0       	brlt	.+2      	; 0x3afe <srd_float_to_patterns+0x4a>
    3afc:	10 e0       	ldi	r17, 0x00	; 0
    3afe:	1b 83       	std	Y+3, r17	; 0x03
    3b00:	6a 85       	ldd	r22, Y+10	; 0x0a
    3b02:	7b 85       	ldd	r23, Y+11	; 0x0b
    3b04:	8c 85       	ldd	r24, Y+12	; 0x0c
    3b06:	9d 85       	ldd	r25, Y+13	; 0x0d
    3b08:	0e 94 83 26 	call	0x4d06	; 0x4d06 <__fixsfsi>
    3b0c:	dc 01       	movw	r26, r24
    3b0e:	cb 01       	movw	r24, r22
    3b10:	9d 83       	std	Y+5, r25	; 0x05
    3b12:	8c 83       	std	Y+4, r24	; 0x04
    3b14:	8c 81       	ldd	r24, Y+4	; 0x04
    3b16:	9d 81       	ldd	r25, Y+5	; 0x05
    3b18:	09 2e       	mov	r0, r25
    3b1a:	00 0c       	add	r0, r0
    3b1c:	aa 0b       	sbc	r26, r26
    3b1e:	bb 0b       	sbc	r27, r27
    3b20:	bc 01       	movw	r22, r24
    3b22:	cd 01       	movw	r24, r26
    3b24:	0e 94 bb 26 	call	0x4d76	; 0x4d76 <__floatsisf>
    3b28:	dc 01       	movw	r26, r24
    3b2a:	cb 01       	movw	r24, r22
    3b2c:	9c 01       	movw	r18, r24
    3b2e:	ad 01       	movw	r20, r26
    3b30:	6a 85       	ldd	r22, Y+10	; 0x0a
    3b32:	7b 85       	ldd	r23, Y+11	; 0x0b
    3b34:	8c 85       	ldd	r24, Y+12	; 0x0c
    3b36:	9d 85       	ldd	r25, Y+13	; 0x0d
    3b38:	0e 94 63 25 	call	0x4ac6	; 0x4ac6 <__subsf3>
    3b3c:	dc 01       	movw	r26, r24
    3b3e:	cb 01       	movw	r24, r22
    3b40:	6c 01       	movw	r12, r24
    3b42:	7d 01       	movw	r14, r26
    3b44:	e8 94       	clt
    3b46:	f7 f8       	bld	r15, 7
    3b48:	8e 85       	ldd	r24, Y+14	; 0x0e
    3b4a:	88 2f       	mov	r24, r24
    3b4c:	90 e0       	ldi	r25, 0x00	; 0
    3b4e:	0e 94 24 16 	call	0x2c48	; 0x2c48 <decpowi16>
    3b52:	09 2e       	mov	r0, r25
    3b54:	00 0c       	add	r0, r0
    3b56:	aa 0b       	sbc	r26, r26
    3b58:	bb 0b       	sbc	r27, r27
    3b5a:	bc 01       	movw	r22, r24
    3b5c:	cd 01       	movw	r24, r26
    3b5e:	0e 94 bb 26 	call	0x4d76	; 0x4d76 <__floatsisf>
    3b62:	dc 01       	movw	r26, r24
    3b64:	cb 01       	movw	r24, r22
    3b66:	9c 01       	movw	r18, r24
    3b68:	ad 01       	movw	r20, r26
    3b6a:	c7 01       	movw	r24, r14
    3b6c:	b6 01       	movw	r22, r12
    3b6e:	0e 94 d0 27 	call	0x4fa0	; 0x4fa0 <__mulsf3>
    3b72:	dc 01       	movw	r26, r24
    3b74:	cb 01       	movw	r24, r22
    3b76:	bc 01       	movw	r22, r24
    3b78:	cd 01       	movw	r24, r26
    3b7a:	0e 94 83 26 	call	0x4d06	; 0x4d06 <__fixsfsi>
    3b7e:	dc 01       	movw	r26, r24
    3b80:	cb 01       	movw	r24, r22
    3b82:	9f 83       	std	Y+7, r25	; 0x07
    3b84:	8e 83       	std	Y+6, r24	; 0x06
    3b86:	8c 81       	ldd	r24, Y+4	; 0x04
    3b88:	9d 81       	ldd	r25, Y+5	; 0x05
    3b8a:	6b 81       	ldd	r22, Y+3	; 0x03
    3b8c:	0e 94 ef 1b 	call	0x37de	; 0x37de <srd_signed_ctd>
    3b90:	88 87       	std	Y+8, r24	; 0x08
    3b92:	8e 81       	ldd	r24, Y+6	; 0x06
    3b94:	9f 81       	ldd	r25, Y+7	; 0x07
    3b96:	0e 94 c0 1b 	call	0x3780	; 0x3780 <srd_ctd>
    3b9a:	89 87       	std	Y+9, r24	; 0x09
    3b9c:	88 85       	ldd	r24, Y+8	; 0x08
    3b9e:	28 2f       	mov	r18, r24
    3ba0:	30 e0       	ldi	r19, 0x00	; 0
    3ba2:	8e 85       	ldd	r24, Y+14	; 0x0e
    3ba4:	88 2f       	mov	r24, r24
    3ba6:	90 e0       	ldi	r25, 0x00	; 0
    3ba8:	28 0f       	add	r18, r24
    3baa:	39 1f       	adc	r19, r25
    3bac:	89 89       	ldd	r24, Y+17	; 0x11
    3bae:	88 2f       	mov	r24, r24
    3bb0:	90 e0       	ldi	r25, 0x00	; 0
    3bb2:	82 17       	cp	r24, r18
    3bb4:	93 07       	cpc	r25, r19
    3bb6:	14 f4       	brge	.+4      	; 0x3bbc <srd_float_to_patterns+0x108>
    3bb8:	80 e0       	ldi	r24, 0x00	; 0
    3bba:	7f c0       	rjmp	.+254    	; 0x3cba <srd_float_to_patterns+0x206>
    3bbc:	89 89       	ldd	r24, Y+17	; 0x11
    3bbe:	28 2f       	mov	r18, r24
    3bc0:	30 e0       	ldi	r19, 0x00	; 0
    3bc2:	8e 85       	ldd	r24, Y+14	; 0x0e
    3bc4:	88 2f       	mov	r24, r24
    3bc6:	90 e0       	ldi	r25, 0x00	; 0
    3bc8:	a9 01       	movw	r20, r18
    3bca:	48 1b       	sub	r20, r24
    3bcc:	59 0b       	sbc	r21, r25
    3bce:	ca 01       	movw	r24, r20
    3bd0:	9c 01       	movw	r18, r24
    3bd2:	8f 85       	ldd	r24, Y+15	; 0x0f
    3bd4:	98 89       	ldd	r25, Y+16	; 0x10
    3bd6:	ac 01       	movw	r20, r24
    3bd8:	42 0f       	add	r20, r18
    3bda:	53 1f       	adc	r21, r19
    3bdc:	8e 81       	ldd	r24, Y+6	; 0x06
    3bde:	9f 81       	ldd	r25, Y+7	; 0x07
    3be0:	2e 85       	ldd	r18, Y+14	; 0x0e
    3be2:	60 e0       	ldi	r22, 0x00	; 0
    3be4:	0e 94 c1 1c 	call	0x3982	; 0x3982 <srd_signed_int16_to_patterns>
    3be8:	1a 82       	std	Y+2, r1	; 0x02
    3bea:	19 82       	std	Y+1, r1	; 0x01
    3bec:	19 c0       	rjmp	.+50     	; 0x3c20 <srd_float_to_patterns+0x16c>
    3bee:	89 89       	ldd	r24, Y+17	; 0x11
    3bf0:	28 2f       	mov	r18, r24
    3bf2:	30 e0       	ldi	r19, 0x00	; 0
    3bf4:	8e 85       	ldd	r24, Y+14	; 0x0e
    3bf6:	88 2f       	mov	r24, r24
    3bf8:	90 e0       	ldi	r25, 0x00	; 0
    3bfa:	28 1b       	sub	r18, r24
    3bfc:	39 0b       	sbc	r19, r25
    3bfe:	89 81       	ldd	r24, Y+1	; 0x01
    3c00:	9a 81       	ldd	r25, Y+2	; 0x02
    3c02:	82 0f       	add	r24, r18
    3c04:	93 1f       	adc	r25, r19
    3c06:	9c 01       	movw	r18, r24
    3c08:	8f 85       	ldd	r24, Y+15	; 0x0f
    3c0a:	98 89       	ldd	r25, Y+16	; 0x10
    3c0c:	82 0f       	add	r24, r18
    3c0e:	93 1f       	adc	r25, r19
    3c10:	2f e3       	ldi	r18, 0x3F	; 63
    3c12:	fc 01       	movw	r30, r24
    3c14:	20 83       	st	Z, r18
    3c16:	89 81       	ldd	r24, Y+1	; 0x01
    3c18:	9a 81       	ldd	r25, Y+2	; 0x02
    3c1a:	01 96       	adiw	r24, 0x01	; 1
    3c1c:	9a 83       	std	Y+2, r25	; 0x02
    3c1e:	89 83       	std	Y+1, r24	; 0x01
    3c20:	8e 85       	ldd	r24, Y+14	; 0x0e
    3c22:	28 2f       	mov	r18, r24
    3c24:	30 e0       	ldi	r19, 0x00	; 0
    3c26:	89 85       	ldd	r24, Y+9	; 0x09
    3c28:	88 2f       	mov	r24, r24
    3c2a:	90 e0       	ldi	r25, 0x00	; 0
    3c2c:	28 1b       	sub	r18, r24
    3c2e:	39 0b       	sbc	r19, r25
    3c30:	89 81       	ldd	r24, Y+1	; 0x01
    3c32:	9a 81       	ldd	r25, Y+2	; 0x02
    3c34:	82 17       	cp	r24, r18
    3c36:	93 07       	cpc	r25, r19
    3c38:	d4 f2       	brlt	.-76     	; 0x3bee <srd_float_to_patterns+0x13a>
    3c3a:	89 89       	ldd	r24, Y+17	; 0x11
    3c3c:	28 2f       	mov	r18, r24
    3c3e:	30 e0       	ldi	r19, 0x00	; 0
    3c40:	8e 85       	ldd	r24, Y+14	; 0x0e
    3c42:	88 2f       	mov	r24, r24
    3c44:	90 e0       	ldi	r25, 0x00	; 0
    3c46:	28 1b       	sub	r18, r24
    3c48:	39 0b       	sbc	r19, r25
    3c4a:	88 85       	ldd	r24, Y+8	; 0x08
    3c4c:	88 2f       	mov	r24, r24
    3c4e:	90 e0       	ldi	r25, 0x00	; 0
    3c50:	a9 01       	movw	r20, r18
    3c52:	48 1b       	sub	r20, r24
    3c54:	59 0b       	sbc	r21, r25
    3c56:	ca 01       	movw	r24, r20
    3c58:	9c 01       	movw	r18, r24
    3c5a:	8f 85       	ldd	r24, Y+15	; 0x0f
    3c5c:	98 89       	ldd	r25, Y+16	; 0x10
    3c5e:	ac 01       	movw	r20, r24
    3c60:	42 0f       	add	r20, r18
    3c62:	53 1f       	adc	r21, r19
    3c64:	8c 81       	ldd	r24, Y+4	; 0x04
    3c66:	9d 81       	ldd	r25, Y+5	; 0x05
    3c68:	28 85       	ldd	r18, Y+8	; 0x08
    3c6a:	6b 81       	ldd	r22, Y+3	; 0x03
    3c6c:	0e 94 c1 1c 	call	0x3982	; 0x3982 <srd_signed_int16_to_patterns>
    3c70:	89 89       	ldd	r24, Y+17	; 0x11
    3c72:	28 2f       	mov	r18, r24
    3c74:	30 e0       	ldi	r19, 0x00	; 0
    3c76:	8e 85       	ldd	r24, Y+14	; 0x0e
    3c78:	88 2f       	mov	r24, r24
    3c7a:	90 e0       	ldi	r25, 0x00	; 0
    3c7c:	b9 01       	movw	r22, r18
    3c7e:	68 1b       	sub	r22, r24
    3c80:	79 0b       	sbc	r23, r25
    3c82:	cb 01       	movw	r24, r22
    3c84:	01 97       	sbiw	r24, 0x01	; 1
    3c86:	2f 85       	ldd	r18, Y+15	; 0x0f
    3c88:	38 89       	ldd	r19, Y+16	; 0x10
    3c8a:	82 0f       	add	r24, r18
    3c8c:	93 1f       	adc	r25, r19
    3c8e:	29 89       	ldd	r18, Y+17	; 0x11
    3c90:	42 2f       	mov	r20, r18
    3c92:	50 e0       	ldi	r21, 0x00	; 0
    3c94:	2e 85       	ldd	r18, Y+14	; 0x0e
    3c96:	22 2f       	mov	r18, r18
    3c98:	30 e0       	ldi	r19, 0x00	; 0
    3c9a:	fa 01       	movw	r30, r20
    3c9c:	e2 1b       	sub	r30, r18
    3c9e:	f3 0b       	sbc	r31, r19
    3ca0:	9f 01       	movw	r18, r30
    3ca2:	21 50       	subi	r18, 0x01	; 1
    3ca4:	31 09       	sbc	r19, r1
    3ca6:	4f 85       	ldd	r20, Y+15	; 0x0f
    3ca8:	58 89       	ldd	r21, Y+16	; 0x10
    3caa:	24 0f       	add	r18, r20
    3cac:	35 1f       	adc	r19, r21
    3cae:	f9 01       	movw	r30, r18
    3cb0:	20 81       	ld	r18, Z
    3cb2:	20 68       	ori	r18, 0x80	; 128
    3cb4:	fc 01       	movw	r30, r24
    3cb6:	20 83       	st	Z, r18
    3cb8:	81 e0       	ldi	r24, 0x01	; 1
    3cba:	61 96       	adiw	r28, 0x11	; 17
    3cbc:	0f b6       	in	r0, 0x3f	; 63
    3cbe:	f8 94       	cli
    3cc0:	de bf       	out	0x3e, r29	; 62
    3cc2:	0f be       	out	0x3f, r0	; 63
    3cc4:	cd bf       	out	0x3d, r28	; 61
    3cc6:	df 91       	pop	r29
    3cc8:	cf 91       	pop	r28
    3cca:	1f 91       	pop	r17
    3ccc:	0f 91       	pop	r16
    3cce:	ff 90       	pop	r15
    3cd0:	ef 90       	pop	r14
    3cd2:	df 90       	pop	r13
    3cd4:	cf 90       	pop	r12
    3cd6:	08 95       	ret

00003cd8 <srd_init>:
    3cd8:	cf 93       	push	r28
    3cda:	df 93       	push	r29
    3cdc:	cd b7       	in	r28, 0x3d	; 61
    3cde:	de b7       	in	r29, 0x3e	; 62
    3ce0:	0e 94 99 1a 	call	0x3532	; 0x3532 <shreg_init>
    3ce4:	0e 94 10 1f 	call	0x3e20	; 0x3e20 <srd_clear>
    3ce8:	0e 94 ff 1e 	call	0x3dfe	; 0x3dfe <srd_display>
    3cec:	00 00       	nop
    3cee:	df 91       	pop	r29
    3cf0:	cf 91       	pop	r28
    3cf2:	08 95       	ret

00003cf4 <srd_shutdown>:
    3cf4:	cf 93       	push	r28
    3cf6:	df 93       	push	r29
    3cf8:	cd b7       	in	r28, 0x3d	; 61
    3cfa:	de b7       	in	r29, 0x3e	; 62
    3cfc:	0e 94 c0 1a 	call	0x3580	; 0x3580 <shreg_shutdown>
    3d00:	00 00       	nop
    3d02:	df 91       	pop	r29
    3d04:	cf 91       	pop	r28
    3d06:	08 95       	ret

00003d08 <srd_set>:
    3d08:	cf 93       	push	r28
    3d0a:	df 93       	push	r29
    3d0c:	00 d0       	rcall	.+0      	; 0x3d0e <srd_set+0x6>
    3d0e:	cd b7       	in	r28, 0x3d	; 61
    3d10:	de b7       	in	r29, 0x3e	; 62
    3d12:	89 83       	std	Y+1, r24	; 0x01
    3d14:	6a 83       	std	Y+2, r22	; 0x02
    3d16:	89 81       	ldd	r24, Y+1	; 0x01
    3d18:	86 30       	cpi	r24, 0x06	; 6
    3d1a:	10 f0       	brcs	.+4      	; 0x3d20 <srd_set+0x18>
    3d1c:	80 e0       	ldi	r24, 0x00	; 0
    3d1e:	09 c0       	rjmp	.+18     	; 0x3d32 <srd_set+0x2a>
    3d20:	89 81       	ldd	r24, Y+1	; 0x01
    3d22:	88 2f       	mov	r24, r24
    3d24:	90 e0       	ldi	r25, 0x00	; 0
    3d26:	8d 5f       	subi	r24, 0xFD	; 253
    3d28:	9e 4f       	sbci	r25, 0xFE	; 254
    3d2a:	2a 81       	ldd	r18, Y+2	; 0x02
    3d2c:	fc 01       	movw	r30, r24
    3d2e:	20 83       	st	Z, r18
    3d30:	81 e0       	ldi	r24, 0x01	; 1
    3d32:	0f 90       	pop	r0
    3d34:	0f 90       	pop	r0
    3d36:	df 91       	pop	r29
    3d38:	cf 91       	pop	r28
    3d3a:	08 95       	ret

00003d3c <srd_setfloat>:

uint8_t srd_setfloat(float num, uint8_t index, uint8_t decimal_places, uint8_t length)
{
    3d3c:	0f 93       	push	r16
    3d3e:	cf 93       	push	r28
    3d40:	df 93       	push	r29
    3d42:	cd b7       	in	r28, 0x3d	; 61
    3d44:	de b7       	in	r29, 0x3e	; 62
    3d46:	27 97       	sbiw	r28, 0x07	; 7
    3d48:	0f b6       	in	r0, 0x3f	; 63
    3d4a:	f8 94       	cli
    3d4c:	de bf       	out	0x3e, r29	; 62
    3d4e:	0f be       	out	0x3f, r0	; 63
    3d50:	cd bf       	out	0x3d, r28	; 61
    3d52:	69 83       	std	Y+1, r22	; 0x01
    3d54:	7a 83       	std	Y+2, r23	; 0x02
    3d56:	8b 83       	std	Y+3, r24	; 0x03
    3d58:	9c 83       	std	Y+4, r25	; 0x04
    3d5a:	4d 83       	std	Y+5, r20	; 0x05
    3d5c:	2e 83       	std	Y+6, r18	; 0x06
    3d5e:	0f 83       	std	Y+7, r16	; 0x07
	if(index + length > SRD_DIGITS) return FALSE;
    3d60:	8d 81       	ldd	r24, Y+5	; 0x05
    3d62:	28 2f       	mov	r18, r24
    3d64:	30 e0       	ldi	r19, 0x00	; 0
    3d66:	8f 81       	ldd	r24, Y+7	; 0x07
    3d68:	88 2f       	mov	r24, r24
    3d6a:	90 e0       	ldi	r25, 0x00	; 0
    3d6c:	82 0f       	add	r24, r18
    3d6e:	93 1f       	adc	r25, r19
    3d70:	07 97       	sbiw	r24, 0x07	; 7
    3d72:	14 f0       	brlt	.+4      	; 0x3d78 <srd_setfloat+0x3c>
    3d74:	80 e0       	ldi	r24, 0x00	; 0
    3d76:	10 c0       	rjmp	.+32     	; 0x3d98 <srd_setfloat+0x5c>
	return srd_float_to_patterns(num, decimal_places, &srd_buffer[index], length);
    3d78:	8d 81       	ldd	r24, Y+5	; 0x05
    3d7a:	88 2f       	mov	r24, r24
    3d7c:	90 e0       	ldi	r25, 0x00	; 0
    3d7e:	9c 01       	movw	r18, r24
    3d80:	2d 5f       	subi	r18, 0xFD	; 253
    3d82:	3e 4f       	sbci	r19, 0xFE	; 254
    3d84:	89 81       	ldd	r24, Y+1	; 0x01
    3d86:	9a 81       	ldd	r25, Y+2	; 0x02
    3d88:	ab 81       	ldd	r26, Y+3	; 0x03
    3d8a:	bc 81       	ldd	r27, Y+4	; 0x04
    3d8c:	0f 81       	ldd	r16, Y+7	; 0x07
    3d8e:	4e 81       	ldd	r20, Y+6	; 0x06
    3d90:	bc 01       	movw	r22, r24
    3d92:	cd 01       	movw	r24, r26
    3d94:	0e 94 5a 1d 	call	0x3ab4	; 0x3ab4 <srd_float_to_patterns>
}
    3d98:	27 96       	adiw	r28, 0x07	; 7
    3d9a:	0f b6       	in	r0, 0x3f	; 63
    3d9c:	f8 94       	cli
    3d9e:	de bf       	out	0x3e, r29	; 62
    3da0:	0f be       	out	0x3f, r0	; 63
    3da2:	cd bf       	out	0x3d, r28	; 61
    3da4:	df 91       	pop	r29
    3da6:	cf 91       	pop	r28
    3da8:	0f 91       	pop	r16
    3daa:	08 95       	ret

00003dac <srd_setint16>:

uint8_t srd_setint16(int16_t num, uint8_t index, uint8_t length)
{
    3dac:	cf 93       	push	r28
    3dae:	df 93       	push	r29
    3db0:	00 d0       	rcall	.+0      	; 0x3db2 <srd_setint16+0x6>
    3db2:	00 d0       	rcall	.+0      	; 0x3db4 <srd_setint16+0x8>
    3db4:	cd b7       	in	r28, 0x3d	; 61
    3db6:	de b7       	in	r29, 0x3e	; 62
    3db8:	9a 83       	std	Y+2, r25	; 0x02
    3dba:	89 83       	std	Y+1, r24	; 0x01
    3dbc:	6b 83       	std	Y+3, r22	; 0x03
    3dbe:	4c 83       	std	Y+4, r20	; 0x04
	if(index + length > SRD_DIGITS) return FALSE;
    3dc0:	8b 81       	ldd	r24, Y+3	; 0x03
    3dc2:	28 2f       	mov	r18, r24
    3dc4:	30 e0       	ldi	r19, 0x00	; 0
    3dc6:	8c 81       	ldd	r24, Y+4	; 0x04
    3dc8:	88 2f       	mov	r24, r24
    3dca:	90 e0       	ldi	r25, 0x00	; 0
    3dcc:	82 0f       	add	r24, r18
    3dce:	93 1f       	adc	r25, r19
    3dd0:	07 97       	sbiw	r24, 0x07	; 7
    3dd2:	14 f0       	brlt	.+4      	; 0x3dd8 <srd_setint16+0x2c>
    3dd4:	80 e0       	ldi	r24, 0x00	; 0
    3dd6:	0c c0       	rjmp	.+24     	; 0x3df0 <srd_setint16+0x44>
	return srd_int16_to_patterns(num, &srd_buffer[index], length);
    3dd8:	8b 81       	ldd	r24, Y+3	; 0x03
    3dda:	88 2f       	mov	r24, r24
    3ddc:	90 e0       	ldi	r25, 0x00	; 0
    3dde:	9c 01       	movw	r18, r24
    3de0:	2d 5f       	subi	r18, 0xFD	; 253
    3de2:	3e 4f       	sbci	r19, 0xFE	; 254
    3de4:	89 81       	ldd	r24, Y+1	; 0x01
    3de6:	9a 81       	ldd	r25, Y+2	; 0x02
    3de8:	4c 81       	ldd	r20, Y+4	; 0x04
    3dea:	b9 01       	movw	r22, r18
    3dec:	0e 94 24 1c 	call	0x3848	; 0x3848 <srd_int16_to_patterns>
}
    3df0:	0f 90       	pop	r0
    3df2:	0f 90       	pop	r0
    3df4:	0f 90       	pop	r0
    3df6:	0f 90       	pop	r0
    3df8:	df 91       	pop	r29
    3dfa:	cf 91       	pop	r28
    3dfc:	08 95       	ret

00003dfe <srd_display>:

void srd_display()
{
    3dfe:	cf 93       	push	r28
    3e00:	df 93       	push	r29
    3e02:	cd b7       	in	r28, 0x3d	; 61
    3e04:	de b7       	in	r29, 0x3e	; 62
	shreg_clear();
    3e06:	0e 94 3e 1b 	call	0x367c	; 0x367c <shreg_clear>
	shreg_write_bytes(srd_buffer, SRD_DIGITS);
    3e0a:	66 e0       	ldi	r22, 0x06	; 6
    3e0c:	83 e0       	ldi	r24, 0x03	; 3
    3e0e:	91 e0       	ldi	r25, 0x01	; 1
    3e10:	0e 94 0e 1b 	call	0x361c	; 0x361c <shreg_write_bytes>
	shreg_out();
    3e14:	0e 94 72 1b 	call	0x36e4	; 0x36e4 <shreg_out>
}
    3e18:	00 00       	nop
    3e1a:	df 91       	pop	r29
    3e1c:	cf 91       	pop	r28
    3e1e:	08 95       	ret

00003e20 <srd_clear>:

void srd_clear()
{
    3e20:	cf 93       	push	r28
    3e22:	df 93       	push	r29
    3e24:	1f 92       	push	r1
    3e26:	cd b7       	in	r28, 0x3d	; 61
    3e28:	de b7       	in	r29, 0x3e	; 62
	for(uint8_t i = 0; i < SRD_DIGITS; ++i)
    3e2a:	19 82       	std	Y+1, r1	; 0x01
    3e2c:	0a c0       	rjmp	.+20     	; 0x3e42 <srd_clear+0x22>
	{
		srd_buffer[i] = SRD_EMPTY;
    3e2e:	89 81       	ldd	r24, Y+1	; 0x01
    3e30:	88 2f       	mov	r24, r24
    3e32:	90 e0       	ldi	r25, 0x00	; 0
    3e34:	8d 5f       	subi	r24, 0xFD	; 253
    3e36:	9e 4f       	sbci	r25, 0xFE	; 254
    3e38:	fc 01       	movw	r30, r24
    3e3a:	10 82       	st	Z, r1
	shreg_out();
}

void srd_clear()
{
	for(uint8_t i = 0; i < SRD_DIGITS; ++i)
    3e3c:	89 81       	ldd	r24, Y+1	; 0x01
    3e3e:	8f 5f       	subi	r24, 0xFF	; 255
    3e40:	89 83       	std	Y+1, r24	; 0x01
    3e42:	89 81       	ldd	r24, Y+1	; 0x01
    3e44:	86 30       	cpi	r24, 0x06	; 6
    3e46:	98 f3       	brcs	.-26     	; 0x3e2e <srd_clear+0xe>
	{
		srd_buffer[i] = SRD_EMPTY;
	}
}
    3e48:	00 00       	nop
    3e4a:	0f 90       	pop	r0
    3e4c:	df 91       	pop	r29
    3e4e:	cf 91       	pop	r28
    3e50:	08 95       	ret

00003e52 <stirrer_init>:

#define STIRRER_PWM_WGM_BITS_A 0x00
#define STIRRER_PWM_WGM_BITS_B (1 << WGM13) // phase and frequency correct pwm mode. top set by ICR1

void stirrer_init()
{
    3e52:	cf 93       	push	r28
    3e54:	df 93       	push	r29
    3e56:	cd b7       	in	r28, 0x3d	; 61
    3e58:	de b7       	in	r29, 0x3e	; 62
	TIMSK1 = 0x00;
    3e5a:	8f e6       	ldi	r24, 0x6F	; 111
    3e5c:	90 e0       	ldi	r25, 0x00	; 0
    3e5e:	fc 01       	movw	r30, r24
    3e60:	10 82       	st	Z, r1
	// stop timer clock
	TCCR1B &= ~STIRRER_PWM_PRESCALE_BITS;
    3e62:	81 e8       	ldi	r24, 0x81	; 129
    3e64:	90 e0       	ldi	r25, 0x00	; 0
    3e66:	21 e8       	ldi	r18, 0x81	; 129
    3e68:	30 e0       	ldi	r19, 0x00	; 0
    3e6a:	f9 01       	movw	r30, r18
    3e6c:	20 81       	ld	r18, Z
    3e6e:	2e 7f       	andi	r18, 0xFE	; 254
    3e70:	fc 01       	movw	r30, r24
    3e72:	20 83       	st	Z, r18
	// enable phase correct, frequency correct pwm mode
	TCCR1A |= STIRRER_PWM_WGM_BITS_A;
    3e74:	80 e8       	ldi	r24, 0x80	; 128
    3e76:	90 e0       	ldi	r25, 0x00	; 0
    3e78:	20 e8       	ldi	r18, 0x80	; 128
    3e7a:	30 e0       	ldi	r19, 0x00	; 0
    3e7c:	f9 01       	movw	r30, r18
    3e7e:	20 81       	ld	r18, Z
    3e80:	fc 01       	movw	r30, r24
    3e82:	20 83       	st	Z, r18
	TCCR1B |= STIRRER_PWM_WGM_BITS_B;
    3e84:	81 e8       	ldi	r24, 0x81	; 129
    3e86:	90 e0       	ldi	r25, 0x00	; 0
    3e88:	21 e8       	ldi	r18, 0x81	; 129
    3e8a:	30 e0       	ldi	r19, 0x00	; 0
    3e8c:	f9 01       	movw	r30, r18
    3e8e:	20 81       	ld	r18, Z
    3e90:	20 61       	ori	r18, 0x10	; 16
    3e92:	fc 01       	movw	r30, r24
    3e94:	20 83       	st	Z, r18
	// set top value
	ICR1 = STIRRER_PWM_TOP;
    3e96:	86 e8       	ldi	r24, 0x86	; 134
    3e98:	90 e0       	ldi	r25, 0x00	; 0
    3e9a:	20 ea       	ldi	r18, 0xA0	; 160
    3e9c:	30 e0       	ldi	r19, 0x00	; 0
    3e9e:	fc 01       	movw	r30, r24
    3ea0:	31 83       	std	Z+1, r19	; 0x01
    3ea2:	20 83       	st	Z, r18
	// reset duty cycle val
	#ifdef STIRRER_PWM_INVERSE
		OCR1A = STIRRER_PWM_TOP;
	#else
		OCR1A = 0x0000;
    3ea4:	88 e8       	ldi	r24, 0x88	; 136
    3ea6:	90 e0       	ldi	r25, 0x00	; 0
    3ea8:	fc 01       	movw	r30, r24
    3eaa:	11 82       	std	Z+1, r1	; 0x01
    3eac:	10 82       	st	Z, r1
	#endif
	// reset timer
	TCNT1 = 0x0000;
    3eae:	84 e8       	ldi	r24, 0x84	; 132
    3eb0:	90 e0       	ldi	r25, 0x00	; 0
    3eb2:	fc 01       	movw	r30, r24
    3eb4:	11 82       	std	Z+1, r1	; 0x01
    3eb6:	10 82       	st	Z, r1
	
	// enable output pin
	OC1A_DDR |= (1 << OC1A_BIT);
    3eb8:	8a e2       	ldi	r24, 0x2A	; 42
    3eba:	90 e0       	ldi	r25, 0x00	; 0
    3ebc:	2a e2       	ldi	r18, 0x2A	; 42
    3ebe:	30 e0       	ldi	r19, 0x00	; 0
    3ec0:	f9 01       	movw	r30, r18
    3ec2:	20 81       	ld	r18, Z
    3ec4:	20 62       	ori	r18, 0x20	; 32
    3ec6:	fc 01       	movw	r30, r24
    3ec8:	20 83       	st	Z, r18
	// set pin state when pwm is off (becomes active when COMA bits are cleared)
	#ifdef STIRRER_PWM_INVERSE
		OC1A_PORT |= (1 << OC1A_BIT);
	#else
		OC1A_PORT &= ~(1 << OC1A_BIT);
    3eca:	8b e2       	ldi	r24, 0x2B	; 43
    3ecc:	90 e0       	ldi	r25, 0x00	; 0
    3ece:	2b e2       	ldi	r18, 0x2B	; 43
    3ed0:	30 e0       	ldi	r19, 0x00	; 0
    3ed2:	f9 01       	movw	r30, r18
    3ed4:	20 81       	ld	r18, Z
    3ed6:	2f 7d       	andi	r18, 0xDF	; 223
    3ed8:	fc 01       	movw	r30, r24
    3eda:	20 83       	st	Z, r18
	#endif
}
    3edc:	00 00       	nop
    3ede:	df 91       	pop	r29
    3ee0:	cf 91       	pop	r28
    3ee2:	08 95       	ret

00003ee4 <stirrer_shutdown>:

void stirrer_shutdown()
{
    3ee4:	cf 93       	push	r28
    3ee6:	df 93       	push	r29
    3ee8:	cd b7       	in	r28, 0x3d	; 61
    3eea:	de b7       	in	r29, 0x3e	; 62
	// stop timer clock
	TCCR1B &= ~STIRRER_PWM_PRESCALE_BITS;
    3eec:	81 e8       	ldi	r24, 0x81	; 129
    3eee:	90 e0       	ldi	r25, 0x00	; 0
    3ef0:	21 e8       	ldi	r18, 0x81	; 129
    3ef2:	30 e0       	ldi	r19, 0x00	; 0
    3ef4:	f9 01       	movw	r30, r18
    3ef6:	20 81       	ld	r18, Z
    3ef8:	2e 7f       	andi	r18, 0xFE	; 254
    3efa:	fc 01       	movw	r30, r24
    3efc:	20 83       	st	Z, r18
	// reset top value
	ICR1 = 0x0000;
    3efe:	86 e8       	ldi	r24, 0x86	; 134
    3f00:	90 e0       	ldi	r25, 0x00	; 0
    3f02:	fc 01       	movw	r30, r24
    3f04:	11 82       	std	Z+1, r1	; 0x01
    3f06:	10 82       	st	Z, r1
	// reset duty cycle val
	TCNT1 = 0x0000;
    3f08:	84 e8       	ldi	r24, 0x84	; 132
    3f0a:	90 e0       	ldi	r25, 0x00	; 0
    3f0c:	fc 01       	movw	r30, r24
    3f0e:	11 82       	std	Z+1, r1	; 0x01
    3f10:	10 82       	st	Z, r1
	OCR1A = 0x0000;
    3f12:	88 e8       	ldi	r24, 0x88	; 136
    3f14:	90 e0       	ldi	r25, 0x00	; 0
    3f16:	fc 01       	movw	r30, r24
    3f18:	11 82       	std	Z+1, r1	; 0x01
    3f1a:	10 82       	st	Z, r1
	// back to normal mode
	TCCR1A &= ~(STIRRER_PWM_COMA_BITS | STIRRER_PWM_WGM_BITS_A);
    3f1c:	80 e8       	ldi	r24, 0x80	; 128
    3f1e:	90 e0       	ldi	r25, 0x00	; 0
    3f20:	20 e8       	ldi	r18, 0x80	; 128
    3f22:	30 e0       	ldi	r19, 0x00	; 0
    3f24:	f9 01       	movw	r30, r18
    3f26:	20 81       	ld	r18, Z
    3f28:	2f 77       	andi	r18, 0x7F	; 127
    3f2a:	fc 01       	movw	r30, r24
    3f2c:	20 83       	st	Z, r18
	TCCR1B &= ~STIRRER_PWM_WGM_BITS_B;
    3f2e:	81 e8       	ldi	r24, 0x81	; 129
    3f30:	90 e0       	ldi	r25, 0x00	; 0
    3f32:	21 e8       	ldi	r18, 0x81	; 129
    3f34:	30 e0       	ldi	r19, 0x00	; 0
    3f36:	f9 01       	movw	r30, r18
    3f38:	20 81       	ld	r18, Z
    3f3a:	2f 7e       	andi	r18, 0xEF	; 239
    3f3c:	fc 01       	movw	r30, r24
    3f3e:	20 83       	st	Z, r18
	// disable output pin
	OC1A_DDR &= ~(1 << OC1A_BIT);
    3f40:	8a e2       	ldi	r24, 0x2A	; 42
    3f42:	90 e0       	ldi	r25, 0x00	; 0
    3f44:	2a e2       	ldi	r18, 0x2A	; 42
    3f46:	30 e0       	ldi	r19, 0x00	; 0
    3f48:	f9 01       	movw	r30, r18
    3f4a:	20 81       	ld	r18, Z
    3f4c:	2f 7d       	andi	r18, 0xDF	; 223
    3f4e:	fc 01       	movw	r30, r24
    3f50:	20 83       	st	Z, r18
	OC1A_PORT &= ~(1 << OC1A_BIT);
    3f52:	8b e2       	ldi	r24, 0x2B	; 43
    3f54:	90 e0       	ldi	r25, 0x00	; 0
    3f56:	2b e2       	ldi	r18, 0x2B	; 43
    3f58:	30 e0       	ldi	r19, 0x00	; 0
    3f5a:	f9 01       	movw	r30, r18
    3f5c:	20 81       	ld	r18, Z
    3f5e:	2f 7d       	andi	r18, 0xDF	; 223
    3f60:	fc 01       	movw	r30, r24
    3f62:	20 83       	st	Z, r18
}
    3f64:	00 00       	nop
    3f66:	df 91       	pop	r29
    3f68:	cf 91       	pop	r28
    3f6a:	08 95       	ret

00003f6c <stirrer_set_duty_cycle>:

void stirrer_set_duty_cycle(uint8_t dc)
{
    3f6c:	cf 93       	push	r28
    3f6e:	df 93       	push	r29
    3f70:	00 d0       	rcall	.+0      	; 0x3f72 <stirrer_set_duty_cycle+0x6>
    3f72:	00 d0       	rcall	.+0      	; 0x3f74 <stirrer_set_duty_cycle+0x8>
    3f74:	1f 92       	push	r1
    3f76:	cd b7       	in	r28, 0x3d	; 61
    3f78:	de b7       	in	r29, 0x3e	; 62
    3f7a:	8d 83       	std	Y+5, r24	; 0x05
	uint32_t compval = ((uint32_t)umax8(umin8(dc, 100), 0) * STIRRER_PWM_TOP) / 100;
    3f7c:	64 e6       	ldi	r22, 0x64	; 100
    3f7e:	8d 81       	ldd	r24, Y+5	; 0x05
    3f80:	0e 94 c0 16 	call	0x2d80	; 0x2d80 <umin8>
    3f84:	60 e0       	ldi	r22, 0x00	; 0
    3f86:	0e 94 af 16 	call	0x2d5e	; 0x2d5e <umax8>
    3f8a:	28 2f       	mov	r18, r24
    3f8c:	30 e0       	ldi	r19, 0x00	; 0
    3f8e:	40 e0       	ldi	r20, 0x00	; 0
    3f90:	50 e0       	ldi	r21, 0x00	; 0
    3f92:	80 ea       	ldi	r24, 0xA0	; 160
    3f94:	90 e0       	ldi	r25, 0x00	; 0
    3f96:	dc 01       	movw	r26, r24
    3f98:	0e 94 bd 28 	call	0x517a	; 0x517a <__muluhisi3>
    3f9c:	dc 01       	movw	r26, r24
    3f9e:	cb 01       	movw	r24, r22
    3fa0:	24 e6       	ldi	r18, 0x64	; 100
    3fa2:	30 e0       	ldi	r19, 0x00	; 0
    3fa4:	40 e0       	ldi	r20, 0x00	; 0
    3fa6:	50 e0       	ldi	r21, 0x00	; 0
    3fa8:	bc 01       	movw	r22, r24
    3faa:	cd 01       	movw	r24, r26
    3fac:	0e 94 86 28 	call	0x510c	; 0x510c <__udivmodsi4>
    3fb0:	da 01       	movw	r26, r20
    3fb2:	c9 01       	movw	r24, r18
    3fb4:	89 83       	std	Y+1, r24	; 0x01
    3fb6:	9a 83       	std	Y+2, r25	; 0x02
    3fb8:	ab 83       	std	Y+3, r26	; 0x03
    3fba:	bc 83       	std	Y+4, r27	; 0x04
	OCR1A = (uint16_t)compval;
    3fbc:	88 e8       	ldi	r24, 0x88	; 136
    3fbe:	90 e0       	ldi	r25, 0x00	; 0
    3fc0:	29 81       	ldd	r18, Y+1	; 0x01
    3fc2:	3a 81       	ldd	r19, Y+2	; 0x02
    3fc4:	fc 01       	movw	r30, r24
    3fc6:	31 83       	std	Z+1, r19	; 0x01
    3fc8:	20 83       	st	Z, r18
}
    3fca:	00 00       	nop
    3fcc:	0f 90       	pop	r0
    3fce:	0f 90       	pop	r0
    3fd0:	0f 90       	pop	r0
    3fd2:	0f 90       	pop	r0
    3fd4:	0f 90       	pop	r0
    3fd6:	df 91       	pop	r29
    3fd8:	cf 91       	pop	r28
    3fda:	08 95       	ret

00003fdc <stirrer_on>:

void stirrer_on()
{
    3fdc:	cf 93       	push	r28
    3fde:	df 93       	push	r29
    3fe0:	cd b7       	in	r28, 0x3d	; 61
    3fe2:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 0x0000;
    3fe4:	84 e8       	ldi	r24, 0x84	; 132
    3fe6:	90 e0       	ldi	r25, 0x00	; 0
    3fe8:	fc 01       	movw	r30, r24
    3fea:	11 82       	std	Z+1, r1	; 0x01
    3fec:	10 82       	st	Z, r1
	#ifdef STIRRER_PWM_INVERSE
		OCR1A = STIRRER_PWM_TOP;
	#else
		OCR1A = 0x0000;
    3fee:	88 e8       	ldi	r24, 0x88	; 136
    3ff0:	90 e0       	ldi	r25, 0x00	; 0
    3ff2:	fc 01       	movw	r30, r24
    3ff4:	11 82       	std	Z+1, r1	; 0x01
    3ff6:	10 82       	st	Z, r1
	#endif
	TCCR1A |= STIRRER_PWM_COMA_BITS;
    3ff8:	80 e8       	ldi	r24, 0x80	; 128
    3ffa:	90 e0       	ldi	r25, 0x00	; 0
    3ffc:	20 e8       	ldi	r18, 0x80	; 128
    3ffe:	30 e0       	ldi	r19, 0x00	; 0
    4000:	f9 01       	movw	r30, r18
    4002:	20 81       	ld	r18, Z
    4004:	20 68       	ori	r18, 0x80	; 128
    4006:	fc 01       	movw	r30, r24
    4008:	20 83       	st	Z, r18
	TCCR1B |= STIRRER_PWM_PRESCALE_BITS;
    400a:	81 e8       	ldi	r24, 0x81	; 129
    400c:	90 e0       	ldi	r25, 0x00	; 0
    400e:	21 e8       	ldi	r18, 0x81	; 129
    4010:	30 e0       	ldi	r19, 0x00	; 0
    4012:	f9 01       	movw	r30, r18
    4014:	20 81       	ld	r18, Z
    4016:	21 60       	ori	r18, 0x01	; 1
    4018:	fc 01       	movw	r30, r24
    401a:	20 83       	st	Z, r18
}
    401c:	00 00       	nop
    401e:	df 91       	pop	r29
    4020:	cf 91       	pop	r28
    4022:	08 95       	ret

00004024 <stirrer_off>:

void stirrer_off()
{	
    4024:	cf 93       	push	r28
    4026:	df 93       	push	r29
    4028:	cd b7       	in	r28, 0x3d	; 61
    402a:	de b7       	in	r29, 0x3e	; 62
	TCCR1A &= ~STIRRER_PWM_COMA_BITS;
    402c:	80 e8       	ldi	r24, 0x80	; 128
    402e:	90 e0       	ldi	r25, 0x00	; 0
    4030:	20 e8       	ldi	r18, 0x80	; 128
    4032:	30 e0       	ldi	r19, 0x00	; 0
    4034:	f9 01       	movw	r30, r18
    4036:	20 81       	ld	r18, Z
    4038:	2f 77       	andi	r18, 0x7F	; 127
    403a:	fc 01       	movw	r30, r24
    403c:	20 83       	st	Z, r18
	TCCR1B &= ~STIRRER_PWM_PRESCALE_BITS;	
    403e:	81 e8       	ldi	r24, 0x81	; 129
    4040:	90 e0       	ldi	r25, 0x00	; 0
    4042:	21 e8       	ldi	r18, 0x81	; 129
    4044:	30 e0       	ldi	r19, 0x00	; 0
    4046:	f9 01       	movw	r30, r18
    4048:	20 81       	ld	r18, Z
    404a:	2e 7f       	andi	r18, 0xFE	; 254
    404c:	fc 01       	movw	r30, r24
    404e:	20 83       	st	Z, r18
	TCNT1 = 0x0000;
    4050:	84 e8       	ldi	r24, 0x84	; 132
    4052:	90 e0       	ldi	r25, 0x00	; 0
    4054:	fc 01       	movw	r30, r24
    4056:	11 82       	std	Z+1, r1	; 0x01
    4058:	10 82       	st	Z, r1
    405a:	00 00       	nop
    405c:	df 91       	pop	r29
    405e:	cf 91       	pop	r28
    4060:	08 95       	ret

00004062 <switch_init>:
static volatile uint8_t switch_debounce_ct1;

// ---------------------------- PUBLIC ------------------------------------------

void switch_init()
{
    4062:	cf 93       	push	r28
    4064:	df 93       	push	r29
    4066:	1f 92       	push	r1
    4068:	cd b7       	in	r28, 0x3d	; 61
    406a:	de b7       	in	r29, 0x3e	; 62
	// set data dir
	SWITCH_DDR &= ~SWITCH_PIN_MASK;
    406c:	84 e2       	ldi	r24, 0x24	; 36
    406e:	90 e0       	ldi	r25, 0x00	; 0
    4070:	24 e2       	ldi	r18, 0x24	; 36
    4072:	30 e0       	ldi	r19, 0x00	; 0
    4074:	f9 01       	movw	r30, r18
    4076:	20 81       	ld	r18, Z
    4078:	2c 7f       	andi	r18, 0xFC	; 252
    407a:	fc 01       	movw	r30, r24
    407c:	20 83       	st	Z, r18
	// enable internal pullups
	SWITCH_PORT |= SWITCH_PIN_MASK;
    407e:	85 e2       	ldi	r24, 0x25	; 37
    4080:	90 e0       	ldi	r25, 0x00	; 0
    4082:	25 e2       	ldi	r18, 0x25	; 37
    4084:	30 e0       	ldi	r19, 0x00	; 0
    4086:	f9 01       	movw	r30, r18
    4088:	20 81       	ld	r18, Z
    408a:	23 60       	ori	r18, 0x03	; 3
    408c:	fc 01       	movw	r30, r24
    408e:	20 83       	st	Z, r18
	
	// clear all state variables
	switch_state_press = 0x00;
    4090:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <switch_state_press>
	switch_state_release = 0x00;
    4094:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <switch_state_release>
	switch_state_longpress = 0x00;
    4098:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <switch_state_longpress>
	switch_state = 0x00;
    409c:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <switch_state>
	
	for (uint8_t i = 0; i < SWITCH_NUMBER; ++i)
    40a0:	19 82       	std	Y+1, r1	; 0x01
    40a2:	0a c0       	rjmp	.+20     	; 0x40b8 <switch_init+0x56>
		switch_press_counter[i] = 0;
    40a4:	89 81       	ldd	r24, Y+1	; 0x01
    40a6:	88 2f       	mov	r24, r24
    40a8:	90 e0       	ldi	r25, 0x00	; 0
    40aa:	84 5f       	subi	r24, 0xF4	; 244
    40ac:	9e 4f       	sbci	r25, 0xFE	; 254
    40ae:	fc 01       	movw	r30, r24
    40b0:	10 82       	st	Z, r1
	switch_state_press = 0x00;
	switch_state_release = 0x00;
	switch_state_longpress = 0x00;
	switch_state = 0x00;
	
	for (uint8_t i = 0; i < SWITCH_NUMBER; ++i)
    40b2:	89 81       	ldd	r24, Y+1	; 0x01
    40b4:	8f 5f       	subi	r24, 0xFF	; 255
    40b6:	89 83       	std	Y+1, r24	; 0x01
    40b8:	89 81       	ldd	r24, Y+1	; 0x01
    40ba:	82 30       	cpi	r24, 0x02	; 2
    40bc:	98 f3       	brcs	.-26     	; 0x40a4 <switch_init+0x42>
		switch_press_counter[i] = 0;
	
	switch_debounce_ct0 = 0xFF & SWITCH_PIN_MASK;	
    40be:	83 e0       	ldi	r24, 0x03	; 3
    40c0:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <switch_debounce_ct0>
	switch_debounce_ct1 = 0xFF & SWITCH_PIN_MASK;	
    40c4:	83 e0       	ldi	r24, 0x03	; 3
    40c6:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <switch_debounce_ct1>
}
    40ca:	00 00       	nop
    40cc:	0f 90       	pop	r0
    40ce:	df 91       	pop	r29
    40d0:	cf 91       	pop	r28
    40d2:	08 95       	ret

000040d4 <switch_shutdown>:

void switch_shutdown()
{
    40d4:	cf 93       	push	r28
    40d6:	df 93       	push	r29
    40d8:	1f 92       	push	r1
    40da:	cd b7       	in	r28, 0x3d	; 61
    40dc:	de b7       	in	r29, 0x3e	; 62
	// disable internal pullups
	SWITCH_PORT &= ~SWITCH_PIN_MASK;
    40de:	85 e2       	ldi	r24, 0x25	; 37
    40e0:	90 e0       	ldi	r25, 0x00	; 0
    40e2:	25 e2       	ldi	r18, 0x25	; 37
    40e4:	30 e0       	ldi	r19, 0x00	; 0
    40e6:	f9 01       	movw	r30, r18
    40e8:	20 81       	ld	r18, Z
    40ea:	2c 7f       	andi	r18, 0xFC	; 252
    40ec:	fc 01       	movw	r30, r24
    40ee:	20 83       	st	Z, r18
	
	// clear all state variables
	switch_state_press = 0x00;
    40f0:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <switch_state_press>
	switch_state_release = 0x00;
    40f4:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <switch_state_release>
	switch_state_longpress = 0x00;
    40f8:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <switch_state_longpress>
	switch_state = 0x00;
    40fc:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <switch_state>

	for (uint8_t i = 0; i < SWITCH_NUMBER; ++i)
    4100:	19 82       	std	Y+1, r1	; 0x01
    4102:	0a c0       	rjmp	.+20     	; 0x4118 <switch_shutdown+0x44>
		switch_press_counter[i] = 0;
    4104:	89 81       	ldd	r24, Y+1	; 0x01
    4106:	88 2f       	mov	r24, r24
    4108:	90 e0       	ldi	r25, 0x00	; 0
    410a:	84 5f       	subi	r24, 0xF4	; 244
    410c:	9e 4f       	sbci	r25, 0xFE	; 254
    410e:	fc 01       	movw	r30, r24
    4110:	10 82       	st	Z, r1
	switch_state_press = 0x00;
	switch_state_release = 0x00;
	switch_state_longpress = 0x00;
	switch_state = 0x00;

	for (uint8_t i = 0; i < SWITCH_NUMBER; ++i)
    4112:	89 81       	ldd	r24, Y+1	; 0x01
    4114:	8f 5f       	subi	r24, 0xFF	; 255
    4116:	89 83       	std	Y+1, r24	; 0x01
    4118:	89 81       	ldd	r24, Y+1	; 0x01
    411a:	82 30       	cpi	r24, 0x02	; 2
    411c:	98 f3       	brcs	.-26     	; 0x4104 <switch_shutdown+0x30>
		switch_press_counter[i] = 0;
	
	switch_debounce_ct0 = 0xFF & SWITCH_PIN_MASK;
    411e:	83 e0       	ldi	r24, 0x03	; 3
    4120:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <switch_debounce_ct0>
	switch_debounce_ct1 = 0xFF & SWITCH_PIN_MASK;
    4124:	83 e0       	ldi	r24, 0x03	; 3
    4126:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <switch_debounce_ct1>
}
    412a:	00 00       	nop
    412c:	0f 90       	pop	r0
    412e:	df 91       	pop	r29
    4130:	cf 91       	pop	r28
    4132:	08 95       	ret

00004134 <switch_press>:

uint8_t switch_press(uint8_t index)
{
    4134:	cf 93       	push	r28
    4136:	df 93       	push	r29
    4138:	1f 92       	push	r1
    413a:	cd b7       	in	r28, 0x3d	; 61
    413c:	de b7       	in	r29, 0x3e	; 62
    413e:	89 83       	std	Y+1, r24	; 0x01
	if(switch_state_press & (1 << index))
    4140:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <switch_state_press>
    4144:	88 2f       	mov	r24, r24
    4146:	90 e0       	ldi	r25, 0x00	; 0
    4148:	29 81       	ldd	r18, Y+1	; 0x01
    414a:	22 2f       	mov	r18, r18
    414c:	30 e0       	ldi	r19, 0x00	; 0
    414e:	02 c0       	rjmp	.+4      	; 0x4154 <switch_press+0x20>
    4150:	95 95       	asr	r25
    4152:	87 95       	ror	r24
    4154:	2a 95       	dec	r18
    4156:	e2 f7       	brpl	.-8      	; 0x4150 <switch_press+0x1c>
    4158:	81 70       	andi	r24, 0x01	; 1
    415a:	99 27       	eor	r25, r25
    415c:	89 2b       	or	r24, r25
    415e:	91 f0       	breq	.+36     	; 0x4184 <switch_press+0x50>
	{
		switch_state_press &= ~(1 << index);
    4160:	89 81       	ldd	r24, Y+1	; 0x01
    4162:	28 2f       	mov	r18, r24
    4164:	30 e0       	ldi	r19, 0x00	; 0
    4166:	81 e0       	ldi	r24, 0x01	; 1
    4168:	90 e0       	ldi	r25, 0x00	; 0
    416a:	02 c0       	rjmp	.+4      	; 0x4170 <switch_press+0x3c>
    416c:	88 0f       	add	r24, r24
    416e:	99 1f       	adc	r25, r25
    4170:	2a 95       	dec	r18
    4172:	e2 f7       	brpl	.-8      	; 0x416c <switch_press+0x38>
    4174:	80 95       	com	r24
    4176:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <switch_state_press>
    417a:	89 23       	and	r24, r25
    417c:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <switch_state_press>
		return 1;
    4180:	81 e0       	ldi	r24, 0x01	; 1
    4182:	01 c0       	rjmp	.+2      	; 0x4186 <switch_press+0x52>
	}
	else
	{
		return 0;
    4184:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    4186:	0f 90       	pop	r0
    4188:	df 91       	pop	r29
    418a:	cf 91       	pop	r28
    418c:	08 95       	ret

0000418e <switch_release>:

uint8_t switch_release(uint8_t index)
{
    418e:	cf 93       	push	r28
    4190:	df 93       	push	r29
    4192:	1f 92       	push	r1
    4194:	cd b7       	in	r28, 0x3d	; 61
    4196:	de b7       	in	r29, 0x3e	; 62
    4198:	89 83       	std	Y+1, r24	; 0x01
	if(switch_state_release & (1 << index))
    419a:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <switch_state_release>
    419e:	88 2f       	mov	r24, r24
    41a0:	90 e0       	ldi	r25, 0x00	; 0
    41a2:	29 81       	ldd	r18, Y+1	; 0x01
    41a4:	22 2f       	mov	r18, r18
    41a6:	30 e0       	ldi	r19, 0x00	; 0
    41a8:	02 c0       	rjmp	.+4      	; 0x41ae <switch_release+0x20>
    41aa:	95 95       	asr	r25
    41ac:	87 95       	ror	r24
    41ae:	2a 95       	dec	r18
    41b0:	e2 f7       	brpl	.-8      	; 0x41aa <switch_release+0x1c>
    41b2:	81 70       	andi	r24, 0x01	; 1
    41b4:	99 27       	eor	r25, r25
    41b6:	89 2b       	or	r24, r25
    41b8:	91 f0       	breq	.+36     	; 0x41de <switch_release+0x50>
	{
		switch_state_release &= ~(1 << index);
    41ba:	89 81       	ldd	r24, Y+1	; 0x01
    41bc:	28 2f       	mov	r18, r24
    41be:	30 e0       	ldi	r19, 0x00	; 0
    41c0:	81 e0       	ldi	r24, 0x01	; 1
    41c2:	90 e0       	ldi	r25, 0x00	; 0
    41c4:	02 c0       	rjmp	.+4      	; 0x41ca <switch_release+0x3c>
    41c6:	88 0f       	add	r24, r24
    41c8:	99 1f       	adc	r25, r25
    41ca:	2a 95       	dec	r18
    41cc:	e2 f7       	brpl	.-8      	; 0x41c6 <switch_release+0x38>
    41ce:	80 95       	com	r24
    41d0:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <switch_state_release>
    41d4:	89 23       	and	r24, r25
    41d6:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <switch_state_release>
		return 1;
    41da:	81 e0       	ldi	r24, 0x01	; 1
    41dc:	01 c0       	rjmp	.+2      	; 0x41e0 <switch_release+0x52>
	}
	else
	{
		return 0;
    41de:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    41e0:	0f 90       	pop	r0
    41e2:	df 91       	pop	r29
    41e4:	cf 91       	pop	r28
    41e6:	08 95       	ret

000041e8 <switch_longpress>:

uint8_t switch_longpress(uint8_t index)
{
    41e8:	cf 93       	push	r28
    41ea:	df 93       	push	r29
    41ec:	1f 92       	push	r1
    41ee:	cd b7       	in	r28, 0x3d	; 61
    41f0:	de b7       	in	r29, 0x3e	; 62
    41f2:	89 83       	std	Y+1, r24	; 0x01
	if(switch_state_longpress & (1 << index))
    41f4:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <switch_state_longpress>
    41f8:	88 2f       	mov	r24, r24
    41fa:	90 e0       	ldi	r25, 0x00	; 0
    41fc:	29 81       	ldd	r18, Y+1	; 0x01
    41fe:	22 2f       	mov	r18, r18
    4200:	30 e0       	ldi	r19, 0x00	; 0
    4202:	02 c0       	rjmp	.+4      	; 0x4208 <switch_longpress+0x20>
    4204:	95 95       	asr	r25
    4206:	87 95       	ror	r24
    4208:	2a 95       	dec	r18
    420a:	e2 f7       	brpl	.-8      	; 0x4204 <switch_longpress+0x1c>
    420c:	81 70       	andi	r24, 0x01	; 1
    420e:	99 27       	eor	r25, r25
    4210:	89 2b       	or	r24, r25
    4212:	91 f0       	breq	.+36     	; 0x4238 <switch_longpress+0x50>
	{
		switch_state_longpress &= ~(1 << index);
    4214:	89 81       	ldd	r24, Y+1	; 0x01
    4216:	28 2f       	mov	r18, r24
    4218:	30 e0       	ldi	r19, 0x00	; 0
    421a:	81 e0       	ldi	r24, 0x01	; 1
    421c:	90 e0       	ldi	r25, 0x00	; 0
    421e:	02 c0       	rjmp	.+4      	; 0x4224 <switch_longpress+0x3c>
    4220:	88 0f       	add	r24, r24
    4222:	99 1f       	adc	r25, r25
    4224:	2a 95       	dec	r18
    4226:	e2 f7       	brpl	.-8      	; 0x4220 <switch_longpress+0x38>
    4228:	80 95       	com	r24
    422a:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <switch_state_longpress>
    422e:	89 23       	and	r24, r25
    4230:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <switch_state_longpress>
		return 1;
    4234:	81 e0       	ldi	r24, 0x01	; 1
    4236:	01 c0       	rjmp	.+2      	; 0x423a <switch_longpress+0x52>
	}
	else
	{
		return 0;
    4238:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    423a:	0f 90       	pop	r0
    423c:	df 91       	pop	r29
    423e:	cf 91       	pop	r28
    4240:	08 95       	ret

00004242 <switch_get_state>:

uint8_t switch_get_state(uint8_t index)
{
    4242:	cf 93       	push	r28
    4244:	df 93       	push	r29
    4246:	1f 92       	push	r1
    4248:	cd b7       	in	r28, 0x3d	; 61
    424a:	de b7       	in	r29, 0x3e	; 62
    424c:	89 83       	std	Y+1, r24	; 0x01
	if(switch_state & (1 << index))
    424e:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <switch_state>
    4252:	88 2f       	mov	r24, r24
    4254:	90 e0       	ldi	r25, 0x00	; 0
    4256:	29 81       	ldd	r18, Y+1	; 0x01
    4258:	22 2f       	mov	r18, r18
    425a:	30 e0       	ldi	r19, 0x00	; 0
    425c:	02 c0       	rjmp	.+4      	; 0x4262 <switch_get_state+0x20>
    425e:	95 95       	asr	r25
    4260:	87 95       	ror	r24
    4262:	2a 95       	dec	r18
    4264:	e2 f7       	brpl	.-8      	; 0x425e <switch_get_state+0x1c>
    4266:	81 70       	andi	r24, 0x01	; 1
    4268:	99 27       	eor	r25, r25
    426a:	89 2b       	or	r24, r25
    426c:	11 f0       	breq	.+4      	; 0x4272 <switch_get_state+0x30>
	{
		return SWITCH_PRESSED;
    426e:	81 e0       	ldi	r24, 0x01	; 1
    4270:	01 c0       	rjmp	.+2      	; 0x4274 <switch_get_state+0x32>
	}
	else
	{
		return SWITCH_RELEASED;
    4272:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    4274:	0f 90       	pop	r0
    4276:	df 91       	pop	r29
    4278:	cf 91       	pop	r28
    427a:	08 95       	ret

0000427c <switch_update>:
0   0   0	1   1		~(0 & 0) => 1
			1   1		1 ^ (0 & 1) => 1
*/

void switch_update()
{
    427c:	cf 93       	push	r28
    427e:	df 93       	push	r29
    4280:	00 d0       	rcall	.+0      	; 0x4282 <switch_update+0x6>
    4282:	00 d0       	rcall	.+0      	; 0x4284 <switch_update+0x8>
    4284:	cd b7       	in	r28, 0x3d	; 61
    4286:	de b7       	in	r29, 0x3e	; 62
	uint8_t pinchange = (switch_state ^ ~SWITCH_PIN);
    4288:	83 e2       	ldi	r24, 0x23	; 35
    428a:	90 e0       	ldi	r25, 0x00	; 0
    428c:	fc 01       	movw	r30, r24
    428e:	80 81       	ld	r24, Z
    4290:	80 95       	com	r24
    4292:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <switch_state>
    4296:	89 27       	eor	r24, r25
    4298:	8a 83       	std	Y+2, r24	; 0x02
	// bit 0 of counter. Toggle if change detected, otherwise reset to 1
	switch_debounce_ct0 = ~(switch_debounce_ct0 & pinchange);
    429a:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <switch_debounce_ct0>
    429e:	8a 81       	ldd	r24, Y+2	; 0x02
    42a0:	89 23       	and	r24, r25
    42a2:	80 95       	com	r24
    42a4:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <switch_debounce_ct0>
	// bit 1 of counter.
	switch_debounce_ct1 = switch_debounce_ct0 ^ (switch_debounce_ct1 & pinchange);
    42a8:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <switch_debounce_ct1>
    42ac:	8a 81       	ldd	r24, Y+2	; 0x02
    42ae:	98 23       	and	r25, r24
    42b0:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <switch_debounce_ct0>
    42b4:	89 27       	eor	r24, r25
    42b6:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <switch_debounce_ct1>
	// if counter rolled back to 3 while change was present, write 1 into pinstate to record a debounced change event
	pinchange &= switch_debounce_ct0 & switch_debounce_ct1 & SWITCH_PIN_MASK;
    42ba:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <switch_debounce_ct0>
    42be:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <switch_debounce_ct1>
    42c2:	89 23       	and	r24, r25
    42c4:	88 2f       	mov	r24, r24
    42c6:	90 e0       	ldi	r25, 0x00	; 0
    42c8:	83 70       	andi	r24, 0x03	; 3
    42ca:	99 27       	eor	r25, r25
    42cc:	98 2f       	mov	r25, r24
    42ce:	8a 81       	ldd	r24, Y+2	; 0x02
    42d0:	89 23       	and	r24, r25
    42d2:	8a 83       	std	Y+2, r24	; 0x02
	// change key state
	switch_state ^= pinchange;
    42d4:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <switch_state>
    42d8:	8a 81       	ldd	r24, Y+2	; 0x02
    42da:	89 27       	eor	r24, r25
    42dc:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <switch_state>
	
	// evaluate changes												// 00010100 new state; inverted: 11101011
	uint8_t key_presses = pinchange & switch_state;		// 00011100 pin changes
    42e0:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <switch_state>
    42e4:	9a 81       	ldd	r25, Y+2	; 0x02
    42e6:	89 23       	and	r24, r25
    42e8:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t key_releases = pinchange & ~switch_state;		// presses => 00010100; releases =>  00001000
    42ea:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <switch_state>
    42ee:	98 2f       	mov	r25, r24
    42f0:	90 95       	com	r25
    42f2:	8a 81       	ldd	r24, Y+2	; 0x02
    42f4:	89 23       	and	r24, r25
    42f6:	8c 83       	std	Y+4, r24	; 0x04
	
	for (uint8_t i = 0; i < SWITCH_NUMBER; ++i)
    42f8:	19 82       	std	Y+1, r1	; 0x01
    42fa:	81 c0       	rjmp	.+258    	; 0x43fe <switch_update+0x182>
	{
		if (key_presses & (1 << i))
    42fc:	8b 81       	ldd	r24, Y+3	; 0x03
    42fe:	88 2f       	mov	r24, r24
    4300:	90 e0       	ldi	r25, 0x00	; 0
    4302:	29 81       	ldd	r18, Y+1	; 0x01
    4304:	22 2f       	mov	r18, r18
    4306:	30 e0       	ldi	r19, 0x00	; 0
    4308:	02 c0       	rjmp	.+4      	; 0x430e <switch_update+0x92>
    430a:	95 95       	asr	r25
    430c:	87 95       	ror	r24
    430e:	2a 95       	dec	r18
    4310:	e2 f7       	brpl	.-8      	; 0x430a <switch_update+0x8e>
    4312:	81 70       	andi	r24, 0x01	; 1
    4314:	99 27       	eor	r25, r25
    4316:	89 2b       	or	r24, r25
    4318:	c1 f0       	breq	.+48     	; 0x434a <switch_update+0xce>
		{
			switch_state_press |= (1 << i);
    431a:	89 81       	ldd	r24, Y+1	; 0x01
    431c:	28 2f       	mov	r18, r24
    431e:	30 e0       	ldi	r19, 0x00	; 0
    4320:	81 e0       	ldi	r24, 0x01	; 1
    4322:	90 e0       	ldi	r25, 0x00	; 0
    4324:	02 c0       	rjmp	.+4      	; 0x432a <switch_update+0xae>
    4326:	88 0f       	add	r24, r24
    4328:	99 1f       	adc	r25, r25
    432a:	2a 95       	dec	r18
    432c:	e2 f7       	brpl	.-8      	; 0x4326 <switch_update+0xaa>
    432e:	98 2f       	mov	r25, r24
    4330:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <switch_state_press>
    4334:	89 2b       	or	r24, r25
    4336:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <switch_state_press>
			switch_press_counter[i] = 0;
    433a:	89 81       	ldd	r24, Y+1	; 0x01
    433c:	88 2f       	mov	r24, r24
    433e:	90 e0       	ldi	r25, 0x00	; 0
    4340:	84 5f       	subi	r24, 0xF4	; 244
    4342:	9e 4f       	sbci	r25, 0xFE	; 254
    4344:	fc 01       	movw	r30, r24
    4346:	10 82       	st	Z, r1
    4348:	1f c0       	rjmp	.+62     	; 0x4388 <switch_update+0x10c>
		}
		else if (key_releases & (1 << i))
    434a:	8c 81       	ldd	r24, Y+4	; 0x04
    434c:	88 2f       	mov	r24, r24
    434e:	90 e0       	ldi	r25, 0x00	; 0
    4350:	29 81       	ldd	r18, Y+1	; 0x01
    4352:	22 2f       	mov	r18, r18
    4354:	30 e0       	ldi	r19, 0x00	; 0
    4356:	02 c0       	rjmp	.+4      	; 0x435c <switch_update+0xe0>
    4358:	95 95       	asr	r25
    435a:	87 95       	ror	r24
    435c:	2a 95       	dec	r18
    435e:	e2 f7       	brpl	.-8      	; 0x4358 <switch_update+0xdc>
    4360:	81 70       	andi	r24, 0x01	; 1
    4362:	99 27       	eor	r25, r25
    4364:	89 2b       	or	r24, r25
    4366:	81 f0       	breq	.+32     	; 0x4388 <switch_update+0x10c>
		{
			switch_state_release |= (1 << i);			
    4368:	89 81       	ldd	r24, Y+1	; 0x01
    436a:	28 2f       	mov	r18, r24
    436c:	30 e0       	ldi	r19, 0x00	; 0
    436e:	81 e0       	ldi	r24, 0x01	; 1
    4370:	90 e0       	ldi	r25, 0x00	; 0
    4372:	02 c0       	rjmp	.+4      	; 0x4378 <switch_update+0xfc>
    4374:	88 0f       	add	r24, r24
    4376:	99 1f       	adc	r25, r25
    4378:	2a 95       	dec	r18
    437a:	e2 f7       	brpl	.-8      	; 0x4374 <switch_update+0xf8>
    437c:	98 2f       	mov	r25, r24
    437e:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <switch_state_release>
    4382:	89 2b       	or	r24, r25
    4384:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <switch_state_release>
		}
	
		// switch is held down
		if((switch_state & (1 << i)) && switch_press_counter[i] < SWITCH_LONGPRESS_TICKS)
    4388:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <switch_state>
    438c:	88 2f       	mov	r24, r24
    438e:	90 e0       	ldi	r25, 0x00	; 0
    4390:	29 81       	ldd	r18, Y+1	; 0x01
    4392:	22 2f       	mov	r18, r18
    4394:	30 e0       	ldi	r19, 0x00	; 0
    4396:	02 c0       	rjmp	.+4      	; 0x439c <switch_update+0x120>
    4398:	95 95       	asr	r25
    439a:	87 95       	ror	r24
    439c:	2a 95       	dec	r18
    439e:	e2 f7       	brpl	.-8      	; 0x4398 <switch_update+0x11c>
    43a0:	81 70       	andi	r24, 0x01	; 1
    43a2:	99 27       	eor	r25, r25
    43a4:	89 2b       	or	r24, r25
    43a6:	41 f1       	breq	.+80     	; 0x43f8 <switch_update+0x17c>
    43a8:	89 81       	ldd	r24, Y+1	; 0x01
    43aa:	88 2f       	mov	r24, r24
    43ac:	90 e0       	ldi	r25, 0x00	; 0
    43ae:	84 5f       	subi	r24, 0xF4	; 244
    43b0:	9e 4f       	sbci	r25, 0xFE	; 254
    43b2:	fc 01       	movw	r30, r24
    43b4:	80 81       	ld	r24, Z
    43b6:	84 36       	cpi	r24, 0x64	; 100
    43b8:	f8 f4       	brcc	.+62     	; 0x43f8 <switch_update+0x17c>
		{
			if(++switch_press_counter[i] == SWITCH_LONGPRESS_TICKS)
    43ba:	89 81       	ldd	r24, Y+1	; 0x01
    43bc:	88 2f       	mov	r24, r24
    43be:	90 e0       	ldi	r25, 0x00	; 0
    43c0:	9c 01       	movw	r18, r24
    43c2:	24 5f       	subi	r18, 0xF4	; 244
    43c4:	3e 4f       	sbci	r19, 0xFE	; 254
    43c6:	f9 01       	movw	r30, r18
    43c8:	20 81       	ld	r18, Z
    43ca:	2f 5f       	subi	r18, 0xFF	; 255
    43cc:	84 5f       	subi	r24, 0xF4	; 244
    43ce:	9e 4f       	sbci	r25, 0xFE	; 254
    43d0:	fc 01       	movw	r30, r24
    43d2:	20 83       	st	Z, r18
    43d4:	24 36       	cpi	r18, 0x64	; 100
    43d6:	81 f4       	brne	.+32     	; 0x43f8 <switch_update+0x17c>
			{
				switch_state_longpress |= (1 << i);
    43d8:	89 81       	ldd	r24, Y+1	; 0x01
    43da:	28 2f       	mov	r18, r24
    43dc:	30 e0       	ldi	r19, 0x00	; 0
    43de:	81 e0       	ldi	r24, 0x01	; 1
    43e0:	90 e0       	ldi	r25, 0x00	; 0
    43e2:	02 c0       	rjmp	.+4      	; 0x43e8 <switch_update+0x16c>
    43e4:	88 0f       	add	r24, r24
    43e6:	99 1f       	adc	r25, r25
    43e8:	2a 95       	dec	r18
    43ea:	e2 f7       	brpl	.-8      	; 0x43e4 <switch_update+0x168>
    43ec:	98 2f       	mov	r25, r24
    43ee:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <switch_state_longpress>
    43f2:	89 2b       	or	r24, r25
    43f4:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <switch_state_longpress>
	
	// evaluate changes												// 00010100 new state; inverted: 11101011
	uint8_t key_presses = pinchange & switch_state;		// 00011100 pin changes
	uint8_t key_releases = pinchange & ~switch_state;		// presses => 00010100; releases =>  00001000
	
	for (uint8_t i = 0; i < SWITCH_NUMBER; ++i)
    43f8:	89 81       	ldd	r24, Y+1	; 0x01
    43fa:	8f 5f       	subi	r24, 0xFF	; 255
    43fc:	89 83       	std	Y+1, r24	; 0x01
    43fe:	89 81       	ldd	r24, Y+1	; 0x01
    4400:	82 30       	cpi	r24, 0x02	; 2
    4402:	08 f4       	brcc	.+2      	; 0x4406 <switch_update+0x18a>
    4404:	7b cf       	rjmp	.-266    	; 0x42fc <switch_update+0x80>
			{
				switch_state_longpress |= (1 << i);
			}
		}
	}
}
    4406:	00 00       	nop
    4408:	0f 90       	pop	r0
    440a:	0f 90       	pop	r0
    440c:	0f 90       	pop	r0
    440e:	0f 90       	pop	r0
    4410:	df 91       	pop	r29
    4412:	cf 91       	pop	r28
    4414:	08 95       	ret

00004416 <__iCliRetVal>:
}

void tsens_stop_adc()
{
	ADCSRA &= ~(1 << ADEN);
}
    4416:	cf 93       	push	r28
    4418:	df 93       	push	r29
    441a:	cd b7       	in	r28, 0x3d	; 61
    441c:	de b7       	in	r29, 0x3e	; 62
    441e:	f8 94       	cli
    4420:	81 e0       	ldi	r24, 0x01	; 1
    4422:	df 91       	pop	r29
    4424:	cf 91       	pop	r28
    4426:	08 95       	ret

00004428 <__iRestore>:
    4428:	cf 93       	push	r28
    442a:	df 93       	push	r29
    442c:	00 d0       	rcall	.+0      	; 0x442e <__iRestore+0x6>
    442e:	cd b7       	in	r28, 0x3d	; 61
    4430:	de b7       	in	r29, 0x3e	; 62
    4432:	9a 83       	std	Y+2, r25	; 0x02
    4434:	89 83       	std	Y+1, r24	; 0x01
    4436:	8f e5       	ldi	r24, 0x5F	; 95
    4438:	90 e0       	ldi	r25, 0x00	; 0
    443a:	29 81       	ldd	r18, Y+1	; 0x01
    443c:	3a 81       	ldd	r19, Y+2	; 0x02
    443e:	f9 01       	movw	r30, r18
    4440:	20 81       	ld	r18, Z
    4442:	fc 01       	movw	r30, r24
    4444:	20 83       	st	Z, r18
    4446:	00 00       	nop
    4448:	0f 90       	pop	r0
    444a:	0f 90       	pop	r0
    444c:	df 91       	pop	r29
    444e:	cf 91       	pop	r28
    4450:	08 95       	ret

00004452 <tsens_init>:
    4452:	cf 93       	push	r28
    4454:	df 93       	push	r29
    4456:	cd b7       	in	r28, 0x3d	; 61
    4458:	de b7       	in	r29, 0x3e	; 62
    445a:	8a e7       	ldi	r24, 0x7A	; 122
    445c:	90 e0       	ldi	r25, 0x00	; 0
    445e:	2a e7       	ldi	r18, 0x7A	; 122
    4460:	30 e0       	ldi	r19, 0x00	; 0
    4462:	f9 01       	movw	r30, r18
    4464:	20 81       	ld	r18, Z
    4466:	27 75       	andi	r18, 0x57	; 87
    4468:	fc 01       	movw	r30, r24
    446a:	20 83       	st	Z, r18
    446c:	8c e7       	ldi	r24, 0x7C	; 124
    446e:	90 e0       	ldi	r25, 0x00	; 0
    4470:	fc 01       	movw	r30, r24
    4472:	10 82       	st	Z, r1
    4474:	8c e7       	ldi	r24, 0x7C	; 124
    4476:	90 e0       	ldi	r25, 0x00	; 0
    4478:	2c e7       	ldi	r18, 0x7C	; 124
    447a:	30 e0       	ldi	r19, 0x00	; 0
    447c:	f9 01       	movw	r30, r18
    447e:	20 81       	ld	r18, Z
    4480:	20 64       	ori	r18, 0x40	; 64
    4482:	fc 01       	movw	r30, r24
    4484:	20 83       	st	Z, r18
    4486:	8a e7       	ldi	r24, 0x7A	; 122
    4488:	90 e0       	ldi	r25, 0x00	; 0
    448a:	2a e7       	ldi	r18, 0x7A	; 122
    448c:	30 e0       	ldi	r19, 0x00	; 0
    448e:	f9 01       	movw	r30, r18
    4490:	20 81       	ld	r18, Z
    4492:	26 60       	ori	r18, 0x06	; 6
    4494:	fc 01       	movw	r30, r24
    4496:	20 83       	st	Z, r18
    4498:	8e e7       	ldi	r24, 0x7E	; 126
    449a:	90 e0       	ldi	r25, 0x00	; 0
    449c:	20 ef       	ldi	r18, 0xF0	; 240
    449e:	fc 01       	movw	r30, r24
    44a0:	20 83       	st	Z, r18
    44a2:	00 00       	nop
    44a4:	df 91       	pop	r29
    44a6:	cf 91       	pop	r28
    44a8:	08 95       	ret

000044aa <tsens_shutdown>:
    44aa:	cf 93       	push	r28
    44ac:	df 93       	push	r29
    44ae:	00 d0       	rcall	.+0      	; 0x44b0 <tsens_shutdown+0x6>
    44b0:	cd b7       	in	r28, 0x3d	; 61
    44b2:	de b7       	in	r29, 0x3e	; 62
    44b4:	8f e5       	ldi	r24, 0x5F	; 95
    44b6:	90 e0       	ldi	r25, 0x00	; 0
    44b8:	fc 01       	movw	r30, r24
    44ba:	80 81       	ld	r24, Z
    44bc:	8a 83       	std	Y+2, r24	; 0x02
    44be:	0e 94 0b 22 	call	0x4416	; 0x4416 <__iCliRetVal>
    44c2:	89 83       	std	Y+1, r24	; 0x01
    44c4:	1c c0       	rjmp	.+56     	; 0x44fe <tsens_shutdown+0x54>
    44c6:	8a e7       	ldi	r24, 0x7A	; 122
    44c8:	90 e0       	ldi	r25, 0x00	; 0
    44ca:	2a e7       	ldi	r18, 0x7A	; 122
    44cc:	30 e0       	ldi	r19, 0x00	; 0
    44ce:	f9 01       	movw	r30, r18
    44d0:	20 81       	ld	r18, Z
    44d2:	27 75       	andi	r18, 0x57	; 87
    44d4:	fc 01       	movw	r30, r24
    44d6:	20 83       	st	Z, r18
    44d8:	8c e7       	ldi	r24, 0x7C	; 124
    44da:	90 e0       	ldi	r25, 0x00	; 0
    44dc:	fc 01       	movw	r30, r24
    44de:	10 82       	st	Z, r1
    44e0:	8a e7       	ldi	r24, 0x7A	; 122
    44e2:	90 e0       	ldi	r25, 0x00	; 0
    44e4:	2a e7       	ldi	r18, 0x7A	; 122
    44e6:	30 e0       	ldi	r19, 0x00	; 0
    44e8:	f9 01       	movw	r30, r18
    44ea:	20 81       	ld	r18, Z
    44ec:	28 7f       	andi	r18, 0xF8	; 248
    44ee:	fc 01       	movw	r30, r24
    44f0:	20 83       	st	Z, r18
    44f2:	8e e7       	ldi	r24, 0x7E	; 126
    44f4:	90 e0       	ldi	r25, 0x00	; 0
    44f6:	2f ef       	ldi	r18, 0xFF	; 255
    44f8:	fc 01       	movw	r30, r24
    44fa:	20 83       	st	Z, r18
    44fc:	19 82       	std	Y+1, r1	; 0x01
    44fe:	89 81       	ldd	r24, Y+1	; 0x01
    4500:	88 23       	and	r24, r24
    4502:	09 f7       	brne	.-62     	; 0x44c6 <tsens_shutdown+0x1c>
    4504:	ce 01       	movw	r24, r28
    4506:	02 96       	adiw	r24, 0x02	; 2
    4508:	0e 94 14 22 	call	0x4428	; 0x4428 <__iRestore>
    450c:	00 00       	nop
    450e:	0f 90       	pop	r0
    4510:	0f 90       	pop	r0
    4512:	df 91       	pop	r29
    4514:	cf 91       	pop	r28
    4516:	08 95       	ret

00004518 <tsens_start_adc>:
    4518:	cf 93       	push	r28
    451a:	df 93       	push	r29
    451c:	cd b7       	in	r28, 0x3d	; 61
    451e:	de b7       	in	r29, 0x3e	; 62
    4520:	8a e7       	ldi	r24, 0x7A	; 122
    4522:	90 e0       	ldi	r25, 0x00	; 0
    4524:	2a e7       	ldi	r18, 0x7A	; 122
    4526:	30 e0       	ldi	r19, 0x00	; 0
    4528:	f9 01       	movw	r30, r18
    452a:	20 81       	ld	r18, Z
    452c:	20 68       	ori	r18, 0x80	; 128
    452e:	fc 01       	movw	r30, r24
    4530:	20 83       	st	Z, r18
    4532:	8a e7       	ldi	r24, 0x7A	; 122
    4534:	90 e0       	ldi	r25, 0x00	; 0
    4536:	2a e7       	ldi	r18, 0x7A	; 122
    4538:	30 e0       	ldi	r19, 0x00	; 0
    453a:	f9 01       	movw	r30, r18
    453c:	20 81       	ld	r18, Z
    453e:	20 64       	ori	r18, 0x40	; 64
    4540:	fc 01       	movw	r30, r24
    4542:	20 83       	st	Z, r18
    4544:	00 00       	nop
    4546:	8a e7       	ldi	r24, 0x7A	; 122
    4548:	90 e0       	ldi	r25, 0x00	; 0
    454a:	fc 01       	movw	r30, r24
    454c:	80 81       	ld	r24, Z
    454e:	88 2f       	mov	r24, r24
    4550:	90 e0       	ldi	r25, 0x00	; 0
    4552:	80 74       	andi	r24, 0x40	; 64
    4554:	99 27       	eor	r25, r25
    4556:	89 2b       	or	r24, r25
    4558:	b1 f7       	brne	.-20     	; 0x4546 <tsens_start_adc+0x2e>
    455a:	88 e7       	ldi	r24, 0x78	; 120
    455c:	90 e0       	ldi	r25, 0x00	; 0
    455e:	fc 01       	movw	r30, r24
    4560:	80 81       	ld	r24, Z
    4562:	91 81       	ldd	r25, Z+1	; 0x01
    4564:	00 00       	nop
    4566:	df 91       	pop	r29
    4568:	cf 91       	pop	r28
    456a:	08 95       	ret

0000456c <tsens_measure0_raw>:

#ifdef TSENS_PROBE_0
uint16_t tsens_measure0_raw(ErrorCode* ec)
{
    456c:	cf 93       	push	r28
    456e:	df 93       	push	r29
    4570:	00 d0       	rcall	.+0      	; 0x4572 <tsens_measure0_raw+0x6>
    4572:	00 d0       	rcall	.+0      	; 0x4574 <tsens_measure0_raw+0x8>
    4574:	cd b7       	in	r28, 0x3d	; 61
    4576:	de b7       	in	r29, 0x3e	; 62
    4578:	9c 83       	std	Y+4, r25	; 0x04
    457a:	8b 83       	std	Y+3, r24	; 0x03
	// set channel
	ADMUX &= ~TSENS_ADC_MUX_MASK;
    457c:	8c e7       	ldi	r24, 0x7C	; 124
    457e:	90 e0       	ldi	r25, 0x00	; 0
    4580:	2c e7       	ldi	r18, 0x7C	; 124
    4582:	30 e0       	ldi	r19, 0x00	; 0
    4584:	f9 01       	movw	r30, r18
    4586:	20 81       	ld	r18, Z
    4588:	20 7e       	andi	r18, 0xE0	; 224
    458a:	fc 01       	movw	r30, r24
    458c:	20 83       	st	Z, r18
	ADMUX |= TSENS_ADC_PROBE0_MUX_BITS;
    458e:	8c e7       	ldi	r24, 0x7C	; 124
    4590:	90 e0       	ldi	r25, 0x00	; 0
    4592:	2c e7       	ldi	r18, 0x7C	; 124
    4594:	30 e0       	ldi	r19, 0x00	; 0
    4596:	f9 01       	movw	r30, r18
    4598:	20 81       	ld	r18, Z
    459a:	fc 01       	movw	r30, r24
    459c:	20 83       	st	Z, r18
	// trigger reading
	ADCSRA |= (1 << ADSC);
    459e:	8a e7       	ldi	r24, 0x7A	; 122
    45a0:	90 e0       	ldi	r25, 0x00	; 0
    45a2:	2a e7       	ldi	r18, 0x7A	; 122
    45a4:	30 e0       	ldi	r19, 0x00	; 0
    45a6:	f9 01       	movw	r30, r18
    45a8:	20 81       	ld	r18, Z
    45aa:	20 64       	ori	r18, 0x40	; 64
    45ac:	fc 01       	movw	r30, r24
    45ae:	20 83       	st	Z, r18
	while(ADCSRA & (1 << ADSC)) {};
    45b0:	00 00       	nop
    45b2:	8a e7       	ldi	r24, 0x7A	; 122
    45b4:	90 e0       	ldi	r25, 0x00	; 0
    45b6:	fc 01       	movw	r30, r24
    45b8:	80 81       	ld	r24, Z
    45ba:	88 2f       	mov	r24, r24
    45bc:	90 e0       	ldi	r25, 0x00	; 0
    45be:	80 74       	andi	r24, 0x40	; 64
    45c0:	99 27       	eor	r25, r25
    45c2:	89 2b       	or	r24, r25
    45c4:	b1 f7       	brne	.-20     	; 0x45b2 <tsens_measure0_raw+0x46>
	// return result
	uint16_t res = ADCW;
    45c6:	88 e7       	ldi	r24, 0x78	; 120
    45c8:	90 e0       	ldi	r25, 0x00	; 0
    45ca:	fc 01       	movw	r30, r24
    45cc:	80 81       	ld	r24, Z
    45ce:	91 81       	ldd	r25, Z+1	; 0x01
    45d0:	9a 83       	std	Y+2, r25	; 0x02
    45d2:	89 83       	std	Y+1, r24	; 0x01
	
	// short circuit / open circuit protection
	if(res == 0)
    45d4:	89 81       	ldd	r24, Y+1	; 0x01
    45d6:	9a 81       	ldd	r25, Y+2	; 0x02
    45d8:	89 2b       	or	r24, r25
    45da:	31 f4       	brne	.+12     	; 0x45e8 <tsens_measure0_raw+0x7c>
		*ec = EC_THERMISTOR_SHORT_CIRCUIT;
    45dc:	8b 81       	ldd	r24, Y+3	; 0x03
    45de:	9c 81       	ldd	r25, Y+4	; 0x04
    45e0:	22 e0       	ldi	r18, 0x02	; 2
    45e2:	fc 01       	movw	r30, r24
    45e4:	20 83       	st	Z, r18
    45e6:	0f c0       	rjmp	.+30     	; 0x4606 <tsens_measure0_raw+0x9a>
	else if(res >= 1023)
    45e8:	89 81       	ldd	r24, Y+1	; 0x01
    45ea:	9a 81       	ldd	r25, Y+2	; 0x02
    45ec:	8f 3f       	cpi	r24, 0xFF	; 255
    45ee:	93 40       	sbci	r25, 0x03	; 3
    45f0:	30 f0       	brcs	.+12     	; 0x45fe <tsens_measure0_raw+0x92>
		*ec = EC_THERMISTOR_OPEN_CIRCUIT;
    45f2:	8b 81       	ldd	r24, Y+3	; 0x03
    45f4:	9c 81       	ldd	r25, Y+4	; 0x04
    45f6:	21 e0       	ldi	r18, 0x01	; 1
    45f8:	fc 01       	movw	r30, r24
    45fa:	20 83       	st	Z, r18
    45fc:	04 c0       	rjmp	.+8      	; 0x4606 <tsens_measure0_raw+0x9a>
	else
		*ec = EC_SUCCESS;
    45fe:	8b 81       	ldd	r24, Y+3	; 0x03
    4600:	9c 81       	ldd	r25, Y+4	; 0x04
    4602:	fc 01       	movw	r30, r24
    4604:	10 82       	st	Z, r1
		
	return res;
    4606:	89 81       	ldd	r24, Y+1	; 0x01
    4608:	9a 81       	ldd	r25, Y+2	; 0x02
}
    460a:	0f 90       	pop	r0
    460c:	0f 90       	pop	r0
    460e:	0f 90       	pop	r0
    4610:	0f 90       	pop	r0
    4612:	df 91       	pop	r29
    4614:	cf 91       	pop	r28
    4616:	08 95       	ret

00004618 <tsens_measure0_resistance>:

float tsens_measure0_resistance(ErrorCode* ec)
{
    4618:	cf 92       	push	r12
    461a:	df 92       	push	r13
    461c:	ef 92       	push	r14
    461e:	ff 92       	push	r15
    4620:	cf 93       	push	r28
    4622:	df 93       	push	r29
    4624:	cd b7       	in	r28, 0x3d	; 61
    4626:	de b7       	in	r29, 0x3e	; 62
    4628:	2b 97       	sbiw	r28, 0x0b	; 11
    462a:	0f b6       	in	r0, 0x3f	; 63
    462c:	f8 94       	cli
    462e:	de bf       	out	0x3e, r29	; 62
    4630:	0f be       	out	0x3f, r0	; 63
    4632:	cd bf       	out	0x3d, r28	; 61
    4634:	9b 87       	std	Y+11, r25	; 0x0b
    4636:	8a 87       	std	Y+10, r24	; 0x0a
	int32_t temp = 0;
    4638:	19 82       	std	Y+1, r1	; 0x01
    463a:	1a 82       	std	Y+2, r1	; 0x02
    463c:	1b 82       	std	Y+3, r1	; 0x03
    463e:	1c 82       	std	Y+4, r1	; 0x04
	for(uint8_t i = 0; i < TSENS_NUM_MEASUREMENTS; ++i)
    4640:	1d 82       	std	Y+5, r1	; 0x05
    4642:	16 c0       	rjmp	.+44     	; 0x4670 <tsens_measure0_resistance+0x58>
	{
		temp += tsens_measure0_raw(ec);
    4644:	8a 85       	ldd	r24, Y+10	; 0x0a
    4646:	9b 85       	ldd	r25, Y+11	; 0x0b
    4648:	0e 94 b6 22 	call	0x456c	; 0x456c <tsens_measure0_raw>
    464c:	cc 01       	movw	r24, r24
    464e:	a0 e0       	ldi	r26, 0x00	; 0
    4650:	b0 e0       	ldi	r27, 0x00	; 0
    4652:	29 81       	ldd	r18, Y+1	; 0x01
    4654:	3a 81       	ldd	r19, Y+2	; 0x02
    4656:	4b 81       	ldd	r20, Y+3	; 0x03
    4658:	5c 81       	ldd	r21, Y+4	; 0x04
    465a:	82 0f       	add	r24, r18
    465c:	93 1f       	adc	r25, r19
    465e:	a4 1f       	adc	r26, r20
    4660:	b5 1f       	adc	r27, r21
    4662:	89 83       	std	Y+1, r24	; 0x01
    4664:	9a 83       	std	Y+2, r25	; 0x02
    4666:	ab 83       	std	Y+3, r26	; 0x03
    4668:	bc 83       	std	Y+4, r27	; 0x04
}

float tsens_measure0_resistance(ErrorCode* ec)
{
	int32_t temp = 0;
	for(uint8_t i = 0; i < TSENS_NUM_MEASUREMENTS; ++i)
    466a:	8d 81       	ldd	r24, Y+5	; 0x05
    466c:	8f 5f       	subi	r24, 0xFF	; 255
    466e:	8d 83       	std	Y+5, r24	; 0x05
    4670:	8d 81       	ldd	r24, Y+5	; 0x05
    4672:	84 30       	cpi	r24, 0x04	; 4
    4674:	38 f3       	brcs	.-50     	; 0x4644 <tsens_measure0_resistance+0x2c>
	{
		temp += tsens_measure0_raw(ec);
	}
	float tempf = ((float)temp / (TSENS_NUM_MEASUREMENTS * 1024)) * UVCC;
    4676:	69 81       	ldd	r22, Y+1	; 0x01
    4678:	7a 81       	ldd	r23, Y+2	; 0x02
    467a:	8b 81       	ldd	r24, Y+3	; 0x03
    467c:	9c 81       	ldd	r25, Y+4	; 0x04
    467e:	0e 94 bb 26 	call	0x4d76	; 0x4d76 <__floatsisf>
    4682:	dc 01       	movw	r26, r24
    4684:	cb 01       	movw	r24, r22
    4686:	20 e0       	ldi	r18, 0x00	; 0
    4688:	30 e0       	ldi	r19, 0x00	; 0
    468a:	40 e8       	ldi	r20, 0x80	; 128
    468c:	55 e4       	ldi	r21, 0x45	; 69
    468e:	bc 01       	movw	r22, r24
    4690:	cd 01       	movw	r24, r26
    4692:	0e 94 d5 25 	call	0x4baa	; 0x4baa <__divsf3>
    4696:	dc 01       	movw	r26, r24
    4698:	cb 01       	movw	r24, r22
    469a:	20 e0       	ldi	r18, 0x00	; 0
    469c:	30 e0       	ldi	r19, 0x00	; 0
    469e:	40 ea       	ldi	r20, 0xA0	; 160
    46a0:	50 e4       	ldi	r21, 0x40	; 64
    46a2:	bc 01       	movw	r22, r24
    46a4:	cd 01       	movw	r24, r26
    46a6:	0e 94 d0 27 	call	0x4fa0	; 0x4fa0 <__mulsf3>
    46aa:	dc 01       	movw	r26, r24
    46ac:	cb 01       	movw	r24, r22
    46ae:	8e 83       	std	Y+6, r24	; 0x06
    46b0:	9f 83       	std	Y+7, r25	; 0x07
    46b2:	a8 87       	std	Y+8, r26	; 0x08
    46b4:	b9 87       	std	Y+9, r27	; 0x09
	
	// for now return resistance for calibration
	return (TSENS_PROBE_0_RESISTANCE * tempf) / (UVCC - tempf);
    46b6:	20 e0       	ldi	r18, 0x00	; 0
    46b8:	30 e5       	ldi	r19, 0x50	; 80
    46ba:	43 ec       	ldi	r20, 0xC3	; 195
    46bc:	57 e4       	ldi	r21, 0x47	; 71
    46be:	6e 81       	ldd	r22, Y+6	; 0x06
    46c0:	7f 81       	ldd	r23, Y+7	; 0x07
    46c2:	88 85       	ldd	r24, Y+8	; 0x08
    46c4:	99 85       	ldd	r25, Y+9	; 0x09
    46c6:	0e 94 d0 27 	call	0x4fa0	; 0x4fa0 <__mulsf3>
    46ca:	dc 01       	movw	r26, r24
    46cc:	cb 01       	movw	r24, r22
    46ce:	6c 01       	movw	r12, r24
    46d0:	7d 01       	movw	r14, r26
    46d2:	2e 81       	ldd	r18, Y+6	; 0x06
    46d4:	3f 81       	ldd	r19, Y+7	; 0x07
    46d6:	48 85       	ldd	r20, Y+8	; 0x08
    46d8:	59 85       	ldd	r21, Y+9	; 0x09
    46da:	60 e0       	ldi	r22, 0x00	; 0
    46dc:	70 e0       	ldi	r23, 0x00	; 0
    46de:	80 ea       	ldi	r24, 0xA0	; 160
    46e0:	90 e4       	ldi	r25, 0x40	; 64
    46e2:	0e 94 63 25 	call	0x4ac6	; 0x4ac6 <__subsf3>
    46e6:	dc 01       	movw	r26, r24
    46e8:	cb 01       	movw	r24, r22
    46ea:	9c 01       	movw	r18, r24
    46ec:	ad 01       	movw	r20, r26
    46ee:	c7 01       	movw	r24, r14
    46f0:	b6 01       	movw	r22, r12
    46f2:	0e 94 d5 25 	call	0x4baa	; 0x4baa <__divsf3>
    46f6:	dc 01       	movw	r26, r24
    46f8:	cb 01       	movw	r24, r22
}
    46fa:	bc 01       	movw	r22, r24
    46fc:	cd 01       	movw	r24, r26
    46fe:	2b 96       	adiw	r28, 0x0b	; 11
    4700:	0f b6       	in	r0, 0x3f	; 63
    4702:	f8 94       	cli
    4704:	de bf       	out	0x3e, r29	; 62
    4706:	0f be       	out	0x3f, r0	; 63
    4708:	cd bf       	out	0x3d, r28	; 61
    470a:	df 91       	pop	r29
    470c:	cf 91       	pop	r28
    470e:	ff 90       	pop	r15
    4710:	ef 90       	pop	r14
    4712:	df 90       	pop	r13
    4714:	cf 90       	pop	r12
    4716:	08 95       	ret

00004718 <tsens_measure_probe0_temp>:

float tsens_measure_probe0_temp(ErrorCode* ec)
{
    4718:	cf 92       	push	r12
    471a:	df 92       	push	r13
    471c:	ef 92       	push	r14
    471e:	ff 92       	push	r15
    4720:	cf 93       	push	r28
    4722:	df 93       	push	r29
    4724:	00 d0       	rcall	.+0      	; 0x4726 <tsens_measure_probe0_temp+0xe>
    4726:	00 d0       	rcall	.+0      	; 0x4728 <tsens_measure_probe0_temp+0x10>
    4728:	00 d0       	rcall	.+0      	; 0x472a <tsens_measure_probe0_temp+0x12>
    472a:	cd b7       	in	r28, 0x3d	; 61
    472c:	de b7       	in	r29, 0x3e	; 62
    472e:	9e 83       	std	Y+6, r25	; 0x06
    4730:	8d 83       	std	Y+5, r24	; 0x05
	float logR = log(tsens_measure0_resistance(ec));
    4732:	8d 81       	ldd	r24, Y+5	; 0x05
    4734:	9e 81       	ldd	r25, Y+6	; 0x06
    4736:	0e 94 0c 23 	call	0x4618	; 0x4618 <tsens_measure0_resistance>
    473a:	dc 01       	movw	r26, r24
    473c:	cb 01       	movw	r24, r22
    473e:	bc 01       	movw	r22, r24
    4740:	cd 01       	movw	r24, r26
    4742:	0e 94 88 27 	call	0x4f10	; 0x4f10 <log>
    4746:	dc 01       	movw	r26, r24
    4748:	cb 01       	movw	r24, r22
    474a:	89 83       	std	Y+1, r24	; 0x01
    474c:	9a 83       	std	Y+2, r25	; 0x02
    474e:	ab 83       	std	Y+3, r26	; 0x03
    4750:	bc 83       	std	Y+4, r27	; 0x04
	return (1.0 / (TSENS_PROBE_0_A0 + TSENS_PROBE_0_A1 * logR + TSENS_PROBE_0_A2 * logR * logR * logR)) - 273.15;
    4752:	20 ea       	ldi	r18, 0xA0	; 160
    4754:	30 e6       	ldi	r19, 0x60	; 96
    4756:	42 ef       	ldi	r20, 0xF2	; 242
    4758:	59 e3       	ldi	r21, 0x39	; 57
    475a:	69 81       	ldd	r22, Y+1	; 0x01
    475c:	7a 81       	ldd	r23, Y+2	; 0x02
    475e:	8b 81       	ldd	r24, Y+3	; 0x03
    4760:	9c 81       	ldd	r25, Y+4	; 0x04
    4762:	0e 94 d0 27 	call	0x4fa0	; 0x4fa0 <__mulsf3>
    4766:	dc 01       	movw	r26, r24
    4768:	cb 01       	movw	r24, r22
    476a:	25 e5       	ldi	r18, 0x55	; 85
    476c:	39 ef       	ldi	r19, 0xF9	; 249
    476e:	46 e9       	ldi	r20, 0x96	; 150
    4770:	5a e3       	ldi	r21, 0x3A	; 58
    4772:	bc 01       	movw	r22, r24
    4774:	cd 01       	movw	r24, r26
    4776:	0e 94 63 25 	call	0x4ac6	; 0x4ac6 <__subsf3>
    477a:	dc 01       	movw	r26, r24
    477c:	cb 01       	movw	r24, r22
    477e:	6c 01       	movw	r12, r24
    4780:	7d 01       	movw	r14, r26
    4782:	2b e0       	ldi	r18, 0x0B	; 11
    4784:	37 ed       	ldi	r19, 0xD7	; 215
    4786:	4b e0       	ldi	r20, 0x0B	; 11
    4788:	55 eb       	ldi	r21, 0xB5	; 181
    478a:	69 81       	ldd	r22, Y+1	; 0x01
    478c:	7a 81       	ldd	r23, Y+2	; 0x02
    478e:	8b 81       	ldd	r24, Y+3	; 0x03
    4790:	9c 81       	ldd	r25, Y+4	; 0x04
    4792:	0e 94 d0 27 	call	0x4fa0	; 0x4fa0 <__mulsf3>
    4796:	dc 01       	movw	r26, r24
    4798:	cb 01       	movw	r24, r22
    479a:	29 81       	ldd	r18, Y+1	; 0x01
    479c:	3a 81       	ldd	r19, Y+2	; 0x02
    479e:	4b 81       	ldd	r20, Y+3	; 0x03
    47a0:	5c 81       	ldd	r21, Y+4	; 0x04
    47a2:	bc 01       	movw	r22, r24
    47a4:	cd 01       	movw	r24, r26
    47a6:	0e 94 d0 27 	call	0x4fa0	; 0x4fa0 <__mulsf3>
    47aa:	dc 01       	movw	r26, r24
    47ac:	cb 01       	movw	r24, r22
    47ae:	29 81       	ldd	r18, Y+1	; 0x01
    47b0:	3a 81       	ldd	r19, Y+2	; 0x02
    47b2:	4b 81       	ldd	r20, Y+3	; 0x03
    47b4:	5c 81       	ldd	r21, Y+4	; 0x04
    47b6:	bc 01       	movw	r22, r24
    47b8:	cd 01       	movw	r24, r26
    47ba:	0e 94 d0 27 	call	0x4fa0	; 0x4fa0 <__mulsf3>
    47be:	dc 01       	movw	r26, r24
    47c0:	cb 01       	movw	r24, r22
    47c2:	9c 01       	movw	r18, r24
    47c4:	ad 01       	movw	r20, r26
    47c6:	c7 01       	movw	r24, r14
    47c8:	b6 01       	movw	r22, r12
    47ca:	0e 94 64 25 	call	0x4ac8	; 0x4ac8 <__addsf3>
    47ce:	dc 01       	movw	r26, r24
    47d0:	cb 01       	movw	r24, r22
    47d2:	9c 01       	movw	r18, r24
    47d4:	ad 01       	movw	r20, r26
    47d6:	60 e0       	ldi	r22, 0x00	; 0
    47d8:	70 e0       	ldi	r23, 0x00	; 0
    47da:	80 e8       	ldi	r24, 0x80	; 128
    47dc:	9f e3       	ldi	r25, 0x3F	; 63
    47de:	0e 94 d5 25 	call	0x4baa	; 0x4baa <__divsf3>
    47e2:	dc 01       	movw	r26, r24
    47e4:	cb 01       	movw	r24, r22
    47e6:	23 e3       	ldi	r18, 0x33	; 51
    47e8:	33 e9       	ldi	r19, 0x93	; 147
    47ea:	48 e8       	ldi	r20, 0x88	; 136
    47ec:	53 e4       	ldi	r21, 0x43	; 67
    47ee:	bc 01       	movw	r22, r24
    47f0:	cd 01       	movw	r24, r26
    47f2:	0e 94 63 25 	call	0x4ac6	; 0x4ac6 <__subsf3>
    47f6:	dc 01       	movw	r26, r24
    47f8:	cb 01       	movw	r24, r22
}
    47fa:	bc 01       	movw	r22, r24
    47fc:	cd 01       	movw	r24, r26
    47fe:	26 96       	adiw	r28, 0x06	; 6
    4800:	0f b6       	in	r0, 0x3f	; 63
    4802:	f8 94       	cli
    4804:	de bf       	out	0x3e, r29	; 62
    4806:	0f be       	out	0x3f, r0	; 63
    4808:	cd bf       	out	0x3d, r28	; 61
    480a:	df 91       	pop	r29
    480c:	cf 91       	pop	r28
    480e:	ff 90       	pop	r15
    4810:	ef 90       	pop	r14
    4812:	df 90       	pop	r13
    4814:	cf 90       	pop	r12
    4816:	08 95       	ret

00004818 <tsens_measure1_raw>:
#endif

#ifdef TSENS_PROBE_1
uint16_t tsens_measure1_raw(ErrorCode* ec)
{
    4818:	cf 93       	push	r28
    481a:	df 93       	push	r29
    481c:	00 d0       	rcall	.+0      	; 0x481e <tsens_measure1_raw+0x6>
    481e:	00 d0       	rcall	.+0      	; 0x4820 <tsens_measure1_raw+0x8>
    4820:	cd b7       	in	r28, 0x3d	; 61
    4822:	de b7       	in	r29, 0x3e	; 62
    4824:	9c 83       	std	Y+4, r25	; 0x04
    4826:	8b 83       	std	Y+3, r24	; 0x03
	// set channel
	ADMUX &= ~TSENS_ADC_MUX_MASK;
    4828:	8c e7       	ldi	r24, 0x7C	; 124
    482a:	90 e0       	ldi	r25, 0x00	; 0
    482c:	2c e7       	ldi	r18, 0x7C	; 124
    482e:	30 e0       	ldi	r19, 0x00	; 0
    4830:	f9 01       	movw	r30, r18
    4832:	20 81       	ld	r18, Z
    4834:	20 7e       	andi	r18, 0xE0	; 224
    4836:	fc 01       	movw	r30, r24
    4838:	20 83       	st	Z, r18
	ADMUX |= TSENS_ADC_PROBE1_MUX_BITS;
    483a:	8c e7       	ldi	r24, 0x7C	; 124
    483c:	90 e0       	ldi	r25, 0x00	; 0
    483e:	2c e7       	ldi	r18, 0x7C	; 124
    4840:	30 e0       	ldi	r19, 0x00	; 0
    4842:	f9 01       	movw	r30, r18
    4844:	20 81       	ld	r18, Z
    4846:	21 60       	ori	r18, 0x01	; 1
    4848:	fc 01       	movw	r30, r24
    484a:	20 83       	st	Z, r18
	// trigger reading
	ADCSRA |= (1 << ADSC);
    484c:	8a e7       	ldi	r24, 0x7A	; 122
    484e:	90 e0       	ldi	r25, 0x00	; 0
    4850:	2a e7       	ldi	r18, 0x7A	; 122
    4852:	30 e0       	ldi	r19, 0x00	; 0
    4854:	f9 01       	movw	r30, r18
    4856:	20 81       	ld	r18, Z
    4858:	20 64       	ori	r18, 0x40	; 64
    485a:	fc 01       	movw	r30, r24
    485c:	20 83       	st	Z, r18
	while(ADCSRA & (1 << ADSC)) {};
    485e:	00 00       	nop
    4860:	8a e7       	ldi	r24, 0x7A	; 122
    4862:	90 e0       	ldi	r25, 0x00	; 0
    4864:	fc 01       	movw	r30, r24
    4866:	80 81       	ld	r24, Z
    4868:	88 2f       	mov	r24, r24
    486a:	90 e0       	ldi	r25, 0x00	; 0
    486c:	80 74       	andi	r24, 0x40	; 64
    486e:	99 27       	eor	r25, r25
    4870:	89 2b       	or	r24, r25
    4872:	b1 f7       	brne	.-20     	; 0x4860 <tsens_measure1_raw+0x48>
	// return result
	uint16_t res = ADCW;
    4874:	88 e7       	ldi	r24, 0x78	; 120
    4876:	90 e0       	ldi	r25, 0x00	; 0
    4878:	fc 01       	movw	r30, r24
    487a:	80 81       	ld	r24, Z
    487c:	91 81       	ldd	r25, Z+1	; 0x01
    487e:	9a 83       	std	Y+2, r25	; 0x02
    4880:	89 83       	std	Y+1, r24	; 0x01
	
	// short circuit / open circuit protection
	if(res == 0)
    4882:	89 81       	ldd	r24, Y+1	; 0x01
    4884:	9a 81       	ldd	r25, Y+2	; 0x02
    4886:	89 2b       	or	r24, r25
    4888:	31 f4       	brne	.+12     	; 0x4896 <tsens_measure1_raw+0x7e>
		*ec = EC_THERMISTOR_SHORT_CIRCUIT;
    488a:	8b 81       	ldd	r24, Y+3	; 0x03
    488c:	9c 81       	ldd	r25, Y+4	; 0x04
    488e:	22 e0       	ldi	r18, 0x02	; 2
    4890:	fc 01       	movw	r30, r24
    4892:	20 83       	st	Z, r18
    4894:	0f c0       	rjmp	.+30     	; 0x48b4 <tsens_measure1_raw+0x9c>
	else if(res >= 1023)
    4896:	89 81       	ldd	r24, Y+1	; 0x01
    4898:	9a 81       	ldd	r25, Y+2	; 0x02
    489a:	8f 3f       	cpi	r24, 0xFF	; 255
    489c:	93 40       	sbci	r25, 0x03	; 3
    489e:	30 f0       	brcs	.+12     	; 0x48ac <tsens_measure1_raw+0x94>
		*ec = EC_THERMISTOR_OPEN_CIRCUIT;
    48a0:	8b 81       	ldd	r24, Y+3	; 0x03
    48a2:	9c 81       	ldd	r25, Y+4	; 0x04
    48a4:	21 e0       	ldi	r18, 0x01	; 1
    48a6:	fc 01       	movw	r30, r24
    48a8:	20 83       	st	Z, r18
    48aa:	04 c0       	rjmp	.+8      	; 0x48b4 <tsens_measure1_raw+0x9c>
	else
		*ec = EC_SUCCESS;
    48ac:	8b 81       	ldd	r24, Y+3	; 0x03
    48ae:	9c 81       	ldd	r25, Y+4	; 0x04
    48b0:	fc 01       	movw	r30, r24
    48b2:	10 82       	st	Z, r1
	
	return res;
    48b4:	89 81       	ldd	r24, Y+1	; 0x01
    48b6:	9a 81       	ldd	r25, Y+2	; 0x02
}
    48b8:	0f 90       	pop	r0
    48ba:	0f 90       	pop	r0
    48bc:	0f 90       	pop	r0
    48be:	0f 90       	pop	r0
    48c0:	df 91       	pop	r29
    48c2:	cf 91       	pop	r28
    48c4:	08 95       	ret

000048c6 <tsens_measure1_resistance>:

float tsens_measure1_resistance(ErrorCode* ec)
{
    48c6:	cf 92       	push	r12
    48c8:	df 92       	push	r13
    48ca:	ef 92       	push	r14
    48cc:	ff 92       	push	r15
    48ce:	cf 93       	push	r28
    48d0:	df 93       	push	r29
    48d2:	cd b7       	in	r28, 0x3d	; 61
    48d4:	de b7       	in	r29, 0x3e	; 62
    48d6:	2b 97       	sbiw	r28, 0x0b	; 11
    48d8:	0f b6       	in	r0, 0x3f	; 63
    48da:	f8 94       	cli
    48dc:	de bf       	out	0x3e, r29	; 62
    48de:	0f be       	out	0x3f, r0	; 63
    48e0:	cd bf       	out	0x3d, r28	; 61
    48e2:	9b 87       	std	Y+11, r25	; 0x0b
    48e4:	8a 87       	std	Y+10, r24	; 0x0a
	int32_t temp = 0;
    48e6:	19 82       	std	Y+1, r1	; 0x01
    48e8:	1a 82       	std	Y+2, r1	; 0x02
    48ea:	1b 82       	std	Y+3, r1	; 0x03
    48ec:	1c 82       	std	Y+4, r1	; 0x04
	for(uint8_t i = 0; i < TSENS_NUM_MEASUREMENTS; ++i)
    48ee:	1d 82       	std	Y+5, r1	; 0x05
    48f0:	16 c0       	rjmp	.+44     	; 0x491e <tsens_measure1_resistance+0x58>
	{
		temp += tsens_measure1_raw(ec);
    48f2:	8a 85       	ldd	r24, Y+10	; 0x0a
    48f4:	9b 85       	ldd	r25, Y+11	; 0x0b
    48f6:	0e 94 0c 24 	call	0x4818	; 0x4818 <tsens_measure1_raw>
    48fa:	cc 01       	movw	r24, r24
    48fc:	a0 e0       	ldi	r26, 0x00	; 0
    48fe:	b0 e0       	ldi	r27, 0x00	; 0
    4900:	29 81       	ldd	r18, Y+1	; 0x01
    4902:	3a 81       	ldd	r19, Y+2	; 0x02
    4904:	4b 81       	ldd	r20, Y+3	; 0x03
    4906:	5c 81       	ldd	r21, Y+4	; 0x04
    4908:	82 0f       	add	r24, r18
    490a:	93 1f       	adc	r25, r19
    490c:	a4 1f       	adc	r26, r20
    490e:	b5 1f       	adc	r27, r21
    4910:	89 83       	std	Y+1, r24	; 0x01
    4912:	9a 83       	std	Y+2, r25	; 0x02
    4914:	ab 83       	std	Y+3, r26	; 0x03
    4916:	bc 83       	std	Y+4, r27	; 0x04
}

float tsens_measure1_resistance(ErrorCode* ec)
{
	int32_t temp = 0;
	for(uint8_t i = 0; i < TSENS_NUM_MEASUREMENTS; ++i)
    4918:	8d 81       	ldd	r24, Y+5	; 0x05
    491a:	8f 5f       	subi	r24, 0xFF	; 255
    491c:	8d 83       	std	Y+5, r24	; 0x05
    491e:	8d 81       	ldd	r24, Y+5	; 0x05
    4920:	84 30       	cpi	r24, 0x04	; 4
    4922:	38 f3       	brcs	.-50     	; 0x48f2 <tsens_measure1_resistance+0x2c>
	{
		temp += tsens_measure1_raw(ec);
	}
	float tempf = ((float)temp / (TSENS_NUM_MEASUREMENTS * 1024)) * UVCC;
    4924:	69 81       	ldd	r22, Y+1	; 0x01
    4926:	7a 81       	ldd	r23, Y+2	; 0x02
    4928:	8b 81       	ldd	r24, Y+3	; 0x03
    492a:	9c 81       	ldd	r25, Y+4	; 0x04
    492c:	0e 94 bb 26 	call	0x4d76	; 0x4d76 <__floatsisf>
    4930:	dc 01       	movw	r26, r24
    4932:	cb 01       	movw	r24, r22
    4934:	20 e0       	ldi	r18, 0x00	; 0
    4936:	30 e0       	ldi	r19, 0x00	; 0
    4938:	40 e8       	ldi	r20, 0x80	; 128
    493a:	55 e4       	ldi	r21, 0x45	; 69
    493c:	bc 01       	movw	r22, r24
    493e:	cd 01       	movw	r24, r26
    4940:	0e 94 d5 25 	call	0x4baa	; 0x4baa <__divsf3>
    4944:	dc 01       	movw	r26, r24
    4946:	cb 01       	movw	r24, r22
    4948:	20 e0       	ldi	r18, 0x00	; 0
    494a:	30 e0       	ldi	r19, 0x00	; 0
    494c:	40 ea       	ldi	r20, 0xA0	; 160
    494e:	50 e4       	ldi	r21, 0x40	; 64
    4950:	bc 01       	movw	r22, r24
    4952:	cd 01       	movw	r24, r26
    4954:	0e 94 d0 27 	call	0x4fa0	; 0x4fa0 <__mulsf3>
    4958:	dc 01       	movw	r26, r24
    495a:	cb 01       	movw	r24, r22
    495c:	8e 83       	std	Y+6, r24	; 0x06
    495e:	9f 83       	std	Y+7, r25	; 0x07
    4960:	a8 87       	std	Y+8, r26	; 0x08
    4962:	b9 87       	std	Y+9, r27	; 0x09
	
	// for now return resistance for calibration
	return (TSENS_PROBE_1_RESISTANCE * tempf) / (UVCC - tempf);
    4964:	20 e0       	ldi	r18, 0x00	; 0
    4966:	30 e4       	ldi	r19, 0x40	; 64
    4968:	4c e1       	ldi	r20, 0x1C	; 28
    496a:	56 e4       	ldi	r21, 0x46	; 70
    496c:	6e 81       	ldd	r22, Y+6	; 0x06
    496e:	7f 81       	ldd	r23, Y+7	; 0x07
    4970:	88 85       	ldd	r24, Y+8	; 0x08
    4972:	99 85       	ldd	r25, Y+9	; 0x09
    4974:	0e 94 d0 27 	call	0x4fa0	; 0x4fa0 <__mulsf3>
    4978:	dc 01       	movw	r26, r24
    497a:	cb 01       	movw	r24, r22
    497c:	6c 01       	movw	r12, r24
    497e:	7d 01       	movw	r14, r26
    4980:	2e 81       	ldd	r18, Y+6	; 0x06
    4982:	3f 81       	ldd	r19, Y+7	; 0x07
    4984:	48 85       	ldd	r20, Y+8	; 0x08
    4986:	59 85       	ldd	r21, Y+9	; 0x09
    4988:	60 e0       	ldi	r22, 0x00	; 0
    498a:	70 e0       	ldi	r23, 0x00	; 0
    498c:	80 ea       	ldi	r24, 0xA0	; 160
    498e:	90 e4       	ldi	r25, 0x40	; 64
    4990:	0e 94 63 25 	call	0x4ac6	; 0x4ac6 <__subsf3>
    4994:	dc 01       	movw	r26, r24
    4996:	cb 01       	movw	r24, r22
    4998:	9c 01       	movw	r18, r24
    499a:	ad 01       	movw	r20, r26
    499c:	c7 01       	movw	r24, r14
    499e:	b6 01       	movw	r22, r12
    49a0:	0e 94 d5 25 	call	0x4baa	; 0x4baa <__divsf3>
    49a4:	dc 01       	movw	r26, r24
    49a6:	cb 01       	movw	r24, r22
}
    49a8:	bc 01       	movw	r22, r24
    49aa:	cd 01       	movw	r24, r26
    49ac:	2b 96       	adiw	r28, 0x0b	; 11
    49ae:	0f b6       	in	r0, 0x3f	; 63
    49b0:	f8 94       	cli
    49b2:	de bf       	out	0x3e, r29	; 62
    49b4:	0f be       	out	0x3f, r0	; 63
    49b6:	cd bf       	out	0x3d, r28	; 61
    49b8:	df 91       	pop	r29
    49ba:	cf 91       	pop	r28
    49bc:	ff 90       	pop	r15
    49be:	ef 90       	pop	r14
    49c0:	df 90       	pop	r13
    49c2:	cf 90       	pop	r12
    49c4:	08 95       	ret

000049c6 <tsens_measure_probe1_temp>:

float tsens_measure_probe1_temp(ErrorCode* ec)
{
    49c6:	cf 92       	push	r12
    49c8:	df 92       	push	r13
    49ca:	ef 92       	push	r14
    49cc:	ff 92       	push	r15
    49ce:	cf 93       	push	r28
    49d0:	df 93       	push	r29
    49d2:	00 d0       	rcall	.+0      	; 0x49d4 <tsens_measure_probe1_temp+0xe>
    49d4:	00 d0       	rcall	.+0      	; 0x49d6 <tsens_measure_probe1_temp+0x10>
    49d6:	00 d0       	rcall	.+0      	; 0x49d8 <tsens_measure_probe1_temp+0x12>
    49d8:	cd b7       	in	r28, 0x3d	; 61
    49da:	de b7       	in	r29, 0x3e	; 62
    49dc:	9e 83       	std	Y+6, r25	; 0x06
    49de:	8d 83       	std	Y+5, r24	; 0x05
	float logR = log(tsens_measure1_resistance(ec));
    49e0:	8d 81       	ldd	r24, Y+5	; 0x05
    49e2:	9e 81       	ldd	r25, Y+6	; 0x06
    49e4:	0e 94 63 24 	call	0x48c6	; 0x48c6 <tsens_measure1_resistance>
    49e8:	dc 01       	movw	r26, r24
    49ea:	cb 01       	movw	r24, r22
    49ec:	bc 01       	movw	r22, r24
    49ee:	cd 01       	movw	r24, r26
    49f0:	0e 94 88 27 	call	0x4f10	; 0x4f10 <log>
    49f4:	dc 01       	movw	r26, r24
    49f6:	cb 01       	movw	r24, r22
    49f8:	89 83       	std	Y+1, r24	; 0x01
    49fa:	9a 83       	std	Y+2, r25	; 0x02
    49fc:	ab 83       	std	Y+3, r26	; 0x03
    49fe:	bc 83       	std	Y+4, r27	; 0x04
	return (1.0 / (TSENS_PROBE_1_A0 + TSENS_PROBE_1_A1 * logR + TSENS_PROBE_1_A2 * logR * logR * logR)) - 273.15;
    4a00:	25 ee       	ldi	r18, 0xE5	; 229
    4a02:	31 ec       	ldi	r19, 0xC1	; 193
    4a04:	44 e5       	ldi	r20, 0x54	; 84
    4a06:	59 e3       	ldi	r21, 0x39	; 57
    4a08:	69 81       	ldd	r22, Y+1	; 0x01
    4a0a:	7a 81       	ldd	r23, Y+2	; 0x02
    4a0c:	8b 81       	ldd	r24, Y+3	; 0x03
    4a0e:	9c 81       	ldd	r25, Y+4	; 0x04
    4a10:	0e 94 d0 27 	call	0x4fa0	; 0x4fa0 <__mulsf3>
    4a14:	dc 01       	movw	r26, r24
    4a16:	cb 01       	movw	r24, r22
    4a18:	21 ea       	ldi	r18, 0xA1	; 161
    4a1a:	38 ee       	ldi	r19, 0xE8	; 232
    4a1c:	4c ea       	ldi	r20, 0xAC	; 172
    4a1e:	5a e3       	ldi	r21, 0x3A	; 58
    4a20:	bc 01       	movw	r22, r24
    4a22:	cd 01       	movw	r24, r26
    4a24:	0e 94 64 25 	call	0x4ac8	; 0x4ac8 <__addsf3>
    4a28:	dc 01       	movw	r26, r24
    4a2a:	cb 01       	movw	r24, r22
    4a2c:	6c 01       	movw	r12, r24
    4a2e:	7d 01       	movw	r14, r26
    4a30:	29 e4       	ldi	r18, 0x49	; 73
    4a32:	36 e8       	ldi	r19, 0x86	; 134
    4a34:	4c e7       	ldi	r20, 0x7C	; 124
    4a36:	54 e3       	ldi	r21, 0x34	; 52
    4a38:	69 81       	ldd	r22, Y+1	; 0x01
    4a3a:	7a 81       	ldd	r23, Y+2	; 0x02
    4a3c:	8b 81       	ldd	r24, Y+3	; 0x03
    4a3e:	9c 81       	ldd	r25, Y+4	; 0x04
    4a40:	0e 94 d0 27 	call	0x4fa0	; 0x4fa0 <__mulsf3>
    4a44:	dc 01       	movw	r26, r24
    4a46:	cb 01       	movw	r24, r22
    4a48:	29 81       	ldd	r18, Y+1	; 0x01
    4a4a:	3a 81       	ldd	r19, Y+2	; 0x02
    4a4c:	4b 81       	ldd	r20, Y+3	; 0x03
    4a4e:	5c 81       	ldd	r21, Y+4	; 0x04
    4a50:	bc 01       	movw	r22, r24
    4a52:	cd 01       	movw	r24, r26
    4a54:	0e 94 d0 27 	call	0x4fa0	; 0x4fa0 <__mulsf3>
    4a58:	dc 01       	movw	r26, r24
    4a5a:	cb 01       	movw	r24, r22
    4a5c:	29 81       	ldd	r18, Y+1	; 0x01
    4a5e:	3a 81       	ldd	r19, Y+2	; 0x02
    4a60:	4b 81       	ldd	r20, Y+3	; 0x03
    4a62:	5c 81       	ldd	r21, Y+4	; 0x04
    4a64:	bc 01       	movw	r22, r24
    4a66:	cd 01       	movw	r24, r26
    4a68:	0e 94 d0 27 	call	0x4fa0	; 0x4fa0 <__mulsf3>
    4a6c:	dc 01       	movw	r26, r24
    4a6e:	cb 01       	movw	r24, r22
    4a70:	9c 01       	movw	r18, r24
    4a72:	ad 01       	movw	r20, r26
    4a74:	c7 01       	movw	r24, r14
    4a76:	b6 01       	movw	r22, r12
    4a78:	0e 94 64 25 	call	0x4ac8	; 0x4ac8 <__addsf3>
    4a7c:	dc 01       	movw	r26, r24
    4a7e:	cb 01       	movw	r24, r22
    4a80:	9c 01       	movw	r18, r24
    4a82:	ad 01       	movw	r20, r26
    4a84:	60 e0       	ldi	r22, 0x00	; 0
    4a86:	70 e0       	ldi	r23, 0x00	; 0
    4a88:	80 e8       	ldi	r24, 0x80	; 128
    4a8a:	9f e3       	ldi	r25, 0x3F	; 63
    4a8c:	0e 94 d5 25 	call	0x4baa	; 0x4baa <__divsf3>
    4a90:	dc 01       	movw	r26, r24
    4a92:	cb 01       	movw	r24, r22
    4a94:	23 e3       	ldi	r18, 0x33	; 51
    4a96:	33 e9       	ldi	r19, 0x93	; 147
    4a98:	48 e8       	ldi	r20, 0x88	; 136
    4a9a:	53 e4       	ldi	r21, 0x43	; 67
    4a9c:	bc 01       	movw	r22, r24
    4a9e:	cd 01       	movw	r24, r26
    4aa0:	0e 94 63 25 	call	0x4ac6	; 0x4ac6 <__subsf3>
    4aa4:	dc 01       	movw	r26, r24
    4aa6:	cb 01       	movw	r24, r22
}
    4aa8:	bc 01       	movw	r22, r24
    4aaa:	cd 01       	movw	r24, r26
    4aac:	26 96       	adiw	r28, 0x06	; 6
    4aae:	0f b6       	in	r0, 0x3f	; 63
    4ab0:	f8 94       	cli
    4ab2:	de bf       	out	0x3e, r29	; 62
    4ab4:	0f be       	out	0x3f, r0	; 63
    4ab6:	cd bf       	out	0x3d, r28	; 61
    4ab8:	df 91       	pop	r29
    4aba:	cf 91       	pop	r28
    4abc:	ff 90       	pop	r15
    4abe:	ef 90       	pop	r14
    4ac0:	df 90       	pop	r13
    4ac2:	cf 90       	pop	r12
    4ac4:	08 95       	ret

00004ac6 <__subsf3>:
    4ac6:	50 58       	subi	r21, 0x80	; 128

00004ac8 <__addsf3>:
    4ac8:	bb 27       	eor	r27, r27
    4aca:	aa 27       	eor	r26, r26
    4acc:	0e 94 7b 25 	call	0x4af6	; 0x4af6 <__addsf3x>
    4ad0:	0c 94 41 27 	jmp	0x4e82	; 0x4e82 <__fp_round>
    4ad4:	0e 94 33 27 	call	0x4e66	; 0x4e66 <__fp_pscA>
    4ad8:	38 f0       	brcs	.+14     	; 0x4ae8 <__addsf3+0x20>
    4ada:	0e 94 3a 27 	call	0x4e74	; 0x4e74 <__fp_pscB>
    4ade:	20 f0       	brcs	.+8      	; 0x4ae8 <__addsf3+0x20>
    4ae0:	39 f4       	brne	.+14     	; 0x4af0 <__addsf3+0x28>
    4ae2:	9f 3f       	cpi	r25, 0xFF	; 255
    4ae4:	19 f4       	brne	.+6      	; 0x4aec <__addsf3+0x24>
    4ae6:	26 f4       	brtc	.+8      	; 0x4af0 <__addsf3+0x28>
    4ae8:	0c 94 20 27 	jmp	0x4e40	; 0x4e40 <__fp_nan>
    4aec:	0e f4       	brtc	.+2      	; 0x4af0 <__addsf3+0x28>
    4aee:	e0 95       	com	r30
    4af0:	e7 fb       	bst	r30, 7
    4af2:	0c 94 1a 27 	jmp	0x4e34	; 0x4e34 <__fp_inf>

00004af6 <__addsf3x>:
    4af6:	e9 2f       	mov	r30, r25
    4af8:	0e 94 52 27 	call	0x4ea4	; 0x4ea4 <__fp_split3>
    4afc:	58 f3       	brcs	.-42     	; 0x4ad4 <__addsf3+0xc>
    4afe:	ba 17       	cp	r27, r26
    4b00:	62 07       	cpc	r22, r18
    4b02:	73 07       	cpc	r23, r19
    4b04:	84 07       	cpc	r24, r20
    4b06:	95 07       	cpc	r25, r21
    4b08:	20 f0       	brcs	.+8      	; 0x4b12 <__addsf3x+0x1c>
    4b0a:	79 f4       	brne	.+30     	; 0x4b2a <__addsf3x+0x34>
    4b0c:	a6 f5       	brtc	.+104    	; 0x4b76 <__addsf3x+0x80>
    4b0e:	0c 94 74 27 	jmp	0x4ee8	; 0x4ee8 <__fp_zero>
    4b12:	0e f4       	brtc	.+2      	; 0x4b16 <__addsf3x+0x20>
    4b14:	e0 95       	com	r30
    4b16:	0b 2e       	mov	r0, r27
    4b18:	ba 2f       	mov	r27, r26
    4b1a:	a0 2d       	mov	r26, r0
    4b1c:	0b 01       	movw	r0, r22
    4b1e:	b9 01       	movw	r22, r18
    4b20:	90 01       	movw	r18, r0
    4b22:	0c 01       	movw	r0, r24
    4b24:	ca 01       	movw	r24, r20
    4b26:	a0 01       	movw	r20, r0
    4b28:	11 24       	eor	r1, r1
    4b2a:	ff 27       	eor	r31, r31
    4b2c:	59 1b       	sub	r21, r25
    4b2e:	99 f0       	breq	.+38     	; 0x4b56 <__addsf3x+0x60>
    4b30:	59 3f       	cpi	r21, 0xF9	; 249
    4b32:	50 f4       	brcc	.+20     	; 0x4b48 <__addsf3x+0x52>
    4b34:	50 3e       	cpi	r21, 0xE0	; 224
    4b36:	68 f1       	brcs	.+90     	; 0x4b92 <__addsf3x+0x9c>
    4b38:	1a 16       	cp	r1, r26
    4b3a:	f0 40       	sbci	r31, 0x00	; 0
    4b3c:	a2 2f       	mov	r26, r18
    4b3e:	23 2f       	mov	r18, r19
    4b40:	34 2f       	mov	r19, r20
    4b42:	44 27       	eor	r20, r20
    4b44:	58 5f       	subi	r21, 0xF8	; 248
    4b46:	f3 cf       	rjmp	.-26     	; 0x4b2e <__addsf3x+0x38>
    4b48:	46 95       	lsr	r20
    4b4a:	37 95       	ror	r19
    4b4c:	27 95       	ror	r18
    4b4e:	a7 95       	ror	r26
    4b50:	f0 40       	sbci	r31, 0x00	; 0
    4b52:	53 95       	inc	r21
    4b54:	c9 f7       	brne	.-14     	; 0x4b48 <__addsf3x+0x52>
    4b56:	7e f4       	brtc	.+30     	; 0x4b76 <__addsf3x+0x80>
    4b58:	1f 16       	cp	r1, r31
    4b5a:	ba 0b       	sbc	r27, r26
    4b5c:	62 0b       	sbc	r22, r18
    4b5e:	73 0b       	sbc	r23, r19
    4b60:	84 0b       	sbc	r24, r20
    4b62:	ba f0       	brmi	.+46     	; 0x4b92 <__addsf3x+0x9c>
    4b64:	91 50       	subi	r25, 0x01	; 1
    4b66:	a1 f0       	breq	.+40     	; 0x4b90 <__addsf3x+0x9a>
    4b68:	ff 0f       	add	r31, r31
    4b6a:	bb 1f       	adc	r27, r27
    4b6c:	66 1f       	adc	r22, r22
    4b6e:	77 1f       	adc	r23, r23
    4b70:	88 1f       	adc	r24, r24
    4b72:	c2 f7       	brpl	.-16     	; 0x4b64 <__addsf3x+0x6e>
    4b74:	0e c0       	rjmp	.+28     	; 0x4b92 <__addsf3x+0x9c>
    4b76:	ba 0f       	add	r27, r26
    4b78:	62 1f       	adc	r22, r18
    4b7a:	73 1f       	adc	r23, r19
    4b7c:	84 1f       	adc	r24, r20
    4b7e:	48 f4       	brcc	.+18     	; 0x4b92 <__addsf3x+0x9c>
    4b80:	87 95       	ror	r24
    4b82:	77 95       	ror	r23
    4b84:	67 95       	ror	r22
    4b86:	b7 95       	ror	r27
    4b88:	f7 95       	ror	r31
    4b8a:	9e 3f       	cpi	r25, 0xFE	; 254
    4b8c:	08 f0       	brcs	.+2      	; 0x4b90 <__addsf3x+0x9a>
    4b8e:	b0 cf       	rjmp	.-160    	; 0x4af0 <__addsf3+0x28>
    4b90:	93 95       	inc	r25
    4b92:	88 0f       	add	r24, r24
    4b94:	08 f0       	brcs	.+2      	; 0x4b98 <__addsf3x+0xa2>
    4b96:	99 27       	eor	r25, r25
    4b98:	ee 0f       	add	r30, r30
    4b9a:	97 95       	ror	r25
    4b9c:	87 95       	ror	r24
    4b9e:	08 95       	ret

00004ba0 <__cmpsf2>:
    4ba0:	0e 94 f6 26 	call	0x4dec	; 0x4dec <__fp_cmp>
    4ba4:	08 f4       	brcc	.+2      	; 0x4ba8 <__cmpsf2+0x8>
    4ba6:	81 e0       	ldi	r24, 0x01	; 1
    4ba8:	08 95       	ret

00004baa <__divsf3>:
    4baa:	0e 94 e9 25 	call	0x4bd2	; 0x4bd2 <__divsf3x>
    4bae:	0c 94 41 27 	jmp	0x4e82	; 0x4e82 <__fp_round>
    4bb2:	0e 94 3a 27 	call	0x4e74	; 0x4e74 <__fp_pscB>
    4bb6:	58 f0       	brcs	.+22     	; 0x4bce <__divsf3+0x24>
    4bb8:	0e 94 33 27 	call	0x4e66	; 0x4e66 <__fp_pscA>
    4bbc:	40 f0       	brcs	.+16     	; 0x4bce <__divsf3+0x24>
    4bbe:	29 f4       	brne	.+10     	; 0x4bca <__divsf3+0x20>
    4bc0:	5f 3f       	cpi	r21, 0xFF	; 255
    4bc2:	29 f0       	breq	.+10     	; 0x4bce <__divsf3+0x24>
    4bc4:	0c 94 1a 27 	jmp	0x4e34	; 0x4e34 <__fp_inf>
    4bc8:	51 11       	cpse	r21, r1
    4bca:	0c 94 75 27 	jmp	0x4eea	; 0x4eea <__fp_szero>
    4bce:	0c 94 20 27 	jmp	0x4e40	; 0x4e40 <__fp_nan>

00004bd2 <__divsf3x>:
    4bd2:	0e 94 52 27 	call	0x4ea4	; 0x4ea4 <__fp_split3>
    4bd6:	68 f3       	brcs	.-38     	; 0x4bb2 <__divsf3+0x8>

00004bd8 <__divsf3_pse>:
    4bd8:	99 23       	and	r25, r25
    4bda:	b1 f3       	breq	.-20     	; 0x4bc8 <__divsf3+0x1e>
    4bdc:	55 23       	and	r21, r21
    4bde:	91 f3       	breq	.-28     	; 0x4bc4 <__divsf3+0x1a>
    4be0:	95 1b       	sub	r25, r21
    4be2:	55 0b       	sbc	r21, r21
    4be4:	bb 27       	eor	r27, r27
    4be6:	aa 27       	eor	r26, r26
    4be8:	62 17       	cp	r22, r18
    4bea:	73 07       	cpc	r23, r19
    4bec:	84 07       	cpc	r24, r20
    4bee:	38 f0       	brcs	.+14     	; 0x4bfe <__divsf3_pse+0x26>
    4bf0:	9f 5f       	subi	r25, 0xFF	; 255
    4bf2:	5f 4f       	sbci	r21, 0xFF	; 255
    4bf4:	22 0f       	add	r18, r18
    4bf6:	33 1f       	adc	r19, r19
    4bf8:	44 1f       	adc	r20, r20
    4bfa:	aa 1f       	adc	r26, r26
    4bfc:	a9 f3       	breq	.-22     	; 0x4be8 <__divsf3_pse+0x10>
    4bfe:	35 d0       	rcall	.+106    	; 0x4c6a <__divsf3_pse+0x92>
    4c00:	0e 2e       	mov	r0, r30
    4c02:	3a f0       	brmi	.+14     	; 0x4c12 <__divsf3_pse+0x3a>
    4c04:	e0 e8       	ldi	r30, 0x80	; 128
    4c06:	32 d0       	rcall	.+100    	; 0x4c6c <__divsf3_pse+0x94>
    4c08:	91 50       	subi	r25, 0x01	; 1
    4c0a:	50 40       	sbci	r21, 0x00	; 0
    4c0c:	e6 95       	lsr	r30
    4c0e:	00 1c       	adc	r0, r0
    4c10:	ca f7       	brpl	.-14     	; 0x4c04 <__divsf3_pse+0x2c>
    4c12:	2b d0       	rcall	.+86     	; 0x4c6a <__divsf3_pse+0x92>
    4c14:	fe 2f       	mov	r31, r30
    4c16:	29 d0       	rcall	.+82     	; 0x4c6a <__divsf3_pse+0x92>
    4c18:	66 0f       	add	r22, r22
    4c1a:	77 1f       	adc	r23, r23
    4c1c:	88 1f       	adc	r24, r24
    4c1e:	bb 1f       	adc	r27, r27
    4c20:	26 17       	cp	r18, r22
    4c22:	37 07       	cpc	r19, r23
    4c24:	48 07       	cpc	r20, r24
    4c26:	ab 07       	cpc	r26, r27
    4c28:	b0 e8       	ldi	r27, 0x80	; 128
    4c2a:	09 f0       	breq	.+2      	; 0x4c2e <__divsf3_pse+0x56>
    4c2c:	bb 0b       	sbc	r27, r27
    4c2e:	80 2d       	mov	r24, r0
    4c30:	bf 01       	movw	r22, r30
    4c32:	ff 27       	eor	r31, r31
    4c34:	93 58       	subi	r25, 0x83	; 131
    4c36:	5f 4f       	sbci	r21, 0xFF	; 255
    4c38:	3a f0       	brmi	.+14     	; 0x4c48 <__divsf3_pse+0x70>
    4c3a:	9e 3f       	cpi	r25, 0xFE	; 254
    4c3c:	51 05       	cpc	r21, r1
    4c3e:	78 f0       	brcs	.+30     	; 0x4c5e <__divsf3_pse+0x86>
    4c40:	0c 94 1a 27 	jmp	0x4e34	; 0x4e34 <__fp_inf>
    4c44:	0c 94 75 27 	jmp	0x4eea	; 0x4eea <__fp_szero>
    4c48:	5f 3f       	cpi	r21, 0xFF	; 255
    4c4a:	e4 f3       	brlt	.-8      	; 0x4c44 <__divsf3_pse+0x6c>
    4c4c:	98 3e       	cpi	r25, 0xE8	; 232
    4c4e:	d4 f3       	brlt	.-12     	; 0x4c44 <__divsf3_pse+0x6c>
    4c50:	86 95       	lsr	r24
    4c52:	77 95       	ror	r23
    4c54:	67 95       	ror	r22
    4c56:	b7 95       	ror	r27
    4c58:	f7 95       	ror	r31
    4c5a:	9f 5f       	subi	r25, 0xFF	; 255
    4c5c:	c9 f7       	brne	.-14     	; 0x4c50 <__divsf3_pse+0x78>
    4c5e:	88 0f       	add	r24, r24
    4c60:	91 1d       	adc	r25, r1
    4c62:	96 95       	lsr	r25
    4c64:	87 95       	ror	r24
    4c66:	97 f9       	bld	r25, 7
    4c68:	08 95       	ret
    4c6a:	e1 e0       	ldi	r30, 0x01	; 1
    4c6c:	66 0f       	add	r22, r22
    4c6e:	77 1f       	adc	r23, r23
    4c70:	88 1f       	adc	r24, r24
    4c72:	bb 1f       	adc	r27, r27
    4c74:	62 17       	cp	r22, r18
    4c76:	73 07       	cpc	r23, r19
    4c78:	84 07       	cpc	r24, r20
    4c7a:	ba 07       	cpc	r27, r26
    4c7c:	20 f0       	brcs	.+8      	; 0x4c86 <__divsf3_pse+0xae>
    4c7e:	62 1b       	sub	r22, r18
    4c80:	73 0b       	sbc	r23, r19
    4c82:	84 0b       	sbc	r24, r20
    4c84:	ba 0b       	sbc	r27, r26
    4c86:	ee 1f       	adc	r30, r30
    4c88:	88 f7       	brcc	.-30     	; 0x4c6c <__divsf3_pse+0x94>
    4c8a:	e0 95       	com	r30
    4c8c:	08 95       	ret

00004c8e <__fixsfdi>:
    4c8e:	be e3       	ldi	r27, 0x3E	; 62
    4c90:	04 d0       	rcall	.+8      	; 0x4c9a <__fixunssfdi+0x2>
    4c92:	08 f4       	brcc	.+2      	; 0x4c96 <__fixsfdi+0x8>
    4c94:	90 e8       	ldi	r25, 0x80	; 128
    4c96:	08 95       	ret

00004c98 <__fixunssfdi>:
    4c98:	bf e3       	ldi	r27, 0x3F	; 63
    4c9a:	22 27       	eor	r18, r18
    4c9c:	33 27       	eor	r19, r19
    4c9e:	a9 01       	movw	r20, r18
    4ca0:	0e 94 5a 27 	call	0x4eb4	; 0x4eb4 <__fp_splitA>
    4ca4:	60 f1       	brcs	.+88     	; 0x4cfe <__fixunssfdi+0x66>
    4ca6:	9f 57       	subi	r25, 0x7F	; 127
    4ca8:	48 f1       	brcs	.+82     	; 0x4cfc <__fixunssfdi+0x64>
    4caa:	b9 17       	cp	r27, r25
    4cac:	40 f1       	brcs	.+80     	; 0x4cfe <__fixunssfdi+0x66>
    4cae:	bf e3       	ldi	r27, 0x3F	; 63
    4cb0:	b9 1b       	sub	r27, r25
    4cb2:	99 27       	eor	r25, r25
    4cb4:	b8 50       	subi	r27, 0x08	; 8
    4cb6:	3a f4       	brpl	.+14     	; 0x4cc6 <__fixunssfdi+0x2e>
    4cb8:	66 0f       	add	r22, r22
    4cba:	77 1f       	adc	r23, r23
    4cbc:	88 1f       	adc	r24, r24
    4cbe:	99 1f       	adc	r25, r25
    4cc0:	b3 95       	inc	r27
    4cc2:	d2 f3       	brmi	.-12     	; 0x4cb8 <__fixunssfdi+0x20>
    4cc4:	16 c0       	rjmp	.+44     	; 0x4cf2 <__fixunssfdi+0x5a>
    4cc6:	b8 50       	subi	r27, 0x08	; 8
    4cc8:	4a f0       	brmi	.+18     	; 0x4cdc <__fixunssfdi+0x44>
    4cca:	23 2f       	mov	r18, r19
    4ccc:	34 2f       	mov	r19, r20
    4cce:	45 2f       	mov	r20, r21
    4cd0:	56 2f       	mov	r21, r22
    4cd2:	67 2f       	mov	r22, r23
    4cd4:	78 2f       	mov	r23, r24
    4cd6:	88 27       	eor	r24, r24
    4cd8:	b8 50       	subi	r27, 0x08	; 8
    4cda:	ba f7       	brpl	.-18     	; 0x4cca <__fixunssfdi+0x32>
    4cdc:	b8 5f       	subi	r27, 0xF8	; 248
    4cde:	49 f0       	breq	.+18     	; 0x4cf2 <__fixunssfdi+0x5a>
    4ce0:	86 95       	lsr	r24
    4ce2:	77 95       	ror	r23
    4ce4:	67 95       	ror	r22
    4ce6:	57 95       	ror	r21
    4ce8:	47 95       	ror	r20
    4cea:	37 95       	ror	r19
    4cec:	27 95       	ror	r18
    4cee:	ba 95       	dec	r27
    4cf0:	b9 f7       	brne	.-18     	; 0x4ce0 <__fixunssfdi+0x48>
    4cf2:	16 f4       	brtc	.+4      	; 0x4cf8 <__fixunssfdi+0x60>
    4cf4:	0e 94 23 27 	call	0x4e46	; 0x4e46 <__fp_negdi>
    4cf8:	88 94       	clc
    4cfa:	08 95       	ret
    4cfc:	88 94       	clc
    4cfe:	60 e0       	ldi	r22, 0x00	; 0
    4d00:	70 e0       	ldi	r23, 0x00	; 0
    4d02:	cb 01       	movw	r24, r22
    4d04:	08 95       	ret

00004d06 <__fixsfsi>:
    4d06:	0e 94 8a 26 	call	0x4d14	; 0x4d14 <__fixunssfsi>
    4d0a:	68 94       	set
    4d0c:	b1 11       	cpse	r27, r1
    4d0e:	0c 94 75 27 	jmp	0x4eea	; 0x4eea <__fp_szero>
    4d12:	08 95       	ret

00004d14 <__fixunssfsi>:
    4d14:	0e 94 5a 27 	call	0x4eb4	; 0x4eb4 <__fp_splitA>
    4d18:	88 f0       	brcs	.+34     	; 0x4d3c <__fixunssfsi+0x28>
    4d1a:	9f 57       	subi	r25, 0x7F	; 127
    4d1c:	98 f0       	brcs	.+38     	; 0x4d44 <__fixunssfsi+0x30>
    4d1e:	b9 2f       	mov	r27, r25
    4d20:	99 27       	eor	r25, r25
    4d22:	b7 51       	subi	r27, 0x17	; 23
    4d24:	b0 f0       	brcs	.+44     	; 0x4d52 <__fixunssfsi+0x3e>
    4d26:	e1 f0       	breq	.+56     	; 0x4d60 <__fixunssfsi+0x4c>
    4d28:	66 0f       	add	r22, r22
    4d2a:	77 1f       	adc	r23, r23
    4d2c:	88 1f       	adc	r24, r24
    4d2e:	99 1f       	adc	r25, r25
    4d30:	1a f0       	brmi	.+6      	; 0x4d38 <__fixunssfsi+0x24>
    4d32:	ba 95       	dec	r27
    4d34:	c9 f7       	brne	.-14     	; 0x4d28 <__fixunssfsi+0x14>
    4d36:	14 c0       	rjmp	.+40     	; 0x4d60 <__fixunssfsi+0x4c>
    4d38:	b1 30       	cpi	r27, 0x01	; 1
    4d3a:	91 f0       	breq	.+36     	; 0x4d60 <__fixunssfsi+0x4c>
    4d3c:	0e 94 74 27 	call	0x4ee8	; 0x4ee8 <__fp_zero>
    4d40:	b1 e0       	ldi	r27, 0x01	; 1
    4d42:	08 95       	ret
    4d44:	0c 94 74 27 	jmp	0x4ee8	; 0x4ee8 <__fp_zero>
    4d48:	67 2f       	mov	r22, r23
    4d4a:	78 2f       	mov	r23, r24
    4d4c:	88 27       	eor	r24, r24
    4d4e:	b8 5f       	subi	r27, 0xF8	; 248
    4d50:	39 f0       	breq	.+14     	; 0x4d60 <__fixunssfsi+0x4c>
    4d52:	b9 3f       	cpi	r27, 0xF9	; 249
    4d54:	cc f3       	brlt	.-14     	; 0x4d48 <__fixunssfsi+0x34>
    4d56:	86 95       	lsr	r24
    4d58:	77 95       	ror	r23
    4d5a:	67 95       	ror	r22
    4d5c:	b3 95       	inc	r27
    4d5e:	d9 f7       	brne	.-10     	; 0x4d56 <__fixunssfsi+0x42>
    4d60:	3e f4       	brtc	.+14     	; 0x4d70 <__fixunssfsi+0x5c>
    4d62:	90 95       	com	r25
    4d64:	80 95       	com	r24
    4d66:	70 95       	com	r23
    4d68:	61 95       	neg	r22
    4d6a:	7f 4f       	sbci	r23, 0xFF	; 255
    4d6c:	8f 4f       	sbci	r24, 0xFF	; 255
    4d6e:	9f 4f       	sbci	r25, 0xFF	; 255
    4d70:	08 95       	ret

00004d72 <__floatunsisf>:
    4d72:	e8 94       	clt
    4d74:	09 c0       	rjmp	.+18     	; 0x4d88 <__floatsisf+0x12>

00004d76 <__floatsisf>:
    4d76:	97 fb       	bst	r25, 7
    4d78:	3e f4       	brtc	.+14     	; 0x4d88 <__floatsisf+0x12>
    4d7a:	90 95       	com	r25
    4d7c:	80 95       	com	r24
    4d7e:	70 95       	com	r23
    4d80:	61 95       	neg	r22
    4d82:	7f 4f       	sbci	r23, 0xFF	; 255
    4d84:	8f 4f       	sbci	r24, 0xFF	; 255
    4d86:	9f 4f       	sbci	r25, 0xFF	; 255
    4d88:	99 23       	and	r25, r25
    4d8a:	a9 f0       	breq	.+42     	; 0x4db6 <__floatsisf+0x40>
    4d8c:	f9 2f       	mov	r31, r25
    4d8e:	96 e9       	ldi	r25, 0x96	; 150
    4d90:	bb 27       	eor	r27, r27
    4d92:	93 95       	inc	r25
    4d94:	f6 95       	lsr	r31
    4d96:	87 95       	ror	r24
    4d98:	77 95       	ror	r23
    4d9a:	67 95       	ror	r22
    4d9c:	b7 95       	ror	r27
    4d9e:	f1 11       	cpse	r31, r1
    4da0:	f8 cf       	rjmp	.-16     	; 0x4d92 <__floatsisf+0x1c>
    4da2:	fa f4       	brpl	.+62     	; 0x4de2 <__floatsisf+0x6c>
    4da4:	bb 0f       	add	r27, r27
    4da6:	11 f4       	brne	.+4      	; 0x4dac <__floatsisf+0x36>
    4da8:	60 ff       	sbrs	r22, 0
    4daa:	1b c0       	rjmp	.+54     	; 0x4de2 <__floatsisf+0x6c>
    4dac:	6f 5f       	subi	r22, 0xFF	; 255
    4dae:	7f 4f       	sbci	r23, 0xFF	; 255
    4db0:	8f 4f       	sbci	r24, 0xFF	; 255
    4db2:	9f 4f       	sbci	r25, 0xFF	; 255
    4db4:	16 c0       	rjmp	.+44     	; 0x4de2 <__floatsisf+0x6c>
    4db6:	88 23       	and	r24, r24
    4db8:	11 f0       	breq	.+4      	; 0x4dbe <__floatsisf+0x48>
    4dba:	96 e9       	ldi	r25, 0x96	; 150
    4dbc:	11 c0       	rjmp	.+34     	; 0x4de0 <__floatsisf+0x6a>
    4dbe:	77 23       	and	r23, r23
    4dc0:	21 f0       	breq	.+8      	; 0x4dca <__floatsisf+0x54>
    4dc2:	9e e8       	ldi	r25, 0x8E	; 142
    4dc4:	87 2f       	mov	r24, r23
    4dc6:	76 2f       	mov	r23, r22
    4dc8:	05 c0       	rjmp	.+10     	; 0x4dd4 <__floatsisf+0x5e>
    4dca:	66 23       	and	r22, r22
    4dcc:	71 f0       	breq	.+28     	; 0x4dea <__floatsisf+0x74>
    4dce:	96 e8       	ldi	r25, 0x86	; 134
    4dd0:	86 2f       	mov	r24, r22
    4dd2:	70 e0       	ldi	r23, 0x00	; 0
    4dd4:	60 e0       	ldi	r22, 0x00	; 0
    4dd6:	2a f0       	brmi	.+10     	; 0x4de2 <__floatsisf+0x6c>
    4dd8:	9a 95       	dec	r25
    4dda:	66 0f       	add	r22, r22
    4ddc:	77 1f       	adc	r23, r23
    4dde:	88 1f       	adc	r24, r24
    4de0:	da f7       	brpl	.-10     	; 0x4dd8 <__floatsisf+0x62>
    4de2:	88 0f       	add	r24, r24
    4de4:	96 95       	lsr	r25
    4de6:	87 95       	ror	r24
    4de8:	97 f9       	bld	r25, 7
    4dea:	08 95       	ret

00004dec <__fp_cmp>:
    4dec:	99 0f       	add	r25, r25
    4dee:	00 08       	sbc	r0, r0
    4df0:	55 0f       	add	r21, r21
    4df2:	aa 0b       	sbc	r26, r26
    4df4:	e0 e8       	ldi	r30, 0x80	; 128
    4df6:	fe ef       	ldi	r31, 0xFE	; 254
    4df8:	16 16       	cp	r1, r22
    4dfa:	17 06       	cpc	r1, r23
    4dfc:	e8 07       	cpc	r30, r24
    4dfe:	f9 07       	cpc	r31, r25
    4e00:	c0 f0       	brcs	.+48     	; 0x4e32 <__fp_cmp+0x46>
    4e02:	12 16       	cp	r1, r18
    4e04:	13 06       	cpc	r1, r19
    4e06:	e4 07       	cpc	r30, r20
    4e08:	f5 07       	cpc	r31, r21
    4e0a:	98 f0       	brcs	.+38     	; 0x4e32 <__fp_cmp+0x46>
    4e0c:	62 1b       	sub	r22, r18
    4e0e:	73 0b       	sbc	r23, r19
    4e10:	84 0b       	sbc	r24, r20
    4e12:	95 0b       	sbc	r25, r21
    4e14:	39 f4       	brne	.+14     	; 0x4e24 <__fp_cmp+0x38>
    4e16:	0a 26       	eor	r0, r26
    4e18:	61 f0       	breq	.+24     	; 0x4e32 <__fp_cmp+0x46>
    4e1a:	23 2b       	or	r18, r19
    4e1c:	24 2b       	or	r18, r20
    4e1e:	25 2b       	or	r18, r21
    4e20:	21 f4       	brne	.+8      	; 0x4e2a <__fp_cmp+0x3e>
    4e22:	08 95       	ret
    4e24:	0a 26       	eor	r0, r26
    4e26:	09 f4       	brne	.+2      	; 0x4e2a <__fp_cmp+0x3e>
    4e28:	a1 40       	sbci	r26, 0x01	; 1
    4e2a:	a6 95       	lsr	r26
    4e2c:	8f ef       	ldi	r24, 0xFF	; 255
    4e2e:	81 1d       	adc	r24, r1
    4e30:	81 1d       	adc	r24, r1
    4e32:	08 95       	ret

00004e34 <__fp_inf>:
    4e34:	97 f9       	bld	r25, 7
    4e36:	9f 67       	ori	r25, 0x7F	; 127
    4e38:	80 e8       	ldi	r24, 0x80	; 128
    4e3a:	70 e0       	ldi	r23, 0x00	; 0
    4e3c:	60 e0       	ldi	r22, 0x00	; 0
    4e3e:	08 95       	ret

00004e40 <__fp_nan>:
    4e40:	9f ef       	ldi	r25, 0xFF	; 255
    4e42:	80 ec       	ldi	r24, 0xC0	; 192
    4e44:	08 95       	ret

00004e46 <__fp_negdi>:
    4e46:	90 95       	com	r25
    4e48:	80 95       	com	r24
    4e4a:	70 95       	com	r23
    4e4c:	60 95       	com	r22
    4e4e:	50 95       	com	r21
    4e50:	40 95       	com	r20
    4e52:	30 95       	com	r19
    4e54:	21 95       	neg	r18
    4e56:	3f 4f       	sbci	r19, 0xFF	; 255
    4e58:	4f 4f       	sbci	r20, 0xFF	; 255
    4e5a:	5f 4f       	sbci	r21, 0xFF	; 255
    4e5c:	6f 4f       	sbci	r22, 0xFF	; 255
    4e5e:	7f 4f       	sbci	r23, 0xFF	; 255
    4e60:	8f 4f       	sbci	r24, 0xFF	; 255
    4e62:	9f 4f       	sbci	r25, 0xFF	; 255
    4e64:	08 95       	ret

00004e66 <__fp_pscA>:
    4e66:	00 24       	eor	r0, r0
    4e68:	0a 94       	dec	r0
    4e6a:	16 16       	cp	r1, r22
    4e6c:	17 06       	cpc	r1, r23
    4e6e:	18 06       	cpc	r1, r24
    4e70:	09 06       	cpc	r0, r25
    4e72:	08 95       	ret

00004e74 <__fp_pscB>:
    4e74:	00 24       	eor	r0, r0
    4e76:	0a 94       	dec	r0
    4e78:	12 16       	cp	r1, r18
    4e7a:	13 06       	cpc	r1, r19
    4e7c:	14 06       	cpc	r1, r20
    4e7e:	05 06       	cpc	r0, r21
    4e80:	08 95       	ret

00004e82 <__fp_round>:
    4e82:	09 2e       	mov	r0, r25
    4e84:	03 94       	inc	r0
    4e86:	00 0c       	add	r0, r0
    4e88:	11 f4       	brne	.+4      	; 0x4e8e <__fp_round+0xc>
    4e8a:	88 23       	and	r24, r24
    4e8c:	52 f0       	brmi	.+20     	; 0x4ea2 <__fp_round+0x20>
    4e8e:	bb 0f       	add	r27, r27
    4e90:	40 f4       	brcc	.+16     	; 0x4ea2 <__fp_round+0x20>
    4e92:	bf 2b       	or	r27, r31
    4e94:	11 f4       	brne	.+4      	; 0x4e9a <__fp_round+0x18>
    4e96:	60 ff       	sbrs	r22, 0
    4e98:	04 c0       	rjmp	.+8      	; 0x4ea2 <__fp_round+0x20>
    4e9a:	6f 5f       	subi	r22, 0xFF	; 255
    4e9c:	7f 4f       	sbci	r23, 0xFF	; 255
    4e9e:	8f 4f       	sbci	r24, 0xFF	; 255
    4ea0:	9f 4f       	sbci	r25, 0xFF	; 255
    4ea2:	08 95       	ret

00004ea4 <__fp_split3>:
    4ea4:	57 fd       	sbrc	r21, 7
    4ea6:	90 58       	subi	r25, 0x80	; 128
    4ea8:	44 0f       	add	r20, r20
    4eaa:	55 1f       	adc	r21, r21
    4eac:	59 f0       	breq	.+22     	; 0x4ec4 <__fp_splitA+0x10>
    4eae:	5f 3f       	cpi	r21, 0xFF	; 255
    4eb0:	71 f0       	breq	.+28     	; 0x4ece <__fp_splitA+0x1a>
    4eb2:	47 95       	ror	r20

00004eb4 <__fp_splitA>:
    4eb4:	88 0f       	add	r24, r24
    4eb6:	97 fb       	bst	r25, 7
    4eb8:	99 1f       	adc	r25, r25
    4eba:	61 f0       	breq	.+24     	; 0x4ed4 <__fp_splitA+0x20>
    4ebc:	9f 3f       	cpi	r25, 0xFF	; 255
    4ebe:	79 f0       	breq	.+30     	; 0x4ede <__fp_splitA+0x2a>
    4ec0:	87 95       	ror	r24
    4ec2:	08 95       	ret
    4ec4:	12 16       	cp	r1, r18
    4ec6:	13 06       	cpc	r1, r19
    4ec8:	14 06       	cpc	r1, r20
    4eca:	55 1f       	adc	r21, r21
    4ecc:	f2 cf       	rjmp	.-28     	; 0x4eb2 <__fp_split3+0xe>
    4ece:	46 95       	lsr	r20
    4ed0:	f1 df       	rcall	.-30     	; 0x4eb4 <__fp_splitA>
    4ed2:	08 c0       	rjmp	.+16     	; 0x4ee4 <__fp_splitA+0x30>
    4ed4:	16 16       	cp	r1, r22
    4ed6:	17 06       	cpc	r1, r23
    4ed8:	18 06       	cpc	r1, r24
    4eda:	99 1f       	adc	r25, r25
    4edc:	f1 cf       	rjmp	.-30     	; 0x4ec0 <__fp_splitA+0xc>
    4ede:	86 95       	lsr	r24
    4ee0:	71 05       	cpc	r23, r1
    4ee2:	61 05       	cpc	r22, r1
    4ee4:	08 94       	sec
    4ee6:	08 95       	ret

00004ee8 <__fp_zero>:
    4ee8:	e8 94       	clt

00004eea <__fp_szero>:
    4eea:	bb 27       	eor	r27, r27
    4eec:	66 27       	eor	r22, r22
    4eee:	77 27       	eor	r23, r23
    4ef0:	cb 01       	movw	r24, r22
    4ef2:	97 f9       	bld	r25, 7
    4ef4:	08 95       	ret

00004ef6 <__gesf2>:
    4ef6:	0e 94 f6 26 	call	0x4dec	; 0x4dec <__fp_cmp>
    4efa:	08 f4       	brcc	.+2      	; 0x4efe <__gesf2+0x8>
    4efc:	8f ef       	ldi	r24, 0xFF	; 255
    4efe:	08 95       	ret
    4f00:	16 f0       	brts	.+4      	; 0x4f06 <__gesf2+0x10>
    4f02:	0c 94 3d 28 	jmp	0x507a	; 0x507a <__fp_mpack>
    4f06:	0c 94 20 27 	jmp	0x4e40	; 0x4e40 <__fp_nan>
    4f0a:	68 94       	set
    4f0c:	0c 94 1a 27 	jmp	0x4e34	; 0x4e34 <__fp_inf>

00004f10 <log>:
    4f10:	0e 94 5a 27 	call	0x4eb4	; 0x4eb4 <__fp_splitA>
    4f14:	a8 f3       	brcs	.-22     	; 0x4f00 <__gesf2+0xa>
    4f16:	99 23       	and	r25, r25
    4f18:	c1 f3       	breq	.-16     	; 0x4f0a <__gesf2+0x14>
    4f1a:	ae f3       	brts	.-22     	; 0x4f06 <__gesf2+0x10>
    4f1c:	df 93       	push	r29
    4f1e:	cf 93       	push	r28
    4f20:	1f 93       	push	r17
    4f22:	0f 93       	push	r16
    4f24:	ff 92       	push	r15
    4f26:	c9 2f       	mov	r28, r25
    4f28:	dd 27       	eor	r29, r29
    4f2a:	88 23       	and	r24, r24
    4f2c:	2a f0       	brmi	.+10     	; 0x4f38 <log+0x28>
    4f2e:	21 97       	sbiw	r28, 0x01	; 1
    4f30:	66 0f       	add	r22, r22
    4f32:	77 1f       	adc	r23, r23
    4f34:	88 1f       	adc	r24, r24
    4f36:	da f7       	brpl	.-10     	; 0x4f2e <log+0x1e>
    4f38:	20 e0       	ldi	r18, 0x00	; 0
    4f3a:	30 e0       	ldi	r19, 0x00	; 0
    4f3c:	40 e8       	ldi	r20, 0x80	; 128
    4f3e:	5f eb       	ldi	r21, 0xBF	; 191
    4f40:	9f e3       	ldi	r25, 0x3F	; 63
    4f42:	88 39       	cpi	r24, 0x98	; 152
    4f44:	20 f0       	brcs	.+8      	; 0x4f4e <log+0x3e>
    4f46:	80 3e       	cpi	r24, 0xE0	; 224
    4f48:	38 f0       	brcs	.+14     	; 0x4f58 <log+0x48>
    4f4a:	21 96       	adiw	r28, 0x01	; 1
    4f4c:	8f 77       	andi	r24, 0x7F	; 127
    4f4e:	0e 94 64 25 	call	0x4ac8	; 0x4ac8 <__addsf3>
    4f52:	e0 e9       	ldi	r30, 0x90	; 144
    4f54:	f0 e0       	ldi	r31, 0x00	; 0
    4f56:	04 c0       	rjmp	.+8      	; 0x4f60 <log+0x50>
    4f58:	0e 94 64 25 	call	0x4ac8	; 0x4ac8 <__addsf3>
    4f5c:	ed eb       	ldi	r30, 0xBD	; 189
    4f5e:	f0 e0       	ldi	r31, 0x00	; 0
    4f60:	0e 94 4b 28 	call	0x5096	; 0x5096 <__fp_powser>
    4f64:	8b 01       	movw	r16, r22
    4f66:	be 01       	movw	r22, r28
    4f68:	ec 01       	movw	r28, r24
    4f6a:	fb 2e       	mov	r15, r27
    4f6c:	6f 57       	subi	r22, 0x7F	; 127
    4f6e:	71 09       	sbc	r23, r1
    4f70:	75 95       	asr	r23
    4f72:	77 1f       	adc	r23, r23
    4f74:	88 0b       	sbc	r24, r24
    4f76:	99 0b       	sbc	r25, r25
    4f78:	0e 94 bb 26 	call	0x4d76	; 0x4d76 <__floatsisf>
    4f7c:	28 e1       	ldi	r18, 0x18	; 24
    4f7e:	32 e7       	ldi	r19, 0x72	; 114
    4f80:	41 e3       	ldi	r20, 0x31	; 49
    4f82:	5f e3       	ldi	r21, 0x3F	; 63
    4f84:	0e 94 e3 27 	call	0x4fc6	; 0x4fc6 <__mulsf3x>
    4f88:	af 2d       	mov	r26, r15
    4f8a:	98 01       	movw	r18, r16
    4f8c:	ae 01       	movw	r20, r28
    4f8e:	ff 90       	pop	r15
    4f90:	0f 91       	pop	r16
    4f92:	1f 91       	pop	r17
    4f94:	cf 91       	pop	r28
    4f96:	df 91       	pop	r29
    4f98:	0e 94 7b 25 	call	0x4af6	; 0x4af6 <__addsf3x>
    4f9c:	0c 94 41 27 	jmp	0x4e82	; 0x4e82 <__fp_round>

00004fa0 <__mulsf3>:
    4fa0:	0e 94 e3 27 	call	0x4fc6	; 0x4fc6 <__mulsf3x>
    4fa4:	0c 94 41 27 	jmp	0x4e82	; 0x4e82 <__fp_round>
    4fa8:	0e 94 33 27 	call	0x4e66	; 0x4e66 <__fp_pscA>
    4fac:	38 f0       	brcs	.+14     	; 0x4fbc <__mulsf3+0x1c>
    4fae:	0e 94 3a 27 	call	0x4e74	; 0x4e74 <__fp_pscB>
    4fb2:	20 f0       	brcs	.+8      	; 0x4fbc <__mulsf3+0x1c>
    4fb4:	95 23       	and	r25, r21
    4fb6:	11 f0       	breq	.+4      	; 0x4fbc <__mulsf3+0x1c>
    4fb8:	0c 94 1a 27 	jmp	0x4e34	; 0x4e34 <__fp_inf>
    4fbc:	0c 94 20 27 	jmp	0x4e40	; 0x4e40 <__fp_nan>
    4fc0:	11 24       	eor	r1, r1
    4fc2:	0c 94 75 27 	jmp	0x4eea	; 0x4eea <__fp_szero>

00004fc6 <__mulsf3x>:
    4fc6:	0e 94 52 27 	call	0x4ea4	; 0x4ea4 <__fp_split3>
    4fca:	70 f3       	brcs	.-36     	; 0x4fa8 <__mulsf3+0x8>

00004fcc <__mulsf3_pse>:
    4fcc:	95 9f       	mul	r25, r21
    4fce:	c1 f3       	breq	.-16     	; 0x4fc0 <__mulsf3+0x20>
    4fd0:	95 0f       	add	r25, r21
    4fd2:	50 e0       	ldi	r21, 0x00	; 0
    4fd4:	55 1f       	adc	r21, r21
    4fd6:	62 9f       	mul	r22, r18
    4fd8:	f0 01       	movw	r30, r0
    4fda:	72 9f       	mul	r23, r18
    4fdc:	bb 27       	eor	r27, r27
    4fde:	f0 0d       	add	r31, r0
    4fe0:	b1 1d       	adc	r27, r1
    4fe2:	63 9f       	mul	r22, r19
    4fe4:	aa 27       	eor	r26, r26
    4fe6:	f0 0d       	add	r31, r0
    4fe8:	b1 1d       	adc	r27, r1
    4fea:	aa 1f       	adc	r26, r26
    4fec:	64 9f       	mul	r22, r20
    4fee:	66 27       	eor	r22, r22
    4ff0:	b0 0d       	add	r27, r0
    4ff2:	a1 1d       	adc	r26, r1
    4ff4:	66 1f       	adc	r22, r22
    4ff6:	82 9f       	mul	r24, r18
    4ff8:	22 27       	eor	r18, r18
    4ffa:	b0 0d       	add	r27, r0
    4ffc:	a1 1d       	adc	r26, r1
    4ffe:	62 1f       	adc	r22, r18
    5000:	73 9f       	mul	r23, r19
    5002:	b0 0d       	add	r27, r0
    5004:	a1 1d       	adc	r26, r1
    5006:	62 1f       	adc	r22, r18
    5008:	83 9f       	mul	r24, r19
    500a:	a0 0d       	add	r26, r0
    500c:	61 1d       	adc	r22, r1
    500e:	22 1f       	adc	r18, r18
    5010:	74 9f       	mul	r23, r20
    5012:	33 27       	eor	r19, r19
    5014:	a0 0d       	add	r26, r0
    5016:	61 1d       	adc	r22, r1
    5018:	23 1f       	adc	r18, r19
    501a:	84 9f       	mul	r24, r20
    501c:	60 0d       	add	r22, r0
    501e:	21 1d       	adc	r18, r1
    5020:	82 2f       	mov	r24, r18
    5022:	76 2f       	mov	r23, r22
    5024:	6a 2f       	mov	r22, r26
    5026:	11 24       	eor	r1, r1
    5028:	9f 57       	subi	r25, 0x7F	; 127
    502a:	50 40       	sbci	r21, 0x00	; 0
    502c:	9a f0       	brmi	.+38     	; 0x5054 <__mulsf3_pse+0x88>
    502e:	f1 f0       	breq	.+60     	; 0x506c <__mulsf3_pse+0xa0>
    5030:	88 23       	and	r24, r24
    5032:	4a f0       	brmi	.+18     	; 0x5046 <__mulsf3_pse+0x7a>
    5034:	ee 0f       	add	r30, r30
    5036:	ff 1f       	adc	r31, r31
    5038:	bb 1f       	adc	r27, r27
    503a:	66 1f       	adc	r22, r22
    503c:	77 1f       	adc	r23, r23
    503e:	88 1f       	adc	r24, r24
    5040:	91 50       	subi	r25, 0x01	; 1
    5042:	50 40       	sbci	r21, 0x00	; 0
    5044:	a9 f7       	brne	.-22     	; 0x5030 <__mulsf3_pse+0x64>
    5046:	9e 3f       	cpi	r25, 0xFE	; 254
    5048:	51 05       	cpc	r21, r1
    504a:	80 f0       	brcs	.+32     	; 0x506c <__mulsf3_pse+0xa0>
    504c:	0c 94 1a 27 	jmp	0x4e34	; 0x4e34 <__fp_inf>
    5050:	0c 94 75 27 	jmp	0x4eea	; 0x4eea <__fp_szero>
    5054:	5f 3f       	cpi	r21, 0xFF	; 255
    5056:	e4 f3       	brlt	.-8      	; 0x5050 <__mulsf3_pse+0x84>
    5058:	98 3e       	cpi	r25, 0xE8	; 232
    505a:	d4 f3       	brlt	.-12     	; 0x5050 <__mulsf3_pse+0x84>
    505c:	86 95       	lsr	r24
    505e:	77 95       	ror	r23
    5060:	67 95       	ror	r22
    5062:	b7 95       	ror	r27
    5064:	f7 95       	ror	r31
    5066:	e7 95       	ror	r30
    5068:	9f 5f       	subi	r25, 0xFF	; 255
    506a:	c1 f7       	brne	.-16     	; 0x505c <__mulsf3_pse+0x90>
    506c:	fe 2b       	or	r31, r30
    506e:	88 0f       	add	r24, r24
    5070:	91 1d       	adc	r25, r1
    5072:	96 95       	lsr	r25
    5074:	87 95       	ror	r24
    5076:	97 f9       	bld	r25, 7
    5078:	08 95       	ret

0000507a <__fp_mpack>:
    507a:	9f 3f       	cpi	r25, 0xFF	; 255
    507c:	31 f0       	breq	.+12     	; 0x508a <__fp_mpack_finite+0xc>

0000507e <__fp_mpack_finite>:
    507e:	91 50       	subi	r25, 0x01	; 1
    5080:	20 f4       	brcc	.+8      	; 0x508a <__fp_mpack_finite+0xc>
    5082:	87 95       	ror	r24
    5084:	77 95       	ror	r23
    5086:	67 95       	ror	r22
    5088:	b7 95       	ror	r27
    508a:	88 0f       	add	r24, r24
    508c:	91 1d       	adc	r25, r1
    508e:	96 95       	lsr	r25
    5090:	87 95       	ror	r24
    5092:	97 f9       	bld	r25, 7
    5094:	08 95       	ret

00005096 <__fp_powser>:
    5096:	df 93       	push	r29
    5098:	cf 93       	push	r28
    509a:	1f 93       	push	r17
    509c:	0f 93       	push	r16
    509e:	ff 92       	push	r15
    50a0:	ef 92       	push	r14
    50a2:	df 92       	push	r13
    50a4:	7b 01       	movw	r14, r22
    50a6:	8c 01       	movw	r16, r24
    50a8:	68 94       	set
    50aa:	06 c0       	rjmp	.+12     	; 0x50b8 <__fp_powser+0x22>
    50ac:	da 2e       	mov	r13, r26
    50ae:	ef 01       	movw	r28, r30
    50b0:	0e 94 e3 27 	call	0x4fc6	; 0x4fc6 <__mulsf3x>
    50b4:	fe 01       	movw	r30, r28
    50b6:	e8 94       	clt
    50b8:	a5 91       	lpm	r26, Z+
    50ba:	25 91       	lpm	r18, Z+
    50bc:	35 91       	lpm	r19, Z+
    50be:	45 91       	lpm	r20, Z+
    50c0:	55 91       	lpm	r21, Z+
    50c2:	a6 f3       	brts	.-24     	; 0x50ac <__fp_powser+0x16>
    50c4:	ef 01       	movw	r28, r30
    50c6:	0e 94 7b 25 	call	0x4af6	; 0x4af6 <__addsf3x>
    50ca:	fe 01       	movw	r30, r28
    50cc:	97 01       	movw	r18, r14
    50ce:	a8 01       	movw	r20, r16
    50d0:	da 94       	dec	r13
    50d2:	69 f7       	brne	.-38     	; 0x50ae <__fp_powser+0x18>
    50d4:	df 90       	pop	r13
    50d6:	ef 90       	pop	r14
    50d8:	ff 90       	pop	r15
    50da:	0f 91       	pop	r16
    50dc:	1f 91       	pop	r17
    50de:	cf 91       	pop	r28
    50e0:	df 91       	pop	r29
    50e2:	08 95       	ret

000050e4 <__divmodhi4>:
    50e4:	97 fb       	bst	r25, 7
    50e6:	07 2e       	mov	r0, r23
    50e8:	16 f4       	brtc	.+4      	; 0x50ee <__divmodhi4+0xa>
    50ea:	00 94       	com	r0
    50ec:	07 d0       	rcall	.+14     	; 0x50fc <__divmodhi4_neg1>
    50ee:	77 fd       	sbrc	r23, 7
    50f0:	09 d0       	rcall	.+18     	; 0x5104 <__divmodhi4_neg2>
    50f2:	0e 94 ef 28 	call	0x51de	; 0x51de <__udivmodhi4>
    50f6:	07 fc       	sbrc	r0, 7
    50f8:	05 d0       	rcall	.+10     	; 0x5104 <__divmodhi4_neg2>
    50fa:	3e f4       	brtc	.+14     	; 0x510a <__divmodhi4_exit>

000050fc <__divmodhi4_neg1>:
    50fc:	90 95       	com	r25
    50fe:	81 95       	neg	r24
    5100:	9f 4f       	sbci	r25, 0xFF	; 255
    5102:	08 95       	ret

00005104 <__divmodhi4_neg2>:
    5104:	70 95       	com	r23
    5106:	61 95       	neg	r22
    5108:	7f 4f       	sbci	r23, 0xFF	; 255

0000510a <__divmodhi4_exit>:
    510a:	08 95       	ret

0000510c <__udivmodsi4>:
    510c:	a1 e2       	ldi	r26, 0x21	; 33
    510e:	1a 2e       	mov	r1, r26
    5110:	aa 1b       	sub	r26, r26
    5112:	bb 1b       	sub	r27, r27
    5114:	fd 01       	movw	r30, r26
    5116:	0d c0       	rjmp	.+26     	; 0x5132 <__udivmodsi4_ep>

00005118 <__udivmodsi4_loop>:
    5118:	aa 1f       	adc	r26, r26
    511a:	bb 1f       	adc	r27, r27
    511c:	ee 1f       	adc	r30, r30
    511e:	ff 1f       	adc	r31, r31
    5120:	a2 17       	cp	r26, r18
    5122:	b3 07       	cpc	r27, r19
    5124:	e4 07       	cpc	r30, r20
    5126:	f5 07       	cpc	r31, r21
    5128:	20 f0       	brcs	.+8      	; 0x5132 <__udivmodsi4_ep>
    512a:	a2 1b       	sub	r26, r18
    512c:	b3 0b       	sbc	r27, r19
    512e:	e4 0b       	sbc	r30, r20
    5130:	f5 0b       	sbc	r31, r21

00005132 <__udivmodsi4_ep>:
    5132:	66 1f       	adc	r22, r22
    5134:	77 1f       	adc	r23, r23
    5136:	88 1f       	adc	r24, r24
    5138:	99 1f       	adc	r25, r25
    513a:	1a 94       	dec	r1
    513c:	69 f7       	brne	.-38     	; 0x5118 <__udivmodsi4_loop>
    513e:	60 95       	com	r22
    5140:	70 95       	com	r23
    5142:	80 95       	com	r24
    5144:	90 95       	com	r25
    5146:	9b 01       	movw	r18, r22
    5148:	ac 01       	movw	r20, r24
    514a:	bd 01       	movw	r22, r26
    514c:	cf 01       	movw	r24, r30
    514e:	08 95       	ret

00005150 <__tablejump2__>:
    5150:	ee 0f       	add	r30, r30
    5152:	ff 1f       	adc	r31, r31
    5154:	05 90       	lpm	r0, Z+
    5156:	f4 91       	lpm	r31, Z
    5158:	e0 2d       	mov	r30, r0
    515a:	09 94       	ijmp

0000515c <__umulhisi3>:
    515c:	a2 9f       	mul	r26, r18
    515e:	b0 01       	movw	r22, r0
    5160:	b3 9f       	mul	r27, r19
    5162:	c0 01       	movw	r24, r0
    5164:	a3 9f       	mul	r26, r19
    5166:	70 0d       	add	r23, r0
    5168:	81 1d       	adc	r24, r1
    516a:	11 24       	eor	r1, r1
    516c:	91 1d       	adc	r25, r1
    516e:	b2 9f       	mul	r27, r18
    5170:	70 0d       	add	r23, r0
    5172:	81 1d       	adc	r24, r1
    5174:	11 24       	eor	r1, r1
    5176:	91 1d       	adc	r25, r1
    5178:	08 95       	ret

0000517a <__muluhisi3>:
    517a:	0e 94 ae 28 	call	0x515c	; 0x515c <__umulhisi3>
    517e:	a5 9f       	mul	r26, r21
    5180:	90 0d       	add	r25, r0
    5182:	b4 9f       	mul	r27, r20
    5184:	90 0d       	add	r25, r0
    5186:	a4 9f       	mul	r26, r20
    5188:	80 0d       	add	r24, r0
    518a:	91 1d       	adc	r25, r1
    518c:	11 24       	eor	r1, r1
    518e:	08 95       	ret

00005190 <__adddi3>:
    5190:	2a 0d       	add	r18, r10
    5192:	3b 1d       	adc	r19, r11
    5194:	4c 1d       	adc	r20, r12
    5196:	5d 1d       	adc	r21, r13
    5198:	6e 1d       	adc	r22, r14
    519a:	7f 1d       	adc	r23, r15
    519c:	80 1f       	adc	r24, r16
    519e:	91 1f       	adc	r25, r17
    51a0:	08 95       	ret

000051a2 <__adddi3_s8>:
    51a2:	00 24       	eor	r0, r0
    51a4:	a7 fd       	sbrc	r26, 7
    51a6:	00 94       	com	r0
    51a8:	2a 0f       	add	r18, r26
    51aa:	30 1d       	adc	r19, r0
    51ac:	40 1d       	adc	r20, r0
    51ae:	50 1d       	adc	r21, r0
    51b0:	60 1d       	adc	r22, r0
    51b2:	70 1d       	adc	r23, r0
    51b4:	80 1d       	adc	r24, r0
    51b6:	90 1d       	adc	r25, r0
    51b8:	08 95       	ret

000051ba <__subdi3>:
    51ba:	2a 19       	sub	r18, r10
    51bc:	3b 09       	sbc	r19, r11
    51be:	4c 09       	sbc	r20, r12
    51c0:	5d 09       	sbc	r21, r13
    51c2:	6e 09       	sbc	r22, r14
    51c4:	7f 09       	sbc	r23, r15
    51c6:	80 0b       	sbc	r24, r16
    51c8:	91 0b       	sbc	r25, r17
    51ca:	08 95       	ret

000051cc <__cmpdi2>:
    51cc:	2a 15       	cp	r18, r10
    51ce:	3b 05       	cpc	r19, r11
    51d0:	4c 05       	cpc	r20, r12
    51d2:	5d 05       	cpc	r21, r13
    51d4:	6e 05       	cpc	r22, r14
    51d6:	7f 05       	cpc	r23, r15
    51d8:	80 07       	cpc	r24, r16
    51da:	91 07       	cpc	r25, r17
    51dc:	08 95       	ret

000051de <__udivmodhi4>:
    51de:	aa 1b       	sub	r26, r26
    51e0:	bb 1b       	sub	r27, r27
    51e2:	51 e1       	ldi	r21, 0x11	; 17
    51e4:	07 c0       	rjmp	.+14     	; 0x51f4 <__udivmodhi4_ep>

000051e6 <__udivmodhi4_loop>:
    51e6:	aa 1f       	adc	r26, r26
    51e8:	bb 1f       	adc	r27, r27
    51ea:	a6 17       	cp	r26, r22
    51ec:	b7 07       	cpc	r27, r23
    51ee:	10 f0       	brcs	.+4      	; 0x51f4 <__udivmodhi4_ep>
    51f0:	a6 1b       	sub	r26, r22
    51f2:	b7 0b       	sbc	r27, r23

000051f4 <__udivmodhi4_ep>:
    51f4:	88 1f       	adc	r24, r24
    51f6:	99 1f       	adc	r25, r25
    51f8:	5a 95       	dec	r21
    51fa:	a9 f7       	brne	.-22     	; 0x51e6 <__udivmodhi4_loop>
    51fc:	80 95       	com	r24
    51fe:	90 95       	com	r25
    5200:	bc 01       	movw	r22, r24
    5202:	cd 01       	movw	r24, r26
    5204:	08 95       	ret

00005206 <abort>:
    5206:	81 e0       	ldi	r24, 0x01	; 1
    5208:	90 e0       	ldi	r25, 0x00	; 0
    520a:	f8 94       	cli
    520c:	0c 94 3a 29 	jmp	0x5274	; 0x5274 <_exit>

00005210 <eeprom_read_block>:
    5210:	dc 01       	movw	r26, r24
    5212:	cb 01       	movw	r24, r22

00005214 <eeprom_read_blraw>:
    5214:	fc 01       	movw	r30, r24
    5216:	f9 99       	sbic	0x1f, 1	; 31
    5218:	fe cf       	rjmp	.-4      	; 0x5216 <eeprom_read_blraw+0x2>
    521a:	06 c0       	rjmp	.+12     	; 0x5228 <eeprom_read_blraw+0x14>
    521c:	f2 bd       	out	0x22, r31	; 34
    521e:	e1 bd       	out	0x21, r30	; 33
    5220:	f8 9a       	sbi	0x1f, 0	; 31
    5222:	31 96       	adiw	r30, 0x01	; 1
    5224:	00 b4       	in	r0, 0x20	; 32
    5226:	0d 92       	st	X+, r0
    5228:	41 50       	subi	r20, 0x01	; 1
    522a:	50 40       	sbci	r21, 0x00	; 0
    522c:	b8 f7       	brcc	.-18     	; 0x521c <eeprom_read_blraw+0x8>
    522e:	08 95       	ret

00005230 <eeprom_update_block>:
    5230:	dc 01       	movw	r26, r24
    5232:	a4 0f       	add	r26, r20
    5234:	b5 1f       	adc	r27, r21
    5236:	41 50       	subi	r20, 0x01	; 1
    5238:	50 40       	sbci	r21, 0x00	; 0
    523a:	48 f0       	brcs	.+18     	; 0x524e <eeprom_update_block+0x1e>
    523c:	cb 01       	movw	r24, r22
    523e:	84 0f       	add	r24, r20
    5240:	95 1f       	adc	r25, r21
    5242:	2e 91       	ld	r18, -X
    5244:	0e 94 29 29 	call	0x5252	; 0x5252 <eeprom_update_r18>
    5248:	41 50       	subi	r20, 0x01	; 1
    524a:	50 40       	sbci	r21, 0x00	; 0
    524c:	d0 f7       	brcc	.-12     	; 0x5242 <eeprom_update_block+0x12>
    524e:	08 95       	ret

00005250 <eeprom_update_byte>:
    5250:	26 2f       	mov	r18, r22

00005252 <eeprom_update_r18>:
    5252:	f9 99       	sbic	0x1f, 1	; 31
    5254:	fe cf       	rjmp	.-4      	; 0x5252 <eeprom_update_r18>
    5256:	92 bd       	out	0x22, r25	; 34
    5258:	81 bd       	out	0x21, r24	; 33
    525a:	f8 9a       	sbi	0x1f, 0	; 31
    525c:	01 97       	sbiw	r24, 0x01	; 1
    525e:	00 b4       	in	r0, 0x20	; 32
    5260:	02 16       	cp	r0, r18
    5262:	39 f0       	breq	.+14     	; 0x5272 <eeprom_update_r18+0x20>
    5264:	1f ba       	out	0x1f, r1	; 31
    5266:	20 bd       	out	0x20, r18	; 32
    5268:	0f b6       	in	r0, 0x3f	; 63
    526a:	f8 94       	cli
    526c:	fa 9a       	sbi	0x1f, 2	; 31
    526e:	f9 9a       	sbi	0x1f, 1	; 31
    5270:	0f be       	out	0x3f, r0	; 63
    5272:	08 95       	ret

00005274 <_exit>:
    5274:	f8 94       	cli

00005276 <__stop_program>:
    5276:	ff cf       	rjmp	.-2      	; 0x5276 <__stop_program>
