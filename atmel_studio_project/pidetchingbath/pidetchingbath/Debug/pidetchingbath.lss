
pidetchingbath.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00004aec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004a78  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000ba  00800100  00800100  00004aec  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00004aec  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004b1c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000005f0  00000000  00000000  00004b5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002d3b  00000000  00000000  0000514c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001229  00000000  00000000  00007e87  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004256  00000000  00000000  000090b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000199c  00000000  00000000  0000d308  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000bf3f  00000000  00000000  0000eca4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000035f1  00000000  00000000  0001abe3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000520  00000000  00000000  0001e1d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000048c0  00000000  00000000  0001e6f4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 85 00 	jmp	0x10a	; 0x10a <__ctors_end>
       4:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
       8:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
       c:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      10:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      14:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      18:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      1c:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      20:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      24:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      28:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      2c:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      30:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      34:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      38:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      3c:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      40:	0c 94 90 0e 	jmp	0x1d20	; 0x1d20 <__vector_16>
      44:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      48:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      4c:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      50:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      54:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      58:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      5c:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      60:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      64:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      68:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      6c:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      70:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      74:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      78:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      7c:	39 18       	sub	r3, r9
      7e:	3b 18       	sub	r3, r11
      80:	3d 18       	sub	r3, r13
      82:	3f 18       	sub	r3, r15
      84:	41 18       	sub	r4, r1
      86:	43 18       	sub	r4, r3
      88:	45 18       	sub	r4, r5
      8a:	47 18       	sub	r4, r7
      8c:	49 18       	sub	r4, r9
      8e:	4b 18       	sub	r4, r11
      90:	08 00       	.word	0x0008	; ????
      92:	00 00       	nop
      94:	be 92       	st	-X, r11
      96:	24 49       	sbci	r18, 0x94	; 148
      98:	12 3e       	cpi	r17, 0xE2	; 226
      9a:	ab aa       	std	Y+51, r10	; 0x33
      9c:	aa 2a       	or	r10, r26
      9e:	be cd       	rjmp	.-1156   	; 0xfffffc1c <__eeprom_end+0xff7efc1c>
      a0:	cc cc       	rjmp	.-1640   	; 0xfffffa3a <__eeprom_end+0xff7efa3a>
      a2:	4c 3e       	cpi	r20, 0xEC	; 236
      a4:	00 00       	nop
      a6:	00 80       	ld	r0, Z
      a8:	be ab       	std	Y+54, r27	; 0x36
      aa:	aa aa       	std	Y+50, r10	; 0x32
      ac:	aa 3e       	cpi	r26, 0xEA	; 234
      ae:	00 00       	nop
      b0:	00 00       	nop
      b2:	bf 00       	.word	0x00bf	; ????
      b4:	00 00       	nop
      b6:	80 3f       	cpi	r24, 0xF0	; 240
      b8:	00 00       	nop
      ba:	00 00       	nop
      bc:	00 08       	sbc	r0, r0
      be:	41 78       	andi	r20, 0x81	; 129
      c0:	d3 bb       	out	0x13, r29	; 19
      c2:	43 87       	std	Z+11, r20	; 0x0b
      c4:	d1 13       	cpse	r29, r17
      c6:	3d 19       	sub	r19, r13
      c8:	0e 3c       	cpi	r16, 0xCE	; 206
      ca:	c3 bd       	out	0x23, r28	; 35
      cc:	42 82       	std	Z+2, r4	; 0x02
      ce:	ad 2b       	or	r26, r29
      d0:	3e 68       	ori	r19, 0x8E	; 142
      d2:	ec 82       	std	Y+4, r14	; 0x04
      d4:	76 be       	out	0x36, r7	; 54
      d6:	d9 8f       	std	Y+25, r29	; 0x19
      d8:	e1 a9       	ldd	r30, Z+49	; 0x31
      da:	3e 4c       	sbci	r19, 0xCE	; 206
      dc:	80 ef       	ldi	r24, 0xF0	; 240
      de:	ff be       	out	0x3f, r15	; 63
      e0:	01 c4       	rjmp	.+2050   	; 0x8e4 <app_state_menu_heater_pid+0x3c>
      e2:	ff 7f       	andi	r31, 0xFF	; 255
      e4:	3f 00       	.word	0x003f	; ????
      e6:	00 00       	nop
	...

000000ea <__trampolines_end>:
	...
      f6:	00 00       	nop
      f8:	01 00       	.word	0x0001	; ????
	...
     102:	00 00       	nop
     104:	ff ff       	.word	0xffff	; ????
     106:	00 00       	nop
	...

0000010a <__ctors_end>:
     10a:	11 24       	eor	r1, r1
     10c:	1f be       	out	0x3f, r1	; 63
     10e:	cf ef       	ldi	r28, 0xFF	; 255
     110:	d0 e1       	ldi	r29, 0x10	; 16
     112:	de bf       	out	0x3e, r29	; 62
     114:	cd bf       	out	0x3d, r28	; 61

00000116 <__do_clear_bss>:
     116:	21 e0       	ldi	r18, 0x01	; 1
     118:	a0 e0       	ldi	r26, 0x00	; 0
     11a:	b1 e0       	ldi	r27, 0x01	; 1
     11c:	01 c0       	rjmp	.+2      	; 0x120 <.do_clear_bss_start>

0000011e <.do_clear_bss_loop>:
     11e:	1d 92       	st	X+, r1

00000120 <.do_clear_bss_start>:
     120:	aa 3b       	cpi	r26, 0xBA	; 186
     122:	b2 07       	cpc	r27, r18
     124:	e1 f7       	brne	.-8      	; 0x11e <.do_clear_bss_loop>
     126:	0e 94 d3 0f 	call	0x1fa6	; 0x1fa6 <main>
     12a:	0c 94 3a 25 	jmp	0x4a74	; 0x4a74 <_exit>

0000012e <__bad_interrupt>:
     12e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000132 <app_run>:
}

void app_shutdown()
{
	app_should_stop = TRUE;
}
     132:	8f 92       	push	r8
     134:	9f 92       	push	r9
     136:	af 92       	push	r10
     138:	bf 92       	push	r11
     13a:	cf 92       	push	r12
     13c:	df 92       	push	r13
     13e:	ef 92       	push	r14
     140:	ff 92       	push	r15
     142:	0f 93       	push	r16
     144:	1f 93       	push	r17
     146:	cf 93       	push	r28
     148:	df 93       	push	r29
     14a:	cd b7       	in	r28, 0x3d	; 61
     14c:	de b7       	in	r29, 0x3e	; 62
     14e:	0e 94 c2 09 	call	0x1384	; 0x1384 <appt_init>
     152:	0e 94 fe 1a 	call	0x35fc	; 0x35fc <srd_init>
     156:	0e 94 c3 1c 	call	0x3986	; 0x3986 <switch_init>
     15a:	0e 94 48 16 	call	0x2c90	; 0x2c90 <rotenc_init>
     15e:	80 e0       	ldi	r24, 0x00	; 0
     160:	90 e0       	ldi	r25, 0x00	; 0
     162:	a8 ec       	ldi	r26, 0xC8	; 200
     164:	b1 e4       	ldi	r27, 0x41	; 65
     166:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <app_settings>
     16a:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <app_settings+0x1>
     16e:	a0 93 1c 01 	sts	0x011C, r26	; 0x80011c <app_settings+0x2>
     172:	b0 93 1d 01 	sts	0x011D, r27	; 0x80011d <app_settings+0x3>
     176:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <app_settings+0x4>
     17a:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <app_settings+0x5>
     17e:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <app_settings+0x6>
     182:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <app_settings+0x7>
     186:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <app_settings+0x8>
     18a:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <app_settings+0x9>
     18e:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <app_settings+0xa>
     192:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <app_settings+0xb>
     196:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <app_settings+0xc>
     19a:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <app_settings+0xd>
     19e:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <app_settings+0xe>
     1a2:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <app_settings+0xf>
     1a6:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <app_settings+0x14>
     1aa:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <app_settings+0x15>
     1ae:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <app_settings+0x16>
     1b2:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <app_settings+0x17>
     1b6:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <app_settings+0x18>
     1ba:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <app_settings+0x19>
     1be:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <app_settings+0x1a>
     1c2:	0e 94 bb 1b 	call	0x3776	; 0x3776 <stirrer_init>
     1c6:	0e 94 a4 1c 	call	0x3948	; 0x3948 <stirrer_off>
     1ca:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <heater_init>
     1ce:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <heater_off>
     1d2:	e0 90 26 01 	lds	r14, 0x0126	; 0x800126 <app_settings+0xc>
     1d6:	f0 90 27 01 	lds	r15, 0x0127	; 0x800127 <app_settings+0xd>
     1da:	00 91 28 01 	lds	r16, 0x0128	; 0x800128 <app_settings+0xe>
     1de:	10 91 29 01 	lds	r17, 0x0129	; 0x800129 <app_settings+0xf>
     1e2:	20 91 22 01 	lds	r18, 0x0122	; 0x800122 <app_settings+0x8>
     1e6:	30 91 23 01 	lds	r19, 0x0123	; 0x800123 <app_settings+0x9>
     1ea:	40 91 24 01 	lds	r20, 0x0124	; 0x800124 <app_settings+0xa>
     1ee:	50 91 25 01 	lds	r21, 0x0125	; 0x800125 <app_settings+0xb>
     1f2:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <app_settings+0x4>
     1f6:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <app_settings+0x5>
     1fa:	a0 91 20 01 	lds	r26, 0x0120	; 0x800120 <app_settings+0x6>
     1fe:	b0 91 21 01 	lds	r27, 0x0121	; 0x800121 <app_settings+0x7>
     202:	62 e4       	ldi	r22, 0x42	; 66
     204:	6f 93       	push	r22
     206:	68 ec       	ldi	r22, 0xC8	; 200
     208:	6f 93       	push	r22
     20a:	1f 92       	push	r1
     20c:	1f 92       	push	r1
     20e:	81 2c       	mov	r8, r1
     210:	91 2c       	mov	r9, r1
     212:	54 01       	movw	r10, r8
     214:	67 01       	movw	r12, r14
     216:	78 01       	movw	r14, r16
     218:	89 01       	movw	r16, r18
     21a:	9a 01       	movw	r18, r20
     21c:	ac 01       	movw	r20, r24
     21e:	bd 01       	movw	r22, r26
     220:	89 e3       	ldi	r24, 0x39	; 57
     222:	91 e0       	ldi	r25, 0x01	; 1
     224:	0e 94 c7 13 	call	0x278e	; 0x278e <pid_init>
     228:	0f 90       	pop	r0
     22a:	0f 90       	pop	r0
     22c:	0f 90       	pop	r0
     22e:	0f 90       	pop	r0
     230:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <tsens_init>
     234:	20 e0       	ldi	r18, 0x00	; 0
     236:	4e ed       	ldi	r20, 0xDE	; 222
     238:	51 e0       	ldi	r21, 0x01	; 1
     23a:	6d ec       	ldi	r22, 0xCD	; 205
     23c:	7c ec       	ldi	r23, 0xCC	; 204
     23e:	8c e4       	ldi	r24, 0x4C	; 76
     240:	9d e3       	ldi	r25, 0x3D	; 61
     242:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <appt_set_callback>
     246:	21 e0       	ldi	r18, 0x01	; 1
     248:	41 ea       	ldi	r20, 0xA1	; 161
     24a:	51 e0       	ldi	r21, 0x01	; 1
     24c:	6a e0       	ldi	r22, 0x0A	; 10
     24e:	77 ed       	ldi	r23, 0xD7	; 215
     250:	83 e2       	ldi	r24, 0x23	; 35
     252:	9c e3       	ldi	r25, 0x3C	; 60
     254:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <appt_set_callback>
     258:	22 e0       	ldi	r18, 0x02	; 2
     25a:	4c e6       	ldi	r20, 0x6C	; 108
     25c:	52 e0       	ldi	r21, 0x02	; 2
     25e:	6f e6       	ldi	r22, 0x6F	; 111
     260:	72 e1       	ldi	r23, 0x12	; 18
     262:	83 e8       	ldi	r24, 0x83	; 131
     264:	9a e3       	ldi	r25, 0x3A	; 58
     266:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <appt_set_callback>
     26a:	23 e0       	ldi	r18, 0x03	; 3
     26c:	46 e7       	ldi	r20, 0x76	; 118
     26e:	52 e0       	ldi	r21, 0x02	; 2
     270:	6a e0       	ldi	r22, 0x0A	; 10
     272:	77 ed       	ldi	r23, 0xD7	; 215
     274:	83 ea       	ldi	r24, 0xA3	; 163
     276:	9b e3       	ldi	r25, 0x3B	; 59
     278:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <appt_set_callback>
     27c:	0e 94 2d 09 	call	0x125a	; 0x125a <app_clear_input>
     280:	80 e8       	ldi	r24, 0x80	; 128
     282:	92 e0       	ldi	r25, 0x02	; 2
     284:	90 93 61 01 	sts	0x0161, r25	; 0x800161 <app_current_state_func+0x1>
     288:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <app_current_state_func>
     28c:	0e 94 1e 1f 	call	0x3e3c	; 0x3e3c <tsens_start_adc>
     290:	0e 94 f5 1f 	call	0x3fea	; 0x3fea <tsens_measure_probe0_temp>
     294:	dc 01       	movw	r26, r24
     296:	cb 01       	movw	r24, r22
     298:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <app_t0_current_temp>
     29c:	90 93 36 01 	sts	0x0136, r25	; 0x800136 <app_t0_current_temp+0x1>
     2a0:	a0 93 37 01 	sts	0x0137, r26	; 0x800137 <app_t0_current_temp+0x2>
     2a4:	b0 93 38 01 	sts	0x0138, r27	; 0x800138 <app_t0_current_temp+0x3>
     2a8:	0e 94 79 1f 	call	0x3ef2	; 0x3ef2 <tsens_measure0_resistance>
     2ac:	dc 01       	movw	r26, r24
     2ae:	cb 01       	movw	r24, r22
     2b0:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <app_t0_resistance>
     2b4:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <app_t0_resistance+0x1>
     2b8:	a0 93 17 01 	sts	0x0117, r26	; 0x800117 <app_t0_resistance+0x2>
     2bc:	b0 93 18 01 	sts	0x0118, r27	; 0x800118 <app_t0_resistance+0x3>
     2c0:	0e 94 1c 21 	call	0x4238	; 0x4238 <tsens_measure_probe1_temp>
     2c4:	dc 01       	movw	r26, r24
     2c6:	cb 01       	movw	r24, r22
     2c8:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <app_t1_current_temp>
     2cc:	90 93 5d 01 	sts	0x015D, r25	; 0x80015d <app_t1_current_temp+0x1>
     2d0:	a0 93 5e 01 	sts	0x015E, r26	; 0x80015e <app_t1_current_temp+0x2>
     2d4:	b0 93 5f 01 	sts	0x015F, r27	; 0x80015f <app_t1_current_temp+0x3>
     2d8:	0e 94 a0 20 	call	0x4140	; 0x4140 <tsens_measure1_resistance>
     2dc:	dc 01       	movw	r26, r24
     2de:	cb 01       	movw	r24, r22
     2e0:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <app_t1_resistance>
     2e4:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <app_t1_resistance+0x1>
     2e8:	a0 93 13 01 	sts	0x0113, r26	; 0x800113 <app_t1_resistance+0x2>
     2ec:	b0 93 14 01 	sts	0x0114, r27	; 0x800114 <app_t1_resistance+0x3>
     2f0:	0e 94 0e 0b 	call	0x161c	; 0x161c <appt_start>
     2f4:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <app_should_stop>
     2f8:	04 c0       	rjmp	.+8      	; 0x302 <app_run+0x1d0>
     2fa:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <appt_update>
     2fe:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <app_should_stop>
     302:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <app_should_stop>
     306:	88 23       	and	r24, r24
     308:	c1 f3       	breq	.-16     	; 0x2fa <app_run+0x1c8>
     30a:	0e 94 6f 0a 	call	0x14de	; 0x14de <appt_shutdown>
     30e:	0e 94 04 1c 	call	0x3808	; 0x3808 <stirrer_shutdown>
     312:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <heater_shutdown>
     316:	0e 94 e7 1e 	call	0x3dce	; 0x3dce <tsens_shutdown>
     31a:	0e 94 82 16 	call	0x2d04	; 0x2d04 <rotenc_shutdown>
     31e:	0e 94 fc 1c 	call	0x39f8	; 0x39f8 <switch_shutdown>
     322:	0e 94 0c 1b 	call	0x3618	; 0x3618 <srd_shutdown>
     326:	00 00       	nop
     328:	df 91       	pop	r29
     32a:	cf 91       	pop	r28
     32c:	1f 91       	pop	r17
     32e:	0f 91       	pop	r16
     330:	ff 90       	pop	r15
     332:	ef 90       	pop	r14
     334:	df 90       	pop	r13
     336:	cf 90       	pop	r12
     338:	bf 90       	pop	r11
     33a:	af 90       	pop	r10
     33c:	9f 90       	pop	r9
     33e:	8f 90       	pop	r8
     340:	08 95       	ret

00000342 <app_user_main>:

////////////////////////////////////////// INPUT CALLBACK /////////////////////////////////////////
uint8_t app_user_main()
{
     342:	cf 93       	push	r28
     344:	df 93       	push	r29
     346:	cd b7       	in	r28, 0x3d	; 61
     348:	de b7       	in	r29, 0x3e	; 62
	// INPUT	
	app_clear_input();
     34a:	0e 94 2d 09 	call	0x125a	; 0x125a <app_clear_input>
	app_current_input.rotenc_delta = rotenc_get_inc();
     34e:	0e 94 97 16 	call	0x2d2e	; 0x2d2e <rotenc_get_inc>
     352:	90 93 56 01 	sts	0x0156, r25	; 0x800156 <app_current_input+0x1>
     356:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <app_current_input>
	// Rotenc Button
	app_current_input.button_states |= (switch_get_state(BUTTON0) << BUTTON0);
     35a:	80 e0       	ldi	r24, 0x00	; 0
     35c:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <switch_get_state>
     360:	88 2f       	mov	r24, r24
     362:	90 e0       	ldi	r25, 0x00	; 0
     364:	20 91 5a 01 	lds	r18, 0x015A	; 0x80015a <app_current_input+0x5>
     368:	82 2b       	or	r24, r18
     36a:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <app_current_input+0x5>
	app_current_input.button_presses |= (switch_press(BUTTON0) << BUTTON0);
     36e:	80 e0       	ldi	r24, 0x00	; 0
     370:	0e 94 2c 1d 	call	0x3a58	; 0x3a58 <switch_press>
     374:	88 2f       	mov	r24, r24
     376:	90 e0       	ldi	r25, 0x00	; 0
     378:	20 91 57 01 	lds	r18, 0x0157	; 0x800157 <app_current_input+0x2>
     37c:	82 2b       	or	r24, r18
     37e:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <app_current_input+0x2>
	app_current_input.button_long_presses |= (switch_longpress(BUTTON0) << BUTTON0);
     382:	80 e0       	ldi	r24, 0x00	; 0
     384:	0e 94 86 1d 	call	0x3b0c	; 0x3b0c <switch_longpress>
     388:	88 2f       	mov	r24, r24
     38a:	90 e0       	ldi	r25, 0x00	; 0
     38c:	20 91 58 01 	lds	r18, 0x0158	; 0x800158 <app_current_input+0x3>
     390:	82 2b       	or	r24, r18
     392:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <app_current_input+0x3>
	app_current_input.button_releases |= (switch_release(BUTTON0) << BUTTON0);
     396:	80 e0       	ldi	r24, 0x00	; 0
     398:	0e 94 59 1d 	call	0x3ab2	; 0x3ab2 <switch_release>
     39c:	88 2f       	mov	r24, r24
     39e:	90 e0       	ldi	r25, 0x00	; 0
     3a0:	20 91 59 01 	lds	r18, 0x0159	; 0x800159 <app_current_input+0x4>
     3a4:	82 2b       	or	r24, r18
     3a6:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <app_current_input+0x4>
	// Secondary Button
	//---
	
	// query menu state machine
	return (*app_current_state_func)();
     3aa:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <app_current_state_func>
     3ae:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <app_current_state_func+0x1>
     3b2:	fc 01       	movw	r30, r24
     3b4:	09 95       	icall
}
     3b6:	df 91       	pop	r29
     3b8:	cf 91       	pop	r28
     3ba:	08 95       	ret

000003bc <app_control>:

///////////////////////////////////////// PID CONTROL CALLBACK ////////////////////////////////////
uint8_t app_control()
{
     3bc:	0f 93       	push	r16
     3be:	1f 93       	push	r17
     3c0:	cf 93       	push	r28
     3c2:	df 93       	push	r29
     3c4:	00 d0       	rcall	.+0      	; 0x3c6 <app_control+0xa>
     3c6:	00 d0       	rcall	.+0      	; 0x3c8 <app_control+0xc>
     3c8:	cd b7       	in	r28, 0x3d	; 61
     3ca:	de b7       	in	r29, 0x3e	; 62
	// do measurements	
	// if calibration menu is active, update corresponding resistance value
	#ifdef TSENS_PROBE_0
	app_t0_current_temp = tsens_measure_probe0_temp();
     3cc:	0e 94 f5 1f 	call	0x3fea	; 0x3fea <tsens_measure_probe0_temp>
     3d0:	dc 01       	movw	r26, r24
     3d2:	cb 01       	movw	r24, r22
     3d4:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <app_t0_current_temp>
     3d8:	90 93 36 01 	sts	0x0136, r25	; 0x800136 <app_t0_current_temp+0x1>
     3dc:	a0 93 37 01 	sts	0x0137, r26	; 0x800137 <app_t0_current_temp+0x2>
     3e0:	b0 93 38 01 	sts	0x0138, r27	; 0x800138 <app_t0_current_temp+0x3>
	if(app_current_state_func == app_state_menu_tprobe0_calib)
     3e4:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <app_current_state_func>
     3e8:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <app_current_state_func+0x1>
     3ec:	8d 59       	subi	r24, 0x9D	; 157
     3ee:	98 40       	sbci	r25, 0x08	; 8
     3f0:	61 f4       	brne	.+24     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
	{
		app_t0_resistance = tsens_measure0_resistance();
     3f2:	0e 94 79 1f 	call	0x3ef2	; 0x3ef2 <tsens_measure0_resistance>
     3f6:	dc 01       	movw	r26, r24
     3f8:	cb 01       	movw	r24, r22
     3fa:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <app_t0_resistance>
     3fe:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <app_t0_resistance+0x1>
     402:	a0 93 17 01 	sts	0x0117, r26	; 0x800117 <app_t0_resistance+0x2>
     406:	b0 93 18 01 	sts	0x0118, r27	; 0x800118 <app_t0_resistance+0x3>
	}
	#endif
	#ifdef TSENS_PROBE_1
	app_t1_current_temp = tsens_measure_probe1_temp();
     40a:	0e 94 1c 21 	call	0x4238	; 0x4238 <tsens_measure_probe1_temp>
     40e:	dc 01       	movw	r26, r24
     410:	cb 01       	movw	r24, r22
     412:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <app_t1_current_temp>
     416:	90 93 5d 01 	sts	0x015D, r25	; 0x80015d <app_t1_current_temp+0x1>
     41a:	a0 93 5e 01 	sts	0x015E, r26	; 0x80015e <app_t1_current_temp+0x2>
     41e:	b0 93 5f 01 	sts	0x015F, r27	; 0x80015f <app_t1_current_temp+0x3>
	if(app_current_state_func == app_state_menu_tprobe1_calib)
     422:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <app_current_state_func>
     426:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <app_current_state_func+0x1>
     42a:	86 5c       	subi	r24, 0xC6	; 198
     42c:	98 40       	sbci	r25, 0x08	; 8
     42e:	61 f4       	brne	.+24     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
	{
		app_t1_resistance = tsens_measure1_resistance();
     430:	0e 94 a0 20 	call	0x4140	; 0x4140 <tsens_measure1_resistance>
     434:	dc 01       	movw	r26, r24
     436:	cb 01       	movw	r24, r22
     438:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <app_t1_resistance>
     43c:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <app_t1_resistance+0x1>
     440:	a0 93 13 01 	sts	0x0113, r26	; 0x800113 <app_t1_resistance+0x2>
     444:	b0 93 14 01 	sts	0x0114, r27	; 0x800114 <app_t1_resistance+0x3>
	#endif
	
	// pid stuff
	//if(app_settings.heater_onoff)
	//{
		float pid_res = pid_step(&app_pid_state, app_t0_current_temp, app_settings.heater_target_temp);
     448:	20 91 1a 01 	lds	r18, 0x011A	; 0x80011a <app_settings>
     44c:	30 91 1b 01 	lds	r19, 0x011B	; 0x80011b <app_settings+0x1>
     450:	40 91 1c 01 	lds	r20, 0x011C	; 0x80011c <app_settings+0x2>
     454:	50 91 1d 01 	lds	r21, 0x011D	; 0x80011d <app_settings+0x3>
     458:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <app_t0_current_temp>
     45c:	90 91 36 01 	lds	r25, 0x0136	; 0x800136 <app_t0_current_temp+0x1>
     460:	a0 91 37 01 	lds	r26, 0x0137	; 0x800137 <app_t0_current_temp+0x2>
     464:	b0 91 38 01 	lds	r27, 0x0138	; 0x800138 <app_t0_current_temp+0x3>
     468:	89 01       	movw	r16, r18
     46a:	9a 01       	movw	r18, r20
     46c:	ac 01       	movw	r20, r24
     46e:	bd 01       	movw	r22, r26
     470:	89 e3       	ldi	r24, 0x39	; 57
     472:	91 e0       	ldi	r25, 0x01	; 1
     474:	0e 94 c5 14 	call	0x298a	; 0x298a <pid_step>
     478:	dc 01       	movw	r26, r24
     47a:	cb 01       	movw	r24, r22
     47c:	89 83       	std	Y+1, r24	; 0x01
     47e:	9a 83       	std	Y+2, r25	; 0x02
     480:	ab 83       	std	Y+3, r26	; 0x03
     482:	bc 83       	std	Y+4, r27	; 0x04
		if(app_t0_current_temp > HEATER_MAX_TEMP)
     484:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <app_t0_current_temp>
     488:	90 91 36 01 	lds	r25, 0x0136	; 0x800136 <app_t0_current_temp+0x1>
     48c:	a0 91 37 01 	lds	r26, 0x0137	; 0x800137 <app_t0_current_temp+0x2>
     490:	b0 91 38 01 	lds	r27, 0x0138	; 0x800138 <app_t0_current_temp+0x3>
     494:	20 e0       	ldi	r18, 0x00	; 0
     496:	30 e0       	ldi	r19, 0x00	; 0
     498:	48 ec       	ldi	r20, 0xC8	; 200
     49a:	52 e4       	ldi	r21, 0x42	; 66
     49c:	bc 01       	movw	r22, r24
     49e:	cd 01       	movw	r24, r26
     4a0:	0e 94 ad 23 	call	0x475a	; 0x475a <__gesf2>
     4a4:	18 16       	cp	r1, r24
     4a6:	24 f4       	brge	.+8      	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
			heater_set_duty_cycle(0);
     4a8:	80 e0       	ldi	r24, 0x00	; 0
     4aa:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <heater_set_duty_cycle>
     4ae:	0a c0       	rjmp	.+20     	; 0x4c4 <__LOCK_REGION_LENGTH__+0xc4>
		else
			heater_set_duty_cycle((uint8_t)pid_res);
     4b0:	69 81       	ldd	r22, Y+1	; 0x01
     4b2:	7a 81       	ldd	r23, Y+2	; 0x02
     4b4:	8b 81       	ldd	r24, Y+3	; 0x03
     4b6:	9c 81       	ldd	r25, Y+4	; 0x04
     4b8:	0e 94 bc 22 	call	0x4578	; 0x4578 <__fixunssfsi>
     4bc:	dc 01       	movw	r26, r24
     4be:	cb 01       	movw	r24, r22
     4c0:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <heater_set_duty_cycle>
		
	//}
	return FALSE; // everything ok
     4c4:	80 e0       	ldi	r24, 0x00	; 0
}
     4c6:	0f 90       	pop	r0
     4c8:	0f 90       	pop	r0
     4ca:	0f 90       	pop	r0
     4cc:	0f 90       	pop	r0
     4ce:	df 91       	pop	r29
     4d0:	cf 91       	pop	r28
     4d2:	1f 91       	pop	r17
     4d4:	0f 91       	pop	r16
     4d6:	08 95       	ret

000004d8 <app_rotenc_update>:

/////////////////////////////////////// ROT_ENC UPDATE CALLBACK ///////////////////////////////////
uint8_t app_rotenc_update()
{
     4d8:	cf 93       	push	r28
     4da:	df 93       	push	r29
     4dc:	cd b7       	in	r28, 0x3d	; 61
     4de:	de b7       	in	r29, 0x3e	; 62
	rotenc_update();
     4e0:	0e 94 c1 16 	call	0x2d82	; 0x2d82 <rotenc_update>
	return FALSE;
     4e4:	80 e0       	ldi	r24, 0x00	; 0
}
     4e6:	df 91       	pop	r29
     4e8:	cf 91       	pop	r28
     4ea:	08 95       	ret

000004ec <app_button_update>:

/////////////////////////////////////// BUTTONS UPDATE CALLBACK ///////////////////////////////////
uint8_t app_button_update()
{
     4ec:	cf 93       	push	r28
     4ee:	df 93       	push	r29
     4f0:	cd b7       	in	r28, 0x3d	; 61
     4f2:	de b7       	in	r29, 0x3e	; 62
	switch_update();
     4f4:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <switch_update>
	return FALSE;
     4f8:	80 e0       	ldi	r24, 0x00	; 0
}
     4fa:	df 91       	pop	r29
     4fc:	cf 91       	pop	r28
     4fe:	08 95       	ret

00000500 <app_state_main>:

/////////////////////////////////////// STATE MACHINE IMPLEMENTATION //////////////////////////////
// all the state functions
uint8_t app_state_main()
{
     500:	cf 93       	push	r28
     502:	df 93       	push	r29
     504:	cd b7       	in	r28, 0x3d	; 61
     506:	de b7       	in	r29, 0x3e	; 62
	// display current temp
	srd_clear();
     508:	0e 94 a2 1b 	call	0x3744	; 0x3744 <srd_clear>
	mr_main(app_t0_current_temp);
     50c:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <app_t0_current_temp>
     510:	90 91 36 01 	lds	r25, 0x0136	; 0x800136 <app_t0_current_temp+0x1>
     514:	a0 91 37 01 	lds	r26, 0x0137	; 0x800137 <app_t0_current_temp+0x2>
     518:	b0 91 38 01 	lds	r27, 0x0138	; 0x800138 <app_t0_current_temp+0x3>
     51c:	bc 01       	movw	r22, r24
     51e:	cd 01       	movw	r24, r26
     520:	0e 94 de 0f 	call	0x1fbc	; 0x1fbc <mr_main>
	srd_display();
     524:	0e 94 91 1b 	call	0x3722	; 0x3722 <srd_display>
	
	// state change
	if(app_current_input.button_presses & (1 << BUTTON0))
     528:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <app_current_input+0x2>
     52c:	88 2f       	mov	r24, r24
     52e:	90 e0       	ldi	r25, 0x00	; 0
     530:	81 70       	andi	r24, 0x01	; 1
     532:	99 27       	eor	r25, r25
     534:	89 2b       	or	r24, r25
     536:	41 f0       	breq	.+16     	; 0x548 <app_state_main+0x48>
	{
		app_selected_menu_item_index = 0;
     538:	10 92 5b 01 	sts	0x015B, r1	; 0x80015b <app_selected_menu_item_index>
		app_current_state_func = app_state_menu_main;
     53c:	88 ea       	ldi	r24, 0xA8	; 168
     53e:	92 e0       	ldi	r25, 0x02	; 2
     540:	90 93 61 01 	sts	0x0161, r25	; 0x800161 <app_current_state_func+0x1>
     544:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <app_current_state_func>
	}
	
	return FALSE; // everything ok	
     548:	80 e0       	ldi	r24, 0x00	; 0
}
     54a:	df 91       	pop	r29
     54c:	cf 91       	pop	r28
     54e:	08 95       	ret

00000550 <app_state_menu_main>:

uint8_t app_state_menu_main()
{
     550:	cf 93       	push	r28
     552:	df 93       	push	r29
     554:	cd b7       	in	r28, 0x3d	; 61
     556:	de b7       	in	r29, 0x3e	; 62
	if(app_current_input.rotenc_delta > 0)
     558:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <app_current_input>
     55c:	90 91 56 01 	lds	r25, 0x0156	; 0x800156 <app_current_input+0x1>
     560:	18 16       	cp	r1, r24
     562:	19 06       	cpc	r1, r25
     564:	64 f4       	brge	.+24     	; 0x57e <app_state_menu_main+0x2e>
		app_selected_menu_item_index = imax8(imin8(app_selected_menu_item_index + 1, 3), 0);
     566:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <app_selected_menu_item_index>
     56a:	8f 5f       	subi	r24, 0xFF	; 255
     56c:	63 e0       	ldi	r22, 0x03	; 3
     56e:	0e 94 17 13 	call	0x262e	; 0x262e <imin8>
     572:	60 e0       	ldi	r22, 0x00	; 0
     574:	0e 94 ed 12 	call	0x25da	; 0x25da <imax8>
     578:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <app_selected_menu_item_index>
     57c:	11 c0       	rjmp	.+34     	; 0x5a0 <app_state_menu_main+0x50>
	else if(app_current_input.rotenc_delta < 0)
     57e:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <app_current_input>
     582:	90 91 56 01 	lds	r25, 0x0156	; 0x800156 <app_current_input+0x1>
     586:	99 23       	and	r25, r25
     588:	5c f4       	brge	.+22     	; 0x5a0 <app_state_menu_main+0x50>
		app_selected_menu_item_index = imax8(imin8(app_selected_menu_item_index - 1, 3), 0);
     58a:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <app_selected_menu_item_index>
     58e:	81 50       	subi	r24, 0x01	; 1
     590:	63 e0       	ldi	r22, 0x03	; 3
     592:	0e 94 17 13 	call	0x262e	; 0x262e <imin8>
     596:	60 e0       	ldi	r22, 0x00	; 0
     598:	0e 94 ed 12 	call	0x25da	; 0x25da <imax8>
     59c:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <app_selected_menu_item_index>
	// display selected menu item
	srd_clear();
     5a0:	0e 94 a2 1b 	call	0x3744	; 0x3744 <srd_clear>
	mr_main_menu(app_selected_menu_item_index);
     5a4:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <app_selected_menu_item_index>
     5a8:	0e 94 fd 0f 	call	0x1ffa	; 0x1ffa <mr_main_menu>
	srd_display();
     5ac:	0e 94 91 1b 	call	0x3722	; 0x3722 <srd_display>
	
	// state change
	if(app_current_input.button_presses & (1 << BUTTON0))
     5b0:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <app_current_input+0x2>
     5b4:	88 2f       	mov	r24, r24
     5b6:	90 e0       	ldi	r25, 0x00	; 0
     5b8:	81 70       	andi	r24, 0x01	; 1
     5ba:	99 27       	eor	r25, r25
     5bc:	89 2b       	or	r24, r25
     5be:	c1 f1       	breq	.+112    	; 0x630 <app_state_menu_main+0xe0>
	{
		switch(app_selected_menu_item_index)
     5c0:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <app_selected_menu_item_index>
     5c4:	08 2e       	mov	r0, r24
     5c6:	00 0c       	add	r0, r0
     5c8:	99 0b       	sbc	r25, r25
     5ca:	81 30       	cpi	r24, 0x01	; 1
     5cc:	91 05       	cpc	r25, r1
     5ce:	a9 f0       	breq	.+42     	; 0x5fa <app_state_menu_main+0xaa>
     5d0:	82 30       	cpi	r24, 0x02	; 2
     5d2:	91 05       	cpc	r25, r1
     5d4:	1c f4       	brge	.+6      	; 0x5dc <app_state_menu_main+0x8c>
     5d6:	89 2b       	or	r24, r25
     5d8:	39 f0       	breq	.+14     	; 0x5e8 <app_state_menu_main+0x98>
     5da:	2a c0       	rjmp	.+84     	; 0x630 <app_state_menu_main+0xe0>
     5dc:	82 30       	cpi	r24, 0x02	; 2
     5de:	91 05       	cpc	r25, r1
     5e0:	a9 f0       	breq	.+42     	; 0x60c <app_state_menu_main+0xbc>
     5e2:	03 97       	sbiw	r24, 0x03	; 3
     5e4:	e1 f0       	breq	.+56     	; 0x61e <app_state_menu_main+0xce>
     5e6:	24 c0       	rjmp	.+72     	; 0x630 <app_state_menu_main+0xe0>
		{
			case 0:	// back to main screen
				app_selected_menu_item_index = 0;
     5e8:	10 92 5b 01 	sts	0x015B, r1	; 0x80015b <app_selected_menu_item_index>
				app_current_state_func = app_state_main;
     5ec:	80 e8       	ldi	r24, 0x80	; 128
     5ee:	92 e0       	ldi	r25, 0x02	; 2
     5f0:	90 93 61 01 	sts	0x0161, r25	; 0x800161 <app_current_state_func+0x1>
     5f4:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <app_current_state_func>
				break;
     5f8:	1b c0       	rjmp	.+54     	; 0x630 <app_state_menu_main+0xe0>
			case 1: // heater menu
				app_selected_menu_item_index = 0;
     5fa:	10 92 5b 01 	sts	0x015B, r1	; 0x80015b <app_selected_menu_item_index>
				app_current_state_func = app_state_menu_heater;
     5fe:	8c e1       	ldi	r24, 0x1C	; 28
     600:	93 e0       	ldi	r25, 0x03	; 3
     602:	90 93 61 01 	sts	0x0161, r25	; 0x800161 <app_current_state_func+0x1>
     606:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <app_current_state_func>
				break;
     60a:	12 c0       	rjmp	.+36     	; 0x630 <app_state_menu_main+0xe0>
			case 2:	// stirrer menu
				app_selected_menu_item_index = 0;
     60c:	10 92 5b 01 	sts	0x015B, r1	; 0x80015b <app_selected_menu_item_index>
				app_current_state_func = app_state_menu_stirrer;
     610:	87 e6       	ldi	r24, 0x67	; 103
     612:	97 e0       	ldi	r25, 0x07	; 7
     614:	90 93 61 01 	sts	0x0161, r25	; 0x800161 <app_current_state_func+0x1>
     618:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <app_current_state_func>
				break;
     61c:	09 c0       	rjmp	.+18     	; 0x630 <app_state_menu_main+0xe0>
			case 3:	// thermistor calibration menu
				app_selected_menu_item_index = 0;
     61e:	10 92 5b 01 	sts	0x015B, r1	; 0x80015b <app_selected_menu_item_index>
				app_current_state_func = app_state_menu_tprobe;
     622:	8c e1       	ldi	r24, 0x1C	; 28
     624:	98 e0       	ldi	r25, 0x08	; 8
     626:	90 93 61 01 	sts	0x0161, r25	; 0x800161 <app_current_state_func+0x1>
     62a:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <app_current_state_func>
				break;
     62e:	00 00       	nop
		}
	}
	return FALSE;
     630:	80 e0       	ldi	r24, 0x00	; 0
}
     632:	df 91       	pop	r29
     634:	cf 91       	pop	r28
     636:	08 95       	ret

00000638 <app_state_menu_heater>:

uint8_t app_state_menu_heater()
{
     638:	cf 93       	push	r28
     63a:	df 93       	push	r29
     63c:	cd b7       	in	r28, 0x3d	; 61
     63e:	de b7       	in	r29, 0x3e	; 62
	if(app_current_input.rotenc_delta > 0)
     640:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <app_current_input>
     644:	90 91 56 01 	lds	r25, 0x0156	; 0x800156 <app_current_input+0x1>
     648:	18 16       	cp	r1, r24
     64a:	19 06       	cpc	r1, r25
     64c:	64 f4       	brge	.+24     	; 0x666 <app_state_menu_heater+0x2e>
		app_selected_menu_item_index = imax8(imin8(app_selected_menu_item_index + 1, 4), 0);
     64e:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <app_selected_menu_item_index>
     652:	8f 5f       	subi	r24, 0xFF	; 255
     654:	64 e0       	ldi	r22, 0x04	; 4
     656:	0e 94 17 13 	call	0x262e	; 0x262e <imin8>
     65a:	60 e0       	ldi	r22, 0x00	; 0
     65c:	0e 94 ed 12 	call	0x25da	; 0x25da <imax8>
     660:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <app_selected_menu_item_index>
     664:	11 c0       	rjmp	.+34     	; 0x688 <app_state_menu_heater+0x50>
	else if(app_current_input.rotenc_delta < 0)
     666:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <app_current_input>
     66a:	90 91 56 01 	lds	r25, 0x0156	; 0x800156 <app_current_input+0x1>
     66e:	99 23       	and	r25, r25
     670:	5c f4       	brge	.+22     	; 0x688 <app_state_menu_heater+0x50>
		app_selected_menu_item_index = imax8(imin8(app_selected_menu_item_index - 1, 4), 0);
     672:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <app_selected_menu_item_index>
     676:	81 50       	subi	r24, 0x01	; 1
     678:	64 e0       	ldi	r22, 0x04	; 4
     67a:	0e 94 17 13 	call	0x262e	; 0x262e <imin8>
     67e:	60 e0       	ldi	r22, 0x00	; 0
     680:	0e 94 ed 12 	call	0x25da	; 0x25da <imax8>
     684:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <app_selected_menu_item_index>
	// display selected menu item
	srd_clear();
     688:	0e 94 a2 1b 	call	0x3744	; 0x3744 <srd_clear>
	mr_heater_menu(app_selected_menu_item_index);
     68c:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <app_selected_menu_item_index>
     690:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <mr_heater_menu>
	srd_display();
     694:	0e 94 91 1b 	call	0x3722	; 0x3722 <srd_display>
	
	// state change
	if(app_current_input.button_presses & (1 << BUTTON0))
     698:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <app_current_input+0x2>
     69c:	88 2f       	mov	r24, r24
     69e:	90 e0       	ldi	r25, 0x00	; 0
     6a0:	81 70       	andi	r24, 0x01	; 1
     6a2:	99 27       	eor	r25, r25
     6a4:	89 2b       	or	r24, r25
     6a6:	09 f4       	brne	.+2      	; 0x6aa <app_state_menu_heater+0x72>
     6a8:	44 c0       	rjmp	.+136    	; 0x732 <app_state_menu_heater+0xfa>
	{
		switch(app_selected_menu_item_index)
     6aa:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <app_selected_menu_item_index>
     6ae:	08 2e       	mov	r0, r24
     6b0:	00 0c       	add	r0, r0
     6b2:	99 0b       	sbc	r25, r25
     6b4:	82 30       	cpi	r24, 0x02	; 2
     6b6:	91 05       	cpc	r25, r1
     6b8:	09 f1       	breq	.+66     	; 0x6fc <app_state_menu_heater+0xc4>
     6ba:	83 30       	cpi	r24, 0x03	; 3
     6bc:	91 05       	cpc	r25, r1
     6be:	2c f4       	brge	.+10     	; 0x6ca <app_state_menu_heater+0x92>
     6c0:	00 97       	sbiw	r24, 0x00	; 0
     6c2:	49 f0       	breq	.+18     	; 0x6d6 <app_state_menu_heater+0x9e>
     6c4:	01 97       	sbiw	r24, 0x01	; 1
     6c6:	89 f0       	breq	.+34     	; 0x6ea <app_state_menu_heater+0xb2>
     6c8:	34 c0       	rjmp	.+104    	; 0x732 <app_state_menu_heater+0xfa>
     6ca:	83 30       	cpi	r24, 0x03	; 3
     6cc:	91 05       	cpc	r25, r1
     6ce:	f9 f0       	breq	.+62     	; 0x70e <app_state_menu_heater+0xd6>
     6d0:	04 97       	sbiw	r24, 0x04	; 4
     6d2:	31 f1       	breq	.+76     	; 0x720 <app_state_menu_heater+0xe8>
     6d4:	2e c0       	rjmp	.+92     	; 0x732 <app_state_menu_heater+0xfa>
		{
			case 0:	// back to main menu
				app_selected_menu_item_index = 1;
     6d6:	81 e0       	ldi	r24, 0x01	; 1
     6d8:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <app_selected_menu_item_index>
				app_current_state_func = app_state_menu_main;
     6dc:	88 ea       	ldi	r24, 0xA8	; 168
     6de:	92 e0       	ldi	r25, 0x02	; 2
     6e0:	90 93 61 01 	sts	0x0161, r25	; 0x800161 <app_current_state_func+0x1>
     6e4:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <app_current_state_func>
				break;
     6e8:	24 c0       	rjmp	.+72     	; 0x732 <app_state_menu_heater+0xfa>
			case 1: // heater on / off
				app_selected_menu_item_index = 0;
     6ea:	10 92 5b 01 	sts	0x015B, r1	; 0x80015b <app_selected_menu_item_index>
				app_current_state_func = app_state_menu_heater_onoff;
     6ee:	8d e9       	ldi	r24, 0x9D	; 157
     6f0:	93 e0       	ldi	r25, 0x03	; 3
     6f2:	90 93 61 01 	sts	0x0161, r25	; 0x800161 <app_current_state_func+0x1>
     6f6:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <app_current_state_func>
				break;
     6fa:	1b c0       	rjmp	.+54     	; 0x732 <app_state_menu_heater+0xfa>
			case 2:	// heater target temp
				app_selected_menu_item_index = 0;
     6fc:	10 92 5b 01 	sts	0x015B, r1	; 0x80015b <app_selected_menu_item_index>
				app_current_state_func = app_state_menu_heater_target_temp;
     700:	89 ed       	ldi	r24, 0xD9	; 217
     702:	93 e0       	ldi	r25, 0x03	; 3
     704:	90 93 61 01 	sts	0x0161, r25	; 0x800161 <app_current_state_func+0x1>
     708:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <app_current_state_func>
				break;
     70c:	12 c0       	rjmp	.+36     	; 0x732 <app_state_menu_heater+0xfa>
			case 3:	// heater pid menu
				app_selected_menu_item_index = 0;
     70e:	10 92 5b 01 	sts	0x015B, r1	; 0x80015b <app_selected_menu_item_index>
				app_current_state_func = app_state_menu_heater_pid;
     712:	84 e5       	ldi	r24, 0x54	; 84
     714:	94 e0       	ldi	r25, 0x04	; 4
     716:	90 93 61 01 	sts	0x0161, r25	; 0x800161 <app_current_state_func+0x1>
     71a:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <app_current_state_func>
				break;
     71e:	09 c0       	rjmp	.+18     	; 0x732 <app_state_menu_heater+0xfa>
			case 4:	// heater offset
				app_selected_menu_item_index = 0;
     720:	10 92 5b 01 	sts	0x015B, r1	; 0x80015b <app_selected_menu_item_index>
				app_current_state_func = app_state_menu_heater_offset;
     724:	8b ee       	ldi	r24, 0xEB	; 235
     726:	96 e0       	ldi	r25, 0x06	; 6
     728:	90 93 61 01 	sts	0x0161, r25	; 0x800161 <app_current_state_func+0x1>
     72c:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <app_current_state_func>
				break;
     730:	00 00       	nop
		}
	}
	return FALSE;
     732:	80 e0       	ldi	r24, 0x00	; 0
}
     734:	df 91       	pop	r29
     736:	cf 91       	pop	r28
     738:	08 95       	ret

0000073a <app_state_menu_heater_onoff>:

uint8_t app_state_menu_heater_onoff()
{
     73a:	cf 93       	push	r28
     73c:	df 93       	push	r29
     73e:	cd b7       	in	r28, 0x3d	; 61
     740:	de b7       	in	r29, 0x3e	; 62
	if(app_current_input.rotenc_delta != 0)
     742:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <app_current_input>
     746:	90 91 56 01 	lds	r25, 0x0156	; 0x800156 <app_current_input+0x1>
     74a:	89 2b       	or	r24, r25
     74c:	a9 f0       	breq	.+42     	; 0x778 <app_state_menu_heater_onoff+0x3e>
	{
		app_settings.heater_onoff = !app_settings.heater_onoff;
     74e:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <app_settings+0x19>
     752:	81 e0       	ldi	r24, 0x01	; 1
     754:	99 23       	and	r25, r25
     756:	09 f0       	breq	.+2      	; 0x75a <app_state_menu_heater_onoff+0x20>
     758:	80 e0       	ldi	r24, 0x00	; 0
     75a:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <app_settings+0x19>
		if(app_settings.heater_onoff)
     75e:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <app_settings+0x19>
     762:	88 23       	and	r24, r24
     764:	19 f0       	breq	.+6      	; 0x76c <app_state_menu_heater_onoff+0x32>
		{
			heater_on();
     766:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <heater_on>
     76a:	02 c0       	rjmp	.+4      	; 0x770 <app_state_menu_heater_onoff+0x36>
		}
		else
		{
			heater_off();
     76c:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <heater_off>
		}
		pid_reset(&app_pid_state);
     770:	89 e3       	ldi	r24, 0x39	; 57
     772:	91 e0       	ldi	r25, 0x01	; 1
     774:	0e 94 0f 16 	call	0x2c1e	; 0x2c1e <pid_reset>
	}
	
	// display current value
	srd_clear();
     778:	0e 94 a2 1b 	call	0x3744	; 0x3744 <srd_clear>
	mr_heater_menu_onoff(app_settings.heater_onoff);
     77c:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <app_settings+0x19>
     780:	0e 94 30 11 	call	0x2260	; 0x2260 <mr_heater_menu_onoff>
	srd_display();
     784:	0e 94 91 1b 	call	0x3722	; 0x3722 <srd_display>
	
	if(app_current_input.button_presses & (1 << BUTTON0))
     788:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <app_current_input+0x2>
     78c:	88 2f       	mov	r24, r24
     78e:	90 e0       	ldi	r25, 0x00	; 0
     790:	81 70       	andi	r24, 0x01	; 1
     792:	99 27       	eor	r25, r25
     794:	89 2b       	or	r24, r25
     796:	49 f0       	breq	.+18     	; 0x7aa <app_state_menu_heater_onoff+0x70>
	{
		app_selected_menu_item_index = 1;
     798:	81 e0       	ldi	r24, 0x01	; 1
     79a:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <app_selected_menu_item_index>
		app_current_state_func = app_state_menu_heater;
     79e:	8c e1       	ldi	r24, 0x1C	; 28
     7a0:	93 e0       	ldi	r25, 0x03	; 3
     7a2:	90 93 61 01 	sts	0x0161, r25	; 0x800161 <app_current_state_func+0x1>
     7a6:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <app_current_state_func>
	}
	return FALSE;
     7aa:	80 e0       	ldi	r24, 0x00	; 0
}
     7ac:	df 91       	pop	r29
     7ae:	cf 91       	pop	r28
     7b0:	08 95       	ret

000007b2 <app_state_menu_heater_target_temp>:

uint8_t app_state_menu_heater_target_temp()
{
     7b2:	cf 92       	push	r12
     7b4:	df 92       	push	r13
     7b6:	ef 92       	push	r14
     7b8:	ff 92       	push	r15
     7ba:	cf 93       	push	r28
     7bc:	df 93       	push	r29
     7be:	cd b7       	in	r28, 0x3d	; 61
     7c0:	de b7       	in	r29, 0x3e	; 62
	if(app_current_input.rotenc_delta != 0)
     7c2:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <app_current_input>
     7c6:	90 91 56 01 	lds	r25, 0x0156	; 0x800156 <app_current_input+0x1>
     7ca:	89 2b       	or	r24, r25
     7cc:	09 f4       	brne	.+2      	; 0x7d0 <app_state_menu_heater_target_temp+0x1e>
     7ce:	43 c0       	rjmp	.+134    	; 0x856 <app_state_menu_heater_target_temp+0xa4>
		app_settings.heater_target_temp = fmax(fmin(app_settings.heater_target_temp + app_current_input.rotenc_delta * TEMP_CHANGE_PER_ROTENC_STEP, MAX_HEATER_TARGET_TEMP), MIN_HEATER_TARGET_TEMP);
     7d0:	c0 90 1a 01 	lds	r12, 0x011A	; 0x80011a <app_settings>
     7d4:	d0 90 1b 01 	lds	r13, 0x011B	; 0x80011b <app_settings+0x1>
     7d8:	e0 90 1c 01 	lds	r14, 0x011C	; 0x80011c <app_settings+0x2>
     7dc:	f0 90 1d 01 	lds	r15, 0x011D	; 0x80011d <app_settings+0x3>
     7e0:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <app_current_input>
     7e4:	90 91 56 01 	lds	r25, 0x0156	; 0x800156 <app_current_input+0x1>
     7e8:	09 2e       	mov	r0, r25
     7ea:	00 0c       	add	r0, r0
     7ec:	aa 0b       	sbc	r26, r26
     7ee:	bb 0b       	sbc	r27, r27
     7f0:	bc 01       	movw	r22, r24
     7f2:	cd 01       	movw	r24, r26
     7f4:	0e 94 ed 22 	call	0x45da	; 0x45da <__floatsisf>
     7f8:	dc 01       	movw	r26, r24
     7fa:	cb 01       	movw	r24, r22
     7fc:	20 e0       	ldi	r18, 0x00	; 0
     7fe:	30 e0       	ldi	r19, 0x00	; 0
     800:	40 e0       	ldi	r20, 0x00	; 0
     802:	5f e3       	ldi	r21, 0x3F	; 63
     804:	bc 01       	movw	r22, r24
     806:	cd 01       	movw	r24, r26
     808:	0e 94 02 24 	call	0x4804	; 0x4804 <__mulsf3>
     80c:	dc 01       	movw	r26, r24
     80e:	cb 01       	movw	r24, r22
     810:	9c 01       	movw	r18, r24
     812:	ad 01       	movw	r20, r26
     814:	c7 01       	movw	r24, r14
     816:	b6 01       	movw	r22, r12
     818:	0e 94 96 21 	call	0x432c	; 0x432c <__addsf3>
     81c:	dc 01       	movw	r26, r24
     81e:	cb 01       	movw	r24, r22
     820:	20 e0       	ldi	r18, 0x00	; 0
     822:	30 e0       	ldi	r19, 0x00	; 0
     824:	48 ec       	ldi	r20, 0xC8	; 200
     826:	52 e4       	ldi	r21, 0x42	; 66
     828:	bc 01       	movw	r22, r24
     82a:	cd 01       	movw	r24, r26
     82c:	0e 94 95 13 	call	0x272a	; 0x272a <fmin>
     830:	dc 01       	movw	r26, r24
     832:	cb 01       	movw	r24, r22
     834:	20 e0       	ldi	r18, 0x00	; 0
     836:	30 e0       	ldi	r19, 0x00	; 0
     838:	a9 01       	movw	r20, r18
     83a:	bc 01       	movw	r22, r24
     83c:	cd 01       	movw	r24, r26
     83e:	0e 94 63 13 	call	0x26c6	; 0x26c6 <fmax>
     842:	dc 01       	movw	r26, r24
     844:	cb 01       	movw	r24, r22
     846:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <app_settings>
     84a:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <app_settings+0x1>
     84e:	a0 93 1c 01 	sts	0x011C, r26	; 0x80011c <app_settings+0x2>
     852:	b0 93 1d 01 	sts	0x011D, r27	; 0x80011d <app_settings+0x3>
	
	// display current value
	srd_clear();
     856:	0e 94 a2 1b 	call	0x3744	; 0x3744 <srd_clear>
	mr_heater_menu_target_temp(app_settings.heater_target_temp);
     85a:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <app_settings>
     85e:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <app_settings+0x1>
     862:	a0 91 1c 01 	lds	r26, 0x011C	; 0x80011c <app_settings+0x2>
     866:	b0 91 1d 01 	lds	r27, 0x011D	; 0x80011d <app_settings+0x3>
     86a:	bc 01       	movw	r22, r24
     86c:	cd 01       	movw	r24, r26
     86e:	0e 94 5b 11 	call	0x22b6	; 0x22b6 <mr_heater_menu_target_temp>
	srd_display();
     872:	0e 94 91 1b 	call	0x3722	; 0x3722 <srd_display>
	
	if(app_current_input.button_presses & (1 << BUTTON0))
     876:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <app_current_input+0x2>
     87a:	88 2f       	mov	r24, r24
     87c:	90 e0       	ldi	r25, 0x00	; 0
     87e:	81 70       	andi	r24, 0x01	; 1
     880:	99 27       	eor	r25, r25
     882:	89 2b       	or	r24, r25
     884:	49 f0       	breq	.+18     	; 0x898 <app_state_menu_heater_target_temp+0xe6>
	{
		app_selected_menu_item_index = 2;
     886:	82 e0       	ldi	r24, 0x02	; 2
     888:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <app_selected_menu_item_index>
		app_current_state_func = app_state_menu_heater;
     88c:	8c e1       	ldi	r24, 0x1C	; 28
     88e:	93 e0       	ldi	r25, 0x03	; 3
     890:	90 93 61 01 	sts	0x0161, r25	; 0x800161 <app_current_state_func+0x1>
     894:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <app_current_state_func>
	}
	return FALSE;
     898:	80 e0       	ldi	r24, 0x00	; 0
}
     89a:	df 91       	pop	r29
     89c:	cf 91       	pop	r28
     89e:	ff 90       	pop	r15
     8a0:	ef 90       	pop	r14
     8a2:	df 90       	pop	r13
     8a4:	cf 90       	pop	r12
     8a6:	08 95       	ret

000008a8 <app_state_menu_heater_pid>:

uint8_t app_state_menu_heater_pid()
{
     8a8:	cf 93       	push	r28
     8aa:	df 93       	push	r29
     8ac:	cd b7       	in	r28, 0x3d	; 61
     8ae:	de b7       	in	r29, 0x3e	; 62
	if(app_current_input.rotenc_delta > 0)
     8b0:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <app_current_input>
     8b4:	90 91 56 01 	lds	r25, 0x0156	; 0x800156 <app_current_input+0x1>
     8b8:	18 16       	cp	r1, r24
     8ba:	19 06       	cpc	r1, r25
     8bc:	64 f4       	brge	.+24     	; 0x8d6 <app_state_menu_heater_pid+0x2e>
		app_selected_menu_item_index = imax8(imin8(app_selected_menu_item_index + 1, 3), 0);
     8be:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <app_selected_menu_item_index>
     8c2:	8f 5f       	subi	r24, 0xFF	; 255
     8c4:	63 e0       	ldi	r22, 0x03	; 3
     8c6:	0e 94 17 13 	call	0x262e	; 0x262e <imin8>
     8ca:	60 e0       	ldi	r22, 0x00	; 0
     8cc:	0e 94 ed 12 	call	0x25da	; 0x25da <imax8>
     8d0:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <app_selected_menu_item_index>
     8d4:	11 c0       	rjmp	.+34     	; 0x8f8 <app_state_menu_heater_pid+0x50>
	else if(app_current_input.rotenc_delta < 0)
     8d6:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <app_current_input>
     8da:	90 91 56 01 	lds	r25, 0x0156	; 0x800156 <app_current_input+0x1>
     8de:	99 23       	and	r25, r25
     8e0:	5c f4       	brge	.+22     	; 0x8f8 <app_state_menu_heater_pid+0x50>
		app_selected_menu_item_index = imax8(imin8(app_selected_menu_item_index - 1, 3), 0);
     8e2:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <app_selected_menu_item_index>
     8e6:	81 50       	subi	r24, 0x01	; 1
     8e8:	63 e0       	ldi	r22, 0x03	; 3
     8ea:	0e 94 17 13 	call	0x262e	; 0x262e <imin8>
     8ee:	60 e0       	ldi	r22, 0x00	; 0
     8f0:	0e 94 ed 12 	call	0x25da	; 0x25da <imax8>
     8f4:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <app_selected_menu_item_index>
	// display selected menu item
	srd_clear();
     8f8:	0e 94 a2 1b 	call	0x3744	; 0x3744 <srd_clear>
	mr_heater_menu_pid(app_selected_menu_item_index);
     8fc:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <app_selected_menu_item_index>
     900:	0e 94 f7 10 	call	0x21ee	; 0x21ee <mr_heater_menu_pid>
	srd_display();
     904:	0e 94 91 1b 	call	0x3722	; 0x3722 <srd_display>
	
	// state change
	if(app_current_input.button_presses & (1 << BUTTON0))
     908:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <app_current_input+0x2>
     90c:	88 2f       	mov	r24, r24
     90e:	90 e0       	ldi	r25, 0x00	; 0
     910:	81 70       	andi	r24, 0x01	; 1
     912:	99 27       	eor	r25, r25
     914:	89 2b       	or	r24, r25
     916:	c9 f1       	breq	.+114    	; 0x98a <app_state_menu_heater_pid+0xe2>
	{
		switch(app_selected_menu_item_index)
     918:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <app_selected_menu_item_index>
     91c:	08 2e       	mov	r0, r24
     91e:	00 0c       	add	r0, r0
     920:	99 0b       	sbc	r25, r25
     922:	81 30       	cpi	r24, 0x01	; 1
     924:	91 05       	cpc	r25, r1
     926:	b1 f0       	breq	.+44     	; 0x954 <app_state_menu_heater_pid+0xac>
     928:	82 30       	cpi	r24, 0x02	; 2
     92a:	91 05       	cpc	r25, r1
     92c:	1c f4       	brge	.+6      	; 0x934 <app_state_menu_heater_pid+0x8c>
     92e:	89 2b       	or	r24, r25
     930:	39 f0       	breq	.+14     	; 0x940 <app_state_menu_heater_pid+0x98>
     932:	2b c0       	rjmp	.+86     	; 0x98a <app_state_menu_heater_pid+0xe2>
     934:	82 30       	cpi	r24, 0x02	; 2
     936:	91 05       	cpc	r25, r1
     938:	b1 f0       	breq	.+44     	; 0x966 <app_state_menu_heater_pid+0xbe>
     93a:	03 97       	sbiw	r24, 0x03	; 3
     93c:	e9 f0       	breq	.+58     	; 0x978 <app_state_menu_heater_pid+0xd0>
     93e:	25 c0       	rjmp	.+74     	; 0x98a <app_state_menu_heater_pid+0xe2>
		{
			case 0:	// back to main menu
				app_selected_menu_item_index = 3;
     940:	83 e0       	ldi	r24, 0x03	; 3
     942:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <app_selected_menu_item_index>
				app_current_state_func = app_state_menu_heater;
     946:	8c e1       	ldi	r24, 0x1C	; 28
     948:	93 e0       	ldi	r25, 0x03	; 3
     94a:	90 93 61 01 	sts	0x0161, r25	; 0x800161 <app_current_state_func+0x1>
     94e:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <app_current_state_func>
				break;
     952:	1b c0       	rjmp	.+54     	; 0x98a <app_state_menu_heater_pid+0xe2>
			case 1: // P
				app_selected_menu_item_index = 0;
     954:	10 92 5b 01 	sts	0x015B, r1	; 0x80015b <app_selected_menu_item_index>
				app_current_state_func = app_state_menu_heater_pid_p;
     958:	89 ec       	ldi	r24, 0xC9	; 201
     95a:	94 e0       	ldi	r25, 0x04	; 4
     95c:	90 93 61 01 	sts	0x0161, r25	; 0x800161 <app_current_state_func+0x1>
     960:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <app_current_state_func>
				break;
     964:	12 c0       	rjmp	.+36     	; 0x98a <app_state_menu_heater_pid+0xe2>
			case 2:	// I
				app_selected_menu_item_index = 0;
     966:	10 92 5b 01 	sts	0x015B, r1	; 0x80015b <app_selected_menu_item_index>
				app_current_state_func = app_state_menu_heater_pid_i;
     96a:	8f e7       	ldi	r24, 0x7F	; 127
     96c:	95 e0       	ldi	r25, 0x05	; 5
     96e:	90 93 61 01 	sts	0x0161, r25	; 0x800161 <app_current_state_func+0x1>
     972:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <app_current_state_func>
				break;
     976:	09 c0       	rjmp	.+18     	; 0x98a <app_state_menu_heater_pid+0xe2>
			case 3:	// D
				app_selected_menu_item_index = 0;
     978:	10 92 5b 01 	sts	0x015B, r1	; 0x80015b <app_selected_menu_item_index>
				app_current_state_func = app_state_menu_heater_pid_d;
     97c:	85 e3       	ldi	r24, 0x35	; 53
     97e:	96 e0       	ldi	r25, 0x06	; 6
     980:	90 93 61 01 	sts	0x0161, r25	; 0x800161 <app_current_state_func+0x1>
     984:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <app_current_state_func>
				break;
     988:	00 00       	nop
		}
	}
	return FALSE;
     98a:	80 e0       	ldi	r24, 0x00	; 0
}
     98c:	df 91       	pop	r29
     98e:	cf 91       	pop	r28
     990:	08 95       	ret

00000992 <app_state_menu_heater_pid_p>:

uint8_t app_state_menu_heater_pid_p()
{
     992:	8f 92       	push	r8
     994:	9f 92       	push	r9
     996:	af 92       	push	r10
     998:	bf 92       	push	r11
     99a:	cf 92       	push	r12
     99c:	df 92       	push	r13
     99e:	ef 92       	push	r14
     9a0:	ff 92       	push	r15
     9a2:	0f 93       	push	r16
     9a4:	1f 93       	push	r17
     9a6:	cf 93       	push	r28
     9a8:	df 93       	push	r29
     9aa:	cd b7       	in	r28, 0x3d	; 61
     9ac:	de b7       	in	r29, 0x3e	; 62
	if(app_current_input.rotenc_delta != 0)
     9ae:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <app_current_input>
     9b2:	90 91 56 01 	lds	r25, 0x0156	; 0x800156 <app_current_input+0x1>
     9b6:	89 2b       	or	r24, r25
     9b8:	09 f4       	brne	.+2      	; 0x9bc <app_state_menu_heater_pid_p+0x2a>
     9ba:	72 c0       	rjmp	.+228    	; 0xaa0 <app_state_menu_heater_pid_p+0x10e>
	{
		app_settings.heater_pid_p = fmax(fmin(app_settings.heater_pid_p + app_current_input.rotenc_delta * PID_CHANGE_PER_ROTENC_STEP, MAX_HEATER_PID_P), MIN_HEATER_PID_P);
     9bc:	c0 90 1e 01 	lds	r12, 0x011E	; 0x80011e <app_settings+0x4>
     9c0:	d0 90 1f 01 	lds	r13, 0x011F	; 0x80011f <app_settings+0x5>
     9c4:	e0 90 20 01 	lds	r14, 0x0120	; 0x800120 <app_settings+0x6>
     9c8:	f0 90 21 01 	lds	r15, 0x0121	; 0x800121 <app_settings+0x7>
     9cc:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <app_current_input>
     9d0:	90 91 56 01 	lds	r25, 0x0156	; 0x800156 <app_current_input+0x1>
     9d4:	09 2e       	mov	r0, r25
     9d6:	00 0c       	add	r0, r0
     9d8:	aa 0b       	sbc	r26, r26
     9da:	bb 0b       	sbc	r27, r27
     9dc:	bc 01       	movw	r22, r24
     9de:	cd 01       	movw	r24, r26
     9e0:	0e 94 ed 22 	call	0x45da	; 0x45da <__floatsisf>
     9e4:	dc 01       	movw	r26, r24
     9e6:	cb 01       	movw	r24, r22
     9e8:	2d ec       	ldi	r18, 0xCD	; 205
     9ea:	3c ec       	ldi	r19, 0xCC	; 204
     9ec:	4c e4       	ldi	r20, 0x4C	; 76
     9ee:	5d e3       	ldi	r21, 0x3D	; 61
     9f0:	bc 01       	movw	r22, r24
     9f2:	cd 01       	movw	r24, r26
     9f4:	0e 94 02 24 	call	0x4804	; 0x4804 <__mulsf3>
     9f8:	dc 01       	movw	r26, r24
     9fa:	cb 01       	movw	r24, r22
     9fc:	9c 01       	movw	r18, r24
     9fe:	ad 01       	movw	r20, r26
     a00:	c7 01       	movw	r24, r14
     a02:	b6 01       	movw	r22, r12
     a04:	0e 94 96 21 	call	0x432c	; 0x432c <__addsf3>
     a08:	dc 01       	movw	r26, r24
     a0a:	cb 01       	movw	r24, r22
     a0c:	20 e0       	ldi	r18, 0x00	; 0
     a0e:	30 e0       	ldi	r19, 0x00	; 0
     a10:	4a e7       	ldi	r20, 0x7A	; 122
     a12:	54 e4       	ldi	r21, 0x44	; 68
     a14:	bc 01       	movw	r22, r24
     a16:	cd 01       	movw	r24, r26
     a18:	0e 94 95 13 	call	0x272a	; 0x272a <fmin>
     a1c:	dc 01       	movw	r26, r24
     a1e:	cb 01       	movw	r24, r22
     a20:	20 e0       	ldi	r18, 0x00	; 0
     a22:	30 e0       	ldi	r19, 0x00	; 0
     a24:	a9 01       	movw	r20, r18
     a26:	bc 01       	movw	r22, r24
     a28:	cd 01       	movw	r24, r26
     a2a:	0e 94 63 13 	call	0x26c6	; 0x26c6 <fmax>
     a2e:	dc 01       	movw	r26, r24
     a30:	cb 01       	movw	r24, r22
     a32:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <app_settings+0x4>
     a36:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <app_settings+0x5>
     a3a:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <app_settings+0x6>
     a3e:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <app_settings+0x7>
		pid_set_params(&app_pid_state, app_settings.heater_pid_p, app_settings.heater_pid_i, app_settings.heater_pid_d, HEATER_CONTROL_MIN, HEATER_CONTROL_MAX);
     a42:	e0 90 26 01 	lds	r14, 0x0126	; 0x800126 <app_settings+0xc>
     a46:	f0 90 27 01 	lds	r15, 0x0127	; 0x800127 <app_settings+0xd>
     a4a:	00 91 28 01 	lds	r16, 0x0128	; 0x800128 <app_settings+0xe>
     a4e:	10 91 29 01 	lds	r17, 0x0129	; 0x800129 <app_settings+0xf>
     a52:	20 91 22 01 	lds	r18, 0x0122	; 0x800122 <app_settings+0x8>
     a56:	30 91 23 01 	lds	r19, 0x0123	; 0x800123 <app_settings+0x9>
     a5a:	40 91 24 01 	lds	r20, 0x0124	; 0x800124 <app_settings+0xa>
     a5e:	50 91 25 01 	lds	r21, 0x0125	; 0x800125 <app_settings+0xb>
     a62:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <app_settings+0x4>
     a66:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <app_settings+0x5>
     a6a:	a0 91 20 01 	lds	r26, 0x0120	; 0x800120 <app_settings+0x6>
     a6e:	b0 91 21 01 	lds	r27, 0x0121	; 0x800121 <app_settings+0x7>
     a72:	62 e4       	ldi	r22, 0x42	; 66
     a74:	6f 93       	push	r22
     a76:	68 ec       	ldi	r22, 0xC8	; 200
     a78:	6f 93       	push	r22
     a7a:	1f 92       	push	r1
     a7c:	1f 92       	push	r1
     a7e:	81 2c       	mov	r8, r1
     a80:	91 2c       	mov	r9, r1
     a82:	54 01       	movw	r10, r8
     a84:	67 01       	movw	r12, r14
     a86:	78 01       	movw	r14, r16
     a88:	89 01       	movw	r16, r18
     a8a:	9a 01       	movw	r18, r20
     a8c:	ac 01       	movw	r20, r24
     a8e:	bd 01       	movw	r22, r26
     a90:	89 e3       	ldi	r24, 0x39	; 57
     a92:	91 e0       	ldi	r25, 0x01	; 1
     a94:	0e 94 46 14 	call	0x288c	; 0x288c <pid_set_params>
     a98:	0f 90       	pop	r0
     a9a:	0f 90       	pop	r0
     a9c:	0f 90       	pop	r0
     a9e:	0f 90       	pop	r0
	}
	
	// display current value
	srd_clear();
     aa0:	0e 94 a2 1b 	call	0x3744	; 0x3744 <srd_clear>
	mr_heater_menu_pid_p(app_settings.heater_pid_p);
     aa4:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <app_settings+0x4>
     aa8:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <app_settings+0x5>
     aac:	a0 91 20 01 	lds	r26, 0x0120	; 0x800120 <app_settings+0x6>
     ab0:	b0 91 21 01 	lds	r27, 0x0121	; 0x800121 <app_settings+0x7>
     ab4:	bc 01       	movw	r22, r24
     ab6:	cd 01       	movw	r24, r26
     ab8:	0e 94 7e 11 	call	0x22fc	; 0x22fc <mr_heater_menu_pid_p>
	srd_display();
     abc:	0e 94 91 1b 	call	0x3722	; 0x3722 <srd_display>
	
	if(app_current_input.button_presses & (1 << BUTTON0))
     ac0:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <app_current_input+0x2>
     ac4:	88 2f       	mov	r24, r24
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	81 70       	andi	r24, 0x01	; 1
     aca:	99 27       	eor	r25, r25
     acc:	89 2b       	or	r24, r25
     ace:	49 f0       	breq	.+18     	; 0xae2 <app_state_menu_heater_pid_p+0x150>
	{
		app_selected_menu_item_index = 1;
     ad0:	81 e0       	ldi	r24, 0x01	; 1
     ad2:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <app_selected_menu_item_index>
		app_current_state_func = app_state_menu_heater_pid;
     ad6:	84 e5       	ldi	r24, 0x54	; 84
     ad8:	94 e0       	ldi	r25, 0x04	; 4
     ada:	90 93 61 01 	sts	0x0161, r25	; 0x800161 <app_current_state_func+0x1>
     ade:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <app_current_state_func>
	}
	return FALSE;
     ae2:	80 e0       	ldi	r24, 0x00	; 0
}
     ae4:	df 91       	pop	r29
     ae6:	cf 91       	pop	r28
     ae8:	1f 91       	pop	r17
     aea:	0f 91       	pop	r16
     aec:	ff 90       	pop	r15
     aee:	ef 90       	pop	r14
     af0:	df 90       	pop	r13
     af2:	cf 90       	pop	r12
     af4:	bf 90       	pop	r11
     af6:	af 90       	pop	r10
     af8:	9f 90       	pop	r9
     afa:	8f 90       	pop	r8
     afc:	08 95       	ret

00000afe <app_state_menu_heater_pid_i>:

uint8_t app_state_menu_heater_pid_i()
{
     afe:	8f 92       	push	r8
     b00:	9f 92       	push	r9
     b02:	af 92       	push	r10
     b04:	bf 92       	push	r11
     b06:	cf 92       	push	r12
     b08:	df 92       	push	r13
     b0a:	ef 92       	push	r14
     b0c:	ff 92       	push	r15
     b0e:	0f 93       	push	r16
     b10:	1f 93       	push	r17
     b12:	cf 93       	push	r28
     b14:	df 93       	push	r29
     b16:	cd b7       	in	r28, 0x3d	; 61
     b18:	de b7       	in	r29, 0x3e	; 62
	if(app_current_input.rotenc_delta != 0)
     b1a:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <app_current_input>
     b1e:	90 91 56 01 	lds	r25, 0x0156	; 0x800156 <app_current_input+0x1>
     b22:	89 2b       	or	r24, r25
     b24:	09 f4       	brne	.+2      	; 0xb28 <app_state_menu_heater_pid_i+0x2a>
     b26:	72 c0       	rjmp	.+228    	; 0xc0c <app_state_menu_heater_pid_i+0x10e>
	{
		app_settings.heater_pid_i = fmax(fmin(app_settings.heater_pid_i + app_current_input.rotenc_delta * PID_CHANGE_PER_ROTENC_STEP, MAX_HEATER_PID_I), MIN_HEATER_PID_I);
     b28:	c0 90 22 01 	lds	r12, 0x0122	; 0x800122 <app_settings+0x8>
     b2c:	d0 90 23 01 	lds	r13, 0x0123	; 0x800123 <app_settings+0x9>
     b30:	e0 90 24 01 	lds	r14, 0x0124	; 0x800124 <app_settings+0xa>
     b34:	f0 90 25 01 	lds	r15, 0x0125	; 0x800125 <app_settings+0xb>
     b38:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <app_current_input>
     b3c:	90 91 56 01 	lds	r25, 0x0156	; 0x800156 <app_current_input+0x1>
     b40:	09 2e       	mov	r0, r25
     b42:	00 0c       	add	r0, r0
     b44:	aa 0b       	sbc	r26, r26
     b46:	bb 0b       	sbc	r27, r27
     b48:	bc 01       	movw	r22, r24
     b4a:	cd 01       	movw	r24, r26
     b4c:	0e 94 ed 22 	call	0x45da	; 0x45da <__floatsisf>
     b50:	dc 01       	movw	r26, r24
     b52:	cb 01       	movw	r24, r22
     b54:	2d ec       	ldi	r18, 0xCD	; 205
     b56:	3c ec       	ldi	r19, 0xCC	; 204
     b58:	4c e4       	ldi	r20, 0x4C	; 76
     b5a:	5d e3       	ldi	r21, 0x3D	; 61
     b5c:	bc 01       	movw	r22, r24
     b5e:	cd 01       	movw	r24, r26
     b60:	0e 94 02 24 	call	0x4804	; 0x4804 <__mulsf3>
     b64:	dc 01       	movw	r26, r24
     b66:	cb 01       	movw	r24, r22
     b68:	9c 01       	movw	r18, r24
     b6a:	ad 01       	movw	r20, r26
     b6c:	c7 01       	movw	r24, r14
     b6e:	b6 01       	movw	r22, r12
     b70:	0e 94 96 21 	call	0x432c	; 0x432c <__addsf3>
     b74:	dc 01       	movw	r26, r24
     b76:	cb 01       	movw	r24, r22
     b78:	20 e0       	ldi	r18, 0x00	; 0
     b7a:	30 e0       	ldi	r19, 0x00	; 0
     b7c:	4a e7       	ldi	r20, 0x7A	; 122
     b7e:	54 e4       	ldi	r21, 0x44	; 68
     b80:	bc 01       	movw	r22, r24
     b82:	cd 01       	movw	r24, r26
     b84:	0e 94 95 13 	call	0x272a	; 0x272a <fmin>
     b88:	dc 01       	movw	r26, r24
     b8a:	cb 01       	movw	r24, r22
     b8c:	20 e0       	ldi	r18, 0x00	; 0
     b8e:	30 e0       	ldi	r19, 0x00	; 0
     b90:	a9 01       	movw	r20, r18
     b92:	bc 01       	movw	r22, r24
     b94:	cd 01       	movw	r24, r26
     b96:	0e 94 63 13 	call	0x26c6	; 0x26c6 <fmax>
     b9a:	dc 01       	movw	r26, r24
     b9c:	cb 01       	movw	r24, r22
     b9e:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <app_settings+0x8>
     ba2:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <app_settings+0x9>
     ba6:	a0 93 24 01 	sts	0x0124, r26	; 0x800124 <app_settings+0xa>
     baa:	b0 93 25 01 	sts	0x0125, r27	; 0x800125 <app_settings+0xb>
		pid_set_params(&app_pid_state, app_settings.heater_pid_p, app_settings.heater_pid_i, app_settings.heater_pid_d, HEATER_CONTROL_MIN, HEATER_CONTROL_MAX);
     bae:	e0 90 26 01 	lds	r14, 0x0126	; 0x800126 <app_settings+0xc>
     bb2:	f0 90 27 01 	lds	r15, 0x0127	; 0x800127 <app_settings+0xd>
     bb6:	00 91 28 01 	lds	r16, 0x0128	; 0x800128 <app_settings+0xe>
     bba:	10 91 29 01 	lds	r17, 0x0129	; 0x800129 <app_settings+0xf>
     bbe:	20 91 22 01 	lds	r18, 0x0122	; 0x800122 <app_settings+0x8>
     bc2:	30 91 23 01 	lds	r19, 0x0123	; 0x800123 <app_settings+0x9>
     bc6:	40 91 24 01 	lds	r20, 0x0124	; 0x800124 <app_settings+0xa>
     bca:	50 91 25 01 	lds	r21, 0x0125	; 0x800125 <app_settings+0xb>
     bce:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <app_settings+0x4>
     bd2:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <app_settings+0x5>
     bd6:	a0 91 20 01 	lds	r26, 0x0120	; 0x800120 <app_settings+0x6>
     bda:	b0 91 21 01 	lds	r27, 0x0121	; 0x800121 <app_settings+0x7>
     bde:	62 e4       	ldi	r22, 0x42	; 66
     be0:	6f 93       	push	r22
     be2:	68 ec       	ldi	r22, 0xC8	; 200
     be4:	6f 93       	push	r22
     be6:	1f 92       	push	r1
     be8:	1f 92       	push	r1
     bea:	81 2c       	mov	r8, r1
     bec:	91 2c       	mov	r9, r1
     bee:	54 01       	movw	r10, r8
     bf0:	67 01       	movw	r12, r14
     bf2:	78 01       	movw	r14, r16
     bf4:	89 01       	movw	r16, r18
     bf6:	9a 01       	movw	r18, r20
     bf8:	ac 01       	movw	r20, r24
     bfa:	bd 01       	movw	r22, r26
     bfc:	89 e3       	ldi	r24, 0x39	; 57
     bfe:	91 e0       	ldi	r25, 0x01	; 1
     c00:	0e 94 46 14 	call	0x288c	; 0x288c <pid_set_params>
     c04:	0f 90       	pop	r0
     c06:	0f 90       	pop	r0
     c08:	0f 90       	pop	r0
     c0a:	0f 90       	pop	r0
	}
	
	// display current value
	srd_clear();
     c0c:	0e 94 a2 1b 	call	0x3744	; 0x3744 <srd_clear>
	mr_heater_menu_pid_i(app_settings.heater_pid_i);
     c10:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <app_settings+0x8>
     c14:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <app_settings+0x9>
     c18:	a0 91 24 01 	lds	r26, 0x0124	; 0x800124 <app_settings+0xa>
     c1c:	b0 91 25 01 	lds	r27, 0x0125	; 0x800125 <app_settings+0xb>
     c20:	bc 01       	movw	r22, r24
     c22:	cd 01       	movw	r24, r26
     c24:	0e 94 a1 11 	call	0x2342	; 0x2342 <mr_heater_menu_pid_i>
	srd_display();
     c28:	0e 94 91 1b 	call	0x3722	; 0x3722 <srd_display>
	
	if(app_current_input.button_presses & (1 << BUTTON0))
     c2c:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <app_current_input+0x2>
     c30:	88 2f       	mov	r24, r24
     c32:	90 e0       	ldi	r25, 0x00	; 0
     c34:	81 70       	andi	r24, 0x01	; 1
     c36:	99 27       	eor	r25, r25
     c38:	89 2b       	or	r24, r25
     c3a:	49 f0       	breq	.+18     	; 0xc4e <app_state_menu_heater_pid_i+0x150>
	{
		app_selected_menu_item_index = 2;
     c3c:	82 e0       	ldi	r24, 0x02	; 2
     c3e:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <app_selected_menu_item_index>
		app_current_state_func = app_state_menu_heater_pid;
     c42:	84 e5       	ldi	r24, 0x54	; 84
     c44:	94 e0       	ldi	r25, 0x04	; 4
     c46:	90 93 61 01 	sts	0x0161, r25	; 0x800161 <app_current_state_func+0x1>
     c4a:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <app_current_state_func>
	}
	return FALSE;
     c4e:	80 e0       	ldi	r24, 0x00	; 0
}
     c50:	df 91       	pop	r29
     c52:	cf 91       	pop	r28
     c54:	1f 91       	pop	r17
     c56:	0f 91       	pop	r16
     c58:	ff 90       	pop	r15
     c5a:	ef 90       	pop	r14
     c5c:	df 90       	pop	r13
     c5e:	cf 90       	pop	r12
     c60:	bf 90       	pop	r11
     c62:	af 90       	pop	r10
     c64:	9f 90       	pop	r9
     c66:	8f 90       	pop	r8
     c68:	08 95       	ret

00000c6a <app_state_menu_heater_pid_d>:

uint8_t app_state_menu_heater_pid_d()
{
     c6a:	8f 92       	push	r8
     c6c:	9f 92       	push	r9
     c6e:	af 92       	push	r10
     c70:	bf 92       	push	r11
     c72:	cf 92       	push	r12
     c74:	df 92       	push	r13
     c76:	ef 92       	push	r14
     c78:	ff 92       	push	r15
     c7a:	0f 93       	push	r16
     c7c:	1f 93       	push	r17
     c7e:	cf 93       	push	r28
     c80:	df 93       	push	r29
     c82:	cd b7       	in	r28, 0x3d	; 61
     c84:	de b7       	in	r29, 0x3e	; 62
	if(app_current_input.rotenc_delta != 0)
     c86:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <app_current_input>
     c8a:	90 91 56 01 	lds	r25, 0x0156	; 0x800156 <app_current_input+0x1>
     c8e:	89 2b       	or	r24, r25
     c90:	09 f4       	brne	.+2      	; 0xc94 <app_state_menu_heater_pid_d+0x2a>
     c92:	72 c0       	rjmp	.+228    	; 0xd78 <app_state_menu_heater_pid_d+0x10e>
	{
		app_settings.heater_pid_d = fmax(fmin(app_settings.heater_pid_d + app_current_input.rotenc_delta * PID_CHANGE_PER_ROTENC_STEP, MAX_HEATER_PID_D), MIN_HEATER_PID_D);
     c94:	c0 90 26 01 	lds	r12, 0x0126	; 0x800126 <app_settings+0xc>
     c98:	d0 90 27 01 	lds	r13, 0x0127	; 0x800127 <app_settings+0xd>
     c9c:	e0 90 28 01 	lds	r14, 0x0128	; 0x800128 <app_settings+0xe>
     ca0:	f0 90 29 01 	lds	r15, 0x0129	; 0x800129 <app_settings+0xf>
     ca4:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <app_current_input>
     ca8:	90 91 56 01 	lds	r25, 0x0156	; 0x800156 <app_current_input+0x1>
     cac:	09 2e       	mov	r0, r25
     cae:	00 0c       	add	r0, r0
     cb0:	aa 0b       	sbc	r26, r26
     cb2:	bb 0b       	sbc	r27, r27
     cb4:	bc 01       	movw	r22, r24
     cb6:	cd 01       	movw	r24, r26
     cb8:	0e 94 ed 22 	call	0x45da	; 0x45da <__floatsisf>
     cbc:	dc 01       	movw	r26, r24
     cbe:	cb 01       	movw	r24, r22
     cc0:	2d ec       	ldi	r18, 0xCD	; 205
     cc2:	3c ec       	ldi	r19, 0xCC	; 204
     cc4:	4c e4       	ldi	r20, 0x4C	; 76
     cc6:	5d e3       	ldi	r21, 0x3D	; 61
     cc8:	bc 01       	movw	r22, r24
     cca:	cd 01       	movw	r24, r26
     ccc:	0e 94 02 24 	call	0x4804	; 0x4804 <__mulsf3>
     cd0:	dc 01       	movw	r26, r24
     cd2:	cb 01       	movw	r24, r22
     cd4:	9c 01       	movw	r18, r24
     cd6:	ad 01       	movw	r20, r26
     cd8:	c7 01       	movw	r24, r14
     cda:	b6 01       	movw	r22, r12
     cdc:	0e 94 96 21 	call	0x432c	; 0x432c <__addsf3>
     ce0:	dc 01       	movw	r26, r24
     ce2:	cb 01       	movw	r24, r22
     ce4:	20 e0       	ldi	r18, 0x00	; 0
     ce6:	30 e0       	ldi	r19, 0x00	; 0
     ce8:	4a e7       	ldi	r20, 0x7A	; 122
     cea:	54 e4       	ldi	r21, 0x44	; 68
     cec:	bc 01       	movw	r22, r24
     cee:	cd 01       	movw	r24, r26
     cf0:	0e 94 95 13 	call	0x272a	; 0x272a <fmin>
     cf4:	dc 01       	movw	r26, r24
     cf6:	cb 01       	movw	r24, r22
     cf8:	20 e0       	ldi	r18, 0x00	; 0
     cfa:	30 e0       	ldi	r19, 0x00	; 0
     cfc:	a9 01       	movw	r20, r18
     cfe:	bc 01       	movw	r22, r24
     d00:	cd 01       	movw	r24, r26
     d02:	0e 94 63 13 	call	0x26c6	; 0x26c6 <fmax>
     d06:	dc 01       	movw	r26, r24
     d08:	cb 01       	movw	r24, r22
     d0a:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <app_settings+0xc>
     d0e:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <app_settings+0xd>
     d12:	a0 93 28 01 	sts	0x0128, r26	; 0x800128 <app_settings+0xe>
     d16:	b0 93 29 01 	sts	0x0129, r27	; 0x800129 <app_settings+0xf>
		pid_set_params(&app_pid_state, app_settings.heater_pid_p, app_settings.heater_pid_i, app_settings.heater_pid_d, HEATER_CONTROL_MIN, HEATER_CONTROL_MAX);
     d1a:	e0 90 26 01 	lds	r14, 0x0126	; 0x800126 <app_settings+0xc>
     d1e:	f0 90 27 01 	lds	r15, 0x0127	; 0x800127 <app_settings+0xd>
     d22:	00 91 28 01 	lds	r16, 0x0128	; 0x800128 <app_settings+0xe>
     d26:	10 91 29 01 	lds	r17, 0x0129	; 0x800129 <app_settings+0xf>
     d2a:	20 91 22 01 	lds	r18, 0x0122	; 0x800122 <app_settings+0x8>
     d2e:	30 91 23 01 	lds	r19, 0x0123	; 0x800123 <app_settings+0x9>
     d32:	40 91 24 01 	lds	r20, 0x0124	; 0x800124 <app_settings+0xa>
     d36:	50 91 25 01 	lds	r21, 0x0125	; 0x800125 <app_settings+0xb>
     d3a:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <app_settings+0x4>
     d3e:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <app_settings+0x5>
     d42:	a0 91 20 01 	lds	r26, 0x0120	; 0x800120 <app_settings+0x6>
     d46:	b0 91 21 01 	lds	r27, 0x0121	; 0x800121 <app_settings+0x7>
     d4a:	62 e4       	ldi	r22, 0x42	; 66
     d4c:	6f 93       	push	r22
     d4e:	68 ec       	ldi	r22, 0xC8	; 200
     d50:	6f 93       	push	r22
     d52:	1f 92       	push	r1
     d54:	1f 92       	push	r1
     d56:	81 2c       	mov	r8, r1
     d58:	91 2c       	mov	r9, r1
     d5a:	54 01       	movw	r10, r8
     d5c:	67 01       	movw	r12, r14
     d5e:	78 01       	movw	r14, r16
     d60:	89 01       	movw	r16, r18
     d62:	9a 01       	movw	r18, r20
     d64:	ac 01       	movw	r20, r24
     d66:	bd 01       	movw	r22, r26
     d68:	89 e3       	ldi	r24, 0x39	; 57
     d6a:	91 e0       	ldi	r25, 0x01	; 1
     d6c:	0e 94 46 14 	call	0x288c	; 0x288c <pid_set_params>
     d70:	0f 90       	pop	r0
     d72:	0f 90       	pop	r0
     d74:	0f 90       	pop	r0
     d76:	0f 90       	pop	r0
	}
	
	// display current value
	srd_clear();
     d78:	0e 94 a2 1b 	call	0x3744	; 0x3744 <srd_clear>
	mr_heater_menu_pid_d(app_settings.heater_pid_d);
     d7c:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <app_settings+0xc>
     d80:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <app_settings+0xd>
     d84:	a0 91 28 01 	lds	r26, 0x0128	; 0x800128 <app_settings+0xe>
     d88:	b0 91 29 01 	lds	r27, 0x0129	; 0x800129 <app_settings+0xf>
     d8c:	bc 01       	movw	r22, r24
     d8e:	cd 01       	movw	r24, r26
     d90:	0e 94 c4 11 	call	0x2388	; 0x2388 <mr_heater_menu_pid_d>
	srd_display();
     d94:	0e 94 91 1b 	call	0x3722	; 0x3722 <srd_display>
	
	if(app_current_input.button_presses & (1 << BUTTON0))
     d98:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <app_current_input+0x2>
     d9c:	88 2f       	mov	r24, r24
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	81 70       	andi	r24, 0x01	; 1
     da2:	99 27       	eor	r25, r25
     da4:	89 2b       	or	r24, r25
     da6:	49 f0       	breq	.+18     	; 0xdba <app_state_menu_heater_pid_d+0x150>
	{
		app_selected_menu_item_index = 3;
     da8:	83 e0       	ldi	r24, 0x03	; 3
     daa:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <app_selected_menu_item_index>
		app_current_state_func = app_state_menu_heater_pid;
     dae:	84 e5       	ldi	r24, 0x54	; 84
     db0:	94 e0       	ldi	r25, 0x04	; 4
     db2:	90 93 61 01 	sts	0x0161, r25	; 0x800161 <app_current_state_func+0x1>
     db6:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <app_current_state_func>
	}
	return FALSE;
     dba:	80 e0       	ldi	r24, 0x00	; 0
}
     dbc:	df 91       	pop	r29
     dbe:	cf 91       	pop	r28
     dc0:	1f 91       	pop	r17
     dc2:	0f 91       	pop	r16
     dc4:	ff 90       	pop	r15
     dc6:	ef 90       	pop	r14
     dc8:	df 90       	pop	r13
     dca:	cf 90       	pop	r12
     dcc:	bf 90       	pop	r11
     dce:	af 90       	pop	r10
     dd0:	9f 90       	pop	r9
     dd2:	8f 90       	pop	r8
     dd4:	08 95       	ret

00000dd6 <app_state_menu_heater_offset>:

uint8_t app_state_menu_heater_offset()
{
     dd6:	cf 92       	push	r12
     dd8:	df 92       	push	r13
     dda:	ef 92       	push	r14
     ddc:	ff 92       	push	r15
     dde:	cf 93       	push	r28
     de0:	df 93       	push	r29
     de2:	cd b7       	in	r28, 0x3d	; 61
     de4:	de b7       	in	r29, 0x3e	; 62
	if(app_current_input.rotenc_delta != 0)
     de6:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <app_current_input>
     dea:	90 91 56 01 	lds	r25, 0x0156	; 0x800156 <app_current_input+0x1>
     dee:	89 2b       	or	r24, r25
     df0:	09 f4       	brne	.+2      	; 0xdf4 <app_state_menu_heater_offset+0x1e>
     df2:	44 c0       	rjmp	.+136    	; 0xe7c <app_state_menu_heater_offset+0xa6>
	{
		app_settings.heater_offset = fmax(fmin(app_settings.heater_offset + app_current_input.rotenc_delta * TEMP_CHANGE_PER_ROTENC_STEP, MAX_HEATER_OFFSET), MIN_HEATER_OFFSET);
     df4:	c0 90 2e 01 	lds	r12, 0x012E	; 0x80012e <app_settings+0x14>
     df8:	d0 90 2f 01 	lds	r13, 0x012F	; 0x80012f <app_settings+0x15>
     dfc:	e0 90 30 01 	lds	r14, 0x0130	; 0x800130 <app_settings+0x16>
     e00:	f0 90 31 01 	lds	r15, 0x0131	; 0x800131 <app_settings+0x17>
     e04:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <app_current_input>
     e08:	90 91 56 01 	lds	r25, 0x0156	; 0x800156 <app_current_input+0x1>
     e0c:	09 2e       	mov	r0, r25
     e0e:	00 0c       	add	r0, r0
     e10:	aa 0b       	sbc	r26, r26
     e12:	bb 0b       	sbc	r27, r27
     e14:	bc 01       	movw	r22, r24
     e16:	cd 01       	movw	r24, r26
     e18:	0e 94 ed 22 	call	0x45da	; 0x45da <__floatsisf>
     e1c:	dc 01       	movw	r26, r24
     e1e:	cb 01       	movw	r24, r22
     e20:	20 e0       	ldi	r18, 0x00	; 0
     e22:	30 e0       	ldi	r19, 0x00	; 0
     e24:	40 e0       	ldi	r20, 0x00	; 0
     e26:	5f e3       	ldi	r21, 0x3F	; 63
     e28:	bc 01       	movw	r22, r24
     e2a:	cd 01       	movw	r24, r26
     e2c:	0e 94 02 24 	call	0x4804	; 0x4804 <__mulsf3>
     e30:	dc 01       	movw	r26, r24
     e32:	cb 01       	movw	r24, r22
     e34:	9c 01       	movw	r18, r24
     e36:	ad 01       	movw	r20, r26
     e38:	c7 01       	movw	r24, r14
     e3a:	b6 01       	movw	r22, r12
     e3c:	0e 94 96 21 	call	0x432c	; 0x432c <__addsf3>
     e40:	dc 01       	movw	r26, r24
     e42:	cb 01       	movw	r24, r22
     e44:	20 e0       	ldi	r18, 0x00	; 0
     e46:	30 e0       	ldi	r19, 0x00	; 0
     e48:	48 e4       	ldi	r20, 0x48	; 72
     e4a:	52 e4       	ldi	r21, 0x42	; 66
     e4c:	bc 01       	movw	r22, r24
     e4e:	cd 01       	movw	r24, r26
     e50:	0e 94 95 13 	call	0x272a	; 0x272a <fmin>
     e54:	dc 01       	movw	r26, r24
     e56:	cb 01       	movw	r24, r22
     e58:	20 e0       	ldi	r18, 0x00	; 0
     e5a:	30 e0       	ldi	r19, 0x00	; 0
     e5c:	48 e4       	ldi	r20, 0x48	; 72
     e5e:	52 ec       	ldi	r21, 0xC2	; 194
     e60:	bc 01       	movw	r22, r24
     e62:	cd 01       	movw	r24, r26
     e64:	0e 94 63 13 	call	0x26c6	; 0x26c6 <fmax>
     e68:	dc 01       	movw	r26, r24
     e6a:	cb 01       	movw	r24, r22
     e6c:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <app_settings+0x14>
     e70:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <app_settings+0x15>
     e74:	a0 93 30 01 	sts	0x0130, r26	; 0x800130 <app_settings+0x16>
     e78:	b0 93 31 01 	sts	0x0131, r27	; 0x800131 <app_settings+0x17>
	}
	
	// display current value
	srd_clear();
     e7c:	0e 94 a2 1b 	call	0x3744	; 0x3744 <srd_clear>
	mr_heater_menu_offset(app_settings.heater_offset);
     e80:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <app_settings+0x14>
     e84:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <app_settings+0x15>
     e88:	a0 91 30 01 	lds	r26, 0x0130	; 0x800130 <app_settings+0x16>
     e8c:	b0 91 31 01 	lds	r27, 0x0131	; 0x800131 <app_settings+0x17>
     e90:	bc 01       	movw	r22, r24
     e92:	cd 01       	movw	r24, r26
     e94:	0e 94 e7 11 	call	0x23ce	; 0x23ce <mr_heater_menu_offset>
	srd_display();
     e98:	0e 94 91 1b 	call	0x3722	; 0x3722 <srd_display>
	
	if(app_current_input.button_presses & (1 << BUTTON0))
     e9c:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <app_current_input+0x2>
     ea0:	88 2f       	mov	r24, r24
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	81 70       	andi	r24, 0x01	; 1
     ea6:	99 27       	eor	r25, r25
     ea8:	89 2b       	or	r24, r25
     eaa:	49 f0       	breq	.+18     	; 0xebe <app_state_menu_heater_offset+0xe8>
	{
		app_selected_menu_item_index = 4;
     eac:	84 e0       	ldi	r24, 0x04	; 4
     eae:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <app_selected_menu_item_index>
		app_current_state_func = app_state_menu_heater;
     eb2:	8c e1       	ldi	r24, 0x1C	; 28
     eb4:	93 e0       	ldi	r25, 0x03	; 3
     eb6:	90 93 61 01 	sts	0x0161, r25	; 0x800161 <app_current_state_func+0x1>
     eba:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <app_current_state_func>
	}
	return FALSE;
     ebe:	80 e0       	ldi	r24, 0x00	; 0
}
     ec0:	df 91       	pop	r29
     ec2:	cf 91       	pop	r28
     ec4:	ff 90       	pop	r15
     ec6:	ef 90       	pop	r14
     ec8:	df 90       	pop	r13
     eca:	cf 90       	pop	r12
     ecc:	08 95       	ret

00000ece <app_state_menu_stirrer>:

uint8_t app_state_menu_stirrer()
{
     ece:	cf 93       	push	r28
     ed0:	df 93       	push	r29
     ed2:	cd b7       	in	r28, 0x3d	; 61
     ed4:	de b7       	in	r29, 0x3e	; 62
	if(app_current_input.rotenc_delta > 0)
     ed6:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <app_current_input>
     eda:	90 91 56 01 	lds	r25, 0x0156	; 0x800156 <app_current_input+0x1>
     ede:	18 16       	cp	r1, r24
     ee0:	19 06       	cpc	r1, r25
     ee2:	64 f4       	brge	.+24     	; 0xefc <app_state_menu_stirrer+0x2e>
		app_selected_menu_item_index = imax8(imin8(app_selected_menu_item_index + 1, 1), 0);
     ee4:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <app_selected_menu_item_index>
     ee8:	8f 5f       	subi	r24, 0xFF	; 255
     eea:	61 e0       	ldi	r22, 0x01	; 1
     eec:	0e 94 17 13 	call	0x262e	; 0x262e <imin8>
     ef0:	60 e0       	ldi	r22, 0x00	; 0
     ef2:	0e 94 ed 12 	call	0x25da	; 0x25da <imax8>
     ef6:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <app_selected_menu_item_index>
     efa:	11 c0       	rjmp	.+34     	; 0xf1e <app_state_menu_stirrer+0x50>
	else if(app_current_input.rotenc_delta < 0)
     efc:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <app_current_input>
     f00:	90 91 56 01 	lds	r25, 0x0156	; 0x800156 <app_current_input+0x1>
     f04:	99 23       	and	r25, r25
     f06:	5c f4       	brge	.+22     	; 0xf1e <app_state_menu_stirrer+0x50>
		app_selected_menu_item_index = imax8(imin8(app_selected_menu_item_index - 1, 1), 0);
     f08:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <app_selected_menu_item_index>
     f0c:	81 50       	subi	r24, 0x01	; 1
     f0e:	61 e0       	ldi	r22, 0x01	; 1
     f10:	0e 94 17 13 	call	0x262e	; 0x262e <imin8>
     f14:	60 e0       	ldi	r22, 0x00	; 0
     f16:	0e 94 ed 12 	call	0x25da	; 0x25da <imax8>
     f1a:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <app_selected_menu_item_index>
	// display selected menu item
	srd_clear();
     f1e:	0e 94 a2 1b 	call	0x3744	; 0x3744 <srd_clear>
	mr_stirrer_menu(app_selected_menu_item_index);
     f22:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <app_selected_menu_item_index>
     f26:	0e 94 c6 10 	call	0x218c	; 0x218c <mr_stirrer_menu>
	srd_display();
     f2a:	0e 94 91 1b 	call	0x3722	; 0x3722 <srd_display>
	
	// state change
	if(app_current_input.button_presses & (1 << BUTTON0))
     f2e:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <app_current_input+0x2>
     f32:	88 2f       	mov	r24, r24
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	81 70       	andi	r24, 0x01	; 1
     f38:	99 27       	eor	r25, r25
     f3a:	89 2b       	or	r24, r25
     f3c:	e9 f0       	breq	.+58     	; 0xf78 <app_state_menu_stirrer+0xaa>
	{
		switch(app_selected_menu_item_index)
     f3e:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <app_selected_menu_item_index>
     f42:	08 2e       	mov	r0, r24
     f44:	00 0c       	add	r0, r0
     f46:	99 0b       	sbc	r25, r25
     f48:	00 97       	sbiw	r24, 0x00	; 0
     f4a:	19 f0       	breq	.+6      	; 0xf52 <app_state_menu_stirrer+0x84>
     f4c:	01 97       	sbiw	r24, 0x01	; 1
     f4e:	59 f0       	breq	.+22     	; 0xf66 <app_state_menu_stirrer+0x98>
     f50:	13 c0       	rjmp	.+38     	; 0xf78 <app_state_menu_stirrer+0xaa>
		{
			case 0:	// back to main menu
				app_selected_menu_item_index = 2;
     f52:	82 e0       	ldi	r24, 0x02	; 2
     f54:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <app_selected_menu_item_index>
				app_current_state_func = app_state_menu_main;
     f58:	88 ea       	ldi	r24, 0xA8	; 168
     f5a:	92 e0       	ldi	r25, 0x02	; 2
     f5c:	90 93 61 01 	sts	0x0161, r25	; 0x800161 <app_current_state_func+0x1>
     f60:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <app_current_state_func>
				break;
     f64:	09 c0       	rjmp	.+18     	; 0xf78 <app_state_menu_stirrer+0xaa>
			case 1: // heater duty cycle
				app_selected_menu_item_index = 0;
     f66:	10 92 5b 01 	sts	0x015B, r1	; 0x80015b <app_selected_menu_item_index>
				app_current_state_func = app_state_menu_stirrer_duty_cycle;
     f6a:	80 ec       	ldi	r24, 0xC0	; 192
     f6c:	97 e0       	ldi	r25, 0x07	; 7
     f6e:	90 93 61 01 	sts	0x0161, r25	; 0x800161 <app_current_state_func+0x1>
     f72:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <app_current_state_func>
				break;
     f76:	00 00       	nop
		}
	}
	return FALSE;
     f78:	80 e0       	ldi	r24, 0x00	; 0
}
     f7a:	df 91       	pop	r29
     f7c:	cf 91       	pop	r28
     f7e:	08 95       	ret

00000f80 <app_state_menu_stirrer_duty_cycle>:

uint8_t app_state_menu_stirrer_duty_cycle()
{
     f80:	cf 93       	push	r28
     f82:	df 93       	push	r29
     f84:	cd b7       	in	r28, 0x3d	; 61
     f86:	de b7       	in	r29, 0x3e	; 62
	if(app_current_input.rotenc_delta != 0)
     f88:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <app_current_input>
     f8c:	90 91 56 01 	lds	r25, 0x0156	; 0x800156 <app_current_input+0x1>
     f90:	89 2b       	or	r24, r25
     f92:	a9 f1       	breq	.+106    	; 0xffe <app_state_menu_stirrer_duty_cycle+0x7e>
	{
		app_settings.stirrer_duty_cycle = (uint8_t)imax16(imin16((int16_t)app_settings.stirrer_duty_cycle + app_current_input.rotenc_delta * STIRRER_DC_CHANGE_PER_STEP, 100), 0);
     f94:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <app_settings+0x18>
     f98:	28 2f       	mov	r18, r24
     f9a:	30 e0       	ldi	r19, 0x00	; 0
     f9c:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <app_current_input>
     fa0:	90 91 56 01 	lds	r25, 0x0156	; 0x800156 <app_current_input+0x1>
     fa4:	82 0f       	add	r24, r18
     fa6:	93 1f       	adc	r25, r19
     fa8:	64 e6       	ldi	r22, 0x64	; 100
     faa:	70 e0       	ldi	r23, 0x00	; 0
     fac:	0e 94 28 13 	call	0x2650	; 0x2650 <imin16>
     fb0:	60 e0       	ldi	r22, 0x00	; 0
     fb2:	70 e0       	ldi	r23, 0x00	; 0
     fb4:	0e 94 fe 12 	call	0x25fc	; 0x25fc <imax16>
     fb8:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <app_settings+0x18>
		
		if(!app_settings.stirrer_onoff && app_settings.stirrer_duty_cycle > 0) // stirrer was switched on
     fbc:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <app_settings+0x1a>
     fc0:	88 23       	and	r24, r24
     fc2:	39 f4       	brne	.+14     	; 0xfd2 <app_state_menu_stirrer_duty_cycle+0x52>
     fc4:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <app_settings+0x18>
     fc8:	88 23       	and	r24, r24
     fca:	19 f0       	breq	.+6      	; 0xfd2 <app_state_menu_stirrer_duty_cycle+0x52>
		{
			stirrer_on();
     fcc:	0e 94 80 1c 	call	0x3900	; 0x3900 <stirrer_on>
     fd0:	0a c0       	rjmp	.+20     	; 0xfe6 <app_state_menu_stirrer_duty_cycle+0x66>
		}
		else if(app_settings.stirrer_onoff && (app_settings.stirrer_duty_cycle == 0)) // stirrer was switched off
     fd2:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <app_settings+0x1a>
     fd6:	88 23       	and	r24, r24
     fd8:	31 f0       	breq	.+12     	; 0xfe6 <app_state_menu_stirrer_duty_cycle+0x66>
     fda:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <app_settings+0x18>
     fde:	88 23       	and	r24, r24
     fe0:	11 f4       	brne	.+4      	; 0xfe6 <app_state_menu_stirrer_duty_cycle+0x66>
		{
			stirrer_off();
     fe2:	0e 94 a4 1c 	call	0x3948	; 0x3948 <stirrer_off>
		}
			
		app_settings.stirrer_onoff = app_settings.stirrer_duty_cycle > 0;
     fe6:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <app_settings+0x18>
     fea:	81 e0       	ldi	r24, 0x01	; 1
     fec:	99 23       	and	r25, r25
     fee:	09 f4       	brne	.+2      	; 0xff2 <app_state_menu_stirrer_duty_cycle+0x72>
     ff0:	80 e0       	ldi	r24, 0x00	; 0
     ff2:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <app_settings+0x1a>
		
		// set stirrer duty cycle
		stirrer_set_duty_cycle(app_settings.stirrer_duty_cycle);
     ff6:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <app_settings+0x18>
     ffa:	0e 94 48 1c 	call	0x3890	; 0x3890 <stirrer_set_duty_cycle>
	}
	
	// display current value
	srd_clear();
     ffe:	0e 94 a2 1b 	call	0x3744	; 0x3744 <srd_clear>
	mr_stirrer_menu_dc(app_settings.stirrer_duty_cycle);
    1002:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <app_settings+0x18>
    1006:	0e 94 0a 12 	call	0x2414	; 0x2414 <mr_stirrer_menu_dc>
	srd_display();
    100a:	0e 94 91 1b 	call	0x3722	; 0x3722 <srd_display>
	
	if(app_current_input.button_presses & (1 << BUTTON0))
    100e:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <app_current_input+0x2>
    1012:	88 2f       	mov	r24, r24
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	81 70       	andi	r24, 0x01	; 1
    1018:	99 27       	eor	r25, r25
    101a:	89 2b       	or	r24, r25
    101c:	49 f0       	breq	.+18     	; 0x1030 <app_state_menu_stirrer_duty_cycle+0xb0>
	{
		app_selected_menu_item_index = 1;
    101e:	81 e0       	ldi	r24, 0x01	; 1
    1020:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <app_selected_menu_item_index>
		app_current_state_func = app_state_menu_stirrer;
    1024:	87 e6       	ldi	r24, 0x67	; 103
    1026:	97 e0       	ldi	r25, 0x07	; 7
    1028:	90 93 61 01 	sts	0x0161, r25	; 0x800161 <app_current_state_func+0x1>
    102c:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <app_current_state_func>
	}
	return FALSE;
    1030:	80 e0       	ldi	r24, 0x00	; 0
}
    1032:	df 91       	pop	r29
    1034:	cf 91       	pop	r28
    1036:	08 95       	ret

00001038 <app_state_menu_tprobe>:

uint8_t app_state_menu_tprobe()
{
    1038:	cf 93       	push	r28
    103a:	df 93       	push	r29
    103c:	cd b7       	in	r28, 0x3d	; 61
    103e:	de b7       	in	r29, 0x3e	; 62
	if(app_current_input.rotenc_delta > 0)
    1040:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <app_current_input>
    1044:	90 91 56 01 	lds	r25, 0x0156	; 0x800156 <app_current_input+0x1>
    1048:	18 16       	cp	r1, r24
    104a:	19 06       	cpc	r1, r25
    104c:	64 f4       	brge	.+24     	; 0x1066 <app_state_menu_tprobe+0x2e>
		app_selected_menu_item_index = imax8(imin8(app_selected_menu_item_index + 1, 4), 0);
    104e:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <app_selected_menu_item_index>
    1052:	8f 5f       	subi	r24, 0xFF	; 255
    1054:	64 e0       	ldi	r22, 0x04	; 4
    1056:	0e 94 17 13 	call	0x262e	; 0x262e <imin8>
    105a:	60 e0       	ldi	r22, 0x00	; 0
    105c:	0e 94 ed 12 	call	0x25da	; 0x25da <imax8>
    1060:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <app_selected_menu_item_index>
    1064:	11 c0       	rjmp	.+34     	; 0x1088 <app_state_menu_tprobe+0x50>
	else if(app_current_input.rotenc_delta < 0)
    1066:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <app_current_input>
    106a:	90 91 56 01 	lds	r25, 0x0156	; 0x800156 <app_current_input+0x1>
    106e:	99 23       	and	r25, r25
    1070:	5c f4       	brge	.+22     	; 0x1088 <app_state_menu_tprobe+0x50>
		app_selected_menu_item_index = imax8(imin8(app_selected_menu_item_index - 1, 4), 0);
    1072:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <app_selected_menu_item_index>
    1076:	81 50       	subi	r24, 0x01	; 1
    1078:	64 e0       	ldi	r22, 0x04	; 4
    107a:	0e 94 17 13 	call	0x262e	; 0x262e <imin8>
    107e:	60 e0       	ldi	r22, 0x00	; 0
    1080:	0e 94 ed 12 	call	0x25da	; 0x25da <imax8>
    1084:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <app_selected_menu_item_index>
	// display selected menu item
	srd_clear();
    1088:	0e 94 a2 1b 	call	0x3744	; 0x3744 <srd_clear>
	mr_tprobe_menu(app_selected_menu_item_index);
    108c:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <app_selected_menu_item_index>
    1090:	0e 94 30 12 	call	0x2460	; 0x2460 <mr_tprobe_menu>
	srd_display();
    1094:	0e 94 91 1b 	call	0x3722	; 0x3722 <srd_display>
	
	// state change
	if(app_current_input.button_presses & (1 << BUTTON0))
    1098:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <app_current_input+0x2>
    109c:	88 2f       	mov	r24, r24
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	81 70       	andi	r24, 0x01	; 1
    10a2:	99 27       	eor	r25, r25
    10a4:	89 2b       	or	r24, r25
    10a6:	09 f4       	brne	.+2      	; 0x10aa <app_state_menu_tprobe+0x72>
    10a8:	44 c0       	rjmp	.+136    	; 0x1132 <__stack+0x33>
	{
		switch(app_selected_menu_item_index)
    10aa:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <app_selected_menu_item_index>
    10ae:	08 2e       	mov	r0, r24
    10b0:	00 0c       	add	r0, r0
    10b2:	99 0b       	sbc	r25, r25
    10b4:	82 30       	cpi	r24, 0x02	; 2
    10b6:	91 05       	cpc	r25, r1
    10b8:	09 f1       	breq	.+66     	; 0x10fc <app_state_menu_tprobe+0xc4>
    10ba:	83 30       	cpi	r24, 0x03	; 3
    10bc:	91 05       	cpc	r25, r1
    10be:	2c f4       	brge	.+10     	; 0x10ca <app_state_menu_tprobe+0x92>
    10c0:	00 97       	sbiw	r24, 0x00	; 0
    10c2:	49 f0       	breq	.+18     	; 0x10d6 <app_state_menu_tprobe+0x9e>
    10c4:	01 97       	sbiw	r24, 0x01	; 1
    10c6:	89 f0       	breq	.+34     	; 0x10ea <app_state_menu_tprobe+0xb2>
    10c8:	34 c0       	rjmp	.+104    	; 0x1132 <__stack+0x33>
    10ca:	83 30       	cpi	r24, 0x03	; 3
    10cc:	91 05       	cpc	r25, r1
    10ce:	f9 f0       	breq	.+62     	; 0x110e <__stack+0xf>
    10d0:	04 97       	sbiw	r24, 0x04	; 4
    10d2:	31 f1       	breq	.+76     	; 0x1120 <__stack+0x21>
    10d4:	2e c0       	rjmp	.+92     	; 0x1132 <__stack+0x33>
		{
			case 0:	// back to main menu
				app_selected_menu_item_index = 3;
    10d6:	83 e0       	ldi	r24, 0x03	; 3
    10d8:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <app_selected_menu_item_index>
				app_current_state_func = app_state_menu_main;
    10dc:	88 ea       	ldi	r24, 0xA8	; 168
    10de:	92 e0       	ldi	r25, 0x02	; 2
    10e0:	90 93 61 01 	sts	0x0161, r25	; 0x800161 <app_current_state_func+0x1>
    10e4:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <app_current_state_func>
				break;
    10e8:	24 c0       	rjmp	.+72     	; 0x1132 <__stack+0x33>
			case 1: // thermistor 0 resistance
				app_selected_menu_item_index = 0;
    10ea:	10 92 5b 01 	sts	0x015B, r1	; 0x80015b <app_selected_menu_item_index>
				app_current_state_func = app_state_menu_tprobe0_calib;
    10ee:	8d e9       	ldi	r24, 0x9D	; 157
    10f0:	98 e0       	ldi	r25, 0x08	; 8
    10f2:	90 93 61 01 	sts	0x0161, r25	; 0x800161 <app_current_state_func+0x1>
    10f6:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <app_current_state_func>
				break;
    10fa:	1b c0       	rjmp	.+54     	; 0x1132 <__stack+0x33>
			case 2: // thermistor 1 resistance
				app_selected_menu_item_index = 0;
    10fc:	10 92 5b 01 	sts	0x015B, r1	; 0x80015b <app_selected_menu_item_index>
				app_current_state_func = app_state_menu_tprobe1_calib;
    1100:	86 ec       	ldi	r24, 0xC6	; 198
    1102:	98 e0       	ldi	r25, 0x08	; 8
    1104:	90 93 61 01 	sts	0x0161, r25	; 0x800161 <app_current_state_func+0x1>
    1108:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <app_current_state_func>
				break;
    110c:	12 c0       	rjmp	.+36     	; 0x1132 <__stack+0x33>
			case 3: // thermistor 2 resistance
				app_selected_menu_item_index = 0;
    110e:	10 92 5b 01 	sts	0x015B, r1	; 0x80015b <app_selected_menu_item_index>
				app_current_state_func = app_state_menu_tprobe2_calib;
    1112:	8f ee       	ldi	r24, 0xEF	; 239
    1114:	98 e0       	ldi	r25, 0x08	; 8
    1116:	90 93 61 01 	sts	0x0161, r25	; 0x800161 <app_current_state_func+0x1>
    111a:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <app_current_state_func>
				break;
    111e:	09 c0       	rjmp	.+18     	; 0x1132 <__stack+0x33>
			case 4: // thermistor 3 resistance
				app_selected_menu_item_index = 0;
    1120:	10 92 5b 01 	sts	0x015B, r1	; 0x80015b <app_selected_menu_item_index>
				app_current_state_func = app_state_menu_tprobe3_calib;
    1124:	8e e0       	ldi	r24, 0x0E	; 14
    1126:	99 e0       	ldi	r25, 0x09	; 9
    1128:	90 93 61 01 	sts	0x0161, r25	; 0x800161 <app_current_state_func+0x1>
    112c:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <app_current_state_func>
				break;
    1130:	00 00       	nop
		}
	}
	return FALSE;
    1132:	80 e0       	ldi	r24, 0x00	; 0
}
    1134:	df 91       	pop	r29
    1136:	cf 91       	pop	r28
    1138:	08 95       	ret

0000113a <app_state_menu_tprobe0_calib>:

uint8_t app_state_menu_tprobe0_calib()
{
    113a:	cf 93       	push	r28
    113c:	df 93       	push	r29
    113e:	cd b7       	in	r28, 0x3d	; 61
    1140:	de b7       	in	r29, 0x3e	; 62
	// display current resistance
	#ifdef TSENS_PROBE_0
	srd_clear();
    1142:	0e 94 a2 1b 	call	0x3744	; 0x3744 <srd_clear>
	mr_tprobe_calib_menu(app_t0_resistance);
    1146:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <app_t0_resistance>
    114a:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <app_t0_resistance+0x1>
    114e:	a0 91 17 01 	lds	r26, 0x0117	; 0x800117 <app_t0_resistance+0x2>
    1152:	b0 91 18 01 	lds	r27, 0x0118	; 0x800118 <app_t0_resistance+0x3>
    1156:	bc 01       	movw	r22, r24
    1158:	cd 01       	movw	r24, r26
    115a:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <mr_tprobe_calib_menu>
	srd_display();
    115e:	0e 94 91 1b 	call	0x3722	; 0x3722 <srd_display>
	mr_tprobe_calib_menu_nc();
	srd_display();
	#endif
	
	// state change
	if(app_current_input.button_presses & (1 << BUTTON0))
    1162:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <app_current_input+0x2>
    1166:	88 2f       	mov	r24, r24
    1168:	90 e0       	ldi	r25, 0x00	; 0
    116a:	81 70       	andi	r24, 0x01	; 1
    116c:	99 27       	eor	r25, r25
    116e:	89 2b       	or	r24, r25
    1170:	49 f0       	breq	.+18     	; 0x1184 <app_state_menu_tprobe0_calib+0x4a>
	{
		app_selected_menu_item_index = 1;
    1172:	81 e0       	ldi	r24, 0x01	; 1
    1174:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <app_selected_menu_item_index>
		app_current_state_func = app_state_menu_tprobe;
    1178:	8c e1       	ldi	r24, 0x1C	; 28
    117a:	98 e0       	ldi	r25, 0x08	; 8
    117c:	90 93 61 01 	sts	0x0161, r25	; 0x800161 <app_current_state_func+0x1>
    1180:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <app_current_state_func>
	}
	
	return FALSE; // everything ok
    1184:	80 e0       	ldi	r24, 0x00	; 0
}
    1186:	df 91       	pop	r29
    1188:	cf 91       	pop	r28
    118a:	08 95       	ret

0000118c <app_state_menu_tprobe1_calib>:

uint8_t app_state_menu_tprobe1_calib()
{
    118c:	cf 93       	push	r28
    118e:	df 93       	push	r29
    1190:	cd b7       	in	r28, 0x3d	; 61
    1192:	de b7       	in	r29, 0x3e	; 62
	// display current resistance
	#ifdef TSENS_PROBE_1
	srd_clear();
    1194:	0e 94 a2 1b 	call	0x3744	; 0x3744 <srd_clear>
	mr_tprobe_calib_menu(app_t1_resistance);
    1198:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <app_t1_resistance>
    119c:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <app_t1_resistance+0x1>
    11a0:	a0 91 13 01 	lds	r26, 0x0113	; 0x800113 <app_t1_resistance+0x2>
    11a4:	b0 91 14 01 	lds	r27, 0x0114	; 0x800114 <app_t1_resistance+0x3>
    11a8:	bc 01       	movw	r22, r24
    11aa:	cd 01       	movw	r24, r26
    11ac:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <mr_tprobe_calib_menu>
	srd_display();
    11b0:	0e 94 91 1b 	call	0x3722	; 0x3722 <srd_display>
	mr_tprobe_calib_menu_nc();
	srd_display();
	#endif
	
	// state change
	if(app_current_input.button_presses & (1 << BUTTON0))
    11b4:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <app_current_input+0x2>
    11b8:	88 2f       	mov	r24, r24
    11ba:	90 e0       	ldi	r25, 0x00	; 0
    11bc:	81 70       	andi	r24, 0x01	; 1
    11be:	99 27       	eor	r25, r25
    11c0:	89 2b       	or	r24, r25
    11c2:	49 f0       	breq	.+18     	; 0x11d6 <app_state_menu_tprobe1_calib+0x4a>
	{
		app_selected_menu_item_index = 2;
    11c4:	82 e0       	ldi	r24, 0x02	; 2
    11c6:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <app_selected_menu_item_index>
		app_current_state_func = app_state_menu_tprobe;
    11ca:	8c e1       	ldi	r24, 0x1C	; 28
    11cc:	98 e0       	ldi	r25, 0x08	; 8
    11ce:	90 93 61 01 	sts	0x0161, r25	; 0x800161 <app_current_state_func+0x1>
    11d2:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <app_current_state_func>
	}
	
	return FALSE; // everything ok
    11d6:	80 e0       	ldi	r24, 0x00	; 0
}
    11d8:	df 91       	pop	r29
    11da:	cf 91       	pop	r28
    11dc:	08 95       	ret

000011de <app_state_menu_tprobe2_calib>:

uint8_t app_state_menu_tprobe2_calib()
{
    11de:	cf 93       	push	r28
    11e0:	df 93       	push	r29
    11e2:	cd b7       	in	r28, 0x3d	; 61
    11e4:	de b7       	in	r29, 0x3e	; 62
	#ifdef TSENS_PROBE_2
	srd_clear();
	mr_tprobe_calib_menu(app_t2_resistance);
	srd_display();
	#else
	srd_clear();
    11e6:	0e 94 a2 1b 	call	0x3744	; 0x3744 <srd_clear>
	mr_tprobe_calib_menu_nc();
    11ea:	0e 94 a6 12 	call	0x254c	; 0x254c <mr_tprobe_calib_menu_nc>
	srd_display();
    11ee:	0e 94 91 1b 	call	0x3722	; 0x3722 <srd_display>
	#endif
	
	// state change
	if(app_current_input.button_presses & (1 << BUTTON0))
    11f2:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <app_current_input+0x2>
    11f6:	88 2f       	mov	r24, r24
    11f8:	90 e0       	ldi	r25, 0x00	; 0
    11fa:	81 70       	andi	r24, 0x01	; 1
    11fc:	99 27       	eor	r25, r25
    11fe:	89 2b       	or	r24, r25
    1200:	49 f0       	breq	.+18     	; 0x1214 <app_state_menu_tprobe2_calib+0x36>
	{
		app_selected_menu_item_index = 3;
    1202:	83 e0       	ldi	r24, 0x03	; 3
    1204:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <app_selected_menu_item_index>
		app_current_state_func = app_state_menu_tprobe;
    1208:	8c e1       	ldi	r24, 0x1C	; 28
    120a:	98 e0       	ldi	r25, 0x08	; 8
    120c:	90 93 61 01 	sts	0x0161, r25	; 0x800161 <app_current_state_func+0x1>
    1210:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <app_current_state_func>
	}
	
	return FALSE; // everything ok
    1214:	80 e0       	ldi	r24, 0x00	; 0
}
    1216:	df 91       	pop	r29
    1218:	cf 91       	pop	r28
    121a:	08 95       	ret

0000121c <app_state_menu_tprobe3_calib>:

uint8_t app_state_menu_tprobe3_calib()
{
    121c:	cf 93       	push	r28
    121e:	df 93       	push	r29
    1220:	cd b7       	in	r28, 0x3d	; 61
    1222:	de b7       	in	r29, 0x3e	; 62
	#ifdef TSENS_PROBE_3
	srd_clear();
	mr_tprobe_calib_menu(app_t3_resistance);
	srd_display();
	#else
	srd_clear();
    1224:	0e 94 a2 1b 	call	0x3744	; 0x3744 <srd_clear>
	mr_tprobe_calib_menu_nc();
    1228:	0e 94 a6 12 	call	0x254c	; 0x254c <mr_tprobe_calib_menu_nc>
	srd_display();
    122c:	0e 94 91 1b 	call	0x3722	; 0x3722 <srd_display>
	#endif
	
	// state change
	if(app_current_input.button_presses & (1 << BUTTON0))
    1230:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <app_current_input+0x2>
    1234:	88 2f       	mov	r24, r24
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	81 70       	andi	r24, 0x01	; 1
    123a:	99 27       	eor	r25, r25
    123c:	89 2b       	or	r24, r25
    123e:	49 f0       	breq	.+18     	; 0x1252 <app_state_menu_tprobe3_calib+0x36>
	{
		app_selected_menu_item_index = 4;
    1240:	84 e0       	ldi	r24, 0x04	; 4
    1242:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <app_selected_menu_item_index>
		app_current_state_func = app_state_menu_tprobe;
    1246:	8c e1       	ldi	r24, 0x1C	; 28
    1248:	98 e0       	ldi	r25, 0x08	; 8
    124a:	90 93 61 01 	sts	0x0161, r25	; 0x800161 <app_current_state_func+0x1>
    124e:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <app_current_state_func>
	}
	
	return FALSE; // everything ok
    1252:	80 e0       	ldi	r24, 0x00	; 0
}
    1254:	df 91       	pop	r29
    1256:	cf 91       	pop	r28
    1258:	08 95       	ret

0000125a <app_clear_input>:



////////////////////////////////////// HELPERS ////////////////////////////////////////////////////
void app_clear_input()
{
    125a:	cf 93       	push	r28
    125c:	df 93       	push	r29
    125e:	cd b7       	in	r28, 0x3d	; 61
    1260:	de b7       	in	r29, 0x3e	; 62
	app_current_input.rotenc_delta = 0;
    1262:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <app_current_input+0x1>
    1266:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <app_current_input>
	app_current_input.button_presses = 0;
    126a:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <app_current_input+0x2>
	app_current_input.button_long_presses = 0;
    126e:	10 92 58 01 	sts	0x0158, r1	; 0x800158 <app_current_input+0x3>
	app_current_input.button_releases = 0;
    1272:	10 92 59 01 	sts	0x0159, r1	; 0x800159 <app_current_input+0x4>
	app_current_input.button_states = 0;
    1276:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <app_current_input+0x5>
    127a:	00 00       	nop
    127c:	df 91       	pop	r29
    127e:	cf 91       	pop	r28
    1280:	08 95       	ret

00001282 <__iCliRetVal>:

void appt_clear_callback(uint8_t index)
{
	assert(index < APP_TIMER_MAX_CALLBACKS);
	appt_callbacks[index] = (appt_callback_entry){APPT_CYCLE_ZERO, APPT_CYCLE_ZERO, 0};
}
    1282:	cf 93       	push	r28
    1284:	df 93       	push	r29
    1286:	cd b7       	in	r28, 0x3d	; 61
    1288:	de b7       	in	r29, 0x3e	; 62
    128a:	f8 94       	cli
    128c:	81 e0       	ldi	r24, 0x01	; 1
    128e:	df 91       	pop	r29
    1290:	cf 91       	pop	r28
    1292:	08 95       	ret

00001294 <__iRestore>:
    1294:	cf 93       	push	r28
    1296:	df 93       	push	r29
    1298:	00 d0       	rcall	.+0      	; 0x129a <__iRestore+0x6>
    129a:	cd b7       	in	r28, 0x3d	; 61
    129c:	de b7       	in	r29, 0x3e	; 62
    129e:	9a 83       	std	Y+2, r25	; 0x02
    12a0:	89 83       	std	Y+1, r24	; 0x01
    12a2:	8f e5       	ldi	r24, 0x5F	; 95
    12a4:	90 e0       	ldi	r25, 0x00	; 0
    12a6:	29 81       	ldd	r18, Y+1	; 0x01
    12a8:	3a 81       	ldd	r19, Y+2	; 0x02
    12aa:	f9 01       	movw	r30, r18
    12ac:	20 81       	ld	r18, Z
    12ae:	fc 01       	movw	r30, r24
    12b0:	20 83       	st	Z, r18
    12b2:	00 00       	nop
    12b4:	0f 90       	pop	r0
    12b6:	0f 90       	pop	r0
    12b8:	df 91       	pop	r29
    12ba:	cf 91       	pop	r28
    12bc:	08 95       	ret

000012be <seconds_to_cycles>:
    12be:	2f 92       	push	r2
    12c0:	3f 92       	push	r3
    12c2:	4f 92       	push	r4
    12c4:	5f 92       	push	r5
    12c6:	6f 92       	push	r6
    12c8:	7f 92       	push	r7
    12ca:	8f 92       	push	r8
    12cc:	9f 92       	push	r9
    12ce:	af 92       	push	r10
    12d0:	bf 92       	push	r11
    12d2:	cf 92       	push	r12
    12d4:	df 92       	push	r13
    12d6:	ef 92       	push	r14
    12d8:	ff 92       	push	r15
    12da:	0f 93       	push	r16
    12dc:	1f 93       	push	r17
    12de:	cf 93       	push	r28
    12e0:	df 93       	push	r29
    12e2:	00 d0       	rcall	.+0      	; 0x12e4 <seconds_to_cycles+0x26>
    12e4:	00 d0       	rcall	.+0      	; 0x12e6 <seconds_to_cycles+0x28>
    12e6:	cd b7       	in	r28, 0x3d	; 61
    12e8:	de b7       	in	r29, 0x3e	; 62
    12ea:	69 83       	std	Y+1, r22	; 0x01
    12ec:	7a 83       	std	Y+2, r23	; 0x02
    12ee:	8b 83       	std	Y+3, r24	; 0x03
    12f0:	9c 83       	std	Y+4, r25	; 0x04
    12f2:	28 e3       	ldi	r18, 0x38	; 56
    12f4:	3e e9       	ldi	r19, 0x9E	; 158
    12f6:	4f ec       	ldi	r20, 0xCF	; 207
    12f8:	58 e3       	ldi	r21, 0x38	; 56
    12fa:	69 81       	ldd	r22, Y+1	; 0x01
    12fc:	7a 81       	ldd	r23, Y+2	; 0x02
    12fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1300:	9c 81       	ldd	r25, Y+4	; 0x04
    1302:	0e 94 07 22 	call	0x440e	; 0x440e <__divsf3>
    1306:	dc 01       	movw	r26, r24
    1308:	cb 01       	movw	r24, r22
    130a:	20 e0       	ldi	r18, 0x00	; 0
    130c:	30 e0       	ldi	r19, 0x00	; 0
    130e:	40 e0       	ldi	r20, 0x00	; 0
    1310:	5f e3       	ldi	r21, 0x3F	; 63
    1312:	bc 01       	movw	r22, r24
    1314:	cd 01       	movw	r24, r26
    1316:	0e 94 96 21 	call	0x432c	; 0x432c <__addsf3>
    131a:	dc 01       	movw	r26, r24
    131c:	cb 01       	movw	r24, r22
    131e:	bc 01       	movw	r22, r24
    1320:	cd 01       	movw	r24, r26
    1322:	0e 94 7e 22 	call	0x44fc	; 0x44fc <__fixunssfdi>
    1326:	22 2e       	mov	r2, r18
    1328:	33 2e       	mov	r3, r19
    132a:	44 2e       	mov	r4, r20
    132c:	55 2e       	mov	r5, r21
    132e:	66 2e       	mov	r6, r22
    1330:	77 2e       	mov	r7, r23
    1332:	88 2e       	mov	r8, r24
    1334:	99 2e       	mov	r9, r25
    1336:	a2 2c       	mov	r10, r2
    1338:	b3 2c       	mov	r11, r3
    133a:	c4 2c       	mov	r12, r4
    133c:	d5 2c       	mov	r13, r5
    133e:	e6 2c       	mov	r14, r6
    1340:	f7 2c       	mov	r15, r7
    1342:	08 2d       	mov	r16, r8
    1344:	19 2d       	mov	r17, r9
    1346:	2a 2d       	mov	r18, r10
    1348:	3b 2d       	mov	r19, r11
    134a:	4c 2d       	mov	r20, r12
    134c:	5d 2d       	mov	r21, r13
    134e:	6e 2d       	mov	r22, r14
    1350:	7f 2d       	mov	r23, r15
    1352:	80 2f       	mov	r24, r16
    1354:	91 2f       	mov	r25, r17
    1356:	0f 90       	pop	r0
    1358:	0f 90       	pop	r0
    135a:	0f 90       	pop	r0
    135c:	0f 90       	pop	r0
    135e:	df 91       	pop	r29
    1360:	cf 91       	pop	r28
    1362:	1f 91       	pop	r17
    1364:	0f 91       	pop	r16
    1366:	ff 90       	pop	r15
    1368:	ef 90       	pop	r14
    136a:	df 90       	pop	r13
    136c:	cf 90       	pop	r12
    136e:	bf 90       	pop	r11
    1370:	af 90       	pop	r10
    1372:	9f 90       	pop	r9
    1374:	8f 90       	pop	r8
    1376:	7f 90       	pop	r7
    1378:	6f 90       	pop	r6
    137a:	5f 90       	pop	r5
    137c:	4f 90       	pop	r4
    137e:	3f 90       	pop	r3
    1380:	2f 90       	pop	r2
    1382:	08 95       	ret

00001384 <appt_init>:
    1384:	cf 93       	push	r28
    1386:	df 93       	push	r29
    1388:	1f 92       	push	r1
    138a:	cd b7       	in	r28, 0x3d	; 61
    138c:	de b7       	in	r29, 0x3e	; 62
    138e:	10 92 b2 01 	sts	0x01B2, r1	; 0x8001b2 <appt_cycles>
    1392:	10 92 b3 01 	sts	0x01B3, r1	; 0x8001b3 <appt_cycles+0x1>
    1396:	10 92 b4 01 	sts	0x01B4, r1	; 0x8001b4 <appt_cycles+0x2>
    139a:	10 92 b5 01 	sts	0x01B5, r1	; 0x8001b5 <appt_cycles+0x3>
    139e:	10 92 b6 01 	sts	0x01B6, r1	; 0x8001b6 <appt_cycles+0x4>
    13a2:	10 92 b7 01 	sts	0x01B7, r1	; 0x8001b7 <appt_cycles+0x5>
    13a6:	10 92 b8 01 	sts	0x01B8, r1	; 0x8001b8 <appt_cycles+0x6>
    13aa:	10 92 b9 01 	sts	0x01B9, r1	; 0x8001b9 <appt_cycles+0x7>
    13ae:	10 92 aa 01 	sts	0x01AA, r1	; 0x8001aa <appt_cycles_old>
    13b2:	10 92 ab 01 	sts	0x01AB, r1	; 0x8001ab <appt_cycles_old+0x1>
    13b6:	10 92 ac 01 	sts	0x01AC, r1	; 0x8001ac <appt_cycles_old+0x2>
    13ba:	10 92 ad 01 	sts	0x01AD, r1	; 0x8001ad <appt_cycles_old+0x3>
    13be:	10 92 ae 01 	sts	0x01AE, r1	; 0x8001ae <appt_cycles_old+0x4>
    13c2:	10 92 af 01 	sts	0x01AF, r1	; 0x8001af <appt_cycles_old+0x5>
    13c6:	10 92 b0 01 	sts	0x01B0, r1	; 0x8001b0 <appt_cycles_old+0x6>
    13ca:	10 92 b1 01 	sts	0x01B1, r1	; 0x8001b1 <appt_cycles_old+0x7>
    13ce:	19 82       	std	Y+1, r1	; 0x01
    13d0:	53 c0       	rjmp	.+166    	; 0x1478 <appt_init+0xf4>
    13d2:	89 81       	ldd	r24, Y+1	; 0x01
    13d4:	28 2f       	mov	r18, r24
    13d6:	30 e0       	ldi	r19, 0x00	; 0
    13d8:	c9 01       	movw	r24, r18
    13da:	88 0f       	add	r24, r24
    13dc:	99 1f       	adc	r25, r25
    13de:	ac 01       	movw	r20, r24
    13e0:	44 0f       	add	r20, r20
    13e2:	55 1f       	adc	r21, r21
    13e4:	44 0f       	add	r20, r20
    13e6:	55 1f       	adc	r21, r21
    13e8:	44 0f       	add	r20, r20
    13ea:	55 1f       	adc	r21, r21
    13ec:	84 0f       	add	r24, r20
    13ee:	95 1f       	adc	r25, r21
    13f0:	8e 59       	subi	r24, 0x9E	; 158
    13f2:	9e 4f       	sbci	r25, 0xFE	; 254
    13f4:	fc 01       	movw	r30, r24
    13f6:	10 82       	st	Z, r1
    13f8:	fc 01       	movw	r30, r24
    13fa:	11 82       	std	Z+1, r1	; 0x01
    13fc:	fc 01       	movw	r30, r24
    13fe:	12 82       	std	Z+2, r1	; 0x02
    1400:	fc 01       	movw	r30, r24
    1402:	13 82       	std	Z+3, r1	; 0x03
    1404:	fc 01       	movw	r30, r24
    1406:	14 82       	std	Z+4, r1	; 0x04
    1408:	fc 01       	movw	r30, r24
    140a:	15 82       	std	Z+5, r1	; 0x05
    140c:	fc 01       	movw	r30, r24
    140e:	16 82       	std	Z+6, r1	; 0x06
    1410:	fc 01       	movw	r30, r24
    1412:	17 82       	std	Z+7, r1	; 0x07
    1414:	c9 01       	movw	r24, r18
    1416:	88 0f       	add	r24, r24
    1418:	99 1f       	adc	r25, r25
    141a:	ac 01       	movw	r20, r24
    141c:	44 0f       	add	r20, r20
    141e:	55 1f       	adc	r21, r21
    1420:	44 0f       	add	r20, r20
    1422:	55 1f       	adc	r21, r21
    1424:	44 0f       	add	r20, r20
    1426:	55 1f       	adc	r21, r21
    1428:	84 0f       	add	r24, r20
    142a:	95 1f       	adc	r25, r21
    142c:	86 59       	subi	r24, 0x96	; 150
    142e:	9e 4f       	sbci	r25, 0xFE	; 254
    1430:	fc 01       	movw	r30, r24
    1432:	10 82       	st	Z, r1
    1434:	fc 01       	movw	r30, r24
    1436:	11 82       	std	Z+1, r1	; 0x01
    1438:	fc 01       	movw	r30, r24
    143a:	12 82       	std	Z+2, r1	; 0x02
    143c:	fc 01       	movw	r30, r24
    143e:	13 82       	std	Z+3, r1	; 0x03
    1440:	fc 01       	movw	r30, r24
    1442:	14 82       	std	Z+4, r1	; 0x04
    1444:	fc 01       	movw	r30, r24
    1446:	15 82       	std	Z+5, r1	; 0x05
    1448:	fc 01       	movw	r30, r24
    144a:	16 82       	std	Z+6, r1	; 0x06
    144c:	fc 01       	movw	r30, r24
    144e:	17 82       	std	Z+7, r1	; 0x07
    1450:	c9 01       	movw	r24, r18
    1452:	88 0f       	add	r24, r24
    1454:	99 1f       	adc	r25, r25
    1456:	9c 01       	movw	r18, r24
    1458:	22 0f       	add	r18, r18
    145a:	33 1f       	adc	r19, r19
    145c:	22 0f       	add	r18, r18
    145e:	33 1f       	adc	r19, r19
    1460:	22 0f       	add	r18, r18
    1462:	33 1f       	adc	r19, r19
    1464:	82 0f       	add	r24, r18
    1466:	93 1f       	adc	r25, r19
    1468:	8e 58       	subi	r24, 0x8E	; 142
    146a:	9e 4f       	sbci	r25, 0xFE	; 254
    146c:	fc 01       	movw	r30, r24
    146e:	11 82       	std	Z+1, r1	; 0x01
    1470:	10 82       	st	Z, r1
    1472:	89 81       	ldd	r24, Y+1	; 0x01
    1474:	8f 5f       	subi	r24, 0xFF	; 255
    1476:	89 83       	std	Y+1, r24	; 0x01
    1478:	89 81       	ldd	r24, Y+1	; 0x01
    147a:	84 30       	cpi	r24, 0x04	; 4
    147c:	08 f4       	brcc	.+2      	; 0x1480 <appt_init+0xfc>
    147e:	a9 cf       	rjmp	.-174    	; 0x13d2 <appt_init+0x4e>
    1480:	8e e6       	ldi	r24, 0x6E	; 110
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	2e e6       	ldi	r18, 0x6E	; 110
    1486:	30 e0       	ldi	r19, 0x00	; 0
    1488:	f9 01       	movw	r30, r18
    148a:	20 81       	ld	r18, Z
    148c:	2c 7f       	andi	r18, 0xFC	; 252
    148e:	fc 01       	movw	r30, r24
    1490:	20 83       	st	Z, r18
    1492:	85 e4       	ldi	r24, 0x45	; 69
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	25 e4       	ldi	r18, 0x45	; 69
    1498:	30 e0       	ldi	r19, 0x00	; 0
    149a:	f9 01       	movw	r30, r18
    149c:	20 81       	ld	r18, Z
    149e:	28 7f       	andi	r18, 0xF8	; 248
    14a0:	fc 01       	movw	r30, r24
    14a2:	20 83       	st	Z, r18
    14a4:	84 e4       	ldi	r24, 0x44	; 68
    14a6:	90 e0       	ldi	r25, 0x00	; 0
    14a8:	24 e4       	ldi	r18, 0x44	; 68
    14aa:	30 e0       	ldi	r19, 0x00	; 0
    14ac:	f9 01       	movw	r30, r18
    14ae:	20 81       	ld	r18, Z
    14b0:	22 60       	ori	r18, 0x02	; 2
    14b2:	fc 01       	movw	r30, r24
    14b4:	20 83       	st	Z, r18
    14b6:	87 e4       	ldi	r24, 0x47	; 71
    14b8:	90 e0       	ldi	r25, 0x00	; 0
    14ba:	22 e6       	ldi	r18, 0x62	; 98
    14bc:	fc 01       	movw	r30, r24
    14be:	20 83       	st	Z, r18
    14c0:	8e e6       	ldi	r24, 0x6E	; 110
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	2e e6       	ldi	r18, 0x6E	; 110
    14c6:	30 e0       	ldi	r19, 0x00	; 0
    14c8:	f9 01       	movw	r30, r18
    14ca:	20 81       	ld	r18, Z
    14cc:	22 60       	ori	r18, 0x02	; 2
    14ce:	fc 01       	movw	r30, r24
    14d0:	20 83       	st	Z, r18
    14d2:	78 94       	sei
    14d4:	00 00       	nop
    14d6:	0f 90       	pop	r0
    14d8:	df 91       	pop	r29
    14da:	cf 91       	pop	r28
    14dc:	08 95       	ret

000014de <appt_shutdown>:
    14de:	cf 93       	push	r28
    14e0:	df 93       	push	r29
    14e2:	1f 92       	push	r1
    14e4:	cd b7       	in	r28, 0x3d	; 61
    14e6:	de b7       	in	r29, 0x3e	; 62
    14e8:	0e 94 43 0b 	call	0x1686	; 0x1686 <appt_stop>
    14ec:	8e e6       	ldi	r24, 0x6E	; 110
    14ee:	90 e0       	ldi	r25, 0x00	; 0
    14f0:	2e e6       	ldi	r18, 0x6E	; 110
    14f2:	30 e0       	ldi	r19, 0x00	; 0
    14f4:	f9 01       	movw	r30, r18
    14f6:	20 81       	ld	r18, Z
    14f8:	2d 7f       	andi	r18, 0xFD	; 253
    14fa:	fc 01       	movw	r30, r24
    14fc:	20 83       	st	Z, r18
    14fe:	84 e4       	ldi	r24, 0x44	; 68
    1500:	90 e0       	ldi	r25, 0x00	; 0
    1502:	24 e4       	ldi	r18, 0x44	; 68
    1504:	30 e0       	ldi	r19, 0x00	; 0
    1506:	f9 01       	movw	r30, r18
    1508:	20 81       	ld	r18, Z
    150a:	2d 7b       	andi	r18, 0xBD	; 189
    150c:	fc 01       	movw	r30, r24
    150e:	20 83       	st	Z, r18
    1510:	86 e4       	ldi	r24, 0x46	; 70
    1512:	90 e0       	ldi	r25, 0x00	; 0
    1514:	fc 01       	movw	r30, r24
    1516:	10 82       	st	Z, r1
    1518:	87 e4       	ldi	r24, 0x47	; 71
    151a:	90 e0       	ldi	r25, 0x00	; 0
    151c:	fc 01       	movw	r30, r24
    151e:	10 82       	st	Z, r1
    1520:	10 92 b2 01 	sts	0x01B2, r1	; 0x8001b2 <appt_cycles>
    1524:	10 92 b3 01 	sts	0x01B3, r1	; 0x8001b3 <appt_cycles+0x1>
    1528:	10 92 b4 01 	sts	0x01B4, r1	; 0x8001b4 <appt_cycles+0x2>
    152c:	10 92 b5 01 	sts	0x01B5, r1	; 0x8001b5 <appt_cycles+0x3>
    1530:	10 92 b6 01 	sts	0x01B6, r1	; 0x8001b6 <appt_cycles+0x4>
    1534:	10 92 b7 01 	sts	0x01B7, r1	; 0x8001b7 <appt_cycles+0x5>
    1538:	10 92 b8 01 	sts	0x01B8, r1	; 0x8001b8 <appt_cycles+0x6>
    153c:	10 92 b9 01 	sts	0x01B9, r1	; 0x8001b9 <appt_cycles+0x7>
    1540:	10 92 aa 01 	sts	0x01AA, r1	; 0x8001aa <appt_cycles_old>
    1544:	10 92 ab 01 	sts	0x01AB, r1	; 0x8001ab <appt_cycles_old+0x1>
    1548:	10 92 ac 01 	sts	0x01AC, r1	; 0x8001ac <appt_cycles_old+0x2>
    154c:	10 92 ad 01 	sts	0x01AD, r1	; 0x8001ad <appt_cycles_old+0x3>
    1550:	10 92 ae 01 	sts	0x01AE, r1	; 0x8001ae <appt_cycles_old+0x4>
    1554:	10 92 af 01 	sts	0x01AF, r1	; 0x8001af <appt_cycles_old+0x5>
    1558:	10 92 b0 01 	sts	0x01B0, r1	; 0x8001b0 <appt_cycles_old+0x6>
    155c:	10 92 b1 01 	sts	0x01B1, r1	; 0x8001b1 <appt_cycles_old+0x7>
    1560:	19 82       	std	Y+1, r1	; 0x01
    1562:	53 c0       	rjmp	.+166    	; 0x160a <appt_shutdown+0x12c>
    1564:	89 81       	ldd	r24, Y+1	; 0x01
    1566:	28 2f       	mov	r18, r24
    1568:	30 e0       	ldi	r19, 0x00	; 0
    156a:	c9 01       	movw	r24, r18
    156c:	88 0f       	add	r24, r24
    156e:	99 1f       	adc	r25, r25
    1570:	ac 01       	movw	r20, r24
    1572:	44 0f       	add	r20, r20
    1574:	55 1f       	adc	r21, r21
    1576:	44 0f       	add	r20, r20
    1578:	55 1f       	adc	r21, r21
    157a:	44 0f       	add	r20, r20
    157c:	55 1f       	adc	r21, r21
    157e:	84 0f       	add	r24, r20
    1580:	95 1f       	adc	r25, r21
    1582:	8e 59       	subi	r24, 0x9E	; 158
    1584:	9e 4f       	sbci	r25, 0xFE	; 254
    1586:	fc 01       	movw	r30, r24
    1588:	10 82       	st	Z, r1
    158a:	fc 01       	movw	r30, r24
    158c:	11 82       	std	Z+1, r1	; 0x01
    158e:	fc 01       	movw	r30, r24
    1590:	12 82       	std	Z+2, r1	; 0x02
    1592:	fc 01       	movw	r30, r24
    1594:	13 82       	std	Z+3, r1	; 0x03
    1596:	fc 01       	movw	r30, r24
    1598:	14 82       	std	Z+4, r1	; 0x04
    159a:	fc 01       	movw	r30, r24
    159c:	15 82       	std	Z+5, r1	; 0x05
    159e:	fc 01       	movw	r30, r24
    15a0:	16 82       	std	Z+6, r1	; 0x06
    15a2:	fc 01       	movw	r30, r24
    15a4:	17 82       	std	Z+7, r1	; 0x07
    15a6:	c9 01       	movw	r24, r18
    15a8:	88 0f       	add	r24, r24
    15aa:	99 1f       	adc	r25, r25
    15ac:	ac 01       	movw	r20, r24
    15ae:	44 0f       	add	r20, r20
    15b0:	55 1f       	adc	r21, r21
    15b2:	44 0f       	add	r20, r20
    15b4:	55 1f       	adc	r21, r21
    15b6:	44 0f       	add	r20, r20
    15b8:	55 1f       	adc	r21, r21
    15ba:	84 0f       	add	r24, r20
    15bc:	95 1f       	adc	r25, r21
    15be:	86 59       	subi	r24, 0x96	; 150
    15c0:	9e 4f       	sbci	r25, 0xFE	; 254
    15c2:	fc 01       	movw	r30, r24
    15c4:	10 82       	st	Z, r1
    15c6:	fc 01       	movw	r30, r24
    15c8:	11 82       	std	Z+1, r1	; 0x01
    15ca:	fc 01       	movw	r30, r24
    15cc:	12 82       	std	Z+2, r1	; 0x02
    15ce:	fc 01       	movw	r30, r24
    15d0:	13 82       	std	Z+3, r1	; 0x03
    15d2:	fc 01       	movw	r30, r24
    15d4:	14 82       	std	Z+4, r1	; 0x04
    15d6:	fc 01       	movw	r30, r24
    15d8:	15 82       	std	Z+5, r1	; 0x05
    15da:	fc 01       	movw	r30, r24
    15dc:	16 82       	std	Z+6, r1	; 0x06
    15de:	fc 01       	movw	r30, r24
    15e0:	17 82       	std	Z+7, r1	; 0x07
    15e2:	c9 01       	movw	r24, r18
    15e4:	88 0f       	add	r24, r24
    15e6:	99 1f       	adc	r25, r25
    15e8:	9c 01       	movw	r18, r24
    15ea:	22 0f       	add	r18, r18
    15ec:	33 1f       	adc	r19, r19
    15ee:	22 0f       	add	r18, r18
    15f0:	33 1f       	adc	r19, r19
    15f2:	22 0f       	add	r18, r18
    15f4:	33 1f       	adc	r19, r19
    15f6:	82 0f       	add	r24, r18
    15f8:	93 1f       	adc	r25, r19
    15fa:	8e 58       	subi	r24, 0x8E	; 142
    15fc:	9e 4f       	sbci	r25, 0xFE	; 254
    15fe:	fc 01       	movw	r30, r24
    1600:	11 82       	std	Z+1, r1	; 0x01
    1602:	10 82       	st	Z, r1
    1604:	89 81       	ldd	r24, Y+1	; 0x01
    1606:	8f 5f       	subi	r24, 0xFF	; 255
    1608:	89 83       	std	Y+1, r24	; 0x01
    160a:	89 81       	ldd	r24, Y+1	; 0x01
    160c:	84 30       	cpi	r24, 0x04	; 4
    160e:	08 f4       	brcc	.+2      	; 0x1612 <appt_shutdown+0x134>
    1610:	a9 cf       	rjmp	.-174    	; 0x1564 <appt_shutdown+0x86>
    1612:	00 00       	nop
    1614:	0f 90       	pop	r0
    1616:	df 91       	pop	r29
    1618:	cf 91       	pop	r28
    161a:	08 95       	ret

0000161c <appt_start>:
    161c:	cf 93       	push	r28
    161e:	df 93       	push	r29
    1620:	cd b7       	in	r28, 0x3d	; 61
    1622:	de b7       	in	r29, 0x3e	; 62
    1624:	10 92 b2 01 	sts	0x01B2, r1	; 0x8001b2 <appt_cycles>
    1628:	10 92 b3 01 	sts	0x01B3, r1	; 0x8001b3 <appt_cycles+0x1>
    162c:	10 92 b4 01 	sts	0x01B4, r1	; 0x8001b4 <appt_cycles+0x2>
    1630:	10 92 b5 01 	sts	0x01B5, r1	; 0x8001b5 <appt_cycles+0x3>
    1634:	10 92 b6 01 	sts	0x01B6, r1	; 0x8001b6 <appt_cycles+0x4>
    1638:	10 92 b7 01 	sts	0x01B7, r1	; 0x8001b7 <appt_cycles+0x5>
    163c:	10 92 b8 01 	sts	0x01B8, r1	; 0x8001b8 <appt_cycles+0x6>
    1640:	10 92 b9 01 	sts	0x01B9, r1	; 0x8001b9 <appt_cycles+0x7>
    1644:	10 92 aa 01 	sts	0x01AA, r1	; 0x8001aa <appt_cycles_old>
    1648:	10 92 ab 01 	sts	0x01AB, r1	; 0x8001ab <appt_cycles_old+0x1>
    164c:	10 92 ac 01 	sts	0x01AC, r1	; 0x8001ac <appt_cycles_old+0x2>
    1650:	10 92 ad 01 	sts	0x01AD, r1	; 0x8001ad <appt_cycles_old+0x3>
    1654:	10 92 ae 01 	sts	0x01AE, r1	; 0x8001ae <appt_cycles_old+0x4>
    1658:	10 92 af 01 	sts	0x01AF, r1	; 0x8001af <appt_cycles_old+0x5>
    165c:	10 92 b0 01 	sts	0x01B0, r1	; 0x8001b0 <appt_cycles_old+0x6>
    1660:	10 92 b1 01 	sts	0x01B1, r1	; 0x8001b1 <appt_cycles_old+0x7>
    1664:	86 e4       	ldi	r24, 0x46	; 70
    1666:	90 e0       	ldi	r25, 0x00	; 0
    1668:	fc 01       	movw	r30, r24
    166a:	10 82       	st	Z, r1
    166c:	85 e4       	ldi	r24, 0x45	; 69
    166e:	90 e0       	ldi	r25, 0x00	; 0
    1670:	25 e4       	ldi	r18, 0x45	; 69
    1672:	30 e0       	ldi	r19, 0x00	; 0
    1674:	f9 01       	movw	r30, r18
    1676:	20 81       	ld	r18, Z
    1678:	22 60       	ori	r18, 0x02	; 2
    167a:	fc 01       	movw	r30, r24
    167c:	20 83       	st	Z, r18
    167e:	00 00       	nop
    1680:	df 91       	pop	r29
    1682:	cf 91       	pop	r28
    1684:	08 95       	ret

00001686 <appt_stop>:
    1686:	cf 93       	push	r28
    1688:	df 93       	push	r29
    168a:	cd b7       	in	r28, 0x3d	; 61
    168c:	de b7       	in	r29, 0x3e	; 62
    168e:	85 e4       	ldi	r24, 0x45	; 69
    1690:	90 e0       	ldi	r25, 0x00	; 0
    1692:	25 e4       	ldi	r18, 0x45	; 69
    1694:	30 e0       	ldi	r19, 0x00	; 0
    1696:	f9 01       	movw	r30, r18
    1698:	20 81       	ld	r18, Z
    169a:	28 7f       	andi	r18, 0xF8	; 248
    169c:	fc 01       	movw	r30, r24
    169e:	20 83       	st	Z, r18
    16a0:	00 00       	nop
    16a2:	df 91       	pop	r29
    16a4:	cf 91       	pop	r28
    16a6:	08 95       	ret

000016a8 <appt_update>:
    16a8:	2f 92       	push	r2
    16aa:	3f 92       	push	r3
    16ac:	4f 92       	push	r4
    16ae:	5f 92       	push	r5
    16b0:	6f 92       	push	r6
    16b2:	7f 92       	push	r7
    16b4:	8f 92       	push	r8
    16b6:	9f 92       	push	r9
    16b8:	af 92       	push	r10
    16ba:	bf 92       	push	r11
    16bc:	cf 92       	push	r12
    16be:	df 92       	push	r13
    16c0:	ef 92       	push	r14
    16c2:	ff 92       	push	r15
    16c4:	0f 93       	push	r16
    16c6:	1f 93       	push	r17
    16c8:	cf 93       	push	r28
    16ca:	df 93       	push	r29
    16cc:	cd b7       	in	r28, 0x3d	; 61
    16ce:	de b7       	in	r29, 0x3e	; 62
    16d0:	2b 97       	sbiw	r28, 0x0b	; 11
    16d2:	0f b6       	in	r0, 0x3f	; 63
    16d4:	f8 94       	cli
    16d6:	de bf       	out	0x3e, r29	; 62
    16d8:	0f be       	out	0x3f, r0	; 63
    16da:	cd bf       	out	0x3d, r28	; 61
    16dc:	8f e5       	ldi	r24, 0x5F	; 95
    16de:	90 e0       	ldi	r25, 0x00	; 0
    16e0:	dc 01       	movw	r26, r24
    16e2:	8c 91       	ld	r24, X
    16e4:	8b 87       	std	Y+11, r24	; 0x0b
    16e6:	0e 94 41 09 	call	0x1282	; 0x1282 <__iCliRetVal>
    16ea:	89 87       	std	Y+9, r24	; 0x09
    16ec:	5b c0       	rjmp	.+182    	; 0x17a4 <appt_update+0xfc>
    16ee:	a0 90 b2 01 	lds	r10, 0x01B2	; 0x8001b2 <appt_cycles>
    16f2:	b0 90 b3 01 	lds	r11, 0x01B3	; 0x8001b3 <appt_cycles+0x1>
    16f6:	c0 90 b4 01 	lds	r12, 0x01B4	; 0x8001b4 <appt_cycles+0x2>
    16fa:	d0 90 b5 01 	lds	r13, 0x01B5	; 0x8001b5 <appt_cycles+0x3>
    16fe:	e0 90 b6 01 	lds	r14, 0x01B6	; 0x8001b6 <appt_cycles+0x4>
    1702:	f0 90 b7 01 	lds	r15, 0x01B7	; 0x8001b7 <appt_cycles+0x5>
    1706:	00 91 b8 01 	lds	r16, 0x01B8	; 0x8001b8 <appt_cycles+0x6>
    170a:	10 91 b9 01 	lds	r17, 0x01B9	; 0x8001b9 <appt_cycles+0x7>
    170e:	20 90 aa 01 	lds	r2, 0x01AA	; 0x8001aa <appt_cycles_old>
    1712:	30 90 ab 01 	lds	r3, 0x01AB	; 0x8001ab <appt_cycles_old+0x1>
    1716:	40 90 ac 01 	lds	r4, 0x01AC	; 0x8001ac <appt_cycles_old+0x2>
    171a:	50 90 ad 01 	lds	r5, 0x01AD	; 0x8001ad <appt_cycles_old+0x3>
    171e:	60 90 ae 01 	lds	r6, 0x01AE	; 0x8001ae <appt_cycles_old+0x4>
    1722:	70 90 af 01 	lds	r7, 0x01AF	; 0x8001af <appt_cycles_old+0x5>
    1726:	80 90 b0 01 	lds	r8, 0x01B0	; 0x8001b0 <appt_cycles_old+0x6>
    172a:	90 90 b1 01 	lds	r9, 0x01B1	; 0x8001b1 <appt_cycles_old+0x7>
    172e:	2a 2d       	mov	r18, r10
    1730:	3b 2d       	mov	r19, r11
    1732:	4c 2d       	mov	r20, r12
    1734:	5d 2d       	mov	r21, r13
    1736:	6e 2d       	mov	r22, r14
    1738:	7f 2d       	mov	r23, r15
    173a:	80 2f       	mov	r24, r16
    173c:	91 2f       	mov	r25, r17
    173e:	a2 2c       	mov	r10, r2
    1740:	b3 2c       	mov	r11, r3
    1742:	c4 2c       	mov	r12, r4
    1744:	d5 2c       	mov	r13, r5
    1746:	e6 2c       	mov	r14, r6
    1748:	f7 2c       	mov	r15, r7
    174a:	08 2d       	mov	r16, r8
    174c:	19 2d       	mov	r17, r9
    174e:	0e 94 0f 25 	call	0x4a1e	; 0x4a1e <__subdi3>
    1752:	29 83       	std	Y+1, r18	; 0x01
    1754:	3a 83       	std	Y+2, r19	; 0x02
    1756:	4b 83       	std	Y+3, r20	; 0x03
    1758:	5c 83       	std	Y+4, r21	; 0x04
    175a:	6d 83       	std	Y+5, r22	; 0x05
    175c:	7e 83       	std	Y+6, r23	; 0x06
    175e:	8f 83       	std	Y+7, r24	; 0x07
    1760:	98 87       	std	Y+8, r25	; 0x08
    1762:	20 91 b2 01 	lds	r18, 0x01B2	; 0x8001b2 <appt_cycles>
    1766:	30 91 b3 01 	lds	r19, 0x01B3	; 0x8001b3 <appt_cycles+0x1>
    176a:	40 91 b4 01 	lds	r20, 0x01B4	; 0x8001b4 <appt_cycles+0x2>
    176e:	50 91 b5 01 	lds	r21, 0x01B5	; 0x8001b5 <appt_cycles+0x3>
    1772:	60 91 b6 01 	lds	r22, 0x01B6	; 0x8001b6 <appt_cycles+0x4>
    1776:	70 91 b7 01 	lds	r23, 0x01B7	; 0x8001b7 <appt_cycles+0x5>
    177a:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <appt_cycles+0x6>
    177e:	90 91 b9 01 	lds	r25, 0x01B9	; 0x8001b9 <appt_cycles+0x7>
    1782:	20 93 aa 01 	sts	0x01AA, r18	; 0x8001aa <appt_cycles_old>
    1786:	30 93 ab 01 	sts	0x01AB, r19	; 0x8001ab <appt_cycles_old+0x1>
    178a:	40 93 ac 01 	sts	0x01AC, r20	; 0x8001ac <appt_cycles_old+0x2>
    178e:	50 93 ad 01 	sts	0x01AD, r21	; 0x8001ad <appt_cycles_old+0x3>
    1792:	60 93 ae 01 	sts	0x01AE, r22	; 0x8001ae <appt_cycles_old+0x4>
    1796:	70 93 af 01 	sts	0x01AF, r23	; 0x8001af <appt_cycles_old+0x5>
    179a:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <appt_cycles_old+0x6>
    179e:	90 93 b1 01 	sts	0x01B1, r25	; 0x8001b1 <appt_cycles_old+0x7>
    17a2:	19 86       	std	Y+9, r1	; 0x09
    17a4:	89 85       	ldd	r24, Y+9	; 0x09
    17a6:	88 23       	and	r24, r24
    17a8:	09 f0       	breq	.+2      	; 0x17ac <appt_update+0x104>
    17aa:	a1 cf       	rjmp	.-190    	; 0x16ee <appt_update+0x46>
    17ac:	ce 01       	movw	r24, r28
    17ae:	0b 96       	adiw	r24, 0x0b	; 11
    17b0:	0e 94 4a 09 	call	0x1294	; 0x1294 <__iRestore>
    17b4:	1a 86       	std	Y+10, r1	; 0x0a
    17b6:	00 c2       	rjmp	.+1024   	; 0x1bb8 <appt_update+0x510>
    17b8:	8a 85       	ldd	r24, Y+10	; 0x0a
    17ba:	88 2f       	mov	r24, r24
    17bc:	90 e0       	ldi	r25, 0x00	; 0
    17be:	88 0f       	add	r24, r24
    17c0:	99 1f       	adc	r25, r25
    17c2:	9c 01       	movw	r18, r24
    17c4:	22 0f       	add	r18, r18
    17c6:	33 1f       	adc	r19, r19
    17c8:	22 0f       	add	r18, r18
    17ca:	33 1f       	adc	r19, r19
    17cc:	22 0f       	add	r18, r18
    17ce:	33 1f       	adc	r19, r19
    17d0:	82 0f       	add	r24, r18
    17d2:	93 1f       	adc	r25, r19
    17d4:	8e 58       	subi	r24, 0x8E	; 142
    17d6:	9e 4f       	sbci	r25, 0xFE	; 254
    17d8:	fc 01       	movw	r30, r24
    17da:	80 81       	ld	r24, Z
    17dc:	91 81       	ldd	r25, Z+1	; 0x01
    17de:	89 2b       	or	r24, r25
    17e0:	09 f4       	brne	.+2      	; 0x17e4 <appt_update+0x13c>
    17e2:	e7 c1       	rjmp	.+974    	; 0x1bb2 <appt_update+0x50a>
    17e4:	8a 85       	ldd	r24, Y+10	; 0x0a
    17e6:	e8 2f       	mov	r30, r24
    17e8:	f0 e0       	ldi	r31, 0x00	; 0
    17ea:	8a 85       	ldd	r24, Y+10	; 0x0a
    17ec:	88 2f       	mov	r24, r24
    17ee:	90 e0       	ldi	r25, 0x00	; 0
    17f0:	88 0f       	add	r24, r24
    17f2:	99 1f       	adc	r25, r25
    17f4:	9c 01       	movw	r18, r24
    17f6:	22 0f       	add	r18, r18
    17f8:	33 1f       	adc	r19, r19
    17fa:	22 0f       	add	r18, r18
    17fc:	33 1f       	adc	r19, r19
    17fe:	22 0f       	add	r18, r18
    1800:	33 1f       	adc	r19, r19
    1802:	82 0f       	add	r24, r18
    1804:	93 1f       	adc	r25, r19
    1806:	86 59       	subi	r24, 0x96	; 150
    1808:	9e 4f       	sbci	r25, 0xFE	; 254
    180a:	dc 01       	movw	r26, r24
    180c:	ac 90       	ld	r10, X
    180e:	dc 01       	movw	r26, r24
    1810:	11 96       	adiw	r26, 0x01	; 1
    1812:	bc 90       	ld	r11, X
    1814:	dc 01       	movw	r26, r24
    1816:	12 96       	adiw	r26, 0x02	; 2
    1818:	cc 90       	ld	r12, X
    181a:	dc 01       	movw	r26, r24
    181c:	13 96       	adiw	r26, 0x03	; 3
    181e:	dc 90       	ld	r13, X
    1820:	dc 01       	movw	r26, r24
    1822:	14 96       	adiw	r26, 0x04	; 4
    1824:	ec 90       	ld	r14, X
    1826:	dc 01       	movw	r26, r24
    1828:	15 96       	adiw	r26, 0x05	; 5
    182a:	fc 90       	ld	r15, X
    182c:	dc 01       	movw	r26, r24
    182e:	16 96       	adiw	r26, 0x06	; 6
    1830:	0c 91       	ld	r16, X
    1832:	dc 01       	movw	r26, r24
    1834:	17 96       	adiw	r26, 0x07	; 7
    1836:	1c 91       	ld	r17, X
    1838:	2a 2d       	mov	r18, r10
    183a:	3b 2d       	mov	r19, r11
    183c:	4c 2d       	mov	r20, r12
    183e:	5d 2d       	mov	r21, r13
    1840:	6e 2d       	mov	r22, r14
    1842:	7f 2d       	mov	r23, r15
    1844:	80 2f       	mov	r24, r16
    1846:	91 2f       	mov	r25, r17
    1848:	a9 80       	ldd	r10, Y+1	; 0x01
    184a:	ba 80       	ldd	r11, Y+2	; 0x02
    184c:	cb 80       	ldd	r12, Y+3	; 0x03
    184e:	dc 80       	ldd	r13, Y+4	; 0x04
    1850:	ed 80       	ldd	r14, Y+5	; 0x05
    1852:	fe 80       	ldd	r15, Y+6	; 0x06
    1854:	0f 81       	ldd	r16, Y+7	; 0x07
    1856:	18 85       	ldd	r17, Y+8	; 0x08
    1858:	0e 94 fa 24 	call	0x49f4	; 0x49f4 <__adddi3>
    185c:	a2 2e       	mov	r10, r18
    185e:	b3 2e       	mov	r11, r19
    1860:	c4 2e       	mov	r12, r20
    1862:	d5 2e       	mov	r13, r21
    1864:	e6 2e       	mov	r14, r22
    1866:	f7 2e       	mov	r15, r23
    1868:	08 2f       	mov	r16, r24
    186a:	19 2f       	mov	r17, r25
    186c:	cf 01       	movw	r24, r30
    186e:	88 0f       	add	r24, r24
    1870:	99 1f       	adc	r25, r25
    1872:	9c 01       	movw	r18, r24
    1874:	22 0f       	add	r18, r18
    1876:	33 1f       	adc	r19, r19
    1878:	22 0f       	add	r18, r18
    187a:	33 1f       	adc	r19, r19
    187c:	22 0f       	add	r18, r18
    187e:	33 1f       	adc	r19, r19
    1880:	82 0f       	add	r24, r18
    1882:	93 1f       	adc	r25, r19
    1884:	86 59       	subi	r24, 0x96	; 150
    1886:	9e 4f       	sbci	r25, 0xFE	; 254
    1888:	fc 01       	movw	r30, r24
    188a:	a0 82       	st	Z, r10
    188c:	dc 01       	movw	r26, r24
    188e:	11 96       	adiw	r26, 0x01	; 1
    1890:	bc 92       	st	X, r11
    1892:	fc 01       	movw	r30, r24
    1894:	c2 82       	std	Z+2, r12	; 0x02
    1896:	dc 01       	movw	r26, r24
    1898:	13 96       	adiw	r26, 0x03	; 3
    189a:	dc 92       	st	X, r13
    189c:	fc 01       	movw	r30, r24
    189e:	e4 82       	std	Z+4, r14	; 0x04
    18a0:	dc 01       	movw	r26, r24
    18a2:	15 96       	adiw	r26, 0x05	; 5
    18a4:	fc 92       	st	X, r15
    18a6:	fc 01       	movw	r30, r24
    18a8:	06 83       	std	Z+6, r16	; 0x06
    18aa:	dc 01       	movw	r26, r24
    18ac:	17 96       	adiw	r26, 0x07	; 7
    18ae:	1c 93       	st	X, r17
    18b0:	8a 85       	ldd	r24, Y+10	; 0x0a
    18b2:	88 2f       	mov	r24, r24
    18b4:	90 e0       	ldi	r25, 0x00	; 0
    18b6:	88 0f       	add	r24, r24
    18b8:	99 1f       	adc	r25, r25
    18ba:	9c 01       	movw	r18, r24
    18bc:	22 0f       	add	r18, r18
    18be:	33 1f       	adc	r19, r19
    18c0:	22 0f       	add	r18, r18
    18c2:	33 1f       	adc	r19, r19
    18c4:	22 0f       	add	r18, r18
    18c6:	33 1f       	adc	r19, r19
    18c8:	82 0f       	add	r24, r18
    18ca:	93 1f       	adc	r25, r19
    18cc:	86 59       	subi	r24, 0x96	; 150
    18ce:	9e 4f       	sbci	r25, 0xFE	; 254
    18d0:	fc 01       	movw	r30, r24
    18d2:	a0 80       	ld	r10, Z
    18d4:	dc 01       	movw	r26, r24
    18d6:	11 96       	adiw	r26, 0x01	; 1
    18d8:	bc 90       	ld	r11, X
    18da:	fc 01       	movw	r30, r24
    18dc:	c2 80       	ldd	r12, Z+2	; 0x02
    18de:	dc 01       	movw	r26, r24
    18e0:	13 96       	adiw	r26, 0x03	; 3
    18e2:	dc 90       	ld	r13, X
    18e4:	fc 01       	movw	r30, r24
    18e6:	e4 80       	ldd	r14, Z+4	; 0x04
    18e8:	dc 01       	movw	r26, r24
    18ea:	15 96       	adiw	r26, 0x05	; 5
    18ec:	fc 90       	ld	r15, X
    18ee:	fc 01       	movw	r30, r24
    18f0:	06 81       	ldd	r16, Z+6	; 0x06
    18f2:	dc 01       	movw	r26, r24
    18f4:	17 96       	adiw	r26, 0x07	; 7
    18f6:	1c 91       	ld	r17, X
    18f8:	8a 85       	ldd	r24, Y+10	; 0x0a
    18fa:	88 2f       	mov	r24, r24
    18fc:	90 e0       	ldi	r25, 0x00	; 0
    18fe:	88 0f       	add	r24, r24
    1900:	99 1f       	adc	r25, r25
    1902:	9c 01       	movw	r18, r24
    1904:	22 0f       	add	r18, r18
    1906:	33 1f       	adc	r19, r19
    1908:	22 0f       	add	r18, r18
    190a:	33 1f       	adc	r19, r19
    190c:	22 0f       	add	r18, r18
    190e:	33 1f       	adc	r19, r19
    1910:	82 0f       	add	r24, r18
    1912:	93 1f       	adc	r25, r19
    1914:	8e 59       	subi	r24, 0x9E	; 158
    1916:	9e 4f       	sbci	r25, 0xFE	; 254
    1918:	fc 01       	movw	r30, r24
    191a:	20 80       	ld	r2, Z
    191c:	dc 01       	movw	r26, r24
    191e:	11 96       	adiw	r26, 0x01	; 1
    1920:	3c 90       	ld	r3, X
    1922:	fc 01       	movw	r30, r24
    1924:	42 80       	ldd	r4, Z+2	; 0x02
    1926:	dc 01       	movw	r26, r24
    1928:	13 96       	adiw	r26, 0x03	; 3
    192a:	5c 90       	ld	r5, X
    192c:	fc 01       	movw	r30, r24
    192e:	64 80       	ldd	r6, Z+4	; 0x04
    1930:	dc 01       	movw	r26, r24
    1932:	15 96       	adiw	r26, 0x05	; 5
    1934:	7c 90       	ld	r7, X
    1936:	fc 01       	movw	r30, r24
    1938:	86 80       	ldd	r8, Z+6	; 0x06
    193a:	dc 01       	movw	r26, r24
    193c:	17 96       	adiw	r26, 0x07	; 7
    193e:	9c 90       	ld	r9, X
    1940:	2a 2d       	mov	r18, r10
    1942:	3b 2d       	mov	r19, r11
    1944:	4c 2d       	mov	r20, r12
    1946:	5d 2d       	mov	r21, r13
    1948:	6e 2d       	mov	r22, r14
    194a:	7f 2d       	mov	r23, r15
    194c:	80 2f       	mov	r24, r16
    194e:	91 2f       	mov	r25, r17
    1950:	a2 2c       	mov	r10, r2
    1952:	b3 2c       	mov	r11, r3
    1954:	c4 2c       	mov	r12, r4
    1956:	d5 2c       	mov	r13, r5
    1958:	e6 2c       	mov	r14, r6
    195a:	f7 2c       	mov	r15, r7
    195c:	08 2d       	mov	r16, r8
    195e:	19 2d       	mov	r17, r9
    1960:	0e 94 18 25 	call	0x4a30	; 0x4a30 <__cmpdi2>
    1964:	08 f4       	brcc	.+2      	; 0x1968 <appt_update+0x2c0>
    1966:	25 c1       	rjmp	.+586    	; 0x1bb2 <appt_update+0x50a>
    1968:	8a 85       	ldd	r24, Y+10	; 0x0a
    196a:	e8 2f       	mov	r30, r24
    196c:	f0 e0       	ldi	r31, 0x00	; 0
    196e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1970:	88 2f       	mov	r24, r24
    1972:	90 e0       	ldi	r25, 0x00	; 0
    1974:	88 0f       	add	r24, r24
    1976:	99 1f       	adc	r25, r25
    1978:	9c 01       	movw	r18, r24
    197a:	22 0f       	add	r18, r18
    197c:	33 1f       	adc	r19, r19
    197e:	22 0f       	add	r18, r18
    1980:	33 1f       	adc	r19, r19
    1982:	22 0f       	add	r18, r18
    1984:	33 1f       	adc	r19, r19
    1986:	82 0f       	add	r24, r18
    1988:	93 1f       	adc	r25, r19
    198a:	86 59       	subi	r24, 0x96	; 150
    198c:	9e 4f       	sbci	r25, 0xFE	; 254
    198e:	dc 01       	movw	r26, r24
    1990:	ac 90       	ld	r10, X
    1992:	dc 01       	movw	r26, r24
    1994:	11 96       	adiw	r26, 0x01	; 1
    1996:	bc 90       	ld	r11, X
    1998:	dc 01       	movw	r26, r24
    199a:	12 96       	adiw	r26, 0x02	; 2
    199c:	cc 90       	ld	r12, X
    199e:	dc 01       	movw	r26, r24
    19a0:	13 96       	adiw	r26, 0x03	; 3
    19a2:	dc 90       	ld	r13, X
    19a4:	dc 01       	movw	r26, r24
    19a6:	14 96       	adiw	r26, 0x04	; 4
    19a8:	ec 90       	ld	r14, X
    19aa:	dc 01       	movw	r26, r24
    19ac:	15 96       	adiw	r26, 0x05	; 5
    19ae:	fc 90       	ld	r15, X
    19b0:	dc 01       	movw	r26, r24
    19b2:	16 96       	adiw	r26, 0x06	; 6
    19b4:	0c 91       	ld	r16, X
    19b6:	dc 01       	movw	r26, r24
    19b8:	17 96       	adiw	r26, 0x07	; 7
    19ba:	1c 91       	ld	r17, X
    19bc:	8a 85       	ldd	r24, Y+10	; 0x0a
    19be:	88 2f       	mov	r24, r24
    19c0:	90 e0       	ldi	r25, 0x00	; 0
    19c2:	88 0f       	add	r24, r24
    19c4:	99 1f       	adc	r25, r25
    19c6:	9c 01       	movw	r18, r24
    19c8:	22 0f       	add	r18, r18
    19ca:	33 1f       	adc	r19, r19
    19cc:	22 0f       	add	r18, r18
    19ce:	33 1f       	adc	r19, r19
    19d0:	22 0f       	add	r18, r18
    19d2:	33 1f       	adc	r19, r19
    19d4:	82 0f       	add	r24, r18
    19d6:	93 1f       	adc	r25, r19
    19d8:	8e 59       	subi	r24, 0x9E	; 158
    19da:	9e 4f       	sbci	r25, 0xFE	; 254
    19dc:	dc 01       	movw	r26, r24
    19de:	2c 90       	ld	r2, X
    19e0:	dc 01       	movw	r26, r24
    19e2:	11 96       	adiw	r26, 0x01	; 1
    19e4:	3c 90       	ld	r3, X
    19e6:	dc 01       	movw	r26, r24
    19e8:	12 96       	adiw	r26, 0x02	; 2
    19ea:	4c 90       	ld	r4, X
    19ec:	dc 01       	movw	r26, r24
    19ee:	13 96       	adiw	r26, 0x03	; 3
    19f0:	5c 90       	ld	r5, X
    19f2:	dc 01       	movw	r26, r24
    19f4:	14 96       	adiw	r26, 0x04	; 4
    19f6:	6c 90       	ld	r6, X
    19f8:	dc 01       	movw	r26, r24
    19fa:	15 96       	adiw	r26, 0x05	; 5
    19fc:	7c 90       	ld	r7, X
    19fe:	dc 01       	movw	r26, r24
    1a00:	16 96       	adiw	r26, 0x06	; 6
    1a02:	8c 90       	ld	r8, X
    1a04:	dc 01       	movw	r26, r24
    1a06:	17 96       	adiw	r26, 0x07	; 7
    1a08:	9c 90       	ld	r9, X
    1a0a:	2a 2d       	mov	r18, r10
    1a0c:	3b 2d       	mov	r19, r11
    1a0e:	4c 2d       	mov	r20, r12
    1a10:	5d 2d       	mov	r21, r13
    1a12:	6e 2d       	mov	r22, r14
    1a14:	7f 2d       	mov	r23, r15
    1a16:	80 2f       	mov	r24, r16
    1a18:	91 2f       	mov	r25, r17
    1a1a:	a2 2c       	mov	r10, r2
    1a1c:	b3 2c       	mov	r11, r3
    1a1e:	c4 2c       	mov	r12, r4
    1a20:	d5 2c       	mov	r13, r5
    1a22:	e6 2c       	mov	r14, r6
    1a24:	f7 2c       	mov	r15, r7
    1a26:	08 2d       	mov	r16, r8
    1a28:	19 2d       	mov	r17, r9
    1a2a:	0e 94 0f 25 	call	0x4a1e	; 0x4a1e <__subdi3>
    1a2e:	a2 2e       	mov	r10, r18
    1a30:	b3 2e       	mov	r11, r19
    1a32:	c4 2e       	mov	r12, r20
    1a34:	d5 2e       	mov	r13, r21
    1a36:	e6 2e       	mov	r14, r22
    1a38:	f7 2e       	mov	r15, r23
    1a3a:	08 2f       	mov	r16, r24
    1a3c:	19 2f       	mov	r17, r25
    1a3e:	cf 01       	movw	r24, r30
    1a40:	88 0f       	add	r24, r24
    1a42:	99 1f       	adc	r25, r25
    1a44:	9c 01       	movw	r18, r24
    1a46:	22 0f       	add	r18, r18
    1a48:	33 1f       	adc	r19, r19
    1a4a:	22 0f       	add	r18, r18
    1a4c:	33 1f       	adc	r19, r19
    1a4e:	22 0f       	add	r18, r18
    1a50:	33 1f       	adc	r19, r19
    1a52:	82 0f       	add	r24, r18
    1a54:	93 1f       	adc	r25, r19
    1a56:	86 59       	subi	r24, 0x96	; 150
    1a58:	9e 4f       	sbci	r25, 0xFE	; 254
    1a5a:	fc 01       	movw	r30, r24
    1a5c:	a0 82       	st	Z, r10
    1a5e:	dc 01       	movw	r26, r24
    1a60:	11 96       	adiw	r26, 0x01	; 1
    1a62:	bc 92       	st	X, r11
    1a64:	fc 01       	movw	r30, r24
    1a66:	c2 82       	std	Z+2, r12	; 0x02
    1a68:	dc 01       	movw	r26, r24
    1a6a:	13 96       	adiw	r26, 0x03	; 3
    1a6c:	dc 92       	st	X, r13
    1a6e:	fc 01       	movw	r30, r24
    1a70:	e4 82       	std	Z+4, r14	; 0x04
    1a72:	dc 01       	movw	r26, r24
    1a74:	15 96       	adiw	r26, 0x05	; 5
    1a76:	fc 92       	st	X, r15
    1a78:	fc 01       	movw	r30, r24
    1a7a:	06 83       	std	Z+6, r16	; 0x06
    1a7c:	dc 01       	movw	r26, r24
    1a7e:	17 96       	adiw	r26, 0x07	; 7
    1a80:	1c 93       	st	X, r17
    1a82:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a84:	88 2f       	mov	r24, r24
    1a86:	90 e0       	ldi	r25, 0x00	; 0
    1a88:	88 0f       	add	r24, r24
    1a8a:	99 1f       	adc	r25, r25
    1a8c:	9c 01       	movw	r18, r24
    1a8e:	22 0f       	add	r18, r18
    1a90:	33 1f       	adc	r19, r19
    1a92:	22 0f       	add	r18, r18
    1a94:	33 1f       	adc	r19, r19
    1a96:	22 0f       	add	r18, r18
    1a98:	33 1f       	adc	r19, r19
    1a9a:	82 0f       	add	r24, r18
    1a9c:	93 1f       	adc	r25, r19
    1a9e:	86 59       	subi	r24, 0x96	; 150
    1aa0:	9e 4f       	sbci	r25, 0xFE	; 254
    1aa2:	fc 01       	movw	r30, r24
    1aa4:	a0 80       	ld	r10, Z
    1aa6:	dc 01       	movw	r26, r24
    1aa8:	11 96       	adiw	r26, 0x01	; 1
    1aaa:	bc 90       	ld	r11, X
    1aac:	fc 01       	movw	r30, r24
    1aae:	c2 80       	ldd	r12, Z+2	; 0x02
    1ab0:	dc 01       	movw	r26, r24
    1ab2:	13 96       	adiw	r26, 0x03	; 3
    1ab4:	dc 90       	ld	r13, X
    1ab6:	fc 01       	movw	r30, r24
    1ab8:	e4 80       	ldd	r14, Z+4	; 0x04
    1aba:	dc 01       	movw	r26, r24
    1abc:	15 96       	adiw	r26, 0x05	; 5
    1abe:	fc 90       	ld	r15, X
    1ac0:	fc 01       	movw	r30, r24
    1ac2:	06 81       	ldd	r16, Z+6	; 0x06
    1ac4:	dc 01       	movw	r26, r24
    1ac6:	17 96       	adiw	r26, 0x07	; 7
    1ac8:	1c 91       	ld	r17, X
    1aca:	8a 85       	ldd	r24, Y+10	; 0x0a
    1acc:	88 2f       	mov	r24, r24
    1ace:	90 e0       	ldi	r25, 0x00	; 0
    1ad0:	88 0f       	add	r24, r24
    1ad2:	99 1f       	adc	r25, r25
    1ad4:	9c 01       	movw	r18, r24
    1ad6:	22 0f       	add	r18, r18
    1ad8:	33 1f       	adc	r19, r19
    1ada:	22 0f       	add	r18, r18
    1adc:	33 1f       	adc	r19, r19
    1ade:	22 0f       	add	r18, r18
    1ae0:	33 1f       	adc	r19, r19
    1ae2:	82 0f       	add	r24, r18
    1ae4:	93 1f       	adc	r25, r19
    1ae6:	8e 59       	subi	r24, 0x9E	; 158
    1ae8:	9e 4f       	sbci	r25, 0xFE	; 254
    1aea:	fc 01       	movw	r30, r24
    1aec:	20 80       	ld	r2, Z
    1aee:	dc 01       	movw	r26, r24
    1af0:	11 96       	adiw	r26, 0x01	; 1
    1af2:	3c 90       	ld	r3, X
    1af4:	fc 01       	movw	r30, r24
    1af6:	42 80       	ldd	r4, Z+2	; 0x02
    1af8:	dc 01       	movw	r26, r24
    1afa:	13 96       	adiw	r26, 0x03	; 3
    1afc:	5c 90       	ld	r5, X
    1afe:	fc 01       	movw	r30, r24
    1b00:	64 80       	ldd	r6, Z+4	; 0x04
    1b02:	dc 01       	movw	r26, r24
    1b04:	15 96       	adiw	r26, 0x05	; 5
    1b06:	7c 90       	ld	r7, X
    1b08:	fc 01       	movw	r30, r24
    1b0a:	86 80       	ldd	r8, Z+6	; 0x06
    1b0c:	dc 01       	movw	r26, r24
    1b0e:	17 96       	adiw	r26, 0x07	; 7
    1b10:	9c 90       	ld	r9, X
    1b12:	2a 2d       	mov	r18, r10
    1b14:	3b 2d       	mov	r19, r11
    1b16:	4c 2d       	mov	r20, r12
    1b18:	5d 2d       	mov	r21, r13
    1b1a:	6e 2d       	mov	r22, r14
    1b1c:	7f 2d       	mov	r23, r15
    1b1e:	80 2f       	mov	r24, r16
    1b20:	91 2f       	mov	r25, r17
    1b22:	a2 2c       	mov	r10, r2
    1b24:	b3 2c       	mov	r11, r3
    1b26:	c4 2c       	mov	r12, r4
    1b28:	d5 2c       	mov	r13, r5
    1b2a:	e6 2c       	mov	r14, r6
    1b2c:	f7 2c       	mov	r15, r7
    1b2e:	08 2d       	mov	r16, r8
    1b30:	19 2d       	mov	r17, r9
    1b32:	0e 94 18 25 	call	0x4a30	; 0x4a30 <__cmpdi2>
    1b36:	20 f1       	brcs	.+72     	; 0x1b80 <appt_update+0x4d8>
    1b38:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b3a:	88 2f       	mov	r24, r24
    1b3c:	90 e0       	ldi	r25, 0x00	; 0
    1b3e:	88 0f       	add	r24, r24
    1b40:	99 1f       	adc	r25, r25
    1b42:	9c 01       	movw	r18, r24
    1b44:	22 0f       	add	r18, r18
    1b46:	33 1f       	adc	r19, r19
    1b48:	22 0f       	add	r18, r18
    1b4a:	33 1f       	adc	r19, r19
    1b4c:	22 0f       	add	r18, r18
    1b4e:	33 1f       	adc	r19, r19
    1b50:	82 0f       	add	r24, r18
    1b52:	93 1f       	adc	r25, r19
    1b54:	86 59       	subi	r24, 0x96	; 150
    1b56:	9e 4f       	sbci	r25, 0xFE	; 254
    1b58:	fc 01       	movw	r30, r24
    1b5a:	10 82       	st	Z, r1
    1b5c:	dc 01       	movw	r26, r24
    1b5e:	11 96       	adiw	r26, 0x01	; 1
    1b60:	1c 92       	st	X, r1
    1b62:	fc 01       	movw	r30, r24
    1b64:	12 82       	std	Z+2, r1	; 0x02
    1b66:	dc 01       	movw	r26, r24
    1b68:	13 96       	adiw	r26, 0x03	; 3
    1b6a:	1c 92       	st	X, r1
    1b6c:	fc 01       	movw	r30, r24
    1b6e:	14 82       	std	Z+4, r1	; 0x04
    1b70:	dc 01       	movw	r26, r24
    1b72:	15 96       	adiw	r26, 0x05	; 5
    1b74:	1c 92       	st	X, r1
    1b76:	fc 01       	movw	r30, r24
    1b78:	16 82       	std	Z+6, r1	; 0x06
    1b7a:	dc 01       	movw	r26, r24
    1b7c:	17 96       	adiw	r26, 0x07	; 7
    1b7e:	1c 92       	st	X, r1
    1b80:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b82:	88 2f       	mov	r24, r24
    1b84:	90 e0       	ldi	r25, 0x00	; 0
    1b86:	88 0f       	add	r24, r24
    1b88:	99 1f       	adc	r25, r25
    1b8a:	9c 01       	movw	r18, r24
    1b8c:	22 0f       	add	r18, r18
    1b8e:	33 1f       	adc	r19, r19
    1b90:	22 0f       	add	r18, r18
    1b92:	33 1f       	adc	r19, r19
    1b94:	22 0f       	add	r18, r18
    1b96:	33 1f       	adc	r19, r19
    1b98:	82 0f       	add	r24, r18
    1b9a:	93 1f       	adc	r25, r19
    1b9c:	8e 58       	subi	r24, 0x8E	; 142
    1b9e:	9e 4f       	sbci	r25, 0xFE	; 254
    1ba0:	fc 01       	movw	r30, r24
    1ba2:	80 81       	ld	r24, Z
    1ba4:	91 81       	ldd	r25, Z+1	; 0x01
    1ba6:	fc 01       	movw	r30, r24
    1ba8:	09 95       	icall
    1baa:	88 23       	and	r24, r24
    1bac:	11 f0       	breq	.+4      	; 0x1bb2 <appt_update+0x50a>
    1bae:	81 e0       	ldi	r24, 0x01	; 1
    1bb0:	08 c0       	rjmp	.+16     	; 0x1bc2 <appt_update+0x51a>
    1bb2:	8a 85       	ldd	r24, Y+10	; 0x0a
    1bb4:	8f 5f       	subi	r24, 0xFF	; 255
    1bb6:	8a 87       	std	Y+10, r24	; 0x0a
    1bb8:	8a 85       	ldd	r24, Y+10	; 0x0a
    1bba:	84 30       	cpi	r24, 0x04	; 4
    1bbc:	08 f4       	brcc	.+2      	; 0x1bc0 <appt_update+0x518>
    1bbe:	fc cd       	rjmp	.-1032   	; 0x17b8 <appt_update+0x110>
    1bc0:	80 e0       	ldi	r24, 0x00	; 0
    1bc2:	2b 96       	adiw	r28, 0x0b	; 11
    1bc4:	0f b6       	in	r0, 0x3f	; 63
    1bc6:	f8 94       	cli
    1bc8:	de bf       	out	0x3e, r29	; 62
    1bca:	0f be       	out	0x3f, r0	; 63
    1bcc:	cd bf       	out	0x3d, r28	; 61
    1bce:	df 91       	pop	r29
    1bd0:	cf 91       	pop	r28
    1bd2:	1f 91       	pop	r17
    1bd4:	0f 91       	pop	r16
    1bd6:	ff 90       	pop	r15
    1bd8:	ef 90       	pop	r14
    1bda:	df 90       	pop	r13
    1bdc:	cf 90       	pop	r12
    1bde:	bf 90       	pop	r11
    1be0:	af 90       	pop	r10
    1be2:	9f 90       	pop	r9
    1be4:	8f 90       	pop	r8
    1be6:	7f 90       	pop	r7
    1be8:	6f 90       	pop	r6
    1bea:	5f 90       	pop	r5
    1bec:	4f 90       	pop	r4
    1bee:	3f 90       	pop	r3
    1bf0:	2f 90       	pop	r2
    1bf2:	08 95       	ret

00001bf4 <appt_set_callback>:
    1bf4:	8f 92       	push	r8
    1bf6:	9f 92       	push	r9
    1bf8:	af 92       	push	r10
    1bfa:	bf 92       	push	r11
    1bfc:	cf 92       	push	r12
    1bfe:	df 92       	push	r13
    1c00:	ef 92       	push	r14
    1c02:	ff 92       	push	r15
    1c04:	0f 93       	push	r16
    1c06:	1f 93       	push	r17
    1c08:	cf 93       	push	r28
    1c0a:	df 93       	push	r29
    1c0c:	cd b7       	in	r28, 0x3d	; 61
    1c0e:	de b7       	in	r29, 0x3e	; 62
    1c10:	27 97       	sbiw	r28, 0x07	; 7
    1c12:	0f b6       	in	r0, 0x3f	; 63
    1c14:	f8 94       	cli
    1c16:	de bf       	out	0x3e, r29	; 62
    1c18:	0f be       	out	0x3f, r0	; 63
    1c1a:	cd bf       	out	0x3d, r28	; 61
    1c1c:	69 83       	std	Y+1, r22	; 0x01
    1c1e:	7a 83       	std	Y+2, r23	; 0x02
    1c20:	8b 83       	std	Y+3, r24	; 0x03
    1c22:	9c 83       	std	Y+4, r25	; 0x04
    1c24:	5e 83       	std	Y+6, r21	; 0x06
    1c26:	4d 83       	std	Y+5, r20	; 0x05
    1c28:	2f 83       	std	Y+7, r18	; 0x07
    1c2a:	8f 81       	ldd	r24, Y+7	; 0x07
    1c2c:	84 30       	cpi	r24, 0x04	; 4
    1c2e:	10 f0       	brcs	.+4      	; 0x1c34 <appt_set_callback+0x40>
    1c30:	0e 94 35 25 	call	0x4a6a	; 0x4a6a <abort>
    1c34:	8f 81       	ldd	r24, Y+7	; 0x07
    1c36:	88 2e       	mov	r8, r24
    1c38:	91 2c       	mov	r9, r1
    1c3a:	89 81       	ldd	r24, Y+1	; 0x01
    1c3c:	9a 81       	ldd	r25, Y+2	; 0x02
    1c3e:	ab 81       	ldd	r26, Y+3	; 0x03
    1c40:	bc 81       	ldd	r27, Y+4	; 0x04
    1c42:	bc 01       	movw	r22, r24
    1c44:	cd 01       	movw	r24, r26
    1c46:	0e 94 5f 09 	call	0x12be	; 0x12be <seconds_to_cycles>
    1c4a:	a2 2e       	mov	r10, r18
    1c4c:	b3 2e       	mov	r11, r19
    1c4e:	c4 2e       	mov	r12, r20
    1c50:	d5 2e       	mov	r13, r21
    1c52:	e6 2e       	mov	r14, r22
    1c54:	f7 2e       	mov	r15, r23
    1c56:	08 2f       	mov	r16, r24
    1c58:	19 2f       	mov	r17, r25
    1c5a:	c4 01       	movw	r24, r8
    1c5c:	88 0f       	add	r24, r24
    1c5e:	99 1f       	adc	r25, r25
    1c60:	9c 01       	movw	r18, r24
    1c62:	22 0f       	add	r18, r18
    1c64:	33 1f       	adc	r19, r19
    1c66:	22 0f       	add	r18, r18
    1c68:	33 1f       	adc	r19, r19
    1c6a:	22 0f       	add	r18, r18
    1c6c:	33 1f       	adc	r19, r19
    1c6e:	82 0f       	add	r24, r18
    1c70:	93 1f       	adc	r25, r19
    1c72:	8e 59       	subi	r24, 0x9E	; 158
    1c74:	9e 4f       	sbci	r25, 0xFE	; 254
    1c76:	fc 01       	movw	r30, r24
    1c78:	a0 82       	st	Z, r10
    1c7a:	fc 01       	movw	r30, r24
    1c7c:	b1 82       	std	Z+1, r11	; 0x01
    1c7e:	fc 01       	movw	r30, r24
    1c80:	c2 82       	std	Z+2, r12	; 0x02
    1c82:	fc 01       	movw	r30, r24
    1c84:	d3 82       	std	Z+3, r13	; 0x03
    1c86:	fc 01       	movw	r30, r24
    1c88:	e4 82       	std	Z+4, r14	; 0x04
    1c8a:	fc 01       	movw	r30, r24
    1c8c:	f5 82       	std	Z+5, r15	; 0x05
    1c8e:	fc 01       	movw	r30, r24
    1c90:	06 83       	std	Z+6, r16	; 0x06
    1c92:	fc 01       	movw	r30, r24
    1c94:	17 83       	std	Z+7, r17	; 0x07
    1c96:	c4 01       	movw	r24, r8
    1c98:	88 0f       	add	r24, r24
    1c9a:	99 1f       	adc	r25, r25
    1c9c:	9c 01       	movw	r18, r24
    1c9e:	22 0f       	add	r18, r18
    1ca0:	33 1f       	adc	r19, r19
    1ca2:	22 0f       	add	r18, r18
    1ca4:	33 1f       	adc	r19, r19
    1ca6:	22 0f       	add	r18, r18
    1ca8:	33 1f       	adc	r19, r19
    1caa:	82 0f       	add	r24, r18
    1cac:	93 1f       	adc	r25, r19
    1cae:	86 59       	subi	r24, 0x96	; 150
    1cb0:	9e 4f       	sbci	r25, 0xFE	; 254
    1cb2:	fc 01       	movw	r30, r24
    1cb4:	10 82       	st	Z, r1
    1cb6:	fc 01       	movw	r30, r24
    1cb8:	11 82       	std	Z+1, r1	; 0x01
    1cba:	fc 01       	movw	r30, r24
    1cbc:	12 82       	std	Z+2, r1	; 0x02
    1cbe:	fc 01       	movw	r30, r24
    1cc0:	13 82       	std	Z+3, r1	; 0x03
    1cc2:	fc 01       	movw	r30, r24
    1cc4:	14 82       	std	Z+4, r1	; 0x04
    1cc6:	fc 01       	movw	r30, r24
    1cc8:	15 82       	std	Z+5, r1	; 0x05
    1cca:	fc 01       	movw	r30, r24
    1ccc:	16 82       	std	Z+6, r1	; 0x06
    1cce:	fc 01       	movw	r30, r24
    1cd0:	17 82       	std	Z+7, r1	; 0x07
    1cd2:	c4 01       	movw	r24, r8
    1cd4:	88 0f       	add	r24, r24
    1cd6:	99 1f       	adc	r25, r25
    1cd8:	9c 01       	movw	r18, r24
    1cda:	22 0f       	add	r18, r18
    1cdc:	33 1f       	adc	r19, r19
    1cde:	22 0f       	add	r18, r18
    1ce0:	33 1f       	adc	r19, r19
    1ce2:	22 0f       	add	r18, r18
    1ce4:	33 1f       	adc	r19, r19
    1ce6:	82 0f       	add	r24, r18
    1ce8:	93 1f       	adc	r25, r19
    1cea:	8e 58       	subi	r24, 0x8E	; 142
    1cec:	9e 4f       	sbci	r25, 0xFE	; 254
    1cee:	2d 81       	ldd	r18, Y+5	; 0x05
    1cf0:	3e 81       	ldd	r19, Y+6	; 0x06
    1cf2:	fc 01       	movw	r30, r24
    1cf4:	31 83       	std	Z+1, r19	; 0x01
    1cf6:	20 83       	st	Z, r18
    1cf8:	00 00       	nop
    1cfa:	27 96       	adiw	r28, 0x07	; 7
    1cfc:	0f b6       	in	r0, 0x3f	; 63
    1cfe:	f8 94       	cli
    1d00:	de bf       	out	0x3e, r29	; 62
    1d02:	0f be       	out	0x3f, r0	; 63
    1d04:	cd bf       	out	0x3d, r28	; 61
    1d06:	df 91       	pop	r29
    1d08:	cf 91       	pop	r28
    1d0a:	1f 91       	pop	r17
    1d0c:	0f 91       	pop	r16
    1d0e:	ff 90       	pop	r15
    1d10:	ef 90       	pop	r14
    1d12:	df 90       	pop	r13
    1d14:	cf 90       	pop	r12
    1d16:	bf 90       	pop	r11
    1d18:	af 90       	pop	r10
    1d1a:	9f 90       	pop	r9
    1d1c:	8f 90       	pop	r8
    1d1e:	08 95       	ret

00001d20 <__vector_16>:


// ------------------------------ ISR ------------------------------------
ISR(TIMER0_COMPA_vect)
{
    1d20:	1f 92       	push	r1
    1d22:	0f 92       	push	r0
    1d24:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1d28:	0f 92       	push	r0
    1d2a:	11 24       	eor	r1, r1
    1d2c:	af 92       	push	r10
    1d2e:	bf 92       	push	r11
    1d30:	cf 92       	push	r12
    1d32:	df 92       	push	r13
    1d34:	ef 92       	push	r14
    1d36:	ff 92       	push	r15
    1d38:	0f 93       	push	r16
    1d3a:	1f 93       	push	r17
    1d3c:	2f 93       	push	r18
    1d3e:	3f 93       	push	r19
    1d40:	4f 93       	push	r20
    1d42:	5f 93       	push	r21
    1d44:	6f 93       	push	r22
    1d46:	7f 93       	push	r23
    1d48:	8f 93       	push	r24
    1d4a:	9f 93       	push	r25
    1d4c:	af 93       	push	r26
    1d4e:	cf 93       	push	r28
    1d50:	df 93       	push	r29
    1d52:	cd b7       	in	r28, 0x3d	; 61
    1d54:	de b7       	in	r29, 0x3e	; 62
	++appt_cycles;
    1d56:	a0 90 b2 01 	lds	r10, 0x01B2	; 0x8001b2 <appt_cycles>
    1d5a:	b0 90 b3 01 	lds	r11, 0x01B3	; 0x8001b3 <appt_cycles+0x1>
    1d5e:	c0 90 b4 01 	lds	r12, 0x01B4	; 0x8001b4 <appt_cycles+0x2>
    1d62:	d0 90 b5 01 	lds	r13, 0x01B5	; 0x8001b5 <appt_cycles+0x3>
    1d66:	e0 90 b6 01 	lds	r14, 0x01B6	; 0x8001b6 <appt_cycles+0x4>
    1d6a:	f0 90 b7 01 	lds	r15, 0x01B7	; 0x8001b7 <appt_cycles+0x5>
    1d6e:	00 91 b8 01 	lds	r16, 0x01B8	; 0x8001b8 <appt_cycles+0x6>
    1d72:	10 91 b9 01 	lds	r17, 0x01B9	; 0x8001b9 <appt_cycles+0x7>
    1d76:	2a 2d       	mov	r18, r10
    1d78:	3b 2d       	mov	r19, r11
    1d7a:	4c 2d       	mov	r20, r12
    1d7c:	5d 2d       	mov	r21, r13
    1d7e:	6e 2d       	mov	r22, r14
    1d80:	7f 2d       	mov	r23, r15
    1d82:	80 2f       	mov	r24, r16
    1d84:	91 2f       	mov	r25, r17
    1d86:	a1 e0       	ldi	r26, 0x01	; 1
    1d88:	0e 94 03 25 	call	0x4a06	; 0x4a06 <__adddi3_s8>
    1d8c:	a2 2e       	mov	r10, r18
    1d8e:	b3 2e       	mov	r11, r19
    1d90:	c4 2e       	mov	r12, r20
    1d92:	d5 2e       	mov	r13, r21
    1d94:	e6 2e       	mov	r14, r22
    1d96:	f7 2e       	mov	r15, r23
    1d98:	08 2f       	mov	r16, r24
    1d9a:	19 2f       	mov	r17, r25
    1d9c:	a0 92 b2 01 	sts	0x01B2, r10	; 0x8001b2 <appt_cycles>
    1da0:	b0 92 b3 01 	sts	0x01B3, r11	; 0x8001b3 <appt_cycles+0x1>
    1da4:	c0 92 b4 01 	sts	0x01B4, r12	; 0x8001b4 <appt_cycles+0x2>
    1da8:	d0 92 b5 01 	sts	0x01B5, r13	; 0x8001b5 <appt_cycles+0x3>
    1dac:	e0 92 b6 01 	sts	0x01B6, r14	; 0x8001b6 <appt_cycles+0x4>
    1db0:	f0 92 b7 01 	sts	0x01B7, r15	; 0x8001b7 <appt_cycles+0x5>
    1db4:	00 93 b8 01 	sts	0x01B8, r16	; 0x8001b8 <appt_cycles+0x6>
    1db8:	10 93 b9 01 	sts	0x01B9, r17	; 0x8001b9 <appt_cycles+0x7>
}
    1dbc:	00 00       	nop
    1dbe:	df 91       	pop	r29
    1dc0:	cf 91       	pop	r28
    1dc2:	af 91       	pop	r26
    1dc4:	9f 91       	pop	r25
    1dc6:	8f 91       	pop	r24
    1dc8:	7f 91       	pop	r23
    1dca:	6f 91       	pop	r22
    1dcc:	5f 91       	pop	r21
    1dce:	4f 91       	pop	r20
    1dd0:	3f 91       	pop	r19
    1dd2:	2f 91       	pop	r18
    1dd4:	1f 91       	pop	r17
    1dd6:	0f 91       	pop	r16
    1dd8:	ff 90       	pop	r15
    1dda:	ef 90       	pop	r14
    1ddc:	df 90       	pop	r13
    1dde:	cf 90       	pop	r12
    1de0:	bf 90       	pop	r11
    1de2:	af 90       	pop	r10
    1de4:	0f 90       	pop	r0
    1de6:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1dea:	0f 90       	pop	r0
    1dec:	1f 90       	pop	r1
    1dee:	18 95       	reti

00001df0 <heater_init>:
#endif

#define HEATER_PWM_WGM_BITS_A (1 << WGM20) // phase correct pwm

void heater_init()
{
    1df0:	cf 93       	push	r28
    1df2:	df 93       	push	r29
    1df4:	cd b7       	in	r28, 0x3d	; 61
    1df6:	de b7       	in	r29, 0x3e	; 62
	TIMSK2 = 0x00;
    1df8:	80 e7       	ldi	r24, 0x70	; 112
    1dfa:	90 e0       	ldi	r25, 0x00	; 0
    1dfc:	fc 01       	movw	r30, r24
    1dfe:	10 82       	st	Z, r1
	// stop timer clock
	TCCR2B &= ~HEATER_PWM_PRESCALE_BITS;
    1e00:	81 eb       	ldi	r24, 0xB1	; 177
    1e02:	90 e0       	ldi	r25, 0x00	; 0
    1e04:	21 eb       	ldi	r18, 0xB1	; 177
    1e06:	30 e0       	ldi	r19, 0x00	; 0
    1e08:	f9 01       	movw	r30, r18
    1e0a:	20 81       	ld	r18, Z
    1e0c:	29 7f       	andi	r18, 0xF9	; 249
    1e0e:	fc 01       	movw	r30, r24
    1e10:	20 83       	st	Z, r18
	// enable phase correct, frequency correct pwm mode
	TCCR2A |= HEATER_PWM_WGM_BITS_A;
    1e12:	80 eb       	ldi	r24, 0xB0	; 176
    1e14:	90 e0       	ldi	r25, 0x00	; 0
    1e16:	20 eb       	ldi	r18, 0xB0	; 176
    1e18:	30 e0       	ldi	r19, 0x00	; 0
    1e1a:	f9 01       	movw	r30, r18
    1e1c:	20 81       	ld	r18, Z
    1e1e:	21 60       	ori	r18, 0x01	; 1
    1e20:	fc 01       	movw	r30, r24
    1e22:	20 83       	st	Z, r18
	// reset duty cycle val
	#ifdef HEATER_PWM_INVERSE
		OCR2A = 0xFF;
	#else
		OCR2A = 0x00;
    1e24:	83 eb       	ldi	r24, 0xB3	; 179
    1e26:	90 e0       	ldi	r25, 0x00	; 0
    1e28:	fc 01       	movw	r30, r24
    1e2a:	10 82       	st	Z, r1
	#endif
	// reset timer
	TCNT2 = 0x00;
    1e2c:	82 eb       	ldi	r24, 0xB2	; 178
    1e2e:	90 e0       	ldi	r25, 0x00	; 0
    1e30:	fc 01       	movw	r30, r24
    1e32:	10 82       	st	Z, r1
	
	// enable output pin
	OC2A_DDR |= (1 << OC2A_BIT);
    1e34:	8a e2       	ldi	r24, 0x2A	; 42
    1e36:	90 e0       	ldi	r25, 0x00	; 0
    1e38:	2a e2       	ldi	r18, 0x2A	; 42
    1e3a:	30 e0       	ldi	r19, 0x00	; 0
    1e3c:	f9 01       	movw	r30, r18
    1e3e:	20 81       	ld	r18, Z
    1e40:	20 68       	ori	r18, 0x80	; 128
    1e42:	fc 01       	movw	r30, r24
    1e44:	20 83       	st	Z, r18
	// set pin state when pwm is off (becomes active when COMA bits are cleared)
	#ifdef HEATER_PWM_INVERSE
		OC2A_PORT |= (1 << OC2A_BIT);
	#else
		OC2A_PORT &= ~(1 << OC2A_BIT);
    1e46:	8b e2       	ldi	r24, 0x2B	; 43
    1e48:	90 e0       	ldi	r25, 0x00	; 0
    1e4a:	2b e2       	ldi	r18, 0x2B	; 43
    1e4c:	30 e0       	ldi	r19, 0x00	; 0
    1e4e:	f9 01       	movw	r30, r18
    1e50:	20 81       	ld	r18, Z
    1e52:	2f 77       	andi	r18, 0x7F	; 127
    1e54:	fc 01       	movw	r30, r24
    1e56:	20 83       	st	Z, r18
	#endif
}
    1e58:	00 00       	nop
    1e5a:	df 91       	pop	r29
    1e5c:	cf 91       	pop	r28
    1e5e:	08 95       	ret

00001e60 <heater_shutdown>:

void heater_shutdown()
{
    1e60:	cf 93       	push	r28
    1e62:	df 93       	push	r29
    1e64:	cd b7       	in	r28, 0x3d	; 61
    1e66:	de b7       	in	r29, 0x3e	; 62
	// stop timer clock
	TCCR2B &= ~HEATER_PWM_PRESCALE_BITS;
    1e68:	81 eb       	ldi	r24, 0xB1	; 177
    1e6a:	90 e0       	ldi	r25, 0x00	; 0
    1e6c:	21 eb       	ldi	r18, 0xB1	; 177
    1e6e:	30 e0       	ldi	r19, 0x00	; 0
    1e70:	f9 01       	movw	r30, r18
    1e72:	20 81       	ld	r18, Z
    1e74:	29 7f       	andi	r18, 0xF9	; 249
    1e76:	fc 01       	movw	r30, r24
    1e78:	20 83       	st	Z, r18
	// reset duty cycle val
	TCNT2 = 0x00;
    1e7a:	82 eb       	ldi	r24, 0xB2	; 178
    1e7c:	90 e0       	ldi	r25, 0x00	; 0
    1e7e:	fc 01       	movw	r30, r24
    1e80:	10 82       	st	Z, r1
	OCR2A = 0x00;
    1e82:	83 eb       	ldi	r24, 0xB3	; 179
    1e84:	90 e0       	ldi	r25, 0x00	; 0
    1e86:	fc 01       	movw	r30, r24
    1e88:	10 82       	st	Z, r1
	// back to normal mode
	TCCR2A &= ~(HEATER_PWM_COMA_BITS | HEATER_PWM_WGM_BITS_A);
    1e8a:	80 eb       	ldi	r24, 0xB0	; 176
    1e8c:	90 e0       	ldi	r25, 0x00	; 0
    1e8e:	20 eb       	ldi	r18, 0xB0	; 176
    1e90:	30 e0       	ldi	r19, 0x00	; 0
    1e92:	f9 01       	movw	r30, r18
    1e94:	20 81       	ld	r18, Z
    1e96:	2e 77       	andi	r18, 0x7E	; 126
    1e98:	fc 01       	movw	r30, r24
    1e9a:	20 83       	st	Z, r18
	// disable output pin
	OC2A_DDR &= ~(1 << OC2A_BIT);
    1e9c:	8a e2       	ldi	r24, 0x2A	; 42
    1e9e:	90 e0       	ldi	r25, 0x00	; 0
    1ea0:	2a e2       	ldi	r18, 0x2A	; 42
    1ea2:	30 e0       	ldi	r19, 0x00	; 0
    1ea4:	f9 01       	movw	r30, r18
    1ea6:	20 81       	ld	r18, Z
    1ea8:	2f 77       	andi	r18, 0x7F	; 127
    1eaa:	fc 01       	movw	r30, r24
    1eac:	20 83       	st	Z, r18
	OC2A_PORT &= ~(1 << OC2A_BIT);
    1eae:	8b e2       	ldi	r24, 0x2B	; 43
    1eb0:	90 e0       	ldi	r25, 0x00	; 0
    1eb2:	2b e2       	ldi	r18, 0x2B	; 43
    1eb4:	30 e0       	ldi	r19, 0x00	; 0
    1eb6:	f9 01       	movw	r30, r18
    1eb8:	20 81       	ld	r18, Z
    1eba:	2f 77       	andi	r18, 0x7F	; 127
    1ebc:	fc 01       	movw	r30, r24
    1ebe:	20 83       	st	Z, r18
}
    1ec0:	00 00       	nop
    1ec2:	df 91       	pop	r29
    1ec4:	cf 91       	pop	r28
    1ec6:	08 95       	ret

00001ec8 <heater_set_duty_cycle>:

void heater_set_duty_cycle(uint8_t dc)
{
    1ec8:	cf 93       	push	r28
    1eca:	df 93       	push	r29
    1ecc:	00 d0       	rcall	.+0      	; 0x1ece <heater_set_duty_cycle+0x6>
    1ece:	1f 92       	push	r1
    1ed0:	cd b7       	in	r28, 0x3d	; 61
    1ed2:	de b7       	in	r29, 0x3e	; 62
    1ed4:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t compval = ((uint16_t)umax8(umin8(dc, 100), 0) * 0xFF) / 100;
    1ed6:	64 e6       	ldi	r22, 0x64	; 100
    1ed8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eda:	0e 94 52 13 	call	0x26a4	; 0x26a4 <umin8>
    1ede:	60 e0       	ldi	r22, 0x00	; 0
    1ee0:	0e 94 41 13 	call	0x2682	; 0x2682 <umax8>
    1ee4:	28 2f       	mov	r18, r24
    1ee6:	30 e0       	ldi	r19, 0x00	; 0
    1ee8:	4f ef       	ldi	r20, 0xFF	; 255
    1eea:	42 9f       	mul	r20, r18
    1eec:	c0 01       	movw	r24, r0
    1eee:	43 9f       	mul	r20, r19
    1ef0:	90 0d       	add	r25, r0
    1ef2:	11 24       	eor	r1, r1
    1ef4:	96 95       	lsr	r25
    1ef6:	87 95       	ror	r24
    1ef8:	96 95       	lsr	r25
    1efa:	87 95       	ror	r24
    1efc:	9c 01       	movw	r18, r24
    1efe:	ab e7       	ldi	r26, 0x7B	; 123
    1f00:	b4 e1       	ldi	r27, 0x14	; 20
    1f02:	0e 94 e0 24 	call	0x49c0	; 0x49c0 <__umulhisi3>
    1f06:	96 95       	lsr	r25
    1f08:	87 95       	ror	r24
    1f0a:	9a 83       	std	Y+2, r25	; 0x02
    1f0c:	89 83       	std	Y+1, r24	; 0x01
	OCR2A = (uint8_t)compval;
    1f0e:	83 eb       	ldi	r24, 0xB3	; 179
    1f10:	90 e0       	ldi	r25, 0x00	; 0
    1f12:	29 81       	ldd	r18, Y+1	; 0x01
    1f14:	fc 01       	movw	r30, r24
    1f16:	20 83       	st	Z, r18
}
    1f18:	00 00       	nop
    1f1a:	0f 90       	pop	r0
    1f1c:	0f 90       	pop	r0
    1f1e:	0f 90       	pop	r0
    1f20:	df 91       	pop	r29
    1f22:	cf 91       	pop	r28
    1f24:	08 95       	ret

00001f26 <heater_on>:

void heater_on()
{
    1f26:	cf 93       	push	r28
    1f28:	df 93       	push	r29
    1f2a:	cd b7       	in	r28, 0x3d	; 61
    1f2c:	de b7       	in	r29, 0x3e	; 62
	TCNT2 = 0x00;
    1f2e:	82 eb       	ldi	r24, 0xB2	; 178
    1f30:	90 e0       	ldi	r25, 0x00	; 0
    1f32:	fc 01       	movw	r30, r24
    1f34:	10 82       	st	Z, r1
	#ifdef HEATER_PWM_INVERSE
		OCR2A = 0xFF;
	#else
		OCR2A = 0x00;
    1f36:	83 eb       	ldi	r24, 0xB3	; 179
    1f38:	90 e0       	ldi	r25, 0x00	; 0
    1f3a:	fc 01       	movw	r30, r24
    1f3c:	10 82       	st	Z, r1
	#endif
	TCCR2A |= HEATER_PWM_COMA_BITS;
    1f3e:	80 eb       	ldi	r24, 0xB0	; 176
    1f40:	90 e0       	ldi	r25, 0x00	; 0
    1f42:	20 eb       	ldi	r18, 0xB0	; 176
    1f44:	30 e0       	ldi	r19, 0x00	; 0
    1f46:	f9 01       	movw	r30, r18
    1f48:	20 81       	ld	r18, Z
    1f4a:	20 68       	ori	r18, 0x80	; 128
    1f4c:	fc 01       	movw	r30, r24
    1f4e:	20 83       	st	Z, r18
	TCCR2B |= HEATER_PWM_PRESCALE_BITS;
    1f50:	81 eb       	ldi	r24, 0xB1	; 177
    1f52:	90 e0       	ldi	r25, 0x00	; 0
    1f54:	21 eb       	ldi	r18, 0xB1	; 177
    1f56:	30 e0       	ldi	r19, 0x00	; 0
    1f58:	f9 01       	movw	r30, r18
    1f5a:	20 81       	ld	r18, Z
    1f5c:	26 60       	ori	r18, 0x06	; 6
    1f5e:	fc 01       	movw	r30, r24
    1f60:	20 83       	st	Z, r18
}
    1f62:	00 00       	nop
    1f64:	df 91       	pop	r29
    1f66:	cf 91       	pop	r28
    1f68:	08 95       	ret

00001f6a <heater_off>:

void heater_off()
{	
    1f6a:	cf 93       	push	r28
    1f6c:	df 93       	push	r29
    1f6e:	cd b7       	in	r28, 0x3d	; 61
    1f70:	de b7       	in	r29, 0x3e	; 62
	TCCR2A &= ~HEATER_PWM_COMA_BITS;
    1f72:	80 eb       	ldi	r24, 0xB0	; 176
    1f74:	90 e0       	ldi	r25, 0x00	; 0
    1f76:	20 eb       	ldi	r18, 0xB0	; 176
    1f78:	30 e0       	ldi	r19, 0x00	; 0
    1f7a:	f9 01       	movw	r30, r18
    1f7c:	20 81       	ld	r18, Z
    1f7e:	2f 77       	andi	r18, 0x7F	; 127
    1f80:	fc 01       	movw	r30, r24
    1f82:	20 83       	st	Z, r18
	TCCR2B &= ~HEATER_PWM_PRESCALE_BITS;	
    1f84:	81 eb       	ldi	r24, 0xB1	; 177
    1f86:	90 e0       	ldi	r25, 0x00	; 0
    1f88:	21 eb       	ldi	r18, 0xB1	; 177
    1f8a:	30 e0       	ldi	r19, 0x00	; 0
    1f8c:	f9 01       	movw	r30, r18
    1f8e:	20 81       	ld	r18, Z
    1f90:	29 7f       	andi	r18, 0xF9	; 249
    1f92:	fc 01       	movw	r30, r24
    1f94:	20 83       	st	Z, r18
	TCNT2 = 0x00;
    1f96:	82 eb       	ldi	r24, 0xB2	; 178
    1f98:	90 e0       	ldi	r25, 0x00	; 0
    1f9a:	fc 01       	movw	r30, r24
    1f9c:	10 82       	st	Z, r1
}
    1f9e:	00 00       	nop
    1fa0:	df 91       	pop	r29
    1fa2:	cf 91       	pop	r28
    1fa4:	08 95       	ret

00001fa6 <main>:
 * Author : fabia
 */ 
#include "application.h"

int main(void)
{
    1fa6:	cf 93       	push	r28
    1fa8:	df 93       	push	r29
    1faa:	cd b7       	in	r28, 0x3d	; 61
    1fac:	de b7       	in	r29, 0x3e	; 62
	app_run();
    1fae:	0e 94 99 00 	call	0x132	; 0x132 <app_run>
    1fb2:	80 e0       	ldi	r24, 0x00	; 0
    1fb4:	90 e0       	ldi	r25, 0x00	; 0
    1fb6:	df 91       	pop	r29
    1fb8:	cf 91       	pop	r28
    1fba:	08 95       	ret

00001fbc <mr_main>:
//static const uint8_t pg_menu_patterns[] PROGMEM = {
	//SRD_CB, SRD_CA, SRD_CC, SRD_CT							// "BACK", 4
//};

void mr_main(float current_temp)
{
    1fbc:	0f 93       	push	r16
    1fbe:	cf 93       	push	r28
    1fc0:	df 93       	push	r29
    1fc2:	00 d0       	rcall	.+0      	; 0x1fc4 <mr_main+0x8>
    1fc4:	00 d0       	rcall	.+0      	; 0x1fc6 <mr_main+0xa>
    1fc6:	cd b7       	in	r28, 0x3d	; 61
    1fc8:	de b7       	in	r29, 0x3e	; 62
    1fca:	69 83       	std	Y+1, r22	; 0x01
    1fcc:	7a 83       	std	Y+2, r23	; 0x02
    1fce:	8b 83       	std	Y+3, r24	; 0x03
    1fd0:	9c 83       	std	Y+4, r25	; 0x04
	srd_setfloat(current_temp, 0, 2, 6);
    1fd2:	89 81       	ldd	r24, Y+1	; 0x01
    1fd4:	9a 81       	ldd	r25, Y+2	; 0x02
    1fd6:	ab 81       	ldd	r26, Y+3	; 0x03
    1fd8:	bc 81       	ldd	r27, Y+4	; 0x04
    1fda:	06 e0       	ldi	r16, 0x06	; 6
    1fdc:	22 e0       	ldi	r18, 0x02	; 2
    1fde:	40 e0       	ldi	r20, 0x00	; 0
    1fe0:	bc 01       	movw	r22, r24
    1fe2:	cd 01       	movw	r24, r26
    1fe4:	0e 94 30 1b 	call	0x3660	; 0x3660 <srd_setfloat>
}
    1fe8:	00 00       	nop
    1fea:	0f 90       	pop	r0
    1fec:	0f 90       	pop	r0
    1fee:	0f 90       	pop	r0
    1ff0:	0f 90       	pop	r0
    1ff2:	df 91       	pop	r29
    1ff4:	cf 91       	pop	r28
    1ff6:	0f 91       	pop	r16
    1ff8:	08 95       	ret

00001ffa <mr_main_menu>:

void mr_main_menu(uint8_t item_index)
{
    1ffa:	cf 93       	push	r28
    1ffc:	df 93       	push	r29
    1ffe:	1f 92       	push	r1
    2000:	cd b7       	in	r28, 0x3d	; 61
    2002:	de b7       	in	r29, 0x3e	; 62
    2004:	89 83       	std	Y+1, r24	; 0x01
	switch (item_index)
    2006:	89 81       	ldd	r24, Y+1	; 0x01
    2008:	88 2f       	mov	r24, r24
    200a:	90 e0       	ldi	r25, 0x00	; 0
    200c:	81 30       	cpi	r24, 0x01	; 1
    200e:	91 05       	cpc	r25, r1
    2010:	89 f0       	breq	.+34     	; 0x2034 <mr_main_menu+0x3a>
    2012:	82 30       	cpi	r24, 0x02	; 2
    2014:	91 05       	cpc	r25, r1
    2016:	1c f4       	brge	.+6      	; 0x201e <mr_main_menu+0x24>
    2018:	89 2b       	or	r24, r25
    201a:	39 f0       	breq	.+14     	; 0x202a <mr_main_menu+0x30>
			break;
		case 3: // "T.CALIB"
			srd_set(0, SRD_CT | SRD_DOT); srd_set(1, SRD_CC); srd_set(2, SRD_CA); srd_set(3, SRD_CL); srd_set(4, SRD_CI); srd_set(5, SRD_CB);
			break;
	}
}
    201c:	46 c0       	rjmp	.+140    	; 0x20aa <mr_main_menu+0xb0>
	srd_setfloat(current_temp, 0, 2, 6);
}

void mr_main_menu(uint8_t item_index)
{
	switch (item_index)
    201e:	82 30       	cpi	r24, 0x02	; 2
    2020:	91 05       	cpc	r25, r1
    2022:	c9 f0       	breq	.+50     	; 0x2056 <mr_main_menu+0x5c>
    2024:	03 97       	sbiw	r24, 0x03	; 3
    2026:	41 f1       	breq	.+80     	; 0x2078 <mr_main_menu+0x7e>
			break;
		case 3: // "T.CALIB"
			srd_set(0, SRD_CT | SRD_DOT); srd_set(1, SRD_CC); srd_set(2, SRD_CA); srd_set(3, SRD_CL); srd_set(4, SRD_CI); srd_set(5, SRD_CB);
			break;
	}
}
    2028:	40 c0       	rjmp	.+128    	; 0x20aa <mr_main_menu+0xb0>
void mr_main_menu(uint8_t item_index)
{
	switch (item_index)
	{
		case 0: // "-"
			srd_set(0, SRD_MINUS);
    202a:	60 e4       	ldi	r22, 0x40	; 64
    202c:	80 e0       	ldi	r24, 0x00	; 0
    202e:	0e 94 16 1b 	call	0x362c	; 0x362c <srd_set>
			break;
    2032:	3b c0       	rjmp	.+118    	; 0x20aa <mr_main_menu+0xb0>
		case 1: // "HEAT"
			srd_set(0, SRD_CH); srd_set(1, SRD_CE); srd_set(2, SRD_CA); srd_set(3, SRD_CT);
    2034:	64 e7       	ldi	r22, 0x74	; 116
    2036:	80 e0       	ldi	r24, 0x00	; 0
    2038:	0e 94 16 1b 	call	0x362c	; 0x362c <srd_set>
    203c:	69 e7       	ldi	r22, 0x79	; 121
    203e:	81 e0       	ldi	r24, 0x01	; 1
    2040:	0e 94 16 1b 	call	0x362c	; 0x362c <srd_set>
    2044:	67 e7       	ldi	r22, 0x77	; 119
    2046:	82 e0       	ldi	r24, 0x02	; 2
    2048:	0e 94 16 1b 	call	0x362c	; 0x362c <srd_set>
    204c:	68 e7       	ldi	r22, 0x78	; 120
    204e:	83 e0       	ldi	r24, 0x03	; 3
    2050:	0e 94 16 1b 	call	0x362c	; 0x362c <srd_set>
			break;
    2054:	2a c0       	rjmp	.+84     	; 0x20aa <mr_main_menu+0xb0>
		case 2: // "STIR"
			srd_set(0, SRD_CS); srd_set(1, SRD_CT); srd_set(2, SRD_CI); srd_set(3, SRD_CR);
    2056:	6d e6       	ldi	r22, 0x6D	; 109
    2058:	80 e0       	ldi	r24, 0x00	; 0
    205a:	0e 94 16 1b 	call	0x362c	; 0x362c <srd_set>
    205e:	68 e7       	ldi	r22, 0x78	; 120
    2060:	81 e0       	ldi	r24, 0x01	; 1
    2062:	0e 94 16 1b 	call	0x362c	; 0x362c <srd_set>
    2066:	66 e0       	ldi	r22, 0x06	; 6
    2068:	82 e0       	ldi	r24, 0x02	; 2
    206a:	0e 94 16 1b 	call	0x362c	; 0x362c <srd_set>
    206e:	60 e5       	ldi	r22, 0x50	; 80
    2070:	83 e0       	ldi	r24, 0x03	; 3
    2072:	0e 94 16 1b 	call	0x362c	; 0x362c <srd_set>
			break;
    2076:	19 c0       	rjmp	.+50     	; 0x20aa <mr_main_menu+0xb0>
		case 3: // "T.CALIB"
			srd_set(0, SRD_CT | SRD_DOT); srd_set(1, SRD_CC); srd_set(2, SRD_CA); srd_set(3, SRD_CL); srd_set(4, SRD_CI); srd_set(5, SRD_CB);
    2078:	68 ef       	ldi	r22, 0xF8	; 248
    207a:	80 e0       	ldi	r24, 0x00	; 0
    207c:	0e 94 16 1b 	call	0x362c	; 0x362c <srd_set>
    2080:	69 e3       	ldi	r22, 0x39	; 57
    2082:	81 e0       	ldi	r24, 0x01	; 1
    2084:	0e 94 16 1b 	call	0x362c	; 0x362c <srd_set>
    2088:	67 e7       	ldi	r22, 0x77	; 119
    208a:	82 e0       	ldi	r24, 0x02	; 2
    208c:	0e 94 16 1b 	call	0x362c	; 0x362c <srd_set>
    2090:	68 e3       	ldi	r22, 0x38	; 56
    2092:	83 e0       	ldi	r24, 0x03	; 3
    2094:	0e 94 16 1b 	call	0x362c	; 0x362c <srd_set>
    2098:	66 e0       	ldi	r22, 0x06	; 6
    209a:	84 e0       	ldi	r24, 0x04	; 4
    209c:	0e 94 16 1b 	call	0x362c	; 0x362c <srd_set>
    20a0:	6c e7       	ldi	r22, 0x7C	; 124
    20a2:	85 e0       	ldi	r24, 0x05	; 5
    20a4:	0e 94 16 1b 	call	0x362c	; 0x362c <srd_set>
			break;
    20a8:	00 00       	nop
	}
}
    20aa:	00 00       	nop
    20ac:	0f 90       	pop	r0
    20ae:	df 91       	pop	r29
    20b0:	cf 91       	pop	r28
    20b2:	08 95       	ret

000020b4 <mr_heater_menu>:

void mr_heater_menu(uint8_t item_index)
{
    20b4:	cf 93       	push	r28
    20b6:	df 93       	push	r29
    20b8:	1f 92       	push	r1
    20ba:	cd b7       	in	r28, 0x3d	; 61
    20bc:	de b7       	in	r29, 0x3e	; 62
    20be:	89 83       	std	Y+1, r24	; 0x01
	switch (item_index)
    20c0:	89 81       	ldd	r24, Y+1	; 0x01
    20c2:	88 2f       	mov	r24, r24
    20c4:	90 e0       	ldi	r25, 0x00	; 0
    20c6:	82 30       	cpi	r24, 0x02	; 2
    20c8:	91 05       	cpc	r25, r1
    20ca:	61 f1       	breq	.+88     	; 0x2124 <mr_heater_menu+0x70>
    20cc:	83 30       	cpi	r24, 0x03	; 3
    20ce:	91 05       	cpc	r25, r1
    20d0:	2c f4       	brge	.+10     	; 0x20dc <mr_heater_menu+0x28>
    20d2:	00 97       	sbiw	r24, 0x00	; 0
    20d4:	49 f0       	breq	.+18     	; 0x20e8 <mr_heater_menu+0x34>
    20d6:	01 97       	sbiw	r24, 0x01	; 1
    20d8:	81 f0       	breq	.+32     	; 0x20fa <mr_heater_menu+0x46>
			break;
		case 4: // "OFFSET"
			srd_set(0, SRD_CO); srd_set(1, SRD_CF); srd_set(2, SRD_CF); srd_set(3, SRD_CS);
			break;
	}
}
    20da:	53 c0       	rjmp	.+166    	; 0x2182 <mr_heater_menu+0xce>
	}
}

void mr_heater_menu(uint8_t item_index)
{
	switch (item_index)
    20dc:	83 30       	cpi	r24, 0x03	; 3
    20de:	91 05       	cpc	r25, r1
    20e0:	91 f1       	breq	.+100    	; 0x2146 <mr_heater_menu+0x92>
    20e2:	04 97       	sbiw	r24, 0x04	; 4
    20e4:	e9 f1       	breq	.+122    	; 0x2160 <mr_heater_menu+0xac>
			break;
		case 4: // "OFFSET"
			srd_set(0, SRD_CO); srd_set(1, SRD_CF); srd_set(2, SRD_CF); srd_set(3, SRD_CS);
			break;
	}
}
    20e6:	4d c0       	rjmp	.+154    	; 0x2182 <mr_heater_menu+0xce>
void mr_heater_menu(uint8_t item_index)
{
	switch (item_index)
	{
		case 0: // "--"
			srd_set(0, SRD_MINUS); srd_set(1, SRD_MINUS);
    20e8:	60 e4       	ldi	r22, 0x40	; 64
    20ea:	80 e0       	ldi	r24, 0x00	; 0
    20ec:	0e 94 16 1b 	call	0x362c	; 0x362c <srd_set>
    20f0:	60 e4       	ldi	r22, 0x40	; 64
    20f2:	81 e0       	ldi	r24, 0x01	; 1
    20f4:	0e 94 16 1b 	call	0x362c	; 0x362c <srd_set>
			break;
    20f8:	44 c0       	rjmp	.+136    	; 0x2182 <mr_heater_menu+0xce>
		case 1: // "ONOFF"
			srd_set(0, SRD_CO); srd_set(1, SRD_CN); srd_set(2, SRD_CO); srd_set(3, SRD_CF); srd_set(4, SRD_CF);
    20fa:	6c e5       	ldi	r22, 0x5C	; 92
    20fc:	80 e0       	ldi	r24, 0x00	; 0
    20fe:	0e 94 16 1b 	call	0x362c	; 0x362c <srd_set>
    2102:	64 e5       	ldi	r22, 0x54	; 84
    2104:	81 e0       	ldi	r24, 0x01	; 1
    2106:	0e 94 16 1b 	call	0x362c	; 0x362c <srd_set>
    210a:	6c e5       	ldi	r22, 0x5C	; 92
    210c:	82 e0       	ldi	r24, 0x02	; 2
    210e:	0e 94 16 1b 	call	0x362c	; 0x362c <srd_set>
    2112:	61 e7       	ldi	r22, 0x71	; 113
    2114:	83 e0       	ldi	r24, 0x03	; 3
    2116:	0e 94 16 1b 	call	0x362c	; 0x362c <srd_set>
    211a:	61 e7       	ldi	r22, 0x71	; 113
    211c:	84 e0       	ldi	r24, 0x04	; 4
    211e:	0e 94 16 1b 	call	0x362c	; 0x362c <srd_set>
			break;
    2122:	2f c0       	rjmp	.+94     	; 0x2182 <mr_heater_menu+0xce>
		case 2: // "TG.TPTR"
			srd_set(0, SRD_CT); srd_set(1, SRD_CG | SRD_DOT); srd_set(2, SRD_CT); srd_set(3, SRD_CP);
    2124:	68 e7       	ldi	r22, 0x78	; 120
    2126:	80 e0       	ldi	r24, 0x00	; 0
    2128:	0e 94 16 1b 	call	0x362c	; 0x362c <srd_set>
    212c:	6f ee       	ldi	r22, 0xEF	; 239
    212e:	81 e0       	ldi	r24, 0x01	; 1
    2130:	0e 94 16 1b 	call	0x362c	; 0x362c <srd_set>
    2134:	68 e7       	ldi	r22, 0x78	; 120
    2136:	82 e0       	ldi	r24, 0x02	; 2
    2138:	0e 94 16 1b 	call	0x362c	; 0x362c <srd_set>
    213c:	63 e7       	ldi	r22, 0x73	; 115
    213e:	83 e0       	ldi	r24, 0x03	; 3
    2140:	0e 94 16 1b 	call	0x362c	; 0x362c <srd_set>
			break;
    2144:	1e c0       	rjmp	.+60     	; 0x2182 <mr_heater_menu+0xce>
		case 3: // "PID"
			srd_set(0, SRD_CP); srd_set(1, SRD_CI); srd_set(2, SRD_CD);
    2146:	63 e7       	ldi	r22, 0x73	; 115
    2148:	80 e0       	ldi	r24, 0x00	; 0
    214a:	0e 94 16 1b 	call	0x362c	; 0x362c <srd_set>
    214e:	66 e0       	ldi	r22, 0x06	; 6
    2150:	81 e0       	ldi	r24, 0x01	; 1
    2152:	0e 94 16 1b 	call	0x362c	; 0x362c <srd_set>
    2156:	6e e5       	ldi	r22, 0x5E	; 94
    2158:	82 e0       	ldi	r24, 0x02	; 2
    215a:	0e 94 16 1b 	call	0x362c	; 0x362c <srd_set>
			break;
    215e:	11 c0       	rjmp	.+34     	; 0x2182 <mr_heater_menu+0xce>
		case 4: // "OFFSET"
			srd_set(0, SRD_CO); srd_set(1, SRD_CF); srd_set(2, SRD_CF); srd_set(3, SRD_CS);
    2160:	6c e5       	ldi	r22, 0x5C	; 92
    2162:	80 e0       	ldi	r24, 0x00	; 0
    2164:	0e 94 16 1b 	call	0x362c	; 0x362c <srd_set>
    2168:	61 e7       	ldi	r22, 0x71	; 113
    216a:	81 e0       	ldi	r24, 0x01	; 1
    216c:	0e 94 16 1b 	call	0x362c	; 0x362c <srd_set>
    2170:	61 e7       	ldi	r22, 0x71	; 113
    2172:	82 e0       	ldi	r24, 0x02	; 2
    2174:	0e 94 16 1b 	call	0x362c	; 0x362c <srd_set>
    2178:	6d e6       	ldi	r22, 0x6D	; 109
    217a:	83 e0       	ldi	r24, 0x03	; 3
    217c:	0e 94 16 1b 	call	0x362c	; 0x362c <srd_set>
			break;
    2180:	00 00       	nop
	}
}
    2182:	00 00       	nop
    2184:	0f 90       	pop	r0
    2186:	df 91       	pop	r29
    2188:	cf 91       	pop	r28
    218a:	08 95       	ret

0000218c <mr_stirrer_menu>:

void mr_stirrer_menu(uint8_t item_index)
{
    218c:	cf 93       	push	r28
    218e:	df 93       	push	r29
    2190:	1f 92       	push	r1
    2192:	cd b7       	in	r28, 0x3d	; 61
    2194:	de b7       	in	r29, 0x3e	; 62
    2196:	89 83       	std	Y+1, r24	; 0x01
	switch (item_index)
    2198:	89 81       	ldd	r24, Y+1	; 0x01
    219a:	88 2f       	mov	r24, r24
    219c:	90 e0       	ldi	r25, 0x00	; 0
    219e:	00 97       	sbiw	r24, 0x00	; 0
    21a0:	19 f0       	breq	.+6      	; 0x21a8 <mr_stirrer_menu+0x1c>
    21a2:	01 97       	sbiw	r24, 0x01	; 1
    21a4:	51 f0       	breq	.+20     	; 0x21ba <mr_stirrer_menu+0x2e>
			break;
		case 1: // "SPEED"
			srd_set(0, SRD_CS); srd_set(1, SRD_CP); srd_set(2, SRD_CE); srd_set(3, SRD_CE); srd_set(4, SRD_CD);
			break;
	}
}
    21a6:	1e c0       	rjmp	.+60     	; 0x21e4 <mr_stirrer_menu+0x58>
void mr_stirrer_menu(uint8_t item_index)
{
	switch (item_index)
	{
		case 0: // "--"
			srd_set(0, SRD_MINUS); srd_set(1, SRD_MINUS);
    21a8:	60 e4       	ldi	r22, 0x40	; 64
    21aa:	80 e0       	ldi	r24, 0x00	; 0
    21ac:	0e 94 16 1b 	call	0x362c	; 0x362c <srd_set>
    21b0:	60 e4       	ldi	r22, 0x40	; 64
    21b2:	81 e0       	ldi	r24, 0x01	; 1
    21b4:	0e 94 16 1b 	call	0x362c	; 0x362c <srd_set>
			break;
    21b8:	15 c0       	rjmp	.+42     	; 0x21e4 <mr_stirrer_menu+0x58>
		case 1: // "SPEED"
			srd_set(0, SRD_CS); srd_set(1, SRD_CP); srd_set(2, SRD_CE); srd_set(3, SRD_CE); srd_set(4, SRD_CD);
    21ba:	6d e6       	ldi	r22, 0x6D	; 109
    21bc:	80 e0       	ldi	r24, 0x00	; 0
    21be:	0e 94 16 1b 	call	0x362c	; 0x362c <srd_set>
    21c2:	63 e7       	ldi	r22, 0x73	; 115
    21c4:	81 e0       	ldi	r24, 0x01	; 1
    21c6:	0e 94 16 1b 	call	0x362c	; 0x362c <srd_set>
    21ca:	69 e7       	ldi	r22, 0x79	; 121
    21cc:	82 e0       	ldi	r24, 0x02	; 2
    21ce:	0e 94 16 1b 	call	0x362c	; 0x362c <srd_set>
    21d2:	69 e7       	ldi	r22, 0x79	; 121
    21d4:	83 e0       	ldi	r24, 0x03	; 3
    21d6:	0e 94 16 1b 	call	0x362c	; 0x362c <srd_set>
    21da:	6e e5       	ldi	r22, 0x5E	; 94
    21dc:	84 e0       	ldi	r24, 0x04	; 4
    21de:	0e 94 16 1b 	call	0x362c	; 0x362c <srd_set>
			break;
    21e2:	00 00       	nop
	}
}
    21e4:	00 00       	nop
    21e6:	0f 90       	pop	r0
    21e8:	df 91       	pop	r29
    21ea:	cf 91       	pop	r28
    21ec:	08 95       	ret

000021ee <mr_heater_menu_pid>:

void mr_heater_menu_pid(uint8_t item_index)
{
    21ee:	cf 93       	push	r28
    21f0:	df 93       	push	r29
    21f2:	1f 92       	push	r1
    21f4:	cd b7       	in	r28, 0x3d	; 61
    21f6:	de b7       	in	r29, 0x3e	; 62
    21f8:	89 83       	std	Y+1, r24	; 0x01
	switch (item_index)
    21fa:	89 81       	ldd	r24, Y+1	; 0x01
    21fc:	88 2f       	mov	r24, r24
    21fe:	90 e0       	ldi	r25, 0x00	; 0
    2200:	81 30       	cpi	r24, 0x01	; 1
    2202:	91 05       	cpc	r25, r1
    2204:	c9 f0       	breq	.+50     	; 0x2238 <mr_heater_menu_pid+0x4a>
    2206:	82 30       	cpi	r24, 0x02	; 2
    2208:	91 05       	cpc	r25, r1
    220a:	1c f4       	brge	.+6      	; 0x2212 <mr_heater_menu_pid+0x24>
    220c:	89 2b       	or	r24, r25
    220e:	39 f0       	breq	.+14     	; 0x221e <mr_heater_menu_pid+0x30>
			break;
		case 3: // "D"
			srd_set(0, SRD_CD);
			break;
	}
}
    2210:	22 c0       	rjmp	.+68     	; 0x2256 <mr_heater_menu_pid+0x68>
	}
}

void mr_heater_menu_pid(uint8_t item_index)
{
	switch (item_index)
    2212:	82 30       	cpi	r24, 0x02	; 2
    2214:	91 05       	cpc	r25, r1
    2216:	a9 f0       	breq	.+42     	; 0x2242 <mr_heater_menu_pid+0x54>
    2218:	03 97       	sbiw	r24, 0x03	; 3
    221a:	c1 f0       	breq	.+48     	; 0x224c <mr_heater_menu_pid+0x5e>
			break;
		case 3: // "D"
			srd_set(0, SRD_CD);
			break;
	}
}
    221c:	1c c0       	rjmp	.+56     	; 0x2256 <mr_heater_menu_pid+0x68>
void mr_heater_menu_pid(uint8_t item_index)
{
	switch (item_index)
	{
		case 0: // "---"
			srd_set(0, SRD_MINUS); srd_set(1, SRD_MINUS); srd_set(2, SRD_MINUS);
    221e:	60 e4       	ldi	r22, 0x40	; 64
    2220:	80 e0       	ldi	r24, 0x00	; 0
    2222:	0e 94 16 1b 	call	0x362c	; 0x362c <srd_set>
    2226:	60 e4       	ldi	r22, 0x40	; 64
    2228:	81 e0       	ldi	r24, 0x01	; 1
    222a:	0e 94 16 1b 	call	0x362c	; 0x362c <srd_set>
    222e:	60 e4       	ldi	r22, 0x40	; 64
    2230:	82 e0       	ldi	r24, 0x02	; 2
    2232:	0e 94 16 1b 	call	0x362c	; 0x362c <srd_set>
			break;
    2236:	0f c0       	rjmp	.+30     	; 0x2256 <mr_heater_menu_pid+0x68>
		case 1: // "P"
			srd_set(0, SRD_CP);
    2238:	63 e7       	ldi	r22, 0x73	; 115
    223a:	80 e0       	ldi	r24, 0x00	; 0
    223c:	0e 94 16 1b 	call	0x362c	; 0x362c <srd_set>
			break;
    2240:	0a c0       	rjmp	.+20     	; 0x2256 <mr_heater_menu_pid+0x68>
		case 2: // "I"
			srd_set(0, SRD_CI);
    2242:	66 e0       	ldi	r22, 0x06	; 6
    2244:	80 e0       	ldi	r24, 0x00	; 0
    2246:	0e 94 16 1b 	call	0x362c	; 0x362c <srd_set>
			break;
    224a:	05 c0       	rjmp	.+10     	; 0x2256 <mr_heater_menu_pid+0x68>
		case 3: // "D"
			srd_set(0, SRD_CD);
    224c:	6e e5       	ldi	r22, 0x5E	; 94
    224e:	80 e0       	ldi	r24, 0x00	; 0
    2250:	0e 94 16 1b 	call	0x362c	; 0x362c <srd_set>
			break;
    2254:	00 00       	nop
	}
}
    2256:	00 00       	nop
    2258:	0f 90       	pop	r0
    225a:	df 91       	pop	r29
    225c:	cf 91       	pop	r28
    225e:	08 95       	ret

00002260 <mr_heater_menu_onoff>:

void mr_heater_menu_onoff(uint8_t onoff)
{
    2260:	cf 93       	push	r28
    2262:	df 93       	push	r29
    2264:	1f 92       	push	r1
    2266:	cd b7       	in	r28, 0x3d	; 61
    2268:	de b7       	in	r29, 0x3e	; 62
    226a:	89 83       	std	Y+1, r24	; 0x01
	if(onoff)
    226c:	89 81       	ldd	r24, Y+1	; 0x01
    226e:	88 23       	and	r24, r24
    2270:	69 f0       	breq	.+26     	; 0x228c <mr_heater_menu_onoff+0x2c>
	{
		srd_set(0, SRD_E | SRD_F); srd_set(1, SRD_CO); srd_set(2, SRD_CN);
    2272:	60 e3       	ldi	r22, 0x30	; 48
    2274:	80 e0       	ldi	r24, 0x00	; 0
    2276:	0e 94 16 1b 	call	0x362c	; 0x362c <srd_set>
    227a:	6c e5       	ldi	r22, 0x5C	; 92
    227c:	81 e0       	ldi	r24, 0x01	; 1
    227e:	0e 94 16 1b 	call	0x362c	; 0x362c <srd_set>
    2282:	64 e5       	ldi	r22, 0x54	; 84
    2284:	82 e0       	ldi	r24, 0x02	; 2
    2286:	0e 94 16 1b 	call	0x362c	; 0x362c <srd_set>
	}
	else
	{
		srd_set(0, SRD_E | SRD_F); srd_set(1, SRD_CO); srd_set(2, SRD_CF); srd_set(3, SRD_CF);
	}
}
    228a:	10 c0       	rjmp	.+32     	; 0x22ac <mr_heater_menu_onoff+0x4c>
	{
		srd_set(0, SRD_E | SRD_F); srd_set(1, SRD_CO); srd_set(2, SRD_CN);
	}
	else
	{
		srd_set(0, SRD_E | SRD_F); srd_set(1, SRD_CO); srd_set(2, SRD_CF); srd_set(3, SRD_CF);
    228c:	60 e3       	ldi	r22, 0x30	; 48
    228e:	80 e0       	ldi	r24, 0x00	; 0
    2290:	0e 94 16 1b 	call	0x362c	; 0x362c <srd_set>
    2294:	6c e5       	ldi	r22, 0x5C	; 92
    2296:	81 e0       	ldi	r24, 0x01	; 1
    2298:	0e 94 16 1b 	call	0x362c	; 0x362c <srd_set>
    229c:	61 e7       	ldi	r22, 0x71	; 113
    229e:	82 e0       	ldi	r24, 0x02	; 2
    22a0:	0e 94 16 1b 	call	0x362c	; 0x362c <srd_set>
    22a4:	61 e7       	ldi	r22, 0x71	; 113
    22a6:	83 e0       	ldi	r24, 0x03	; 3
    22a8:	0e 94 16 1b 	call	0x362c	; 0x362c <srd_set>
	}
}
    22ac:	00 00       	nop
    22ae:	0f 90       	pop	r0
    22b0:	df 91       	pop	r29
    22b2:	cf 91       	pop	r28
    22b4:	08 95       	ret

000022b6 <mr_heater_menu_target_temp>:

void mr_heater_menu_target_temp(float temp)
{
    22b6:	0f 93       	push	r16
    22b8:	cf 93       	push	r28
    22ba:	df 93       	push	r29
    22bc:	00 d0       	rcall	.+0      	; 0x22be <mr_heater_menu_target_temp+0x8>
    22be:	00 d0       	rcall	.+0      	; 0x22c0 <mr_heater_menu_target_temp+0xa>
    22c0:	cd b7       	in	r28, 0x3d	; 61
    22c2:	de b7       	in	r29, 0x3e	; 62
    22c4:	69 83       	std	Y+1, r22	; 0x01
    22c6:	7a 83       	std	Y+2, r23	; 0x02
    22c8:	8b 83       	std	Y+3, r24	; 0x03
    22ca:	9c 83       	std	Y+4, r25	; 0x04
	srd_set(0, SRD_E | SRD_F);
    22cc:	60 e3       	ldi	r22, 0x30	; 48
    22ce:	80 e0       	ldi	r24, 0x00	; 0
    22d0:	0e 94 16 1b 	call	0x362c	; 0x362c <srd_set>
	srd_setfloat(temp, 1, 1, 5);
    22d4:	89 81       	ldd	r24, Y+1	; 0x01
    22d6:	9a 81       	ldd	r25, Y+2	; 0x02
    22d8:	ab 81       	ldd	r26, Y+3	; 0x03
    22da:	bc 81       	ldd	r27, Y+4	; 0x04
    22dc:	05 e0       	ldi	r16, 0x05	; 5
    22de:	21 e0       	ldi	r18, 0x01	; 1
    22e0:	41 e0       	ldi	r20, 0x01	; 1
    22e2:	bc 01       	movw	r22, r24
    22e4:	cd 01       	movw	r24, r26
    22e6:	0e 94 30 1b 	call	0x3660	; 0x3660 <srd_setfloat>
}
    22ea:	00 00       	nop
    22ec:	0f 90       	pop	r0
    22ee:	0f 90       	pop	r0
    22f0:	0f 90       	pop	r0
    22f2:	0f 90       	pop	r0
    22f4:	df 91       	pop	r29
    22f6:	cf 91       	pop	r28
    22f8:	0f 91       	pop	r16
    22fa:	08 95       	ret

000022fc <mr_heater_menu_pid_p>:

void mr_heater_menu_pid_p(float pid_p)
{
    22fc:	0f 93       	push	r16
    22fe:	cf 93       	push	r28
    2300:	df 93       	push	r29
    2302:	00 d0       	rcall	.+0      	; 0x2304 <mr_heater_menu_pid_p+0x8>
    2304:	00 d0       	rcall	.+0      	; 0x2306 <mr_heater_menu_pid_p+0xa>
    2306:	cd b7       	in	r28, 0x3d	; 61
    2308:	de b7       	in	r29, 0x3e	; 62
    230a:	69 83       	std	Y+1, r22	; 0x01
    230c:	7a 83       	std	Y+2, r23	; 0x02
    230e:	8b 83       	std	Y+3, r24	; 0x03
    2310:	9c 83       	std	Y+4, r25	; 0x04
	srd_set(0, SRD_CP);
    2312:	63 e7       	ldi	r22, 0x73	; 115
    2314:	80 e0       	ldi	r24, 0x00	; 0
    2316:	0e 94 16 1b 	call	0x362c	; 0x362c <srd_set>
	srd_setfloat(pid_p, 1, 2, 5);
    231a:	89 81       	ldd	r24, Y+1	; 0x01
    231c:	9a 81       	ldd	r25, Y+2	; 0x02
    231e:	ab 81       	ldd	r26, Y+3	; 0x03
    2320:	bc 81       	ldd	r27, Y+4	; 0x04
    2322:	05 e0       	ldi	r16, 0x05	; 5
    2324:	22 e0       	ldi	r18, 0x02	; 2
    2326:	41 e0       	ldi	r20, 0x01	; 1
    2328:	bc 01       	movw	r22, r24
    232a:	cd 01       	movw	r24, r26
    232c:	0e 94 30 1b 	call	0x3660	; 0x3660 <srd_setfloat>
}
    2330:	00 00       	nop
    2332:	0f 90       	pop	r0
    2334:	0f 90       	pop	r0
    2336:	0f 90       	pop	r0
    2338:	0f 90       	pop	r0
    233a:	df 91       	pop	r29
    233c:	cf 91       	pop	r28
    233e:	0f 91       	pop	r16
    2340:	08 95       	ret

00002342 <mr_heater_menu_pid_i>:

void mr_heater_menu_pid_i(float pid_i)
{
    2342:	0f 93       	push	r16
    2344:	cf 93       	push	r28
    2346:	df 93       	push	r29
    2348:	00 d0       	rcall	.+0      	; 0x234a <mr_heater_menu_pid_i+0x8>
    234a:	00 d0       	rcall	.+0      	; 0x234c <mr_heater_menu_pid_i+0xa>
    234c:	cd b7       	in	r28, 0x3d	; 61
    234e:	de b7       	in	r29, 0x3e	; 62
    2350:	69 83       	std	Y+1, r22	; 0x01
    2352:	7a 83       	std	Y+2, r23	; 0x02
    2354:	8b 83       	std	Y+3, r24	; 0x03
    2356:	9c 83       	std	Y+4, r25	; 0x04
	srd_set(0, SRD_CI);
    2358:	66 e0       	ldi	r22, 0x06	; 6
    235a:	80 e0       	ldi	r24, 0x00	; 0
    235c:	0e 94 16 1b 	call	0x362c	; 0x362c <srd_set>
	srd_setfloat(pid_i, 1, 2, 5);
    2360:	89 81       	ldd	r24, Y+1	; 0x01
    2362:	9a 81       	ldd	r25, Y+2	; 0x02
    2364:	ab 81       	ldd	r26, Y+3	; 0x03
    2366:	bc 81       	ldd	r27, Y+4	; 0x04
    2368:	05 e0       	ldi	r16, 0x05	; 5
    236a:	22 e0       	ldi	r18, 0x02	; 2
    236c:	41 e0       	ldi	r20, 0x01	; 1
    236e:	bc 01       	movw	r22, r24
    2370:	cd 01       	movw	r24, r26
    2372:	0e 94 30 1b 	call	0x3660	; 0x3660 <srd_setfloat>
}
    2376:	00 00       	nop
    2378:	0f 90       	pop	r0
    237a:	0f 90       	pop	r0
    237c:	0f 90       	pop	r0
    237e:	0f 90       	pop	r0
    2380:	df 91       	pop	r29
    2382:	cf 91       	pop	r28
    2384:	0f 91       	pop	r16
    2386:	08 95       	ret

00002388 <mr_heater_menu_pid_d>:

void mr_heater_menu_pid_d(float pid_d)
{
    2388:	0f 93       	push	r16
    238a:	cf 93       	push	r28
    238c:	df 93       	push	r29
    238e:	00 d0       	rcall	.+0      	; 0x2390 <mr_heater_menu_pid_d+0x8>
    2390:	00 d0       	rcall	.+0      	; 0x2392 <mr_heater_menu_pid_d+0xa>
    2392:	cd b7       	in	r28, 0x3d	; 61
    2394:	de b7       	in	r29, 0x3e	; 62
    2396:	69 83       	std	Y+1, r22	; 0x01
    2398:	7a 83       	std	Y+2, r23	; 0x02
    239a:	8b 83       	std	Y+3, r24	; 0x03
    239c:	9c 83       	std	Y+4, r25	; 0x04
	srd_set(0, SRD_CD);
    239e:	6e e5       	ldi	r22, 0x5E	; 94
    23a0:	80 e0       	ldi	r24, 0x00	; 0
    23a2:	0e 94 16 1b 	call	0x362c	; 0x362c <srd_set>
	srd_setfloat(pid_d, 1, 2, 5);
    23a6:	89 81       	ldd	r24, Y+1	; 0x01
    23a8:	9a 81       	ldd	r25, Y+2	; 0x02
    23aa:	ab 81       	ldd	r26, Y+3	; 0x03
    23ac:	bc 81       	ldd	r27, Y+4	; 0x04
    23ae:	05 e0       	ldi	r16, 0x05	; 5
    23b0:	22 e0       	ldi	r18, 0x02	; 2
    23b2:	41 e0       	ldi	r20, 0x01	; 1
    23b4:	bc 01       	movw	r22, r24
    23b6:	cd 01       	movw	r24, r26
    23b8:	0e 94 30 1b 	call	0x3660	; 0x3660 <srd_setfloat>
}
    23bc:	00 00       	nop
    23be:	0f 90       	pop	r0
    23c0:	0f 90       	pop	r0
    23c2:	0f 90       	pop	r0
    23c4:	0f 90       	pop	r0
    23c6:	df 91       	pop	r29
    23c8:	cf 91       	pop	r28
    23ca:	0f 91       	pop	r16
    23cc:	08 95       	ret

000023ce <mr_heater_menu_offset>:

void mr_heater_menu_offset(float offset)
{
    23ce:	0f 93       	push	r16
    23d0:	cf 93       	push	r28
    23d2:	df 93       	push	r29
    23d4:	00 d0       	rcall	.+0      	; 0x23d6 <mr_heater_menu_offset+0x8>
    23d6:	00 d0       	rcall	.+0      	; 0x23d8 <mr_heater_menu_offset+0xa>
    23d8:	cd b7       	in	r28, 0x3d	; 61
    23da:	de b7       	in	r29, 0x3e	; 62
    23dc:	69 83       	std	Y+1, r22	; 0x01
    23de:	7a 83       	std	Y+2, r23	; 0x02
    23e0:	8b 83       	std	Y+3, r24	; 0x03
    23e2:	9c 83       	std	Y+4, r25	; 0x04
	srd_set(0, SRD_E | SRD_F);
    23e4:	60 e3       	ldi	r22, 0x30	; 48
    23e6:	80 e0       	ldi	r24, 0x00	; 0
    23e8:	0e 94 16 1b 	call	0x362c	; 0x362c <srd_set>
	srd_setfloat(offset, 1, 1, 5);
    23ec:	89 81       	ldd	r24, Y+1	; 0x01
    23ee:	9a 81       	ldd	r25, Y+2	; 0x02
    23f0:	ab 81       	ldd	r26, Y+3	; 0x03
    23f2:	bc 81       	ldd	r27, Y+4	; 0x04
    23f4:	05 e0       	ldi	r16, 0x05	; 5
    23f6:	21 e0       	ldi	r18, 0x01	; 1
    23f8:	41 e0       	ldi	r20, 0x01	; 1
    23fa:	bc 01       	movw	r22, r24
    23fc:	cd 01       	movw	r24, r26
    23fe:	0e 94 30 1b 	call	0x3660	; 0x3660 <srd_setfloat>
}
    2402:	00 00       	nop
    2404:	0f 90       	pop	r0
    2406:	0f 90       	pop	r0
    2408:	0f 90       	pop	r0
    240a:	0f 90       	pop	r0
    240c:	df 91       	pop	r29
    240e:	cf 91       	pop	r28
    2410:	0f 91       	pop	r16
    2412:	08 95       	ret

00002414 <mr_stirrer_menu_dc>:

void mr_stirrer_menu_dc(uint8_t dutycycle)
{
    2414:	cf 93       	push	r28
    2416:	df 93       	push	r29
    2418:	1f 92       	push	r1
    241a:	cd b7       	in	r28, 0x3d	; 61
    241c:	de b7       	in	r29, 0x3e	; 62
    241e:	89 83       	std	Y+1, r24	; 0x01
	srd_set(0, SRD_E | SRD_F);
    2420:	60 e3       	ldi	r22, 0x30	; 48
    2422:	80 e0       	ldi	r24, 0x00	; 0
    2424:	0e 94 16 1b 	call	0x362c	; 0x362c <srd_set>
	if(dutycycle > 0)
    2428:	89 81       	ldd	r24, Y+1	; 0x01
    242a:	88 23       	and	r24, r24
    242c:	41 f0       	breq	.+16     	; 0x243e <mr_stirrer_menu_dc+0x2a>
	{		
		srd_setint16((int16_t)dutycycle, 1, 5);
    242e:	89 81       	ldd	r24, Y+1	; 0x01
    2430:	88 2f       	mov	r24, r24
    2432:	90 e0       	ldi	r25, 0x00	; 0
    2434:	45 e0       	ldi	r20, 0x05	; 5
    2436:	61 e0       	ldi	r22, 0x01	; 1
    2438:	0e 94 68 1b 	call	0x36d0	; 0x36d0 <srd_setint16>
	}
	else
	{
		srd_set(1, SRD_CO); srd_set(2, SRD_CF); srd_set(3, SRD_CF); 
	}	
}
    243c:	0c c0       	rjmp	.+24     	; 0x2456 <mr_stirrer_menu_dc+0x42>
	{		
		srd_setint16((int16_t)dutycycle, 1, 5);
	}
	else
	{
		srd_set(1, SRD_CO); srd_set(2, SRD_CF); srd_set(3, SRD_CF); 
    243e:	6c e5       	ldi	r22, 0x5C	; 92
    2440:	81 e0       	ldi	r24, 0x01	; 1
    2442:	0e 94 16 1b 	call	0x362c	; 0x362c <srd_set>
    2446:	61 e7       	ldi	r22, 0x71	; 113
    2448:	82 e0       	ldi	r24, 0x02	; 2
    244a:	0e 94 16 1b 	call	0x362c	; 0x362c <srd_set>
    244e:	61 e7       	ldi	r22, 0x71	; 113
    2450:	83 e0       	ldi	r24, 0x03	; 3
    2452:	0e 94 16 1b 	call	0x362c	; 0x362c <srd_set>
	}	
}
    2456:	00 00       	nop
    2458:	0f 90       	pop	r0
    245a:	df 91       	pop	r29
    245c:	cf 91       	pop	r28
    245e:	08 95       	ret

00002460 <mr_tprobe_menu>:

void mr_tprobe_menu(uint8_t menu_index)
{
    2460:	cf 93       	push	r28
    2462:	df 93       	push	r29
    2464:	1f 92       	push	r1
    2466:	cd b7       	in	r28, 0x3d	; 61
    2468:	de b7       	in	r29, 0x3e	; 62
    246a:	89 83       	std	Y+1, r24	; 0x01
	switch(menu_index)
    246c:	89 81       	ldd	r24, Y+1	; 0x01
    246e:	88 2f       	mov	r24, r24
    2470:	90 e0       	ldi	r25, 0x00	; 0
    2472:	82 30       	cpi	r24, 0x02	; 2
    2474:	91 05       	cpc	r25, r1
    2476:	01 f1       	breq	.+64     	; 0x24b8 <mr_tprobe_menu+0x58>
    2478:	83 30       	cpi	r24, 0x03	; 3
    247a:	91 05       	cpc	r25, r1
    247c:	2c f4       	brge	.+10     	; 0x2488 <mr_tprobe_menu+0x28>
    247e:	00 97       	sbiw	r24, 0x00	; 0
    2480:	49 f0       	breq	.+18     	; 0x2494 <mr_tprobe_menu+0x34>
    2482:	01 97       	sbiw	r24, 0x01	; 1
    2484:	81 f0       	breq	.+32     	; 0x24a6 <mr_tprobe_menu+0x46>
			break;
		case 4: // thermistor 3
			srd_set(0, SRD_CT); srd_set(1, SRD_D3);
			break;
	}
}
    2486:	33 c0       	rjmp	.+102    	; 0x24ee <mr_tprobe_menu+0x8e>
	}	
}

void mr_tprobe_menu(uint8_t menu_index)
{
	switch(menu_index)
    2488:	83 30       	cpi	r24, 0x03	; 3
    248a:	91 05       	cpc	r25, r1
    248c:	f1 f0       	breq	.+60     	; 0x24ca <mr_tprobe_menu+0x6a>
    248e:	04 97       	sbiw	r24, 0x04	; 4
    2490:	29 f1       	breq	.+74     	; 0x24dc <mr_tprobe_menu+0x7c>
			break;
		case 4: // thermistor 3
			srd_set(0, SRD_CT); srd_set(1, SRD_D3);
			break;
	}
}
    2492:	2d c0       	rjmp	.+90     	; 0x24ee <mr_tprobe_menu+0x8e>
void mr_tprobe_menu(uint8_t menu_index)
{
	switch(menu_index)
	{
		case 0: // "--"
			srd_set(0, SRD_MINUS); srd_set(1, SRD_MINUS);
    2494:	60 e4       	ldi	r22, 0x40	; 64
    2496:	80 e0       	ldi	r24, 0x00	; 0
    2498:	0e 94 16 1b 	call	0x362c	; 0x362c <srd_set>
    249c:	60 e4       	ldi	r22, 0x40	; 64
    249e:	81 e0       	ldi	r24, 0x01	; 1
    24a0:	0e 94 16 1b 	call	0x362c	; 0x362c <srd_set>
			break;
    24a4:	24 c0       	rjmp	.+72     	; 0x24ee <mr_tprobe_menu+0x8e>
		case 1: // thermistor 0
			srd_set(0, SRD_CT); srd_set(1, SRD_D0);
    24a6:	68 e7       	ldi	r22, 0x78	; 120
    24a8:	80 e0       	ldi	r24, 0x00	; 0
    24aa:	0e 94 16 1b 	call	0x362c	; 0x362c <srd_set>
    24ae:	6f e3       	ldi	r22, 0x3F	; 63
    24b0:	81 e0       	ldi	r24, 0x01	; 1
    24b2:	0e 94 16 1b 	call	0x362c	; 0x362c <srd_set>
			break;
    24b6:	1b c0       	rjmp	.+54     	; 0x24ee <mr_tprobe_menu+0x8e>
		case 2: // thermistor 1
			srd_set(0, SRD_CT); srd_set(1, SRD_D1);
    24b8:	68 e7       	ldi	r22, 0x78	; 120
    24ba:	80 e0       	ldi	r24, 0x00	; 0
    24bc:	0e 94 16 1b 	call	0x362c	; 0x362c <srd_set>
    24c0:	66 e0       	ldi	r22, 0x06	; 6
    24c2:	81 e0       	ldi	r24, 0x01	; 1
    24c4:	0e 94 16 1b 	call	0x362c	; 0x362c <srd_set>
			break;
    24c8:	12 c0       	rjmp	.+36     	; 0x24ee <mr_tprobe_menu+0x8e>
		case 3: // thermistor 2
			srd_set(0, SRD_CT); srd_set(1, SRD_D2);
    24ca:	68 e7       	ldi	r22, 0x78	; 120
    24cc:	80 e0       	ldi	r24, 0x00	; 0
    24ce:	0e 94 16 1b 	call	0x362c	; 0x362c <srd_set>
    24d2:	6b e5       	ldi	r22, 0x5B	; 91
    24d4:	81 e0       	ldi	r24, 0x01	; 1
    24d6:	0e 94 16 1b 	call	0x362c	; 0x362c <srd_set>
			break;
    24da:	09 c0       	rjmp	.+18     	; 0x24ee <mr_tprobe_menu+0x8e>
		case 4: // thermistor 3
			srd_set(0, SRD_CT); srd_set(1, SRD_D3);
    24dc:	68 e7       	ldi	r22, 0x78	; 120
    24de:	80 e0       	ldi	r24, 0x00	; 0
    24e0:	0e 94 16 1b 	call	0x362c	; 0x362c <srd_set>
    24e4:	6f e4       	ldi	r22, 0x4F	; 79
    24e6:	81 e0       	ldi	r24, 0x01	; 1
    24e8:	0e 94 16 1b 	call	0x362c	; 0x362c <srd_set>
			break;
    24ec:	00 00       	nop
	}
}
    24ee:	00 00       	nop
    24f0:	0f 90       	pop	r0
    24f2:	df 91       	pop	r29
    24f4:	cf 91       	pop	r28
    24f6:	08 95       	ret

000024f8 <mr_tprobe_calib_menu>:

void mr_tprobe_calib_menu(float resistance)
{
    24f8:	0f 93       	push	r16
    24fa:	cf 93       	push	r28
    24fc:	df 93       	push	r29
    24fe:	00 d0       	rcall	.+0      	; 0x2500 <mr_tprobe_calib_menu+0x8>
    2500:	00 d0       	rcall	.+0      	; 0x2502 <mr_tprobe_calib_menu+0xa>
    2502:	cd b7       	in	r28, 0x3d	; 61
    2504:	de b7       	in	r29, 0x3e	; 62
    2506:	69 83       	std	Y+1, r22	; 0x01
    2508:	7a 83       	std	Y+2, r23	; 0x02
    250a:	8b 83       	std	Y+3, r24	; 0x03
    250c:	9c 83       	std	Y+4, r25	; 0x04
	srd_setfloat(fabs(resistance) / 1000, 0, 3, 6);
    250e:	89 81       	ldd	r24, Y+1	; 0x01
    2510:	9a 81       	ldd	r25, Y+2	; 0x02
    2512:	ab 81       	ldd	r26, Y+3	; 0x03
    2514:	bc 81       	ldd	r27, Y+4	; 0x04
    2516:	bf 77       	andi	r27, 0x7F	; 127
    2518:	20 e0       	ldi	r18, 0x00	; 0
    251a:	30 e0       	ldi	r19, 0x00	; 0
    251c:	4a e7       	ldi	r20, 0x7A	; 122
    251e:	54 e4       	ldi	r21, 0x44	; 68
    2520:	bc 01       	movw	r22, r24
    2522:	cd 01       	movw	r24, r26
    2524:	0e 94 07 22 	call	0x440e	; 0x440e <__divsf3>
    2528:	dc 01       	movw	r26, r24
    252a:	cb 01       	movw	r24, r22
    252c:	06 e0       	ldi	r16, 0x06	; 6
    252e:	23 e0       	ldi	r18, 0x03	; 3
    2530:	40 e0       	ldi	r20, 0x00	; 0
    2532:	bc 01       	movw	r22, r24
    2534:	cd 01       	movw	r24, r26
    2536:	0e 94 30 1b 	call	0x3660	; 0x3660 <srd_setfloat>
}
    253a:	00 00       	nop
    253c:	0f 90       	pop	r0
    253e:	0f 90       	pop	r0
    2540:	0f 90       	pop	r0
    2542:	0f 90       	pop	r0
    2544:	df 91       	pop	r29
    2546:	cf 91       	pop	r28
    2548:	0f 91       	pop	r16
    254a:	08 95       	ret

0000254c <mr_tprobe_calib_menu_nc>:

void mr_tprobe_calib_menu_nc()
{
    254c:	cf 93       	push	r28
    254e:	df 93       	push	r29
    2550:	cd b7       	in	r28, 0x3d	; 61
    2552:	de b7       	in	r29, 0x3e	; 62
	srd_set(0,SRD_CN); srd_set(1,SRD_CC);
    2554:	64 e5       	ldi	r22, 0x54	; 84
    2556:	80 e0       	ldi	r24, 0x00	; 0
    2558:	0e 94 16 1b 	call	0x362c	; 0x362c <srd_set>
    255c:	69 e3       	ldi	r22, 0x39	; 57
    255e:	81 e0       	ldi	r24, 0x01	; 1
    2560:	0e 94 16 1b 	call	0x362c	; 0x362c <srd_set>
    2564:	00 00       	nop
    2566:	df 91       	pop	r29
    2568:	cf 91       	pop	r28
    256a:	08 95       	ret

0000256c <decpowi16>:
	return num1 < num2 ? num1 : num2;
}
uint64_t umin64(uint64_t num1, uint64_t num2)
{
	return num1 < num2 ? num1 : num2;
}
    256c:	cf 93       	push	r28
    256e:	df 93       	push	r29
    2570:	00 d0       	rcall	.+0      	; 0x2572 <decpowi16+0x6>
    2572:	00 d0       	rcall	.+0      	; 0x2574 <decpowi16+0x8>
    2574:	1f 92       	push	r1
    2576:	cd b7       	in	r28, 0x3d	; 61
    2578:	de b7       	in	r29, 0x3e	; 62
    257a:	9d 83       	std	Y+5, r25	; 0x05
    257c:	8c 83       	std	Y+4, r24	; 0x04
    257e:	8c 81       	ldd	r24, Y+4	; 0x04
    2580:	9d 81       	ldd	r25, Y+5	; 0x05
    2582:	99 23       	and	r25, r25
    2584:	14 f4       	brge	.+4      	; 0x258a <decpowi16+0x1e>
    2586:	0e 94 35 25 	call	0x4a6a	; 0x4a6a <abort>
    258a:	81 e0       	ldi	r24, 0x01	; 1
    258c:	90 e0       	ldi	r25, 0x00	; 0
    258e:	9a 83       	std	Y+2, r25	; 0x02
    2590:	89 83       	std	Y+1, r24	; 0x01
    2592:	1b 82       	std	Y+3, r1	; 0x03
    2594:	10 c0       	rjmp	.+32     	; 0x25b6 <decpowi16+0x4a>
    2596:	89 81       	ldd	r24, Y+1	; 0x01
    2598:	9a 81       	ldd	r25, Y+2	; 0x02
    259a:	88 0f       	add	r24, r24
    259c:	99 1f       	adc	r25, r25
    259e:	9c 01       	movw	r18, r24
    25a0:	22 0f       	add	r18, r18
    25a2:	33 1f       	adc	r19, r19
    25a4:	22 0f       	add	r18, r18
    25a6:	33 1f       	adc	r19, r19
    25a8:	82 0f       	add	r24, r18
    25aa:	93 1f       	adc	r25, r19
    25ac:	9a 83       	std	Y+2, r25	; 0x02
    25ae:	89 83       	std	Y+1, r24	; 0x01
    25b0:	8b 81       	ldd	r24, Y+3	; 0x03
    25b2:	8f 5f       	subi	r24, 0xFF	; 255
    25b4:	8b 83       	std	Y+3, r24	; 0x03
    25b6:	8b 81       	ldd	r24, Y+3	; 0x03
    25b8:	28 2f       	mov	r18, r24
    25ba:	30 e0       	ldi	r19, 0x00	; 0
    25bc:	8c 81       	ldd	r24, Y+4	; 0x04
    25be:	9d 81       	ldd	r25, Y+5	; 0x05
    25c0:	28 17       	cp	r18, r24
    25c2:	39 07       	cpc	r19, r25
    25c4:	44 f3       	brlt	.-48     	; 0x2596 <decpowi16+0x2a>
    25c6:	89 81       	ldd	r24, Y+1	; 0x01
    25c8:	9a 81       	ldd	r25, Y+2	; 0x02
    25ca:	0f 90       	pop	r0
    25cc:	0f 90       	pop	r0
    25ce:	0f 90       	pop	r0
    25d0:	0f 90       	pop	r0
    25d2:	0f 90       	pop	r0
    25d4:	df 91       	pop	r29
    25d6:	cf 91       	pop	r28
    25d8:	08 95       	ret

000025da <imax8>:
    25da:	cf 93       	push	r28
    25dc:	df 93       	push	r29
    25de:	00 d0       	rcall	.+0      	; 0x25e0 <imax8+0x6>
    25e0:	cd b7       	in	r28, 0x3d	; 61
    25e2:	de b7       	in	r29, 0x3e	; 62
    25e4:	89 83       	std	Y+1, r24	; 0x01
    25e6:	6a 83       	std	Y+2, r22	; 0x02
    25e8:	99 81       	ldd	r25, Y+1	; 0x01
    25ea:	8a 81       	ldd	r24, Y+2	; 0x02
    25ec:	89 17       	cp	r24, r25
    25ee:	0c f4       	brge	.+2      	; 0x25f2 <imax8+0x18>
    25f0:	89 2f       	mov	r24, r25
    25f2:	0f 90       	pop	r0
    25f4:	0f 90       	pop	r0
    25f6:	df 91       	pop	r29
    25f8:	cf 91       	pop	r28
    25fa:	08 95       	ret

000025fc <imax16>:
    25fc:	cf 93       	push	r28
    25fe:	df 93       	push	r29
    2600:	00 d0       	rcall	.+0      	; 0x2602 <imax16+0x6>
    2602:	00 d0       	rcall	.+0      	; 0x2604 <imax16+0x8>
    2604:	cd b7       	in	r28, 0x3d	; 61
    2606:	de b7       	in	r29, 0x3e	; 62
    2608:	9a 83       	std	Y+2, r25	; 0x02
    260a:	89 83       	std	Y+1, r24	; 0x01
    260c:	7c 83       	std	Y+4, r23	; 0x04
    260e:	6b 83       	std	Y+3, r22	; 0x03
    2610:	29 81       	ldd	r18, Y+1	; 0x01
    2612:	3a 81       	ldd	r19, Y+2	; 0x02
    2614:	8b 81       	ldd	r24, Y+3	; 0x03
    2616:	9c 81       	ldd	r25, Y+4	; 0x04
    2618:	82 17       	cp	r24, r18
    261a:	93 07       	cpc	r25, r19
    261c:	0c f4       	brge	.+2      	; 0x2620 <imax16+0x24>
    261e:	c9 01       	movw	r24, r18
    2620:	0f 90       	pop	r0
    2622:	0f 90       	pop	r0
    2624:	0f 90       	pop	r0
    2626:	0f 90       	pop	r0
    2628:	df 91       	pop	r29
    262a:	cf 91       	pop	r28
    262c:	08 95       	ret

0000262e <imin8>:
    262e:	cf 93       	push	r28
    2630:	df 93       	push	r29
    2632:	00 d0       	rcall	.+0      	; 0x2634 <imin8+0x6>
    2634:	cd b7       	in	r28, 0x3d	; 61
    2636:	de b7       	in	r29, 0x3e	; 62
    2638:	89 83       	std	Y+1, r24	; 0x01
    263a:	6a 83       	std	Y+2, r22	; 0x02
    263c:	99 81       	ldd	r25, Y+1	; 0x01
    263e:	8a 81       	ldd	r24, Y+2	; 0x02
    2640:	98 17       	cp	r25, r24
    2642:	0c f4       	brge	.+2      	; 0x2646 <imin8+0x18>
    2644:	89 2f       	mov	r24, r25
    2646:	0f 90       	pop	r0
    2648:	0f 90       	pop	r0
    264a:	df 91       	pop	r29
    264c:	cf 91       	pop	r28
    264e:	08 95       	ret

00002650 <imin16>:
    2650:	cf 93       	push	r28
    2652:	df 93       	push	r29
    2654:	00 d0       	rcall	.+0      	; 0x2656 <imin16+0x6>
    2656:	00 d0       	rcall	.+0      	; 0x2658 <imin16+0x8>
    2658:	cd b7       	in	r28, 0x3d	; 61
    265a:	de b7       	in	r29, 0x3e	; 62
    265c:	9a 83       	std	Y+2, r25	; 0x02
    265e:	89 83       	std	Y+1, r24	; 0x01
    2660:	7c 83       	std	Y+4, r23	; 0x04
    2662:	6b 83       	std	Y+3, r22	; 0x03
    2664:	29 81       	ldd	r18, Y+1	; 0x01
    2666:	3a 81       	ldd	r19, Y+2	; 0x02
    2668:	8b 81       	ldd	r24, Y+3	; 0x03
    266a:	9c 81       	ldd	r25, Y+4	; 0x04
    266c:	28 17       	cp	r18, r24
    266e:	39 07       	cpc	r19, r25
    2670:	0c f4       	brge	.+2      	; 0x2674 <imin16+0x24>
    2672:	c9 01       	movw	r24, r18
    2674:	0f 90       	pop	r0
    2676:	0f 90       	pop	r0
    2678:	0f 90       	pop	r0
    267a:	0f 90       	pop	r0
    267c:	df 91       	pop	r29
    267e:	cf 91       	pop	r28
    2680:	08 95       	ret

00002682 <umax8>:
    2682:	cf 93       	push	r28
    2684:	df 93       	push	r29
    2686:	00 d0       	rcall	.+0      	; 0x2688 <umax8+0x6>
    2688:	cd b7       	in	r28, 0x3d	; 61
    268a:	de b7       	in	r29, 0x3e	; 62
    268c:	89 83       	std	Y+1, r24	; 0x01
    268e:	6a 83       	std	Y+2, r22	; 0x02
    2690:	99 81       	ldd	r25, Y+1	; 0x01
    2692:	8a 81       	ldd	r24, Y+2	; 0x02
    2694:	89 17       	cp	r24, r25
    2696:	08 f4       	brcc	.+2      	; 0x269a <umax8+0x18>
    2698:	89 2f       	mov	r24, r25
    269a:	0f 90       	pop	r0
    269c:	0f 90       	pop	r0
    269e:	df 91       	pop	r29
    26a0:	cf 91       	pop	r28
    26a2:	08 95       	ret

000026a4 <umin8>:
    26a4:	cf 93       	push	r28
    26a6:	df 93       	push	r29
    26a8:	00 d0       	rcall	.+0      	; 0x26aa <umin8+0x6>
    26aa:	cd b7       	in	r28, 0x3d	; 61
    26ac:	de b7       	in	r29, 0x3e	; 62
    26ae:	89 83       	std	Y+1, r24	; 0x01
    26b0:	6a 83       	std	Y+2, r22	; 0x02
    26b2:	99 81       	ldd	r25, Y+1	; 0x01
    26b4:	8a 81       	ldd	r24, Y+2	; 0x02
    26b6:	98 17       	cp	r25, r24
    26b8:	08 f4       	brcc	.+2      	; 0x26bc <umin8+0x18>
    26ba:	89 2f       	mov	r24, r25
    26bc:	0f 90       	pop	r0
    26be:	0f 90       	pop	r0
    26c0:	df 91       	pop	r29
    26c2:	cf 91       	pop	r28
    26c4:	08 95       	ret

000026c6 <fmax>:
float fmax(float num1, float num2)
{
    26c6:	cf 93       	push	r28
    26c8:	df 93       	push	r29
    26ca:	cd b7       	in	r28, 0x3d	; 61
    26cc:	de b7       	in	r29, 0x3e	; 62
    26ce:	28 97       	sbiw	r28, 0x08	; 8
    26d0:	0f b6       	in	r0, 0x3f	; 63
    26d2:	f8 94       	cli
    26d4:	de bf       	out	0x3e, r29	; 62
    26d6:	0f be       	out	0x3f, r0	; 63
    26d8:	cd bf       	out	0x3d, r28	; 61
    26da:	69 83       	std	Y+1, r22	; 0x01
    26dc:	7a 83       	std	Y+2, r23	; 0x02
    26de:	8b 83       	std	Y+3, r24	; 0x03
    26e0:	9c 83       	std	Y+4, r25	; 0x04
    26e2:	2d 83       	std	Y+5, r18	; 0x05
    26e4:	3e 83       	std	Y+6, r19	; 0x06
    26e6:	4f 83       	std	Y+7, r20	; 0x07
    26e8:	58 87       	std	Y+8, r21	; 0x08
	return num1 > num2 ? num1 : num2;
    26ea:	2d 81       	ldd	r18, Y+5	; 0x05
    26ec:	3e 81       	ldd	r19, Y+6	; 0x06
    26ee:	4f 81       	ldd	r20, Y+7	; 0x07
    26f0:	58 85       	ldd	r21, Y+8	; 0x08
    26f2:	69 81       	ldd	r22, Y+1	; 0x01
    26f4:	7a 81       	ldd	r23, Y+2	; 0x02
    26f6:	8b 81       	ldd	r24, Y+3	; 0x03
    26f8:	9c 81       	ldd	r25, Y+4	; 0x04
    26fa:	0e 94 ad 23 	call	0x475a	; 0x475a <__gesf2>
    26fe:	18 16       	cp	r1, r24
    2700:	2c f4       	brge	.+10     	; 0x270c <fmax+0x46>
    2702:	89 81       	ldd	r24, Y+1	; 0x01
    2704:	9a 81       	ldd	r25, Y+2	; 0x02
    2706:	ab 81       	ldd	r26, Y+3	; 0x03
    2708:	bc 81       	ldd	r27, Y+4	; 0x04
    270a:	04 c0       	rjmp	.+8      	; 0x2714 <fmax+0x4e>
    270c:	8d 81       	ldd	r24, Y+5	; 0x05
    270e:	9e 81       	ldd	r25, Y+6	; 0x06
    2710:	af 81       	ldd	r26, Y+7	; 0x07
    2712:	b8 85       	ldd	r27, Y+8	; 0x08
}
    2714:	bc 01       	movw	r22, r24
    2716:	cd 01       	movw	r24, r26
    2718:	28 96       	adiw	r28, 0x08	; 8
    271a:	0f b6       	in	r0, 0x3f	; 63
    271c:	f8 94       	cli
    271e:	de bf       	out	0x3e, r29	; 62
    2720:	0f be       	out	0x3f, r0	; 63
    2722:	cd bf       	out	0x3d, r28	; 61
    2724:	df 91       	pop	r29
    2726:	cf 91       	pop	r28
    2728:	08 95       	ret

0000272a <fmin>:
float fmin(float num1, float num2)
{
    272a:	cf 93       	push	r28
    272c:	df 93       	push	r29
    272e:	cd b7       	in	r28, 0x3d	; 61
    2730:	de b7       	in	r29, 0x3e	; 62
    2732:	28 97       	sbiw	r28, 0x08	; 8
    2734:	0f b6       	in	r0, 0x3f	; 63
    2736:	f8 94       	cli
    2738:	de bf       	out	0x3e, r29	; 62
    273a:	0f be       	out	0x3f, r0	; 63
    273c:	cd bf       	out	0x3d, r28	; 61
    273e:	69 83       	std	Y+1, r22	; 0x01
    2740:	7a 83       	std	Y+2, r23	; 0x02
    2742:	8b 83       	std	Y+3, r24	; 0x03
    2744:	9c 83       	std	Y+4, r25	; 0x04
    2746:	2d 83       	std	Y+5, r18	; 0x05
    2748:	3e 83       	std	Y+6, r19	; 0x06
    274a:	4f 83       	std	Y+7, r20	; 0x07
    274c:	58 87       	std	Y+8, r21	; 0x08
	return num1 < num2 ? num1 : num2;
    274e:	2d 81       	ldd	r18, Y+5	; 0x05
    2750:	3e 81       	ldd	r19, Y+6	; 0x06
    2752:	4f 81       	ldd	r20, Y+7	; 0x07
    2754:	58 85       	ldd	r21, Y+8	; 0x08
    2756:	69 81       	ldd	r22, Y+1	; 0x01
    2758:	7a 81       	ldd	r23, Y+2	; 0x02
    275a:	8b 81       	ldd	r24, Y+3	; 0x03
    275c:	9c 81       	ldd	r25, Y+4	; 0x04
    275e:	0e 94 02 22 	call	0x4404	; 0x4404 <__cmpsf2>
    2762:	88 23       	and	r24, r24
    2764:	2c f4       	brge	.+10     	; 0x2770 <fmin+0x46>
    2766:	89 81       	ldd	r24, Y+1	; 0x01
    2768:	9a 81       	ldd	r25, Y+2	; 0x02
    276a:	ab 81       	ldd	r26, Y+3	; 0x03
    276c:	bc 81       	ldd	r27, Y+4	; 0x04
    276e:	04 c0       	rjmp	.+8      	; 0x2778 <fmin+0x4e>
    2770:	8d 81       	ldd	r24, Y+5	; 0x05
    2772:	9e 81       	ldd	r25, Y+6	; 0x06
    2774:	af 81       	ldd	r26, Y+7	; 0x07
    2776:	b8 85       	ldd	r27, Y+8	; 0x08
}
    2778:	bc 01       	movw	r22, r24
    277a:	cd 01       	movw	r24, r26
    277c:	28 96       	adiw	r28, 0x08	; 8
    277e:	0f b6       	in	r0, 0x3f	; 63
    2780:	f8 94       	cli
    2782:	de bf       	out	0x3e, r29	; 62
    2784:	0f be       	out	0x3f, r0	; 63
    2786:	cd bf       	out	0x3d, r28	; 61
    2788:	df 91       	pop	r29
    278a:	cf 91       	pop	r28
    278c:	08 95       	ret

0000278e <pid_init>:

#include "PID.h"
#include "my_util.h"

void pid_init(pid_state_t* state, float pid_p, float pid_i, float pid_d, float control_min, float control_max)
{
    278e:	8f 92       	push	r8
    2790:	9f 92       	push	r9
    2792:	af 92       	push	r10
    2794:	bf 92       	push	r11
    2796:	cf 92       	push	r12
    2798:	df 92       	push	r13
    279a:	ef 92       	push	r14
    279c:	ff 92       	push	r15
    279e:	0f 93       	push	r16
    27a0:	1f 93       	push	r17
    27a2:	cf 93       	push	r28
    27a4:	df 93       	push	r29
    27a6:	cd b7       	in	r28, 0x3d	; 61
    27a8:	de b7       	in	r29, 0x3e	; 62
    27aa:	62 97       	sbiw	r28, 0x12	; 18
    27ac:	0f b6       	in	r0, 0x3f	; 63
    27ae:	f8 94       	cli
    27b0:	de bf       	out	0x3e, r29	; 62
    27b2:	0f be       	out	0x3f, r0	; 63
    27b4:	cd bf       	out	0x3d, r28	; 61
    27b6:	9a 83       	std	Y+2, r25	; 0x02
    27b8:	89 83       	std	Y+1, r24	; 0x01
    27ba:	4b 83       	std	Y+3, r20	; 0x03
    27bc:	5c 83       	std	Y+4, r21	; 0x04
    27be:	6d 83       	std	Y+5, r22	; 0x05
    27c0:	7e 83       	std	Y+6, r23	; 0x06
    27c2:	0f 83       	std	Y+7, r16	; 0x07
    27c4:	18 87       	std	Y+8, r17	; 0x08
    27c6:	29 87       	std	Y+9, r18	; 0x09
    27c8:	3a 87       	std	Y+10, r19	; 0x0a
    27ca:	cb 86       	std	Y+11, r12	; 0x0b
    27cc:	dc 86       	std	Y+12, r13	; 0x0c
    27ce:	ed 86       	std	Y+13, r14	; 0x0d
    27d0:	fe 86       	std	Y+14, r15	; 0x0e
    27d2:	8f 86       	std	Y+15, r8	; 0x0f
    27d4:	98 8a       	std	Y+16, r9	; 0x10
    27d6:	a9 8a       	std	Y+17, r10	; 0x11
    27d8:	ba 8a       	std	Y+18, r11	; 0x12
	state->kp = pid_p;
    27da:	29 81       	ldd	r18, Y+1	; 0x01
    27dc:	3a 81       	ldd	r19, Y+2	; 0x02
    27de:	8b 81       	ldd	r24, Y+3	; 0x03
    27e0:	9c 81       	ldd	r25, Y+4	; 0x04
    27e2:	ad 81       	ldd	r26, Y+5	; 0x05
    27e4:	be 81       	ldd	r27, Y+6	; 0x06
    27e6:	f9 01       	movw	r30, r18
    27e8:	80 87       	std	Z+8, r24	; 0x08
    27ea:	91 87       	std	Z+9, r25	; 0x09
    27ec:	a2 87       	std	Z+10, r26	; 0x0a
    27ee:	b3 87       	std	Z+11, r27	; 0x0b
	state->ki = pid_i;
    27f0:	29 81       	ldd	r18, Y+1	; 0x01
    27f2:	3a 81       	ldd	r19, Y+2	; 0x02
    27f4:	8f 81       	ldd	r24, Y+7	; 0x07
    27f6:	98 85       	ldd	r25, Y+8	; 0x08
    27f8:	a9 85       	ldd	r26, Y+9	; 0x09
    27fa:	ba 85       	ldd	r27, Y+10	; 0x0a
    27fc:	f9 01       	movw	r30, r18
    27fe:	84 87       	std	Z+12, r24	; 0x0c
    2800:	95 87       	std	Z+13, r25	; 0x0d
    2802:	a6 87       	std	Z+14, r26	; 0x0e
    2804:	b7 87       	std	Z+15, r27	; 0x0f
	state->kd = pid_d;
    2806:	29 81       	ldd	r18, Y+1	; 0x01
    2808:	3a 81       	ldd	r19, Y+2	; 0x02
    280a:	8b 85       	ldd	r24, Y+11	; 0x0b
    280c:	9c 85       	ldd	r25, Y+12	; 0x0c
    280e:	ad 85       	ldd	r26, Y+13	; 0x0d
    2810:	be 85       	ldd	r27, Y+14	; 0x0e
    2812:	f9 01       	movw	r30, r18
    2814:	80 8b       	std	Z+16, r24	; 0x10
    2816:	91 8b       	std	Z+17, r25	; 0x11
    2818:	a2 8b       	std	Z+18, r26	; 0x12
    281a:	b3 8b       	std	Z+19, r27	; 0x13
	state->control_max = control_max;
    281c:	29 81       	ldd	r18, Y+1	; 0x01
    281e:	3a 81       	ldd	r19, Y+2	; 0x02
    2820:	89 a1       	ldd	r24, Y+33	; 0x21
    2822:	9a a1       	ldd	r25, Y+34	; 0x22
    2824:	ab a1       	ldd	r26, Y+35	; 0x23
    2826:	bc a1       	ldd	r27, Y+36	; 0x24
    2828:	f9 01       	movw	r30, r18
    282a:	80 8f       	std	Z+24, r24	; 0x18
    282c:	91 8f       	std	Z+25, r25	; 0x19
    282e:	a2 8f       	std	Z+26, r26	; 0x1a
    2830:	b3 8f       	std	Z+27, r27	; 0x1b
	state->control_min = control_min;
    2832:	29 81       	ldd	r18, Y+1	; 0x01
    2834:	3a 81       	ldd	r19, Y+2	; 0x02
    2836:	8f 85       	ldd	r24, Y+15	; 0x0f
    2838:	98 89       	ldd	r25, Y+16	; 0x10
    283a:	a9 89       	ldd	r26, Y+17	; 0x11
    283c:	ba 89       	ldd	r27, Y+18	; 0x12
    283e:	f9 01       	movw	r30, r18
    2840:	84 8b       	std	Z+20, r24	; 0x14
    2842:	95 8b       	std	Z+21, r25	; 0x15
    2844:	a6 8b       	std	Z+22, r26	; 0x16
    2846:	b7 8b       	std	Z+23, r27	; 0x17
	
	state->old_process_value = 0.0;
    2848:	89 81       	ldd	r24, Y+1	; 0x01
    284a:	9a 81       	ldd	r25, Y+2	; 0x02
    284c:	fc 01       	movw	r30, r24
    284e:	10 82       	st	Z, r1
    2850:	11 82       	std	Z+1, r1	; 0x01
    2852:	12 82       	std	Z+2, r1	; 0x02
    2854:	13 82       	std	Z+3, r1	; 0x03
	state->sum_error = 0.0;
    2856:	89 81       	ldd	r24, Y+1	; 0x01
    2858:	9a 81       	ldd	r25, Y+2	; 0x02
    285a:	fc 01       	movw	r30, r24
    285c:	14 82       	std	Z+4, r1	; 0x04
    285e:	15 82       	std	Z+5, r1	; 0x05
    2860:	16 82       	std	Z+6, r1	; 0x06
    2862:	17 82       	std	Z+7, r1	; 0x07
}
    2864:	00 00       	nop
    2866:	62 96       	adiw	r28, 0x12	; 18
    2868:	0f b6       	in	r0, 0x3f	; 63
    286a:	f8 94       	cli
    286c:	de bf       	out	0x3e, r29	; 62
    286e:	0f be       	out	0x3f, r0	; 63
    2870:	cd bf       	out	0x3d, r28	; 61
    2872:	df 91       	pop	r29
    2874:	cf 91       	pop	r28
    2876:	1f 91       	pop	r17
    2878:	0f 91       	pop	r16
    287a:	ff 90       	pop	r15
    287c:	ef 90       	pop	r14
    287e:	df 90       	pop	r13
    2880:	cf 90       	pop	r12
    2882:	bf 90       	pop	r11
    2884:	af 90       	pop	r10
    2886:	9f 90       	pop	r9
    2888:	8f 90       	pop	r8
    288a:	08 95       	ret

0000288c <pid_set_params>:

void pid_set_params(pid_state_t* state, float pid_p, float pid_i, float pid_d, float control_min, float control_max)
{
    288c:	8f 92       	push	r8
    288e:	9f 92       	push	r9
    2890:	af 92       	push	r10
    2892:	bf 92       	push	r11
    2894:	cf 92       	push	r12
    2896:	df 92       	push	r13
    2898:	ef 92       	push	r14
    289a:	ff 92       	push	r15
    289c:	0f 93       	push	r16
    289e:	1f 93       	push	r17
    28a0:	cf 93       	push	r28
    28a2:	df 93       	push	r29
    28a4:	cd b7       	in	r28, 0x3d	; 61
    28a6:	de b7       	in	r29, 0x3e	; 62
    28a8:	62 97       	sbiw	r28, 0x12	; 18
    28aa:	0f b6       	in	r0, 0x3f	; 63
    28ac:	f8 94       	cli
    28ae:	de bf       	out	0x3e, r29	; 62
    28b0:	0f be       	out	0x3f, r0	; 63
    28b2:	cd bf       	out	0x3d, r28	; 61
    28b4:	9a 83       	std	Y+2, r25	; 0x02
    28b6:	89 83       	std	Y+1, r24	; 0x01
    28b8:	4b 83       	std	Y+3, r20	; 0x03
    28ba:	5c 83       	std	Y+4, r21	; 0x04
    28bc:	6d 83       	std	Y+5, r22	; 0x05
    28be:	7e 83       	std	Y+6, r23	; 0x06
    28c0:	0f 83       	std	Y+7, r16	; 0x07
    28c2:	18 87       	std	Y+8, r17	; 0x08
    28c4:	29 87       	std	Y+9, r18	; 0x09
    28c6:	3a 87       	std	Y+10, r19	; 0x0a
    28c8:	cb 86       	std	Y+11, r12	; 0x0b
    28ca:	dc 86       	std	Y+12, r13	; 0x0c
    28cc:	ed 86       	std	Y+13, r14	; 0x0d
    28ce:	fe 86       	std	Y+14, r15	; 0x0e
    28d0:	8f 86       	std	Y+15, r8	; 0x0f
    28d2:	98 8a       	std	Y+16, r9	; 0x10
    28d4:	a9 8a       	std	Y+17, r10	; 0x11
    28d6:	ba 8a       	std	Y+18, r11	; 0x12
	state->kp = pid_p;
    28d8:	29 81       	ldd	r18, Y+1	; 0x01
    28da:	3a 81       	ldd	r19, Y+2	; 0x02
    28dc:	8b 81       	ldd	r24, Y+3	; 0x03
    28de:	9c 81       	ldd	r25, Y+4	; 0x04
    28e0:	ad 81       	ldd	r26, Y+5	; 0x05
    28e2:	be 81       	ldd	r27, Y+6	; 0x06
    28e4:	f9 01       	movw	r30, r18
    28e6:	80 87       	std	Z+8, r24	; 0x08
    28e8:	91 87       	std	Z+9, r25	; 0x09
    28ea:	a2 87       	std	Z+10, r26	; 0x0a
    28ec:	b3 87       	std	Z+11, r27	; 0x0b
	state->ki = pid_i;
    28ee:	29 81       	ldd	r18, Y+1	; 0x01
    28f0:	3a 81       	ldd	r19, Y+2	; 0x02
    28f2:	8f 81       	ldd	r24, Y+7	; 0x07
    28f4:	98 85       	ldd	r25, Y+8	; 0x08
    28f6:	a9 85       	ldd	r26, Y+9	; 0x09
    28f8:	ba 85       	ldd	r27, Y+10	; 0x0a
    28fa:	f9 01       	movw	r30, r18
    28fc:	84 87       	std	Z+12, r24	; 0x0c
    28fe:	95 87       	std	Z+13, r25	; 0x0d
    2900:	a6 87       	std	Z+14, r26	; 0x0e
    2902:	b7 87       	std	Z+15, r27	; 0x0f
	state->kd = pid_d;
    2904:	29 81       	ldd	r18, Y+1	; 0x01
    2906:	3a 81       	ldd	r19, Y+2	; 0x02
    2908:	8b 85       	ldd	r24, Y+11	; 0x0b
    290a:	9c 85       	ldd	r25, Y+12	; 0x0c
    290c:	ad 85       	ldd	r26, Y+13	; 0x0d
    290e:	be 85       	ldd	r27, Y+14	; 0x0e
    2910:	f9 01       	movw	r30, r18
    2912:	80 8b       	std	Z+16, r24	; 0x10
    2914:	91 8b       	std	Z+17, r25	; 0x11
    2916:	a2 8b       	std	Z+18, r26	; 0x12
    2918:	b3 8b       	std	Z+19, r27	; 0x13
	state->control_max = control_max;
    291a:	29 81       	ldd	r18, Y+1	; 0x01
    291c:	3a 81       	ldd	r19, Y+2	; 0x02
    291e:	89 a1       	ldd	r24, Y+33	; 0x21
    2920:	9a a1       	ldd	r25, Y+34	; 0x22
    2922:	ab a1       	ldd	r26, Y+35	; 0x23
    2924:	bc a1       	ldd	r27, Y+36	; 0x24
    2926:	f9 01       	movw	r30, r18
    2928:	80 8f       	std	Z+24, r24	; 0x18
    292a:	91 8f       	std	Z+25, r25	; 0x19
    292c:	a2 8f       	std	Z+26, r26	; 0x1a
    292e:	b3 8f       	std	Z+27, r27	; 0x1b
	state->control_min = control_min;
    2930:	29 81       	ldd	r18, Y+1	; 0x01
    2932:	3a 81       	ldd	r19, Y+2	; 0x02
    2934:	8f 85       	ldd	r24, Y+15	; 0x0f
    2936:	98 89       	ldd	r25, Y+16	; 0x10
    2938:	a9 89       	ldd	r26, Y+17	; 0x11
    293a:	ba 89       	ldd	r27, Y+18	; 0x12
    293c:	f9 01       	movw	r30, r18
    293e:	84 8b       	std	Z+20, r24	; 0x14
    2940:	95 8b       	std	Z+21, r25	; 0x15
    2942:	a6 8b       	std	Z+22, r26	; 0x16
    2944:	b7 8b       	std	Z+23, r27	; 0x17
	
	state->old_process_value = 0.0;
    2946:	89 81       	ldd	r24, Y+1	; 0x01
    2948:	9a 81       	ldd	r25, Y+2	; 0x02
    294a:	fc 01       	movw	r30, r24
    294c:	10 82       	st	Z, r1
    294e:	11 82       	std	Z+1, r1	; 0x01
    2950:	12 82       	std	Z+2, r1	; 0x02
    2952:	13 82       	std	Z+3, r1	; 0x03
	state->sum_error = 0.0;
    2954:	89 81       	ldd	r24, Y+1	; 0x01
    2956:	9a 81       	ldd	r25, Y+2	; 0x02
    2958:	fc 01       	movw	r30, r24
    295a:	14 82       	std	Z+4, r1	; 0x04
    295c:	15 82       	std	Z+5, r1	; 0x05
    295e:	16 82       	std	Z+6, r1	; 0x06
    2960:	17 82       	std	Z+7, r1	; 0x07
}
    2962:	00 00       	nop
    2964:	62 96       	adiw	r28, 0x12	; 18
    2966:	0f b6       	in	r0, 0x3f	; 63
    2968:	f8 94       	cli
    296a:	de bf       	out	0x3e, r29	; 62
    296c:	0f be       	out	0x3f, r0	; 63
    296e:	cd bf       	out	0x3d, r28	; 61
    2970:	df 91       	pop	r29
    2972:	cf 91       	pop	r28
    2974:	1f 91       	pop	r17
    2976:	0f 91       	pop	r16
    2978:	ff 90       	pop	r15
    297a:	ef 90       	pop	r14
    297c:	df 90       	pop	r13
    297e:	cf 90       	pop	r12
    2980:	bf 90       	pop	r11
    2982:	af 90       	pop	r10
    2984:	9f 90       	pop	r9
    2986:	8f 90       	pop	r8
    2988:	08 95       	ret

0000298a <pid_step>:

float pid_step(pid_state_t* state, float process_value, float set_value)
{
    298a:	8f 92       	push	r8
    298c:	9f 92       	push	r9
    298e:	af 92       	push	r10
    2990:	bf 92       	push	r11
    2992:	cf 92       	push	r12
    2994:	df 92       	push	r13
    2996:	ef 92       	push	r14
    2998:	ff 92       	push	r15
    299a:	0f 93       	push	r16
    299c:	1f 93       	push	r17
    299e:	cf 93       	push	r28
    29a0:	df 93       	push	r29
    29a2:	cd b7       	in	r28, 0x3d	; 61
    29a4:	de b7       	in	r29, 0x3e	; 62
    29a6:	6e 97       	sbiw	r28, 0x1e	; 30
    29a8:	0f b6       	in	r0, 0x3f	; 63
    29aa:	f8 94       	cli
    29ac:	de bf       	out	0x3e, r29	; 62
    29ae:	0f be       	out	0x3f, r0	; 63
    29b0:	cd bf       	out	0x3d, r28	; 61
    29b2:	9e 8b       	std	Y+22, r25	; 0x16
    29b4:	8d 8b       	std	Y+21, r24	; 0x15
    29b6:	4f 8b       	std	Y+23, r20	; 0x17
    29b8:	58 8f       	std	Y+24, r21	; 0x18
    29ba:	69 8f       	std	Y+25, r22	; 0x19
    29bc:	7a 8f       	std	Y+26, r23	; 0x1a
    29be:	0b 8f       	std	Y+27, r16	; 0x1b
    29c0:	1c 8f       	std	Y+28, r17	; 0x1c
    29c2:	2d 8f       	std	Y+29, r18	; 0x1d
    29c4:	3e 8f       	std	Y+30, r19	; 0x1e
	// error
	float error = set_value - process_value;
    29c6:	2f 89       	ldd	r18, Y+23	; 0x17
    29c8:	38 8d       	ldd	r19, Y+24	; 0x18
    29ca:	49 8d       	ldd	r20, Y+25	; 0x19
    29cc:	5a 8d       	ldd	r21, Y+26	; 0x1a
    29ce:	6b 8d       	ldd	r22, Y+27	; 0x1b
    29d0:	7c 8d       	ldd	r23, Y+28	; 0x1c
    29d2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    29d4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    29d6:	0e 94 95 21 	call	0x432a	; 0x432a <__subsf3>
    29da:	dc 01       	movw	r26, r24
    29dc:	cb 01       	movw	r24, r22
    29de:	89 83       	std	Y+1, r24	; 0x01
    29e0:	9a 83       	std	Y+2, r25	; 0x02
    29e2:	ab 83       	std	Y+3, r26	; 0x03
    29e4:	bc 83       	std	Y+4, r27	; 0x04
	// proportional term
	float p_term = state->kp * error;
    29e6:	8d 89       	ldd	r24, Y+21	; 0x15
    29e8:	9e 89       	ldd	r25, Y+22	; 0x16
    29ea:	fc 01       	movw	r30, r24
    29ec:	80 85       	ldd	r24, Z+8	; 0x08
    29ee:	91 85       	ldd	r25, Z+9	; 0x09
    29f0:	a2 85       	ldd	r26, Z+10	; 0x0a
    29f2:	b3 85       	ldd	r27, Z+11	; 0x0b
    29f4:	29 81       	ldd	r18, Y+1	; 0x01
    29f6:	3a 81       	ldd	r19, Y+2	; 0x02
    29f8:	4b 81       	ldd	r20, Y+3	; 0x03
    29fa:	5c 81       	ldd	r21, Y+4	; 0x04
    29fc:	bc 01       	movw	r22, r24
    29fe:	cd 01       	movw	r24, r26
    2a00:	0e 94 02 24 	call	0x4804	; 0x4804 <__mulsf3>
    2a04:	dc 01       	movw	r26, r24
    2a06:	cb 01       	movw	r24, r22
    2a08:	8d 83       	std	Y+5, r24	; 0x05
    2a0a:	9e 83       	std	Y+6, r25	; 0x06
    2a0c:	af 83       	std	Y+7, r26	; 0x07
    2a0e:	b8 87       	std	Y+8, r27	; 0x08
	// integral term
	float i_term = state->ki * (state->sum_error + error);
    2a10:	8d 89       	ldd	r24, Y+21	; 0x15
    2a12:	9e 89       	ldd	r25, Y+22	; 0x16
    2a14:	fc 01       	movw	r30, r24
    2a16:	c4 84       	ldd	r12, Z+12	; 0x0c
    2a18:	d5 84       	ldd	r13, Z+13	; 0x0d
    2a1a:	e6 84       	ldd	r14, Z+14	; 0x0e
    2a1c:	f7 84       	ldd	r15, Z+15	; 0x0f
    2a1e:	8d 89       	ldd	r24, Y+21	; 0x15
    2a20:	9e 89       	ldd	r25, Y+22	; 0x16
    2a22:	fc 01       	movw	r30, r24
    2a24:	84 81       	ldd	r24, Z+4	; 0x04
    2a26:	95 81       	ldd	r25, Z+5	; 0x05
    2a28:	a6 81       	ldd	r26, Z+6	; 0x06
    2a2a:	b7 81       	ldd	r27, Z+7	; 0x07
    2a2c:	29 81       	ldd	r18, Y+1	; 0x01
    2a2e:	3a 81       	ldd	r19, Y+2	; 0x02
    2a30:	4b 81       	ldd	r20, Y+3	; 0x03
    2a32:	5c 81       	ldd	r21, Y+4	; 0x04
    2a34:	bc 01       	movw	r22, r24
    2a36:	cd 01       	movw	r24, r26
    2a38:	0e 94 96 21 	call	0x432c	; 0x432c <__addsf3>
    2a3c:	dc 01       	movw	r26, r24
    2a3e:	cb 01       	movw	r24, r22
    2a40:	9c 01       	movw	r18, r24
    2a42:	ad 01       	movw	r20, r26
    2a44:	c7 01       	movw	r24, r14
    2a46:	b6 01       	movw	r22, r12
    2a48:	0e 94 02 24 	call	0x4804	; 0x4804 <__mulsf3>
    2a4c:	dc 01       	movw	r26, r24
    2a4e:	cb 01       	movw	r24, r22
    2a50:	89 87       	std	Y+9, r24	; 0x09
    2a52:	9a 87       	std	Y+10, r25	; 0x0a
    2a54:	ab 87       	std	Y+11, r26	; 0x0b
    2a56:	bc 87       	std	Y+12, r27	; 0x0c
	// derivative term
	float d_term = state->kd * (process_value - state->old_process_value);
    2a58:	8d 89       	ldd	r24, Y+21	; 0x15
    2a5a:	9e 89       	ldd	r25, Y+22	; 0x16
    2a5c:	fc 01       	movw	r30, r24
    2a5e:	c0 88       	ldd	r12, Z+16	; 0x10
    2a60:	d1 88       	ldd	r13, Z+17	; 0x11
    2a62:	e2 88       	ldd	r14, Z+18	; 0x12
    2a64:	f3 88       	ldd	r15, Z+19	; 0x13
    2a66:	8d 89       	ldd	r24, Y+21	; 0x15
    2a68:	9e 89       	ldd	r25, Y+22	; 0x16
    2a6a:	fc 01       	movw	r30, r24
    2a6c:	80 81       	ld	r24, Z
    2a6e:	91 81       	ldd	r25, Z+1	; 0x01
    2a70:	a2 81       	ldd	r26, Z+2	; 0x02
    2a72:	b3 81       	ldd	r27, Z+3	; 0x03
    2a74:	9c 01       	movw	r18, r24
    2a76:	ad 01       	movw	r20, r26
    2a78:	6f 89       	ldd	r22, Y+23	; 0x17
    2a7a:	78 8d       	ldd	r23, Y+24	; 0x18
    2a7c:	89 8d       	ldd	r24, Y+25	; 0x19
    2a7e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2a80:	0e 94 95 21 	call	0x432a	; 0x432a <__subsf3>
    2a84:	dc 01       	movw	r26, r24
    2a86:	cb 01       	movw	r24, r22
    2a88:	9c 01       	movw	r18, r24
    2a8a:	ad 01       	movw	r20, r26
    2a8c:	c7 01       	movw	r24, r14
    2a8e:	b6 01       	movw	r22, r12
    2a90:	0e 94 02 24 	call	0x4804	; 0x4804 <__mulsf3>
    2a94:	dc 01       	movw	r26, r24
    2a96:	cb 01       	movw	r24, r22
    2a98:	8d 87       	std	Y+13, r24	; 0x0d
    2a9a:	9e 87       	std	Y+14, r25	; 0x0e
    2a9c:	af 87       	std	Y+15, r26	; 0x0f
    2a9e:	b8 8b       	std	Y+16, r27	; 0x10
	state->old_process_value = process_value;
    2aa0:	2d 89       	ldd	r18, Y+21	; 0x15
    2aa2:	3e 89       	ldd	r19, Y+22	; 0x16
    2aa4:	8f 89       	ldd	r24, Y+23	; 0x17
    2aa6:	98 8d       	ldd	r25, Y+24	; 0x18
    2aa8:	a9 8d       	ldd	r26, Y+25	; 0x19
    2aaa:	ba 8d       	ldd	r27, Y+26	; 0x1a
    2aac:	f9 01       	movw	r30, r18
    2aae:	80 83       	st	Z, r24
    2ab0:	91 83       	std	Z+1, r25	; 0x01
    2ab2:	a2 83       	std	Z+2, r26	; 0x02
    2ab4:	b3 83       	std	Z+3, r27	; 0x03
	
	// clamping the integrator
	float control = p_term + i_term + d_term;
    2ab6:	29 85       	ldd	r18, Y+9	; 0x09
    2ab8:	3a 85       	ldd	r19, Y+10	; 0x0a
    2aba:	4b 85       	ldd	r20, Y+11	; 0x0b
    2abc:	5c 85       	ldd	r21, Y+12	; 0x0c
    2abe:	6d 81       	ldd	r22, Y+5	; 0x05
    2ac0:	7e 81       	ldd	r23, Y+6	; 0x06
    2ac2:	8f 81       	ldd	r24, Y+7	; 0x07
    2ac4:	98 85       	ldd	r25, Y+8	; 0x08
    2ac6:	0e 94 96 21 	call	0x432c	; 0x432c <__addsf3>
    2aca:	dc 01       	movw	r26, r24
    2acc:	cb 01       	movw	r24, r22
    2ace:	2d 85       	ldd	r18, Y+13	; 0x0d
    2ad0:	3e 85       	ldd	r19, Y+14	; 0x0e
    2ad2:	4f 85       	ldd	r20, Y+15	; 0x0f
    2ad4:	58 89       	ldd	r21, Y+16	; 0x10
    2ad6:	bc 01       	movw	r22, r24
    2ad8:	cd 01       	movw	r24, r26
    2ada:	0e 94 96 21 	call	0x432c	; 0x432c <__addsf3>
    2ade:	dc 01       	movw	r26, r24
    2ae0:	cb 01       	movw	r24, r22
    2ae2:	89 8b       	std	Y+17, r24	; 0x11
    2ae4:	9a 8b       	std	Y+18, r25	; 0x12
    2ae6:	ab 8b       	std	Y+19, r26	; 0x13
    2ae8:	bc 8b       	std	Y+20, r27	; 0x14
	if(control >= state->control_min && control <= state->control_max)
    2aea:	8d 89       	ldd	r24, Y+21	; 0x15
    2aec:	9e 89       	ldd	r25, Y+22	; 0x16
    2aee:	fc 01       	movw	r30, r24
    2af0:	84 89       	ldd	r24, Z+20	; 0x14
    2af2:	95 89       	ldd	r25, Z+21	; 0x15
    2af4:	a6 89       	ldd	r26, Z+22	; 0x16
    2af6:	b7 89       	ldd	r27, Z+23	; 0x17
    2af8:	29 89       	ldd	r18, Y+17	; 0x11
    2afa:	3a 89       	ldd	r19, Y+18	; 0x12
    2afc:	4b 89       	ldd	r20, Y+19	; 0x13
    2afe:	5c 89       	ldd	r21, Y+20	; 0x14
    2b00:	bc 01       	movw	r22, r24
    2b02:	cd 01       	movw	r24, r26
    2b04:	0e 94 02 22 	call	0x4404	; 0x4404 <__cmpsf2>
    2b08:	18 16       	cp	r1, r24
    2b0a:	74 f1       	brlt	.+92     	; 0x2b68 <pid_step+0x1de>
    2b0c:	8d 89       	ldd	r24, Y+21	; 0x15
    2b0e:	9e 89       	ldd	r25, Y+22	; 0x16
    2b10:	fc 01       	movw	r30, r24
    2b12:	80 8d       	ldd	r24, Z+24	; 0x18
    2b14:	91 8d       	ldd	r25, Z+25	; 0x19
    2b16:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2b18:	b3 8d       	ldd	r27, Z+27	; 0x1b
    2b1a:	29 89       	ldd	r18, Y+17	; 0x11
    2b1c:	3a 89       	ldd	r19, Y+18	; 0x12
    2b1e:	4b 89       	ldd	r20, Y+19	; 0x13
    2b20:	5c 89       	ldd	r21, Y+20	; 0x14
    2b22:	bc 01       	movw	r22, r24
    2b24:	cd 01       	movw	r24, r26
    2b26:	0e 94 ad 23 	call	0x475a	; 0x475a <__gesf2>
    2b2a:	88 23       	and	r24, r24
    2b2c:	ec f0       	brlt	.+58     	; 0x2b68 <pid_step+0x1de>
	{
		state->sum_error += error;
    2b2e:	8d 89       	ldd	r24, Y+21	; 0x15
    2b30:	9e 89       	ldd	r25, Y+22	; 0x16
    2b32:	fc 01       	movw	r30, r24
    2b34:	84 81       	ldd	r24, Z+4	; 0x04
    2b36:	95 81       	ldd	r25, Z+5	; 0x05
    2b38:	a6 81       	ldd	r26, Z+6	; 0x06
    2b3a:	b7 81       	ldd	r27, Z+7	; 0x07
    2b3c:	29 81       	ldd	r18, Y+1	; 0x01
    2b3e:	3a 81       	ldd	r19, Y+2	; 0x02
    2b40:	4b 81       	ldd	r20, Y+3	; 0x03
    2b42:	5c 81       	ldd	r21, Y+4	; 0x04
    2b44:	bc 01       	movw	r22, r24
    2b46:	cd 01       	movw	r24, r26
    2b48:	0e 94 96 21 	call	0x432c	; 0x432c <__addsf3>
    2b4c:	dc 01       	movw	r26, r24
    2b4e:	cb 01       	movw	r24, r22
    2b50:	2d 89       	ldd	r18, Y+21	; 0x15
    2b52:	3e 89       	ldd	r19, Y+22	; 0x16
    2b54:	f9 01       	movw	r30, r18
    2b56:	84 83       	std	Z+4, r24	; 0x04
    2b58:	95 83       	std	Z+5, r25	; 0x05
    2b5a:	a6 83       	std	Z+6, r26	; 0x06
    2b5c:	b7 83       	std	Z+7, r27	; 0x07
		return control;
    2b5e:	89 89       	ldd	r24, Y+17	; 0x11
    2b60:	9a 89       	ldd	r25, Y+18	; 0x12
    2b62:	ab 89       	ldd	r26, Y+19	; 0x13
    2b64:	bc 89       	ldd	r27, Y+20	; 0x14
    2b66:	46 c0       	rjmp	.+140    	; 0x2bf4 <pid_step+0x26a>
	}
	else
	{
		return fmax(fmin(p_term + state->ki * state->sum_error + d_term, state->control_max), state->control_min);
    2b68:	8d 89       	ldd	r24, Y+21	; 0x15
    2b6a:	9e 89       	ldd	r25, Y+22	; 0x16
    2b6c:	fc 01       	movw	r30, r24
    2b6e:	c4 88       	ldd	r12, Z+20	; 0x14
    2b70:	d5 88       	ldd	r13, Z+21	; 0x15
    2b72:	e6 88       	ldd	r14, Z+22	; 0x16
    2b74:	f7 88       	ldd	r15, Z+23	; 0x17
    2b76:	8d 89       	ldd	r24, Y+21	; 0x15
    2b78:	9e 89       	ldd	r25, Y+22	; 0x16
    2b7a:	fc 01       	movw	r30, r24
    2b7c:	80 8c       	ldd	r8, Z+24	; 0x18
    2b7e:	91 8c       	ldd	r9, Z+25	; 0x19
    2b80:	a2 8c       	ldd	r10, Z+26	; 0x1a
    2b82:	b3 8c       	ldd	r11, Z+27	; 0x1b
    2b84:	8d 89       	ldd	r24, Y+21	; 0x15
    2b86:	9e 89       	ldd	r25, Y+22	; 0x16
    2b88:	fc 01       	movw	r30, r24
    2b8a:	84 85       	ldd	r24, Z+12	; 0x0c
    2b8c:	95 85       	ldd	r25, Z+13	; 0x0d
    2b8e:	a6 85       	ldd	r26, Z+14	; 0x0e
    2b90:	b7 85       	ldd	r27, Z+15	; 0x0f
    2b92:	2d 89       	ldd	r18, Y+21	; 0x15
    2b94:	3e 89       	ldd	r19, Y+22	; 0x16
    2b96:	f9 01       	movw	r30, r18
    2b98:	24 81       	ldd	r18, Z+4	; 0x04
    2b9a:	35 81       	ldd	r19, Z+5	; 0x05
    2b9c:	46 81       	ldd	r20, Z+6	; 0x06
    2b9e:	57 81       	ldd	r21, Z+7	; 0x07
    2ba0:	bc 01       	movw	r22, r24
    2ba2:	cd 01       	movw	r24, r26
    2ba4:	0e 94 02 24 	call	0x4804	; 0x4804 <__mulsf3>
    2ba8:	dc 01       	movw	r26, r24
    2baa:	cb 01       	movw	r24, r22
    2bac:	2d 81       	ldd	r18, Y+5	; 0x05
    2bae:	3e 81       	ldd	r19, Y+6	; 0x06
    2bb0:	4f 81       	ldd	r20, Y+7	; 0x07
    2bb2:	58 85       	ldd	r21, Y+8	; 0x08
    2bb4:	bc 01       	movw	r22, r24
    2bb6:	cd 01       	movw	r24, r26
    2bb8:	0e 94 96 21 	call	0x432c	; 0x432c <__addsf3>
    2bbc:	dc 01       	movw	r26, r24
    2bbe:	cb 01       	movw	r24, r22
    2bc0:	2d 85       	ldd	r18, Y+13	; 0x0d
    2bc2:	3e 85       	ldd	r19, Y+14	; 0x0e
    2bc4:	4f 85       	ldd	r20, Y+15	; 0x0f
    2bc6:	58 89       	ldd	r21, Y+16	; 0x10
    2bc8:	bc 01       	movw	r22, r24
    2bca:	cd 01       	movw	r24, r26
    2bcc:	0e 94 96 21 	call	0x432c	; 0x432c <__addsf3>
    2bd0:	dc 01       	movw	r26, r24
    2bd2:	cb 01       	movw	r24, r22
    2bd4:	a5 01       	movw	r20, r10
    2bd6:	94 01       	movw	r18, r8
    2bd8:	bc 01       	movw	r22, r24
    2bda:	cd 01       	movw	r24, r26
    2bdc:	0e 94 95 13 	call	0x272a	; 0x272a <fmin>
    2be0:	dc 01       	movw	r26, r24
    2be2:	cb 01       	movw	r24, r22
    2be4:	a7 01       	movw	r20, r14
    2be6:	96 01       	movw	r18, r12
    2be8:	bc 01       	movw	r22, r24
    2bea:	cd 01       	movw	r24, r26
    2bec:	0e 94 63 13 	call	0x26c6	; 0x26c6 <fmax>
    2bf0:	dc 01       	movw	r26, r24
    2bf2:	cb 01       	movw	r24, r22
	}	
}
    2bf4:	bc 01       	movw	r22, r24
    2bf6:	cd 01       	movw	r24, r26
    2bf8:	6e 96       	adiw	r28, 0x1e	; 30
    2bfa:	0f b6       	in	r0, 0x3f	; 63
    2bfc:	f8 94       	cli
    2bfe:	de bf       	out	0x3e, r29	; 62
    2c00:	0f be       	out	0x3f, r0	; 63
    2c02:	cd bf       	out	0x3d, r28	; 61
    2c04:	df 91       	pop	r29
    2c06:	cf 91       	pop	r28
    2c08:	1f 91       	pop	r17
    2c0a:	0f 91       	pop	r16
    2c0c:	ff 90       	pop	r15
    2c0e:	ef 90       	pop	r14
    2c10:	df 90       	pop	r13
    2c12:	cf 90       	pop	r12
    2c14:	bf 90       	pop	r11
    2c16:	af 90       	pop	r10
    2c18:	9f 90       	pop	r9
    2c1a:	8f 90       	pop	r8
    2c1c:	08 95       	ret

00002c1e <pid_reset>:

void pid_reset(pid_state_t* state)
{
    2c1e:	cf 93       	push	r28
    2c20:	df 93       	push	r29
    2c22:	00 d0       	rcall	.+0      	; 0x2c24 <pid_reset+0x6>
    2c24:	cd b7       	in	r28, 0x3d	; 61
    2c26:	de b7       	in	r29, 0x3e	; 62
    2c28:	9a 83       	std	Y+2, r25	; 0x02
    2c2a:	89 83       	std	Y+1, r24	; 0x01
	state->old_process_value = 0.0;
    2c2c:	89 81       	ldd	r24, Y+1	; 0x01
    2c2e:	9a 81       	ldd	r25, Y+2	; 0x02
    2c30:	fc 01       	movw	r30, r24
    2c32:	10 82       	st	Z, r1
    2c34:	11 82       	std	Z+1, r1	; 0x01
    2c36:	12 82       	std	Z+2, r1	; 0x02
    2c38:	13 82       	std	Z+3, r1	; 0x03
	state->sum_error = 0.0;
    2c3a:	89 81       	ldd	r24, Y+1	; 0x01
    2c3c:	9a 81       	ldd	r25, Y+2	; 0x02
    2c3e:	fc 01       	movw	r30, r24
    2c40:	14 82       	std	Z+4, r1	; 0x04
    2c42:	15 82       	std	Z+5, r1	; 0x05
    2c44:	16 82       	std	Z+6, r1	; 0x06
    2c46:	17 82       	std	Z+7, r1	; 0x07
    2c48:	00 00       	nop
    2c4a:	0f 90       	pop	r0
    2c4c:	0f 90       	pop	r0
    2c4e:	df 91       	pop	r29
    2c50:	cf 91       	pop	r28
    2c52:	08 95       	ret

00002c54 <__iCliRetVal>:
    sei();
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    2c54:	cf 93       	push	r28
    2c56:	df 93       	push	r29
    2c58:	cd b7       	in	r28, 0x3d	; 61
    2c5a:	de b7       	in	r29, 0x3e	; 62
    cli();
    2c5c:	f8 94       	cli
    return 1;
    2c5e:	81 e0       	ldi	r24, 0x01	; 1
}
    2c60:	df 91       	pop	r29
    2c62:	cf 91       	pop	r28
    2c64:	08 95       	ret

00002c66 <__iRestore>:
    __asm__ volatile ("" ::: "memory");
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    2c66:	cf 93       	push	r28
    2c68:	df 93       	push	r29
    2c6a:	00 d0       	rcall	.+0      	; 0x2c6c <__iRestore+0x6>
    2c6c:	cd b7       	in	r28, 0x3d	; 61
    2c6e:	de b7       	in	r29, 0x3e	; 62
    2c70:	9a 83       	std	Y+2, r25	; 0x02
    2c72:	89 83       	std	Y+1, r24	; 0x01
    SREG = *__s;
    2c74:	8f e5       	ldi	r24, 0x5F	; 95
    2c76:	90 e0       	ldi	r25, 0x00	; 0
    2c78:	29 81       	ldd	r18, Y+1	; 0x01
    2c7a:	3a 81       	ldd	r19, Y+2	; 0x02
    2c7c:	f9 01       	movw	r30, r18
    2c7e:	20 81       	ld	r18, Z
    2c80:	fc 01       	movw	r30, r24
    2c82:	20 83       	st	Z, r18
    __asm__ volatile ("" ::: "memory");
}
    2c84:	00 00       	nop
    2c86:	0f 90       	pop	r0
    2c88:	0f 90       	pop	r0
    2c8a:	df 91       	pop	r29
    2c8c:	cf 91       	pop	r28
    2c8e:	08 95       	ret

00002c90 <rotenc_init>:
static volatile int16_t rotenc_delta;

// ------------------------------------ PUBLIC -------------------------------------------

void rotenc_init()
{
    2c90:	cf 93       	push	r28
    2c92:	df 93       	push	r29
    2c94:	cd b7       	in	r28, 0x3d	; 61
    2c96:	de b7       	in	r29, 0x3e	; 62
	// set data dir
	ROT_ENC_DDR &= ~ROT_ENC_PIN_MASK;
    2c98:	84 e2       	ldi	r24, 0x24	; 36
    2c9a:	90 e0       	ldi	r25, 0x00	; 0
    2c9c:	24 e2       	ldi	r18, 0x24	; 36
    2c9e:	30 e0       	ldi	r19, 0x00	; 0
    2ca0:	f9 01       	movw	r30, r18
    2ca2:	20 81       	ld	r18, Z
    2ca4:	23 7f       	andi	r18, 0xF3	; 243
    2ca6:	fc 01       	movw	r30, r24
    2ca8:	20 83       	st	Z, r18
	// enable internal pullups
	ROT_ENC_PORT |= ROT_ENC_PIN_MASK;
    2caa:	85 e2       	ldi	r24, 0x25	; 37
    2cac:	90 e0       	ldi	r25, 0x00	; 0
    2cae:	25 e2       	ldi	r18, 0x25	; 37
    2cb0:	30 e0       	ldi	r19, 0x00	; 0
    2cb2:	f9 01       	movw	r30, r18
    2cb4:	20 81       	ld	r18, Z
    2cb6:	2c 60       	ori	r18, 0x0C	; 12
    2cb8:	fc 01       	movw	r30, r24
    2cba:	20 83       	st	Z, r18
	
	rotenc_delta = 0;
    2cbc:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <rotenc_delta+0x1>
    2cc0:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <rotenc_delta>
	if(ROT_ENC_READ_A) rotenc_last = 2;
    2cc4:	83 e2       	ldi	r24, 0x23	; 35
    2cc6:	90 e0       	ldi	r25, 0x00	; 0
    2cc8:	fc 01       	movw	r30, r24
    2cca:	80 81       	ld	r24, Z
    2ccc:	88 2f       	mov	r24, r24
    2cce:	90 e0       	ldi	r25, 0x00	; 0
    2cd0:	84 70       	andi	r24, 0x04	; 4
    2cd2:	99 27       	eor	r25, r25
    2cd4:	89 2b       	or	r24, r25
    2cd6:	19 f4       	brne	.+6      	; 0x2cde <rotenc_init+0x4e>
    2cd8:	82 e0       	ldi	r24, 0x02	; 2
    2cda:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	if(ROT_ENC_READ_B) rotenc_last |= 1;
    2cde:	83 e2       	ldi	r24, 0x23	; 35
    2ce0:	90 e0       	ldi	r25, 0x00	; 0
    2ce2:	fc 01       	movw	r30, r24
    2ce4:	80 81       	ld	r24, Z
    2ce6:	88 2f       	mov	r24, r24
    2ce8:	90 e0       	ldi	r25, 0x00	; 0
    2cea:	88 70       	andi	r24, 0x08	; 8
    2cec:	99 27       	eor	r25, r25
    2cee:	89 2b       	or	r24, r25
    2cf0:	29 f4       	brne	.+10     	; 0x2cfc <rotenc_init+0x6c>
    2cf2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
    2cf6:	81 60       	ori	r24, 0x01	; 1
    2cf8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
}
    2cfc:	00 00       	nop
    2cfe:	df 91       	pop	r29
    2d00:	cf 91       	pop	r28
    2d02:	08 95       	ret

00002d04 <rotenc_shutdown>:

void rotenc_shutdown()
{
    2d04:	cf 93       	push	r28
    2d06:	df 93       	push	r29
    2d08:	cd b7       	in	r28, 0x3d	; 61
    2d0a:	de b7       	in	r29, 0x3e	; 62
	rotenc_delta = 0;
    2d0c:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <rotenc_delta+0x1>
    2d10:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <rotenc_delta>
	// disable internal pullups
	ROT_ENC_PORT &= ~ROT_ENC_PIN_MASK;
    2d14:	85 e2       	ldi	r24, 0x25	; 37
    2d16:	90 e0       	ldi	r25, 0x00	; 0
    2d18:	25 e2       	ldi	r18, 0x25	; 37
    2d1a:	30 e0       	ldi	r19, 0x00	; 0
    2d1c:	f9 01       	movw	r30, r18
    2d1e:	20 81       	ld	r18, Z
    2d20:	23 7f       	andi	r18, 0xF3	; 243
    2d22:	fc 01       	movw	r30, r24
    2d24:	20 83       	st	Z, r18
}
    2d26:	00 00       	nop
    2d28:	df 91       	pop	r29
    2d2a:	cf 91       	pop	r28
    2d2c:	08 95       	ret

00002d2e <rotenc_get_inc>:

int16_t rotenc_get_inc()
{
    2d2e:	cf 93       	push	r28
    2d30:	df 93       	push	r29
    2d32:	00 d0       	rcall	.+0      	; 0x2d34 <rotenc_get_inc+0x6>
    2d34:	00 d0       	rcall	.+0      	; 0x2d36 <rotenc_get_inc+0x8>
    2d36:	cd b7       	in	r28, 0x3d	; 61
    2d38:	de b7       	in	r29, 0x3e	; 62
	int16_t res;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    2d3a:	8f e5       	ldi	r24, 0x5F	; 95
    2d3c:	90 e0       	ldi	r25, 0x00	; 0
    2d3e:	fc 01       	movw	r30, r24
    2d40:	80 81       	ld	r24, Z
    2d42:	8c 83       	std	Y+4, r24	; 0x04
    2d44:	0e 94 2a 16 	call	0x2c54	; 0x2c54 <__iCliRetVal>
    2d48:	8b 83       	std	Y+3, r24	; 0x03
    2d4a:	0b c0       	rjmp	.+22     	; 0x2d62 <rotenc_get_inc+0x34>
	{
		res = rotenc_delta;
    2d4c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <rotenc_delta>
    2d50:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <rotenc_delta+0x1>
    2d54:	9a 83       	std	Y+2, r25	; 0x02
    2d56:	89 83       	std	Y+1, r24	; 0x01
		rotenc_delta = 0;
    2d58:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <rotenc_delta+0x1>
    2d5c:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <rotenc_delta>
}

int16_t rotenc_get_inc()
{
	int16_t res;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    2d60:	1b 82       	std	Y+3, r1	; 0x03
    2d62:	8b 81       	ldd	r24, Y+3	; 0x03
    2d64:	88 23       	and	r24, r24
    2d66:	91 f7       	brne	.-28     	; 0x2d4c <rotenc_get_inc+0x1e>
    2d68:	ce 01       	movw	r24, r28
    2d6a:	04 96       	adiw	r24, 0x04	; 4
    2d6c:	0e 94 33 16 	call	0x2c66	; 0x2c66 <__iRestore>
	{
		res = rotenc_delta;
		rotenc_delta = 0;
	}
	return res;
    2d70:	89 81       	ldd	r24, Y+1	; 0x01
    2d72:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2d74:	0f 90       	pop	r0
    2d76:	0f 90       	pop	r0
    2d78:	0f 90       	pop	r0
    2d7a:	0f 90       	pop	r0
    2d7c:	df 91       	pop	r29
    2d7e:	cf 91       	pop	r28
    2d80:	08 95       	ret

00002d82 <rotenc_update>:

void rotenc_update()
{
    2d82:	cf 93       	push	r28
    2d84:	df 93       	push	r29
    2d86:	00 d0       	rcall	.+0      	; 0x2d88 <rotenc_update+0x6>
    2d88:	00 d0       	rcall	.+0      	; 0x2d8a <rotenc_update+0x8>
    2d8a:	cd b7       	in	r28, 0x3d	; 61
    2d8c:	de b7       	in	r29, 0x3e	; 62
	// combine old and new state into one byte and use as address for the LUT.
	// shift old state
	rotenc_last = (rotenc_last << 2) & 0x0F;
    2d8e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
    2d92:	88 2f       	mov	r24, r24
    2d94:	90 e0       	ldi	r25, 0x00	; 0
    2d96:	88 0f       	add	r24, r24
    2d98:	99 1f       	adc	r25, r25
    2d9a:	88 0f       	add	r24, r24
    2d9c:	99 1f       	adc	r25, r25
    2d9e:	8f 70       	andi	r24, 0x0F	; 15
    2da0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	// write new state
	if(ROT_ENC_READ_A) rotenc_last |= 2;
    2da4:	83 e2       	ldi	r24, 0x23	; 35
    2da6:	90 e0       	ldi	r25, 0x00	; 0
    2da8:	fc 01       	movw	r30, r24
    2daa:	80 81       	ld	r24, Z
    2dac:	88 2f       	mov	r24, r24
    2dae:	90 e0       	ldi	r25, 0x00	; 0
    2db0:	84 70       	andi	r24, 0x04	; 4
    2db2:	99 27       	eor	r25, r25
    2db4:	89 2b       	or	r24, r25
    2db6:	29 f4       	brne	.+10     	; 0x2dc2 <rotenc_update+0x40>
    2db8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
    2dbc:	82 60       	ori	r24, 0x02	; 2
    2dbe:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	if(ROT_ENC_READ_B) rotenc_last |= 1;
    2dc2:	83 e2       	ldi	r24, 0x23	; 35
    2dc4:	90 e0       	ldi	r25, 0x00	; 0
    2dc6:	fc 01       	movw	r30, r24
    2dc8:	80 81       	ld	r24, Z
    2dca:	88 2f       	mov	r24, r24
    2dcc:	90 e0       	ldi	r25, 0x00	; 0
    2dce:	88 70       	andi	r24, 0x08	; 8
    2dd0:	99 27       	eor	r25, r25
    2dd2:	89 2b       	or	r24, r25
    2dd4:	29 f4       	brne	.+10     	; 0x2de0 <rotenc_update+0x5e>
    2dd6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
    2dda:	81 60       	ori	r24, 0x01	; 1
    2ddc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	
	// retrieve increment value from LUT
	rotenc_delta += (int16_t)pgm_read_word(&rotenc_decoder_lut[rotenc_last]) * ROT_ENC_SIGN_MUL;
    2de0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
    2de4:	88 2f       	mov	r24, r24
    2de6:	90 e0       	ldi	r25, 0x00	; 0
    2de8:	88 0f       	add	r24, r24
    2dea:	99 1f       	adc	r25, r25
    2dec:	86 51       	subi	r24, 0x16	; 22
    2dee:	9f 4f       	sbci	r25, 0xFF	; 255
    2df0:	9a 83       	std	Y+2, r25	; 0x02
    2df2:	89 83       	std	Y+1, r24	; 0x01
    2df4:	89 81       	ldd	r24, Y+1	; 0x01
    2df6:	9a 81       	ldd	r25, Y+2	; 0x02
    2df8:	fc 01       	movw	r30, r24
    2dfa:	25 91       	lpm	r18, Z+
    2dfc:	34 91       	lpm	r19, Z
    2dfe:	cf 01       	movw	r24, r30
    2e00:	3c 83       	std	Y+4, r19	; 0x04
    2e02:	2b 83       	std	Y+3, r18	; 0x03
    2e04:	9a 83       	std	Y+2, r25	; 0x02
    2e06:	89 83       	std	Y+1, r24	; 0x01
    2e08:	8b 81       	ldd	r24, Y+3	; 0x03
    2e0a:	9c 81       	ldd	r25, Y+4	; 0x04
    2e0c:	9c 01       	movw	r18, r24
    2e0e:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <rotenc_delta>
    2e12:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <rotenc_delta+0x1>
    2e16:	82 0f       	add	r24, r18
    2e18:	93 1f       	adc	r25, r19
    2e1a:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <rotenc_delta+0x1>
    2e1e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <rotenc_delta>
	
	// clamp delta to prevent overflows
	rotenc_delta = imax16(ROT_ENC_MIN_DELTA, imin16(ROT_ENC_MAX_DELTA, rotenc_delta));
    2e22:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <rotenc_delta>
    2e26:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <rotenc_delta+0x1>
    2e2a:	bc 01       	movw	r22, r24
    2e2c:	88 ee       	ldi	r24, 0xE8	; 232
    2e2e:	93 e0       	ldi	r25, 0x03	; 3
    2e30:	0e 94 28 13 	call	0x2650	; 0x2650 <imin16>
    2e34:	bc 01       	movw	r22, r24
    2e36:	88 e1       	ldi	r24, 0x18	; 24
    2e38:	9c ef       	ldi	r25, 0xFC	; 252
    2e3a:	0e 94 fe 12 	call	0x25fc	; 0x25fc <imax16>
    2e3e:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <rotenc_delta+0x1>
    2e42:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <rotenc_delta>
}
    2e46:	00 00       	nop
    2e48:	0f 90       	pop	r0
    2e4a:	0f 90       	pop	r0
    2e4c:	0f 90       	pop	r0
    2e4e:	0f 90       	pop	r0
    2e50:	df 91       	pop	r29
    2e52:	cf 91       	pop	r28
    2e54:	08 95       	ret

00002e56 <shreg_init>:
		SH_REG_PORT |= (1 << SH_REG_SCK);
		SH_REG_DELAY
		SH_REG_PORT &= ~(1 << SH_REG_SCK);
		SH_REG_DELAY
	}
}
    2e56:	cf 93       	push	r28
    2e58:	df 93       	push	r29
    2e5a:	cd b7       	in	r28, 0x3d	; 61
    2e5c:	de b7       	in	r29, 0x3e	; 62
    2e5e:	84 e2       	ldi	r24, 0x24	; 36
    2e60:	90 e0       	ldi	r25, 0x00	; 0
    2e62:	24 e2       	ldi	r18, 0x24	; 36
    2e64:	30 e0       	ldi	r19, 0x00	; 0
    2e66:	f9 01       	movw	r30, r18
    2e68:	20 81       	ld	r18, Z
    2e6a:	20 6f       	ori	r18, 0xF0	; 240
    2e6c:	fc 01       	movw	r30, r24
    2e6e:	20 83       	st	Z, r18
    2e70:	85 e2       	ldi	r24, 0x25	; 37
    2e72:	90 e0       	ldi	r25, 0x00	; 0
    2e74:	25 e2       	ldi	r18, 0x25	; 37
    2e76:	30 e0       	ldi	r19, 0x00	; 0
    2e78:	f9 01       	movw	r30, r18
    2e7a:	20 81       	ld	r18, Z
    2e7c:	2f 71       	andi	r18, 0x1F	; 31
    2e7e:	fc 01       	movw	r30, r24
    2e80:	20 83       	st	Z, r18
    2e82:	85 e2       	ldi	r24, 0x25	; 37
    2e84:	90 e0       	ldi	r25, 0x00	; 0
    2e86:	25 e2       	ldi	r18, 0x25	; 37
    2e88:	30 e0       	ldi	r19, 0x00	; 0
    2e8a:	f9 01       	movw	r30, r18
    2e8c:	20 81       	ld	r18, Z
    2e8e:	20 61       	ori	r18, 0x10	; 16
    2e90:	fc 01       	movw	r30, r24
    2e92:	20 83       	st	Z, r18
    2e94:	0e 94 d0 17 	call	0x2fa0	; 0x2fa0 <shreg_clear>
    2e98:	0e 94 04 18 	call	0x3008	; 0x3008 <shreg_out>
    2e9c:	00 00       	nop
    2e9e:	df 91       	pop	r29
    2ea0:	cf 91       	pop	r28
    2ea2:	08 95       	ret

00002ea4 <shreg_shutdown>:
    2ea4:	cf 93       	push	r28
    2ea6:	df 93       	push	r29
    2ea8:	cd b7       	in	r28, 0x3d	; 61
    2eaa:	de b7       	in	r29, 0x3e	; 62
    2eac:	0e 94 d0 17 	call	0x2fa0	; 0x2fa0 <shreg_clear>
    2eb0:	0e 94 04 18 	call	0x3008	; 0x3008 <shreg_out>
    2eb4:	00 00       	nop
    2eb6:	df 91       	pop	r29
    2eb8:	cf 91       	pop	r28
    2eba:	08 95       	ret

00002ebc <shreg_write_bit>:
    2ebc:	cf 93       	push	r28
    2ebe:	df 93       	push	r29
    2ec0:	1f 92       	push	r1
    2ec2:	cd b7       	in	r28, 0x3d	; 61
    2ec4:	de b7       	in	r29, 0x3e	; 62
    2ec6:	89 83       	std	Y+1, r24	; 0x01
    2ec8:	85 e2       	ldi	r24, 0x25	; 37
    2eca:	90 e0       	ldi	r25, 0x00	; 0
    2ecc:	25 e2       	ldi	r18, 0x25	; 37
    2ece:	30 e0       	ldi	r19, 0x00	; 0
    2ed0:	f9 01       	movw	r30, r18
    2ed2:	20 81       	ld	r18, Z
    2ed4:	42 2f       	mov	r20, r18
    2ed6:	4f 77       	andi	r20, 0x7F	; 127
    2ed8:	29 81       	ldd	r18, Y+1	; 0x01
    2eda:	22 2f       	mov	r18, r18
    2edc:	30 e0       	ldi	r19, 0x00	; 0
    2ede:	36 95       	lsr	r19
    2ee0:	32 2f       	mov	r19, r18
    2ee2:	22 27       	eor	r18, r18
    2ee4:	37 95       	ror	r19
    2ee6:	27 95       	ror	r18
    2ee8:	24 2b       	or	r18, r20
    2eea:	fc 01       	movw	r30, r24
    2eec:	20 83       	st	Z, r18
    2eee:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <shreg_shift>
    2ef2:	00 00       	nop
    2ef4:	0f 90       	pop	r0
    2ef6:	df 91       	pop	r29
    2ef8:	cf 91       	pop	r28
    2efa:	08 95       	ret

00002efc <shreg_write_byte>:
    2efc:	cf 93       	push	r28
    2efe:	df 93       	push	r29
    2f00:	00 d0       	rcall	.+0      	; 0x2f02 <shreg_write_byte+0x6>
    2f02:	cd b7       	in	r28, 0x3d	; 61
    2f04:	de b7       	in	r29, 0x3e	; 62
    2f06:	8a 83       	std	Y+2, r24	; 0x02
    2f08:	19 82       	std	Y+1, r1	; 0x01
    2f0a:	11 c0       	rjmp	.+34     	; 0x2f2e <shreg_write_byte+0x32>
    2f0c:	8a 81       	ldd	r24, Y+2	; 0x02
    2f0e:	88 2f       	mov	r24, r24
    2f10:	90 e0       	ldi	r25, 0x00	; 0
    2f12:	29 81       	ldd	r18, Y+1	; 0x01
    2f14:	22 2f       	mov	r18, r18
    2f16:	30 e0       	ldi	r19, 0x00	; 0
    2f18:	02 c0       	rjmp	.+4      	; 0x2f1e <shreg_write_byte+0x22>
    2f1a:	95 95       	asr	r25
    2f1c:	87 95       	ror	r24
    2f1e:	2a 95       	dec	r18
    2f20:	e2 f7       	brpl	.-8      	; 0x2f1a <shreg_write_byte+0x1e>
    2f22:	81 70       	andi	r24, 0x01	; 1
    2f24:	0e 94 5e 17 	call	0x2ebc	; 0x2ebc <shreg_write_bit>
    2f28:	89 81       	ldd	r24, Y+1	; 0x01
    2f2a:	8f 5f       	subi	r24, 0xFF	; 255
    2f2c:	89 83       	std	Y+1, r24	; 0x01
    2f2e:	89 81       	ldd	r24, Y+1	; 0x01
    2f30:	88 30       	cpi	r24, 0x08	; 8
    2f32:	60 f3       	brcs	.-40     	; 0x2f0c <shreg_write_byte+0x10>
    2f34:	00 00       	nop
    2f36:	0f 90       	pop	r0
    2f38:	0f 90       	pop	r0
    2f3a:	df 91       	pop	r29
    2f3c:	cf 91       	pop	r28
    2f3e:	08 95       	ret

00002f40 <shreg_write_bytes>:
    2f40:	cf 93       	push	r28
    2f42:	df 93       	push	r29
    2f44:	00 d0       	rcall	.+0      	; 0x2f46 <shreg_write_bytes+0x6>
    2f46:	00 d0       	rcall	.+0      	; 0x2f48 <shreg_write_bytes+0x8>
    2f48:	cd b7       	in	r28, 0x3d	; 61
    2f4a:	de b7       	in	r29, 0x3e	; 62
    2f4c:	9b 83       	std	Y+3, r25	; 0x03
    2f4e:	8a 83       	std	Y+2, r24	; 0x02
    2f50:	6c 83       	std	Y+4, r22	; 0x04
    2f52:	19 82       	std	Y+1, r1	; 0x01
    2f54:	19 c0       	rjmp	.+50     	; 0x2f88 <shreg_write_bytes+0x48>
    2f56:	8c 81       	ldd	r24, Y+4	; 0x04
    2f58:	88 2f       	mov	r24, r24
    2f5a:	90 e0       	ldi	r25, 0x00	; 0
    2f5c:	9c 01       	movw	r18, r24
    2f5e:	21 50       	subi	r18, 0x01	; 1
    2f60:	31 09       	sbc	r19, r1
    2f62:	89 81       	ldd	r24, Y+1	; 0x01
    2f64:	88 2f       	mov	r24, r24
    2f66:	90 e0       	ldi	r25, 0x00	; 0
    2f68:	a9 01       	movw	r20, r18
    2f6a:	48 1b       	sub	r20, r24
    2f6c:	59 0b       	sbc	r21, r25
    2f6e:	ca 01       	movw	r24, r20
    2f70:	9c 01       	movw	r18, r24
    2f72:	8a 81       	ldd	r24, Y+2	; 0x02
    2f74:	9b 81       	ldd	r25, Y+3	; 0x03
    2f76:	82 0f       	add	r24, r18
    2f78:	93 1f       	adc	r25, r19
    2f7a:	fc 01       	movw	r30, r24
    2f7c:	80 81       	ld	r24, Z
    2f7e:	0e 94 7e 17 	call	0x2efc	; 0x2efc <shreg_write_byte>
    2f82:	89 81       	ldd	r24, Y+1	; 0x01
    2f84:	8f 5f       	subi	r24, 0xFF	; 255
    2f86:	89 83       	std	Y+1, r24	; 0x01
    2f88:	99 81       	ldd	r25, Y+1	; 0x01
    2f8a:	8c 81       	ldd	r24, Y+4	; 0x04
    2f8c:	98 17       	cp	r25, r24
    2f8e:	18 f3       	brcs	.-58     	; 0x2f56 <shreg_write_bytes+0x16>
    2f90:	00 00       	nop
    2f92:	0f 90       	pop	r0
    2f94:	0f 90       	pop	r0
    2f96:	0f 90       	pop	r0
    2f98:	0f 90       	pop	r0
    2f9a:	df 91       	pop	r29
    2f9c:	cf 91       	pop	r28
    2f9e:	08 95       	ret

00002fa0 <shreg_clear>:
    2fa0:	cf 93       	push	r28
    2fa2:	df 93       	push	r29
    2fa4:	cd b7       	in	r28, 0x3d	; 61
    2fa6:	de b7       	in	r29, 0x3e	; 62
    2fa8:	85 e2       	ldi	r24, 0x25	; 37
    2faa:	90 e0       	ldi	r25, 0x00	; 0
    2fac:	25 e2       	ldi	r18, 0x25	; 37
    2fae:	30 e0       	ldi	r19, 0x00	; 0
    2fb0:	f9 01       	movw	r30, r18
    2fb2:	20 81       	ld	r18, Z
    2fb4:	2f 7e       	andi	r18, 0xEF	; 239
    2fb6:	fc 01       	movw	r30, r24
    2fb8:	20 83       	st	Z, r18
    2fba:	85 e2       	ldi	r24, 0x25	; 37
    2fbc:	90 e0       	ldi	r25, 0x00	; 0
    2fbe:	25 e2       	ldi	r18, 0x25	; 37
    2fc0:	30 e0       	ldi	r19, 0x00	; 0
    2fc2:	f9 01       	movw	r30, r18
    2fc4:	20 81       	ld	r18, Z
    2fc6:	20 61       	ori	r18, 0x10	; 16
    2fc8:	fc 01       	movw	r30, r24
    2fca:	20 83       	st	Z, r18
    2fcc:	00 00       	nop
    2fce:	df 91       	pop	r29
    2fd0:	cf 91       	pop	r28
    2fd2:	08 95       	ret

00002fd4 <shreg_shift>:
    2fd4:	cf 93       	push	r28
    2fd6:	df 93       	push	r29
    2fd8:	cd b7       	in	r28, 0x3d	; 61
    2fda:	de b7       	in	r29, 0x3e	; 62
    2fdc:	85 e2       	ldi	r24, 0x25	; 37
    2fde:	90 e0       	ldi	r25, 0x00	; 0
    2fe0:	25 e2       	ldi	r18, 0x25	; 37
    2fe2:	30 e0       	ldi	r19, 0x00	; 0
    2fe4:	f9 01       	movw	r30, r18
    2fe6:	20 81       	ld	r18, Z
    2fe8:	20 62       	ori	r18, 0x20	; 32
    2fea:	fc 01       	movw	r30, r24
    2fec:	20 83       	st	Z, r18
    2fee:	85 e2       	ldi	r24, 0x25	; 37
    2ff0:	90 e0       	ldi	r25, 0x00	; 0
    2ff2:	25 e2       	ldi	r18, 0x25	; 37
    2ff4:	30 e0       	ldi	r19, 0x00	; 0
    2ff6:	f9 01       	movw	r30, r18
    2ff8:	20 81       	ld	r18, Z
    2ffa:	2f 7d       	andi	r18, 0xDF	; 223
    2ffc:	fc 01       	movw	r30, r24
    2ffe:	20 83       	st	Z, r18
    3000:	00 00       	nop
    3002:	df 91       	pop	r29
    3004:	cf 91       	pop	r28
    3006:	08 95       	ret

00003008 <shreg_out>:

void shreg_out()
{
    3008:	cf 93       	push	r28
    300a:	df 93       	push	r29
    300c:	cd b7       	in	r28, 0x3d	; 61
    300e:	de b7       	in	r29, 0x3e	; 62
	SH_REG_PORT |= (1 << SH_REG_RCK);
    3010:	85 e2       	ldi	r24, 0x25	; 37
    3012:	90 e0       	ldi	r25, 0x00	; 0
    3014:	25 e2       	ldi	r18, 0x25	; 37
    3016:	30 e0       	ldi	r19, 0x00	; 0
    3018:	f9 01       	movw	r30, r18
    301a:	20 81       	ld	r18, Z
    301c:	20 64       	ori	r18, 0x40	; 64
    301e:	fc 01       	movw	r30, r24
    3020:	20 83       	st	Z, r18
	SH_REG_DELAY
	SH_REG_PORT &= ~(1 << SH_REG_RCK);
    3022:	85 e2       	ldi	r24, 0x25	; 37
    3024:	90 e0       	ldi	r25, 0x00	; 0
    3026:	25 e2       	ldi	r18, 0x25	; 37
    3028:	30 e0       	ldi	r19, 0x00	; 0
    302a:	f9 01       	movw	r30, r18
    302c:	20 81       	ld	r18, Z
    302e:	2f 7b       	andi	r18, 0xBF	; 191
    3030:	fc 01       	movw	r30, r24
    3032:	20 83       	st	Z, r18
	SH_REG_DELAY
    3034:	00 00       	nop
    3036:	df 91       	pop	r29
    3038:	cf 91       	pop	r28
    303a:	08 95       	ret

0000303c <srd_dig_to_pattern>:
	for(uint8_t i = 0; i < length; ++i)
	{
		srd_set(i + index, patterns[i]);
	}
	return TRUE;
}
    303c:	cf 93       	push	r28
    303e:	df 93       	push	r29
    3040:	1f 92       	push	r1
    3042:	cd b7       	in	r28, 0x3d	; 61
    3044:	de b7       	in	r29, 0x3e	; 62
    3046:	89 83       	std	Y+1, r24	; 0x01
    3048:	89 81       	ldd	r24, Y+1	; 0x01
    304a:	88 2f       	mov	r24, r24
    304c:	90 e0       	ldi	r25, 0x00	; 0
    304e:	09 2e       	mov	r0, r25
    3050:	00 0c       	add	r0, r0
    3052:	aa 0b       	sbc	r26, r26
    3054:	bb 0b       	sbc	r27, r27
    3056:	40 e0       	ldi	r20, 0x00	; 0
    3058:	50 e0       	ldi	r21, 0x00	; 0
    305a:	29 e0       	ldi	r18, 0x09	; 9
    305c:	30 e0       	ldi	r19, 0x00	; 0
    305e:	84 1b       	sub	r24, r20
    3060:	95 0b       	sbc	r25, r21
    3062:	28 17       	cp	r18, r24
    3064:	39 07       	cpc	r19, r25
    3066:	c8 f0       	brcs	.+50     	; 0x309a <srd_dig_to_pattern+0x5e>
    3068:	82 5c       	subi	r24, 0xC2	; 194
    306a:	9f 4f       	sbci	r25, 0xFF	; 255
    306c:	fc 01       	movw	r30, r24
    306e:	0c 94 da 24 	jmp	0x49b4	; 0x49b4 <__tablejump2__>
    3072:	8f e3       	ldi	r24, 0x3F	; 63
    3074:	13 c0       	rjmp	.+38     	; 0x309c <srd_dig_to_pattern+0x60>
    3076:	86 e0       	ldi	r24, 0x06	; 6
    3078:	11 c0       	rjmp	.+34     	; 0x309c <srd_dig_to_pattern+0x60>
    307a:	8b e5       	ldi	r24, 0x5B	; 91
    307c:	0f c0       	rjmp	.+30     	; 0x309c <srd_dig_to_pattern+0x60>
    307e:	8f e4       	ldi	r24, 0x4F	; 79
    3080:	0d c0       	rjmp	.+26     	; 0x309c <srd_dig_to_pattern+0x60>
    3082:	86 e6       	ldi	r24, 0x66	; 102
    3084:	0b c0       	rjmp	.+22     	; 0x309c <srd_dig_to_pattern+0x60>
    3086:	8d e6       	ldi	r24, 0x6D	; 109
    3088:	09 c0       	rjmp	.+18     	; 0x309c <srd_dig_to_pattern+0x60>
    308a:	8d e7       	ldi	r24, 0x7D	; 125
    308c:	07 c0       	rjmp	.+14     	; 0x309c <srd_dig_to_pattern+0x60>
    308e:	87 e0       	ldi	r24, 0x07	; 7
    3090:	05 c0       	rjmp	.+10     	; 0x309c <srd_dig_to_pattern+0x60>
    3092:	8f e7       	ldi	r24, 0x7F	; 127
    3094:	03 c0       	rjmp	.+6      	; 0x309c <srd_dig_to_pattern+0x60>
    3096:	8f e6       	ldi	r24, 0x6F	; 111
    3098:	01 c0       	rjmp	.+2      	; 0x309c <srd_dig_to_pattern+0x60>
    309a:	8f e3       	ldi	r24, 0x3F	; 63
    309c:	0f 90       	pop	r0
    309e:	df 91       	pop	r29
    30a0:	cf 91       	pop	r28
    30a2:	08 95       	ret

000030a4 <srd_ctd>:
    30a4:	cf 93       	push	r28
    30a6:	df 93       	push	r29
    30a8:	00 d0       	rcall	.+0      	; 0x30aa <srd_ctd+0x6>
    30aa:	1f 92       	push	r1
    30ac:	cd b7       	in	r28, 0x3d	; 61
    30ae:	de b7       	in	r29, 0x3e	; 62
    30b0:	9b 83       	std	Y+3, r25	; 0x03
    30b2:	8a 83       	std	Y+2, r24	; 0x02
    30b4:	8a 81       	ldd	r24, Y+2	; 0x02
    30b6:	9b 81       	ldd	r25, Y+3	; 0x03
    30b8:	89 2b       	or	r24, r25
    30ba:	11 f4       	brne	.+4      	; 0x30c0 <srd_ctd+0x1c>
    30bc:	81 e0       	ldi	r24, 0x01	; 1
    30be:	1b c0       	rjmp	.+54     	; 0x30f6 <srd_ctd+0x52>
    30c0:	19 82       	std	Y+1, r1	; 0x01
    30c2:	8a 81       	ldd	r24, Y+2	; 0x02
    30c4:	9b 81       	ldd	r25, Y+3	; 0x03
    30c6:	99 23       	and	r25, r25
    30c8:	8c f4       	brge	.+34     	; 0x30ec <srd_ctd+0x48>
    30ca:	89 81       	ldd	r24, Y+1	; 0x01
    30cc:	8f 5f       	subi	r24, 0xFF	; 255
    30ce:	89 83       	std	Y+1, r24	; 0x01
    30d0:	0d c0       	rjmp	.+26     	; 0x30ec <srd_ctd+0x48>
    30d2:	8a 81       	ldd	r24, Y+2	; 0x02
    30d4:	9b 81       	ldd	r25, Y+3	; 0x03
    30d6:	2a e0       	ldi	r18, 0x0A	; 10
    30d8:	30 e0       	ldi	r19, 0x00	; 0
    30da:	b9 01       	movw	r22, r18
    30dc:	0e 94 a4 24 	call	0x4948	; 0x4948 <__divmodhi4>
    30e0:	cb 01       	movw	r24, r22
    30e2:	9b 83       	std	Y+3, r25	; 0x03
    30e4:	8a 83       	std	Y+2, r24	; 0x02
    30e6:	89 81       	ldd	r24, Y+1	; 0x01
    30e8:	8f 5f       	subi	r24, 0xFF	; 255
    30ea:	89 83       	std	Y+1, r24	; 0x01
    30ec:	8a 81       	ldd	r24, Y+2	; 0x02
    30ee:	9b 81       	ldd	r25, Y+3	; 0x03
    30f0:	89 2b       	or	r24, r25
    30f2:	79 f7       	brne	.-34     	; 0x30d2 <srd_ctd+0x2e>
    30f4:	89 81       	ldd	r24, Y+1	; 0x01
    30f6:	0f 90       	pop	r0
    30f8:	0f 90       	pop	r0
    30fa:	0f 90       	pop	r0
    30fc:	df 91       	pop	r29
    30fe:	cf 91       	pop	r28
    3100:	08 95       	ret

00003102 <srd_signed_ctd>:
    3102:	cf 93       	push	r28
    3104:	df 93       	push	r29
    3106:	00 d0       	rcall	.+0      	; 0x3108 <srd_signed_ctd+0x6>
    3108:	00 d0       	rcall	.+0      	; 0x310a <srd_signed_ctd+0x8>
    310a:	cd b7       	in	r28, 0x3d	; 61
    310c:	de b7       	in	r29, 0x3e	; 62
    310e:	9b 83       	std	Y+3, r25	; 0x03
    3110:	8a 83       	std	Y+2, r24	; 0x02
    3112:	6c 83       	std	Y+4, r22	; 0x04
    3114:	8a 81       	ldd	r24, Y+2	; 0x02
    3116:	9b 81       	ldd	r25, Y+3	; 0x03
    3118:	89 2b       	or	r24, r25
    311a:	39 f4       	brne	.+14     	; 0x312a <srd_signed_ctd+0x28>
    311c:	8c 81       	ldd	r24, Y+4	; 0x04
    311e:	88 23       	and	r24, r24
    3120:	11 f0       	breq	.+4      	; 0x3126 <srd_signed_ctd+0x24>
    3122:	82 e0       	ldi	r24, 0x02	; 2
    3124:	1c c0       	rjmp	.+56     	; 0x315e <srd_signed_ctd+0x5c>
    3126:	81 e0       	ldi	r24, 0x01	; 1
    3128:	1a c0       	rjmp	.+52     	; 0x315e <srd_signed_ctd+0x5c>
    312a:	19 82       	std	Y+1, r1	; 0x01
    312c:	8c 81       	ldd	r24, Y+4	; 0x04
    312e:	88 23       	and	r24, r24
    3130:	89 f0       	breq	.+34     	; 0x3154 <srd_signed_ctd+0x52>
    3132:	89 81       	ldd	r24, Y+1	; 0x01
    3134:	8f 5f       	subi	r24, 0xFF	; 255
    3136:	89 83       	std	Y+1, r24	; 0x01
    3138:	0d c0       	rjmp	.+26     	; 0x3154 <srd_signed_ctd+0x52>
    313a:	8a 81       	ldd	r24, Y+2	; 0x02
    313c:	9b 81       	ldd	r25, Y+3	; 0x03
    313e:	2a e0       	ldi	r18, 0x0A	; 10
    3140:	30 e0       	ldi	r19, 0x00	; 0
    3142:	b9 01       	movw	r22, r18
    3144:	0e 94 a4 24 	call	0x4948	; 0x4948 <__divmodhi4>
    3148:	cb 01       	movw	r24, r22
    314a:	9b 83       	std	Y+3, r25	; 0x03
    314c:	8a 83       	std	Y+2, r24	; 0x02
    314e:	89 81       	ldd	r24, Y+1	; 0x01
    3150:	8f 5f       	subi	r24, 0xFF	; 255
    3152:	89 83       	std	Y+1, r24	; 0x01
    3154:	8a 81       	ldd	r24, Y+2	; 0x02
    3156:	9b 81       	ldd	r25, Y+3	; 0x03
    3158:	89 2b       	or	r24, r25
    315a:	79 f7       	brne	.-34     	; 0x313a <srd_signed_ctd+0x38>
    315c:	89 81       	ldd	r24, Y+1	; 0x01
    315e:	0f 90       	pop	r0
    3160:	0f 90       	pop	r0
    3162:	0f 90       	pop	r0
    3164:	0f 90       	pop	r0
    3166:	df 91       	pop	r29
    3168:	cf 91       	pop	r28
    316a:	08 95       	ret

0000316c <srd_int16_to_patterns>:
    316c:	0f 93       	push	r16
    316e:	1f 93       	push	r17
    3170:	cf 93       	push	r28
    3172:	df 93       	push	r29
    3174:	cd b7       	in	r28, 0x3d	; 61
    3176:	de b7       	in	r29, 0x3e	; 62
    3178:	27 97       	sbiw	r28, 0x07	; 7
    317a:	0f b6       	in	r0, 0x3f	; 63
    317c:	f8 94       	cli
    317e:	de bf       	out	0x3e, r29	; 62
    3180:	0f be       	out	0x3f, r0	; 63
    3182:	cd bf       	out	0x3d, r28	; 61
    3184:	9c 83       	std	Y+4, r25	; 0x04
    3186:	8b 83       	std	Y+3, r24	; 0x03
    3188:	7e 83       	std	Y+6, r23	; 0x06
    318a:	6d 83       	std	Y+5, r22	; 0x05
    318c:	4f 83       	std	Y+7, r20	; 0x07
    318e:	19 82       	std	Y+1, r1	; 0x01
    3190:	8c 81       	ldd	r24, Y+4	; 0x04
    3192:	88 1f       	adc	r24, r24
    3194:	88 27       	eor	r24, r24
    3196:	88 1f       	adc	r24, r24
    3198:	8a 83       	std	Y+2, r24	; 0x02
    319a:	8a 81       	ldd	r24, Y+2	; 0x02
    319c:	88 23       	and	r24, r24
    319e:	39 f0       	breq	.+14     	; 0x31ae <srd_int16_to_patterns+0x42>
    31a0:	8b 81       	ldd	r24, Y+3	; 0x03
    31a2:	9c 81       	ldd	r25, Y+4	; 0x04
    31a4:	91 95       	neg	r25
    31a6:	81 95       	neg	r24
    31a8:	91 09       	sbc	r25, r1
    31aa:	9c 83       	std	Y+4, r25	; 0x04
    31ac:	8b 83       	std	Y+3, r24	; 0x03
    31ae:	8b 81       	ldd	r24, Y+3	; 0x03
    31b0:	9c 81       	ldd	r25, Y+4	; 0x04
    31b2:	89 2b       	or	r24, r25
    31b4:	d1 f5       	brne	.+116    	; 0x322a <srd_int16_to_patterns+0xbe>
    31b6:	8f 81       	ldd	r24, Y+7	; 0x07
    31b8:	88 2f       	mov	r24, r24
    31ba:	90 e0       	ldi	r25, 0x00	; 0
    31bc:	01 97       	sbiw	r24, 0x01	; 1
    31be:	2d 81       	ldd	r18, Y+5	; 0x05
    31c0:	3e 81       	ldd	r19, Y+6	; 0x06
    31c2:	82 0f       	add	r24, r18
    31c4:	93 1f       	adc	r25, r19
    31c6:	2f e3       	ldi	r18, 0x3F	; 63
    31c8:	fc 01       	movw	r30, r24
    31ca:	20 83       	st	Z, r18
    31cc:	89 81       	ldd	r24, Y+1	; 0x01
    31ce:	8f 5f       	subi	r24, 0xFF	; 255
    31d0:	89 83       	std	Y+1, r24	; 0x01
    31d2:	45 c0       	rjmp	.+138    	; 0x325e <srd_int16_to_patterns+0xf2>
    31d4:	8f 81       	ldd	r24, Y+7	; 0x07
    31d6:	88 2f       	mov	r24, r24
    31d8:	90 e0       	ldi	r25, 0x00	; 0
    31da:	9c 01       	movw	r18, r24
    31dc:	21 50       	subi	r18, 0x01	; 1
    31de:	31 09       	sbc	r19, r1
    31e0:	89 81       	ldd	r24, Y+1	; 0x01
    31e2:	91 e0       	ldi	r25, 0x01	; 1
    31e4:	98 0f       	add	r25, r24
    31e6:	99 83       	std	Y+1, r25	; 0x01
    31e8:	88 2f       	mov	r24, r24
    31ea:	90 e0       	ldi	r25, 0x00	; 0
    31ec:	a9 01       	movw	r20, r18
    31ee:	48 1b       	sub	r20, r24
    31f0:	59 0b       	sbc	r21, r25
    31f2:	ca 01       	movw	r24, r20
    31f4:	9c 01       	movw	r18, r24
    31f6:	8d 81       	ldd	r24, Y+5	; 0x05
    31f8:	9e 81       	ldd	r25, Y+6	; 0x06
    31fa:	8c 01       	movw	r16, r24
    31fc:	02 0f       	add	r16, r18
    31fe:	13 1f       	adc	r17, r19
    3200:	8b 81       	ldd	r24, Y+3	; 0x03
    3202:	9c 81       	ldd	r25, Y+4	; 0x04
    3204:	2a e0       	ldi	r18, 0x0A	; 10
    3206:	30 e0       	ldi	r19, 0x00	; 0
    3208:	b9 01       	movw	r22, r18
    320a:	0e 94 a4 24 	call	0x4948	; 0x4948 <__divmodhi4>
    320e:	0e 94 1e 18 	call	0x303c	; 0x303c <srd_dig_to_pattern>
    3212:	f8 01       	movw	r30, r16
    3214:	80 83       	st	Z, r24
    3216:	8b 81       	ldd	r24, Y+3	; 0x03
    3218:	9c 81       	ldd	r25, Y+4	; 0x04
    321a:	2a e0       	ldi	r18, 0x0A	; 10
    321c:	30 e0       	ldi	r19, 0x00	; 0
    321e:	b9 01       	movw	r22, r18
    3220:	0e 94 a4 24 	call	0x4948	; 0x4948 <__divmodhi4>
    3224:	cb 01       	movw	r24, r22
    3226:	9c 83       	std	Y+4, r25	; 0x04
    3228:	8b 83       	std	Y+3, r24	; 0x03
    322a:	8b 81       	ldd	r24, Y+3	; 0x03
    322c:	9c 81       	ldd	r25, Y+4	; 0x04
    322e:	18 16       	cp	r1, r24
    3230:	19 06       	cpc	r1, r25
    3232:	ac f4       	brge	.+42     	; 0x325e <srd_int16_to_patterns+0xf2>
    3234:	89 81       	ldd	r24, Y+1	; 0x01
    3236:	28 2f       	mov	r18, r24
    3238:	30 e0       	ldi	r19, 0x00	; 0
    323a:	8f 81       	ldd	r24, Y+7	; 0x07
    323c:	48 2f       	mov	r20, r24
    323e:	50 e0       	ldi	r21, 0x00	; 0
    3240:	81 e0       	ldi	r24, 0x01	; 1
    3242:	9a 81       	ldd	r25, Y+2	; 0x02
    3244:	99 23       	and	r25, r25
    3246:	09 f4       	brne	.+2      	; 0x324a <srd_int16_to_patterns+0xde>
    3248:	80 e0       	ldi	r24, 0x00	; 0
    324a:	88 2f       	mov	r24, r24
    324c:	90 e0       	ldi	r25, 0x00	; 0
    324e:	ba 01       	movw	r22, r20
    3250:	68 1b       	sub	r22, r24
    3252:	79 0b       	sbc	r23, r25
    3254:	cb 01       	movw	r24, r22
    3256:	28 17       	cp	r18, r24
    3258:	39 07       	cpc	r19, r25
    325a:	0c f4       	brge	.+2      	; 0x325e <srd_int16_to_patterns+0xf2>
    325c:	bb cf       	rjmp	.-138    	; 0x31d4 <srd_int16_to_patterns+0x68>
    325e:	8a 81       	ldd	r24, Y+2	; 0x02
    3260:	88 23       	and	r24, r24
    3262:	a9 f0       	breq	.+42     	; 0x328e <srd_int16_to_patterns+0x122>
    3264:	8f 81       	ldd	r24, Y+7	; 0x07
    3266:	88 2f       	mov	r24, r24
    3268:	90 e0       	ldi	r25, 0x00	; 0
    326a:	9c 01       	movw	r18, r24
    326c:	21 50       	subi	r18, 0x01	; 1
    326e:	31 09       	sbc	r19, r1
    3270:	89 81       	ldd	r24, Y+1	; 0x01
    3272:	88 2f       	mov	r24, r24
    3274:	90 e0       	ldi	r25, 0x00	; 0
    3276:	f9 01       	movw	r30, r18
    3278:	e8 1b       	sub	r30, r24
    327a:	f9 0b       	sbc	r31, r25
    327c:	cf 01       	movw	r24, r30
    327e:	9c 01       	movw	r18, r24
    3280:	8d 81       	ldd	r24, Y+5	; 0x05
    3282:	9e 81       	ldd	r25, Y+6	; 0x06
    3284:	82 0f       	add	r24, r18
    3286:	93 1f       	adc	r25, r19
    3288:	20 e4       	ldi	r18, 0x40	; 64
    328a:	fc 01       	movw	r30, r24
    328c:	20 83       	st	Z, r18
    328e:	81 e0       	ldi	r24, 0x01	; 1
    3290:	27 96       	adiw	r28, 0x07	; 7
    3292:	0f b6       	in	r0, 0x3f	; 63
    3294:	f8 94       	cli
    3296:	de bf       	out	0x3e, r29	; 62
    3298:	0f be       	out	0x3f, r0	; 63
    329a:	cd bf       	out	0x3d, r28	; 61
    329c:	df 91       	pop	r29
    329e:	cf 91       	pop	r28
    32a0:	1f 91       	pop	r17
    32a2:	0f 91       	pop	r16
    32a4:	08 95       	ret

000032a6 <srd_signed_int16_to_patterns>:
    32a6:	0f 93       	push	r16
    32a8:	1f 93       	push	r17
    32aa:	cf 93       	push	r28
    32ac:	df 93       	push	r29
    32ae:	cd b7       	in	r28, 0x3d	; 61
    32b0:	de b7       	in	r29, 0x3e	; 62
    32b2:	27 97       	sbiw	r28, 0x07	; 7
    32b4:	0f b6       	in	r0, 0x3f	; 63
    32b6:	f8 94       	cli
    32b8:	de bf       	out	0x3e, r29	; 62
    32ba:	0f be       	out	0x3f, r0	; 63
    32bc:	cd bf       	out	0x3d, r28	; 61
    32be:	9b 83       	std	Y+3, r25	; 0x03
    32c0:	8a 83       	std	Y+2, r24	; 0x02
    32c2:	6c 83       	std	Y+4, r22	; 0x04
    32c4:	5e 83       	std	Y+6, r21	; 0x06
    32c6:	4d 83       	std	Y+5, r20	; 0x05
    32c8:	2f 83       	std	Y+7, r18	; 0x07
    32ca:	19 82       	std	Y+1, r1	; 0x01
    32cc:	8c 81       	ldd	r24, Y+4	; 0x04
    32ce:	88 23       	and	r24, r24
    32d0:	39 f0       	breq	.+14     	; 0x32e0 <srd_signed_int16_to_patterns+0x3a>
    32d2:	8a 81       	ldd	r24, Y+2	; 0x02
    32d4:	9b 81       	ldd	r25, Y+3	; 0x03
    32d6:	91 95       	neg	r25
    32d8:	81 95       	neg	r24
    32da:	91 09       	sbc	r25, r1
    32dc:	9b 83       	std	Y+3, r25	; 0x03
    32de:	8a 83       	std	Y+2, r24	; 0x02
    32e0:	8a 81       	ldd	r24, Y+2	; 0x02
    32e2:	9b 81       	ldd	r25, Y+3	; 0x03
    32e4:	89 2b       	or	r24, r25
    32e6:	d1 f5       	brne	.+116    	; 0x335c <srd_signed_int16_to_patterns+0xb6>
    32e8:	8f 81       	ldd	r24, Y+7	; 0x07
    32ea:	88 2f       	mov	r24, r24
    32ec:	90 e0       	ldi	r25, 0x00	; 0
    32ee:	01 97       	sbiw	r24, 0x01	; 1
    32f0:	2d 81       	ldd	r18, Y+5	; 0x05
    32f2:	3e 81       	ldd	r19, Y+6	; 0x06
    32f4:	82 0f       	add	r24, r18
    32f6:	93 1f       	adc	r25, r19
    32f8:	2f e3       	ldi	r18, 0x3F	; 63
    32fa:	fc 01       	movw	r30, r24
    32fc:	20 83       	st	Z, r18
    32fe:	89 81       	ldd	r24, Y+1	; 0x01
    3300:	8f 5f       	subi	r24, 0xFF	; 255
    3302:	89 83       	std	Y+1, r24	; 0x01
    3304:	45 c0       	rjmp	.+138    	; 0x3390 <srd_signed_int16_to_patterns+0xea>
    3306:	8f 81       	ldd	r24, Y+7	; 0x07
    3308:	88 2f       	mov	r24, r24
    330a:	90 e0       	ldi	r25, 0x00	; 0
    330c:	9c 01       	movw	r18, r24
    330e:	21 50       	subi	r18, 0x01	; 1
    3310:	31 09       	sbc	r19, r1
    3312:	89 81       	ldd	r24, Y+1	; 0x01
    3314:	91 e0       	ldi	r25, 0x01	; 1
    3316:	98 0f       	add	r25, r24
    3318:	99 83       	std	Y+1, r25	; 0x01
    331a:	88 2f       	mov	r24, r24
    331c:	90 e0       	ldi	r25, 0x00	; 0
    331e:	a9 01       	movw	r20, r18
    3320:	48 1b       	sub	r20, r24
    3322:	59 0b       	sbc	r21, r25
    3324:	ca 01       	movw	r24, r20
    3326:	9c 01       	movw	r18, r24
    3328:	8d 81       	ldd	r24, Y+5	; 0x05
    332a:	9e 81       	ldd	r25, Y+6	; 0x06
    332c:	8c 01       	movw	r16, r24
    332e:	02 0f       	add	r16, r18
    3330:	13 1f       	adc	r17, r19
    3332:	8a 81       	ldd	r24, Y+2	; 0x02
    3334:	9b 81       	ldd	r25, Y+3	; 0x03
    3336:	2a e0       	ldi	r18, 0x0A	; 10
    3338:	30 e0       	ldi	r19, 0x00	; 0
    333a:	b9 01       	movw	r22, r18
    333c:	0e 94 a4 24 	call	0x4948	; 0x4948 <__divmodhi4>
    3340:	0e 94 1e 18 	call	0x303c	; 0x303c <srd_dig_to_pattern>
    3344:	f8 01       	movw	r30, r16
    3346:	80 83       	st	Z, r24
    3348:	8a 81       	ldd	r24, Y+2	; 0x02
    334a:	9b 81       	ldd	r25, Y+3	; 0x03
    334c:	2a e0       	ldi	r18, 0x0A	; 10
    334e:	30 e0       	ldi	r19, 0x00	; 0
    3350:	b9 01       	movw	r22, r18
    3352:	0e 94 a4 24 	call	0x4948	; 0x4948 <__divmodhi4>
    3356:	cb 01       	movw	r24, r22
    3358:	9b 83       	std	Y+3, r25	; 0x03
    335a:	8a 83       	std	Y+2, r24	; 0x02
    335c:	8a 81       	ldd	r24, Y+2	; 0x02
    335e:	9b 81       	ldd	r25, Y+3	; 0x03
    3360:	18 16       	cp	r1, r24
    3362:	19 06       	cpc	r1, r25
    3364:	ac f4       	brge	.+42     	; 0x3390 <srd_signed_int16_to_patterns+0xea>
    3366:	89 81       	ldd	r24, Y+1	; 0x01
    3368:	28 2f       	mov	r18, r24
    336a:	30 e0       	ldi	r19, 0x00	; 0
    336c:	8f 81       	ldd	r24, Y+7	; 0x07
    336e:	48 2f       	mov	r20, r24
    3370:	50 e0       	ldi	r21, 0x00	; 0
    3372:	81 e0       	ldi	r24, 0x01	; 1
    3374:	9c 81       	ldd	r25, Y+4	; 0x04
    3376:	99 23       	and	r25, r25
    3378:	09 f4       	brne	.+2      	; 0x337c <srd_signed_int16_to_patterns+0xd6>
    337a:	80 e0       	ldi	r24, 0x00	; 0
    337c:	88 2f       	mov	r24, r24
    337e:	90 e0       	ldi	r25, 0x00	; 0
    3380:	ba 01       	movw	r22, r20
    3382:	68 1b       	sub	r22, r24
    3384:	79 0b       	sbc	r23, r25
    3386:	cb 01       	movw	r24, r22
    3388:	28 17       	cp	r18, r24
    338a:	39 07       	cpc	r19, r25
    338c:	0c f4       	brge	.+2      	; 0x3390 <srd_signed_int16_to_patterns+0xea>
    338e:	bb cf       	rjmp	.-138    	; 0x3306 <srd_signed_int16_to_patterns+0x60>
    3390:	8c 81       	ldd	r24, Y+4	; 0x04
    3392:	88 23       	and	r24, r24
    3394:	a9 f0       	breq	.+42     	; 0x33c0 <srd_signed_int16_to_patterns+0x11a>
    3396:	8f 81       	ldd	r24, Y+7	; 0x07
    3398:	88 2f       	mov	r24, r24
    339a:	90 e0       	ldi	r25, 0x00	; 0
    339c:	9c 01       	movw	r18, r24
    339e:	21 50       	subi	r18, 0x01	; 1
    33a0:	31 09       	sbc	r19, r1
    33a2:	89 81       	ldd	r24, Y+1	; 0x01
    33a4:	88 2f       	mov	r24, r24
    33a6:	90 e0       	ldi	r25, 0x00	; 0
    33a8:	f9 01       	movw	r30, r18
    33aa:	e8 1b       	sub	r30, r24
    33ac:	f9 0b       	sbc	r31, r25
    33ae:	cf 01       	movw	r24, r30
    33b0:	9c 01       	movw	r18, r24
    33b2:	8d 81       	ldd	r24, Y+5	; 0x05
    33b4:	9e 81       	ldd	r25, Y+6	; 0x06
    33b6:	82 0f       	add	r24, r18
    33b8:	93 1f       	adc	r25, r19
    33ba:	20 e4       	ldi	r18, 0x40	; 64
    33bc:	fc 01       	movw	r30, r24
    33be:	20 83       	st	Z, r18
    33c0:	81 e0       	ldi	r24, 0x01	; 1
    33c2:	27 96       	adiw	r28, 0x07	; 7
    33c4:	0f b6       	in	r0, 0x3f	; 63
    33c6:	f8 94       	cli
    33c8:	de bf       	out	0x3e, r29	; 62
    33ca:	0f be       	out	0x3f, r0	; 63
    33cc:	cd bf       	out	0x3d, r28	; 61
    33ce:	df 91       	pop	r29
    33d0:	cf 91       	pop	r28
    33d2:	1f 91       	pop	r17
    33d4:	0f 91       	pop	r16
    33d6:	08 95       	ret

000033d8 <srd_float_to_patterns>:
    33d8:	cf 92       	push	r12
    33da:	df 92       	push	r13
    33dc:	ef 92       	push	r14
    33de:	ff 92       	push	r15
    33e0:	0f 93       	push	r16
    33e2:	1f 93       	push	r17
    33e4:	cf 93       	push	r28
    33e6:	df 93       	push	r29
    33e8:	cd b7       	in	r28, 0x3d	; 61
    33ea:	de b7       	in	r29, 0x3e	; 62
    33ec:	61 97       	sbiw	r28, 0x11	; 17
    33ee:	0f b6       	in	r0, 0x3f	; 63
    33f0:	f8 94       	cli
    33f2:	de bf       	out	0x3e, r29	; 62
    33f4:	0f be       	out	0x3f, r0	; 63
    33f6:	cd bf       	out	0x3d, r28	; 61
    33f8:	6a 87       	std	Y+10, r22	; 0x0a
    33fa:	7b 87       	std	Y+11, r23	; 0x0b
    33fc:	8c 87       	std	Y+12, r24	; 0x0c
    33fe:	9d 87       	std	Y+13, r25	; 0x0d
    3400:	4e 87       	std	Y+14, r20	; 0x0e
    3402:	38 8b       	std	Y+16, r19	; 0x10
    3404:	2f 87       	std	Y+15, r18	; 0x0f
    3406:	09 8b       	std	Y+17, r16	; 0x11
    3408:	11 e0       	ldi	r17, 0x01	; 1
    340a:	20 e0       	ldi	r18, 0x00	; 0
    340c:	30 e0       	ldi	r19, 0x00	; 0
    340e:	a9 01       	movw	r20, r18
    3410:	6a 85       	ldd	r22, Y+10	; 0x0a
    3412:	7b 85       	ldd	r23, Y+11	; 0x0b
    3414:	8c 85       	ldd	r24, Y+12	; 0x0c
    3416:	9d 85       	ldd	r25, Y+13	; 0x0d
    3418:	0e 94 02 22 	call	0x4404	; 0x4404 <__cmpsf2>
    341c:	88 23       	and	r24, r24
    341e:	0c f0       	brlt	.+2      	; 0x3422 <srd_float_to_patterns+0x4a>
    3420:	10 e0       	ldi	r17, 0x00	; 0
    3422:	1b 83       	std	Y+3, r17	; 0x03
    3424:	6a 85       	ldd	r22, Y+10	; 0x0a
    3426:	7b 85       	ldd	r23, Y+11	; 0x0b
    3428:	8c 85       	ldd	r24, Y+12	; 0x0c
    342a:	9d 85       	ldd	r25, Y+13	; 0x0d
    342c:	0e 94 b5 22 	call	0x456a	; 0x456a <__fixsfsi>
    3430:	dc 01       	movw	r26, r24
    3432:	cb 01       	movw	r24, r22
    3434:	9d 83       	std	Y+5, r25	; 0x05
    3436:	8c 83       	std	Y+4, r24	; 0x04
    3438:	8c 81       	ldd	r24, Y+4	; 0x04
    343a:	9d 81       	ldd	r25, Y+5	; 0x05
    343c:	09 2e       	mov	r0, r25
    343e:	00 0c       	add	r0, r0
    3440:	aa 0b       	sbc	r26, r26
    3442:	bb 0b       	sbc	r27, r27
    3444:	bc 01       	movw	r22, r24
    3446:	cd 01       	movw	r24, r26
    3448:	0e 94 ed 22 	call	0x45da	; 0x45da <__floatsisf>
    344c:	dc 01       	movw	r26, r24
    344e:	cb 01       	movw	r24, r22
    3450:	9c 01       	movw	r18, r24
    3452:	ad 01       	movw	r20, r26
    3454:	6a 85       	ldd	r22, Y+10	; 0x0a
    3456:	7b 85       	ldd	r23, Y+11	; 0x0b
    3458:	8c 85       	ldd	r24, Y+12	; 0x0c
    345a:	9d 85       	ldd	r25, Y+13	; 0x0d
    345c:	0e 94 95 21 	call	0x432a	; 0x432a <__subsf3>
    3460:	dc 01       	movw	r26, r24
    3462:	cb 01       	movw	r24, r22
    3464:	6c 01       	movw	r12, r24
    3466:	7d 01       	movw	r14, r26
    3468:	e8 94       	clt
    346a:	f7 f8       	bld	r15, 7
    346c:	8e 85       	ldd	r24, Y+14	; 0x0e
    346e:	88 2f       	mov	r24, r24
    3470:	90 e0       	ldi	r25, 0x00	; 0
    3472:	0e 94 b6 12 	call	0x256c	; 0x256c <decpowi16>
    3476:	09 2e       	mov	r0, r25
    3478:	00 0c       	add	r0, r0
    347a:	aa 0b       	sbc	r26, r26
    347c:	bb 0b       	sbc	r27, r27
    347e:	bc 01       	movw	r22, r24
    3480:	cd 01       	movw	r24, r26
    3482:	0e 94 ed 22 	call	0x45da	; 0x45da <__floatsisf>
    3486:	dc 01       	movw	r26, r24
    3488:	cb 01       	movw	r24, r22
    348a:	9c 01       	movw	r18, r24
    348c:	ad 01       	movw	r20, r26
    348e:	c7 01       	movw	r24, r14
    3490:	b6 01       	movw	r22, r12
    3492:	0e 94 02 24 	call	0x4804	; 0x4804 <__mulsf3>
    3496:	dc 01       	movw	r26, r24
    3498:	cb 01       	movw	r24, r22
    349a:	bc 01       	movw	r22, r24
    349c:	cd 01       	movw	r24, r26
    349e:	0e 94 b5 22 	call	0x456a	; 0x456a <__fixsfsi>
    34a2:	dc 01       	movw	r26, r24
    34a4:	cb 01       	movw	r24, r22
    34a6:	9f 83       	std	Y+7, r25	; 0x07
    34a8:	8e 83       	std	Y+6, r24	; 0x06
    34aa:	8c 81       	ldd	r24, Y+4	; 0x04
    34ac:	9d 81       	ldd	r25, Y+5	; 0x05
    34ae:	6b 81       	ldd	r22, Y+3	; 0x03
    34b0:	0e 94 81 18 	call	0x3102	; 0x3102 <srd_signed_ctd>
    34b4:	88 87       	std	Y+8, r24	; 0x08
    34b6:	8e 81       	ldd	r24, Y+6	; 0x06
    34b8:	9f 81       	ldd	r25, Y+7	; 0x07
    34ba:	0e 94 52 18 	call	0x30a4	; 0x30a4 <srd_ctd>
    34be:	89 87       	std	Y+9, r24	; 0x09
    34c0:	88 85       	ldd	r24, Y+8	; 0x08
    34c2:	28 2f       	mov	r18, r24
    34c4:	30 e0       	ldi	r19, 0x00	; 0
    34c6:	8e 85       	ldd	r24, Y+14	; 0x0e
    34c8:	88 2f       	mov	r24, r24
    34ca:	90 e0       	ldi	r25, 0x00	; 0
    34cc:	28 0f       	add	r18, r24
    34ce:	39 1f       	adc	r19, r25
    34d0:	89 89       	ldd	r24, Y+17	; 0x11
    34d2:	88 2f       	mov	r24, r24
    34d4:	90 e0       	ldi	r25, 0x00	; 0
    34d6:	82 17       	cp	r24, r18
    34d8:	93 07       	cpc	r25, r19
    34da:	14 f4       	brge	.+4      	; 0x34e0 <srd_float_to_patterns+0x108>
    34dc:	80 e0       	ldi	r24, 0x00	; 0
    34de:	7f c0       	rjmp	.+254    	; 0x35de <srd_float_to_patterns+0x206>
    34e0:	89 89       	ldd	r24, Y+17	; 0x11
    34e2:	28 2f       	mov	r18, r24
    34e4:	30 e0       	ldi	r19, 0x00	; 0
    34e6:	8e 85       	ldd	r24, Y+14	; 0x0e
    34e8:	88 2f       	mov	r24, r24
    34ea:	90 e0       	ldi	r25, 0x00	; 0
    34ec:	a9 01       	movw	r20, r18
    34ee:	48 1b       	sub	r20, r24
    34f0:	59 0b       	sbc	r21, r25
    34f2:	ca 01       	movw	r24, r20
    34f4:	9c 01       	movw	r18, r24
    34f6:	8f 85       	ldd	r24, Y+15	; 0x0f
    34f8:	98 89       	ldd	r25, Y+16	; 0x10
    34fa:	ac 01       	movw	r20, r24
    34fc:	42 0f       	add	r20, r18
    34fe:	53 1f       	adc	r21, r19
    3500:	8e 81       	ldd	r24, Y+6	; 0x06
    3502:	9f 81       	ldd	r25, Y+7	; 0x07
    3504:	2e 85       	ldd	r18, Y+14	; 0x0e
    3506:	60 e0       	ldi	r22, 0x00	; 0
    3508:	0e 94 53 19 	call	0x32a6	; 0x32a6 <srd_signed_int16_to_patterns>
    350c:	1a 82       	std	Y+2, r1	; 0x02
    350e:	19 82       	std	Y+1, r1	; 0x01
    3510:	19 c0       	rjmp	.+50     	; 0x3544 <srd_float_to_patterns+0x16c>
    3512:	89 89       	ldd	r24, Y+17	; 0x11
    3514:	28 2f       	mov	r18, r24
    3516:	30 e0       	ldi	r19, 0x00	; 0
    3518:	8e 85       	ldd	r24, Y+14	; 0x0e
    351a:	88 2f       	mov	r24, r24
    351c:	90 e0       	ldi	r25, 0x00	; 0
    351e:	28 1b       	sub	r18, r24
    3520:	39 0b       	sbc	r19, r25
    3522:	89 81       	ldd	r24, Y+1	; 0x01
    3524:	9a 81       	ldd	r25, Y+2	; 0x02
    3526:	82 0f       	add	r24, r18
    3528:	93 1f       	adc	r25, r19
    352a:	9c 01       	movw	r18, r24
    352c:	8f 85       	ldd	r24, Y+15	; 0x0f
    352e:	98 89       	ldd	r25, Y+16	; 0x10
    3530:	82 0f       	add	r24, r18
    3532:	93 1f       	adc	r25, r19
    3534:	2f e3       	ldi	r18, 0x3F	; 63
    3536:	fc 01       	movw	r30, r24
    3538:	20 83       	st	Z, r18
    353a:	89 81       	ldd	r24, Y+1	; 0x01
    353c:	9a 81       	ldd	r25, Y+2	; 0x02
    353e:	01 96       	adiw	r24, 0x01	; 1
    3540:	9a 83       	std	Y+2, r25	; 0x02
    3542:	89 83       	std	Y+1, r24	; 0x01
    3544:	8e 85       	ldd	r24, Y+14	; 0x0e
    3546:	28 2f       	mov	r18, r24
    3548:	30 e0       	ldi	r19, 0x00	; 0
    354a:	89 85       	ldd	r24, Y+9	; 0x09
    354c:	88 2f       	mov	r24, r24
    354e:	90 e0       	ldi	r25, 0x00	; 0
    3550:	28 1b       	sub	r18, r24
    3552:	39 0b       	sbc	r19, r25
    3554:	89 81       	ldd	r24, Y+1	; 0x01
    3556:	9a 81       	ldd	r25, Y+2	; 0x02
    3558:	82 17       	cp	r24, r18
    355a:	93 07       	cpc	r25, r19
    355c:	d4 f2       	brlt	.-76     	; 0x3512 <srd_float_to_patterns+0x13a>
    355e:	89 89       	ldd	r24, Y+17	; 0x11
    3560:	28 2f       	mov	r18, r24
    3562:	30 e0       	ldi	r19, 0x00	; 0
    3564:	8e 85       	ldd	r24, Y+14	; 0x0e
    3566:	88 2f       	mov	r24, r24
    3568:	90 e0       	ldi	r25, 0x00	; 0
    356a:	28 1b       	sub	r18, r24
    356c:	39 0b       	sbc	r19, r25
    356e:	88 85       	ldd	r24, Y+8	; 0x08
    3570:	88 2f       	mov	r24, r24
    3572:	90 e0       	ldi	r25, 0x00	; 0
    3574:	a9 01       	movw	r20, r18
    3576:	48 1b       	sub	r20, r24
    3578:	59 0b       	sbc	r21, r25
    357a:	ca 01       	movw	r24, r20
    357c:	9c 01       	movw	r18, r24
    357e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3580:	98 89       	ldd	r25, Y+16	; 0x10
    3582:	ac 01       	movw	r20, r24
    3584:	42 0f       	add	r20, r18
    3586:	53 1f       	adc	r21, r19
    3588:	8c 81       	ldd	r24, Y+4	; 0x04
    358a:	9d 81       	ldd	r25, Y+5	; 0x05
    358c:	28 85       	ldd	r18, Y+8	; 0x08
    358e:	6b 81       	ldd	r22, Y+3	; 0x03
    3590:	0e 94 53 19 	call	0x32a6	; 0x32a6 <srd_signed_int16_to_patterns>
    3594:	89 89       	ldd	r24, Y+17	; 0x11
    3596:	28 2f       	mov	r18, r24
    3598:	30 e0       	ldi	r19, 0x00	; 0
    359a:	8e 85       	ldd	r24, Y+14	; 0x0e
    359c:	88 2f       	mov	r24, r24
    359e:	90 e0       	ldi	r25, 0x00	; 0
    35a0:	b9 01       	movw	r22, r18
    35a2:	68 1b       	sub	r22, r24
    35a4:	79 0b       	sbc	r23, r25
    35a6:	cb 01       	movw	r24, r22
    35a8:	01 97       	sbiw	r24, 0x01	; 1
    35aa:	2f 85       	ldd	r18, Y+15	; 0x0f
    35ac:	38 89       	ldd	r19, Y+16	; 0x10
    35ae:	82 0f       	add	r24, r18
    35b0:	93 1f       	adc	r25, r19
    35b2:	29 89       	ldd	r18, Y+17	; 0x11
    35b4:	42 2f       	mov	r20, r18
    35b6:	50 e0       	ldi	r21, 0x00	; 0
    35b8:	2e 85       	ldd	r18, Y+14	; 0x0e
    35ba:	22 2f       	mov	r18, r18
    35bc:	30 e0       	ldi	r19, 0x00	; 0
    35be:	fa 01       	movw	r30, r20
    35c0:	e2 1b       	sub	r30, r18
    35c2:	f3 0b       	sbc	r31, r19
    35c4:	9f 01       	movw	r18, r30
    35c6:	21 50       	subi	r18, 0x01	; 1
    35c8:	31 09       	sbc	r19, r1
    35ca:	4f 85       	ldd	r20, Y+15	; 0x0f
    35cc:	58 89       	ldd	r21, Y+16	; 0x10
    35ce:	24 0f       	add	r18, r20
    35d0:	35 1f       	adc	r19, r21
    35d2:	f9 01       	movw	r30, r18
    35d4:	20 81       	ld	r18, Z
    35d6:	20 68       	ori	r18, 0x80	; 128
    35d8:	fc 01       	movw	r30, r24
    35da:	20 83       	st	Z, r18
    35dc:	81 e0       	ldi	r24, 0x01	; 1
    35de:	61 96       	adiw	r28, 0x11	; 17
    35e0:	0f b6       	in	r0, 0x3f	; 63
    35e2:	f8 94       	cli
    35e4:	de bf       	out	0x3e, r29	; 62
    35e6:	0f be       	out	0x3f, r0	; 63
    35e8:	cd bf       	out	0x3d, r28	; 61
    35ea:	df 91       	pop	r29
    35ec:	cf 91       	pop	r28
    35ee:	1f 91       	pop	r17
    35f0:	0f 91       	pop	r16
    35f2:	ff 90       	pop	r15
    35f4:	ef 90       	pop	r14
    35f6:	df 90       	pop	r13
    35f8:	cf 90       	pop	r12
    35fa:	08 95       	ret

000035fc <srd_init>:
    35fc:	cf 93       	push	r28
    35fe:	df 93       	push	r29
    3600:	cd b7       	in	r28, 0x3d	; 61
    3602:	de b7       	in	r29, 0x3e	; 62
    3604:	0e 94 2b 17 	call	0x2e56	; 0x2e56 <shreg_init>
    3608:	0e 94 a2 1b 	call	0x3744	; 0x3744 <srd_clear>
    360c:	0e 94 91 1b 	call	0x3722	; 0x3722 <srd_display>
    3610:	00 00       	nop
    3612:	df 91       	pop	r29
    3614:	cf 91       	pop	r28
    3616:	08 95       	ret

00003618 <srd_shutdown>:
    3618:	cf 93       	push	r28
    361a:	df 93       	push	r29
    361c:	cd b7       	in	r28, 0x3d	; 61
    361e:	de b7       	in	r29, 0x3e	; 62
    3620:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <shreg_shutdown>
    3624:	00 00       	nop
    3626:	df 91       	pop	r29
    3628:	cf 91       	pop	r28
    362a:	08 95       	ret

0000362c <srd_set>:
    362c:	cf 93       	push	r28
    362e:	df 93       	push	r29
    3630:	00 d0       	rcall	.+0      	; 0x3632 <srd_set+0x6>
    3632:	cd b7       	in	r28, 0x3d	; 61
    3634:	de b7       	in	r29, 0x3e	; 62
    3636:	89 83       	std	Y+1, r24	; 0x01
    3638:	6a 83       	std	Y+2, r22	; 0x02
    363a:	89 81       	ldd	r24, Y+1	; 0x01
    363c:	86 30       	cpi	r24, 0x06	; 6
    363e:	10 f0       	brcs	.+4      	; 0x3644 <srd_set+0x18>
    3640:	80 e0       	ldi	r24, 0x00	; 0
    3642:	09 c0       	rjmp	.+18     	; 0x3656 <srd_set+0x2a>
    3644:	89 81       	ldd	r24, Y+1	; 0x01
    3646:	88 2f       	mov	r24, r24
    3648:	90 e0       	ldi	r25, 0x00	; 0
    364a:	8d 5f       	subi	r24, 0xFD	; 253
    364c:	9e 4f       	sbci	r25, 0xFE	; 254
    364e:	2a 81       	ldd	r18, Y+2	; 0x02
    3650:	fc 01       	movw	r30, r24
    3652:	20 83       	st	Z, r18
    3654:	81 e0       	ldi	r24, 0x01	; 1
    3656:	0f 90       	pop	r0
    3658:	0f 90       	pop	r0
    365a:	df 91       	pop	r29
    365c:	cf 91       	pop	r28
    365e:	08 95       	ret

00003660 <srd_setfloat>:

uint8_t srd_setfloat(float num, uint8_t index, uint8_t decimal_places, uint8_t length)
{
    3660:	0f 93       	push	r16
    3662:	cf 93       	push	r28
    3664:	df 93       	push	r29
    3666:	cd b7       	in	r28, 0x3d	; 61
    3668:	de b7       	in	r29, 0x3e	; 62
    366a:	27 97       	sbiw	r28, 0x07	; 7
    366c:	0f b6       	in	r0, 0x3f	; 63
    366e:	f8 94       	cli
    3670:	de bf       	out	0x3e, r29	; 62
    3672:	0f be       	out	0x3f, r0	; 63
    3674:	cd bf       	out	0x3d, r28	; 61
    3676:	69 83       	std	Y+1, r22	; 0x01
    3678:	7a 83       	std	Y+2, r23	; 0x02
    367a:	8b 83       	std	Y+3, r24	; 0x03
    367c:	9c 83       	std	Y+4, r25	; 0x04
    367e:	4d 83       	std	Y+5, r20	; 0x05
    3680:	2e 83       	std	Y+6, r18	; 0x06
    3682:	0f 83       	std	Y+7, r16	; 0x07
	if(index + length > SRD_DIGITS) return FALSE;
    3684:	8d 81       	ldd	r24, Y+5	; 0x05
    3686:	28 2f       	mov	r18, r24
    3688:	30 e0       	ldi	r19, 0x00	; 0
    368a:	8f 81       	ldd	r24, Y+7	; 0x07
    368c:	88 2f       	mov	r24, r24
    368e:	90 e0       	ldi	r25, 0x00	; 0
    3690:	82 0f       	add	r24, r18
    3692:	93 1f       	adc	r25, r19
    3694:	07 97       	sbiw	r24, 0x07	; 7
    3696:	14 f0       	brlt	.+4      	; 0x369c <srd_setfloat+0x3c>
    3698:	80 e0       	ldi	r24, 0x00	; 0
    369a:	10 c0       	rjmp	.+32     	; 0x36bc <srd_setfloat+0x5c>
	return srd_float_to_patterns(num, decimal_places, &srd_buffer[index], length);
    369c:	8d 81       	ldd	r24, Y+5	; 0x05
    369e:	88 2f       	mov	r24, r24
    36a0:	90 e0       	ldi	r25, 0x00	; 0
    36a2:	9c 01       	movw	r18, r24
    36a4:	2d 5f       	subi	r18, 0xFD	; 253
    36a6:	3e 4f       	sbci	r19, 0xFE	; 254
    36a8:	89 81       	ldd	r24, Y+1	; 0x01
    36aa:	9a 81       	ldd	r25, Y+2	; 0x02
    36ac:	ab 81       	ldd	r26, Y+3	; 0x03
    36ae:	bc 81       	ldd	r27, Y+4	; 0x04
    36b0:	0f 81       	ldd	r16, Y+7	; 0x07
    36b2:	4e 81       	ldd	r20, Y+6	; 0x06
    36b4:	bc 01       	movw	r22, r24
    36b6:	cd 01       	movw	r24, r26
    36b8:	0e 94 ec 19 	call	0x33d8	; 0x33d8 <srd_float_to_patterns>
}
    36bc:	27 96       	adiw	r28, 0x07	; 7
    36be:	0f b6       	in	r0, 0x3f	; 63
    36c0:	f8 94       	cli
    36c2:	de bf       	out	0x3e, r29	; 62
    36c4:	0f be       	out	0x3f, r0	; 63
    36c6:	cd bf       	out	0x3d, r28	; 61
    36c8:	df 91       	pop	r29
    36ca:	cf 91       	pop	r28
    36cc:	0f 91       	pop	r16
    36ce:	08 95       	ret

000036d0 <srd_setint16>:

uint8_t srd_setint16(int16_t num, uint8_t index, uint8_t length)
{
    36d0:	cf 93       	push	r28
    36d2:	df 93       	push	r29
    36d4:	00 d0       	rcall	.+0      	; 0x36d6 <srd_setint16+0x6>
    36d6:	00 d0       	rcall	.+0      	; 0x36d8 <srd_setint16+0x8>
    36d8:	cd b7       	in	r28, 0x3d	; 61
    36da:	de b7       	in	r29, 0x3e	; 62
    36dc:	9a 83       	std	Y+2, r25	; 0x02
    36de:	89 83       	std	Y+1, r24	; 0x01
    36e0:	6b 83       	std	Y+3, r22	; 0x03
    36e2:	4c 83       	std	Y+4, r20	; 0x04
	if(index + length > SRD_DIGITS) return FALSE;
    36e4:	8b 81       	ldd	r24, Y+3	; 0x03
    36e6:	28 2f       	mov	r18, r24
    36e8:	30 e0       	ldi	r19, 0x00	; 0
    36ea:	8c 81       	ldd	r24, Y+4	; 0x04
    36ec:	88 2f       	mov	r24, r24
    36ee:	90 e0       	ldi	r25, 0x00	; 0
    36f0:	82 0f       	add	r24, r18
    36f2:	93 1f       	adc	r25, r19
    36f4:	07 97       	sbiw	r24, 0x07	; 7
    36f6:	14 f0       	brlt	.+4      	; 0x36fc <srd_setint16+0x2c>
    36f8:	80 e0       	ldi	r24, 0x00	; 0
    36fa:	0c c0       	rjmp	.+24     	; 0x3714 <srd_setint16+0x44>
	return srd_int16_to_patterns(num, &srd_buffer[index], length);
    36fc:	8b 81       	ldd	r24, Y+3	; 0x03
    36fe:	88 2f       	mov	r24, r24
    3700:	90 e0       	ldi	r25, 0x00	; 0
    3702:	9c 01       	movw	r18, r24
    3704:	2d 5f       	subi	r18, 0xFD	; 253
    3706:	3e 4f       	sbci	r19, 0xFE	; 254
    3708:	89 81       	ldd	r24, Y+1	; 0x01
    370a:	9a 81       	ldd	r25, Y+2	; 0x02
    370c:	4c 81       	ldd	r20, Y+4	; 0x04
    370e:	b9 01       	movw	r22, r18
    3710:	0e 94 b6 18 	call	0x316c	; 0x316c <srd_int16_to_patterns>
}
    3714:	0f 90       	pop	r0
    3716:	0f 90       	pop	r0
    3718:	0f 90       	pop	r0
    371a:	0f 90       	pop	r0
    371c:	df 91       	pop	r29
    371e:	cf 91       	pop	r28
    3720:	08 95       	ret

00003722 <srd_display>:

void srd_display()
{
    3722:	cf 93       	push	r28
    3724:	df 93       	push	r29
    3726:	cd b7       	in	r28, 0x3d	; 61
    3728:	de b7       	in	r29, 0x3e	; 62
	shreg_clear();
    372a:	0e 94 d0 17 	call	0x2fa0	; 0x2fa0 <shreg_clear>
	shreg_write_bytes(srd_buffer, SRD_DIGITS);
    372e:	66 e0       	ldi	r22, 0x06	; 6
    3730:	83 e0       	ldi	r24, 0x03	; 3
    3732:	91 e0       	ldi	r25, 0x01	; 1
    3734:	0e 94 a0 17 	call	0x2f40	; 0x2f40 <shreg_write_bytes>
	shreg_out();
    3738:	0e 94 04 18 	call	0x3008	; 0x3008 <shreg_out>
}
    373c:	00 00       	nop
    373e:	df 91       	pop	r29
    3740:	cf 91       	pop	r28
    3742:	08 95       	ret

00003744 <srd_clear>:

void srd_clear()
{
    3744:	cf 93       	push	r28
    3746:	df 93       	push	r29
    3748:	1f 92       	push	r1
    374a:	cd b7       	in	r28, 0x3d	; 61
    374c:	de b7       	in	r29, 0x3e	; 62
	for(uint8_t i = 0; i < SRD_DIGITS; ++i)
    374e:	19 82       	std	Y+1, r1	; 0x01
    3750:	0a c0       	rjmp	.+20     	; 0x3766 <srd_clear+0x22>
	{
		srd_buffer[i] = SRD_EMPTY;
    3752:	89 81       	ldd	r24, Y+1	; 0x01
    3754:	88 2f       	mov	r24, r24
    3756:	90 e0       	ldi	r25, 0x00	; 0
    3758:	8d 5f       	subi	r24, 0xFD	; 253
    375a:	9e 4f       	sbci	r25, 0xFE	; 254
    375c:	fc 01       	movw	r30, r24
    375e:	10 82       	st	Z, r1
	shreg_out();
}

void srd_clear()
{
	for(uint8_t i = 0; i < SRD_DIGITS; ++i)
    3760:	89 81       	ldd	r24, Y+1	; 0x01
    3762:	8f 5f       	subi	r24, 0xFF	; 255
    3764:	89 83       	std	Y+1, r24	; 0x01
    3766:	89 81       	ldd	r24, Y+1	; 0x01
    3768:	86 30       	cpi	r24, 0x06	; 6
    376a:	98 f3       	brcs	.-26     	; 0x3752 <srd_clear+0xe>
	{
		srd_buffer[i] = SRD_EMPTY;
	}
}
    376c:	00 00       	nop
    376e:	0f 90       	pop	r0
    3770:	df 91       	pop	r29
    3772:	cf 91       	pop	r28
    3774:	08 95       	ret

00003776 <stirrer_init>:

#define STIRRER_PWM_WGM_BITS_A 0x00
#define STIRRER_PWM_WGM_BITS_B (1 << WGM13) // phase and frequency correct pwm mode. top set by ICR1

void stirrer_init()
{
    3776:	cf 93       	push	r28
    3778:	df 93       	push	r29
    377a:	cd b7       	in	r28, 0x3d	; 61
    377c:	de b7       	in	r29, 0x3e	; 62
	TIMSK1 = 0x00;
    377e:	8f e6       	ldi	r24, 0x6F	; 111
    3780:	90 e0       	ldi	r25, 0x00	; 0
    3782:	fc 01       	movw	r30, r24
    3784:	10 82       	st	Z, r1
	// stop timer clock
	TCCR1B &= ~STIRRER_PWM_PRESCALE_BITS;
    3786:	81 e8       	ldi	r24, 0x81	; 129
    3788:	90 e0       	ldi	r25, 0x00	; 0
    378a:	21 e8       	ldi	r18, 0x81	; 129
    378c:	30 e0       	ldi	r19, 0x00	; 0
    378e:	f9 01       	movw	r30, r18
    3790:	20 81       	ld	r18, Z
    3792:	2e 7f       	andi	r18, 0xFE	; 254
    3794:	fc 01       	movw	r30, r24
    3796:	20 83       	st	Z, r18
	// enable phase correct, frequency correct pwm mode
	TCCR1A |= STIRRER_PWM_WGM_BITS_A;
    3798:	80 e8       	ldi	r24, 0x80	; 128
    379a:	90 e0       	ldi	r25, 0x00	; 0
    379c:	20 e8       	ldi	r18, 0x80	; 128
    379e:	30 e0       	ldi	r19, 0x00	; 0
    37a0:	f9 01       	movw	r30, r18
    37a2:	20 81       	ld	r18, Z
    37a4:	fc 01       	movw	r30, r24
    37a6:	20 83       	st	Z, r18
	TCCR1B |= STIRRER_PWM_WGM_BITS_B;
    37a8:	81 e8       	ldi	r24, 0x81	; 129
    37aa:	90 e0       	ldi	r25, 0x00	; 0
    37ac:	21 e8       	ldi	r18, 0x81	; 129
    37ae:	30 e0       	ldi	r19, 0x00	; 0
    37b0:	f9 01       	movw	r30, r18
    37b2:	20 81       	ld	r18, Z
    37b4:	20 61       	ori	r18, 0x10	; 16
    37b6:	fc 01       	movw	r30, r24
    37b8:	20 83       	st	Z, r18
	// set top value
	ICR1 = STIRRER_PWM_TOP;
    37ba:	86 e8       	ldi	r24, 0x86	; 134
    37bc:	90 e0       	ldi	r25, 0x00	; 0
    37be:	20 ea       	ldi	r18, 0xA0	; 160
    37c0:	30 e0       	ldi	r19, 0x00	; 0
    37c2:	fc 01       	movw	r30, r24
    37c4:	31 83       	std	Z+1, r19	; 0x01
    37c6:	20 83       	st	Z, r18
	// reset duty cycle val
	#ifdef STIRRER_PWM_INVERSE
		OCR1A = STIRRER_PWM_TOP;
	#else
		OCR1A = 0x0000;
    37c8:	88 e8       	ldi	r24, 0x88	; 136
    37ca:	90 e0       	ldi	r25, 0x00	; 0
    37cc:	fc 01       	movw	r30, r24
    37ce:	11 82       	std	Z+1, r1	; 0x01
    37d0:	10 82       	st	Z, r1
	#endif
	// reset timer
	TCNT1 = 0x0000;
    37d2:	84 e8       	ldi	r24, 0x84	; 132
    37d4:	90 e0       	ldi	r25, 0x00	; 0
    37d6:	fc 01       	movw	r30, r24
    37d8:	11 82       	std	Z+1, r1	; 0x01
    37da:	10 82       	st	Z, r1
	
	// enable output pin
	OC1A_DDR |= (1 << OC1A_BIT);
    37dc:	8a e2       	ldi	r24, 0x2A	; 42
    37de:	90 e0       	ldi	r25, 0x00	; 0
    37e0:	2a e2       	ldi	r18, 0x2A	; 42
    37e2:	30 e0       	ldi	r19, 0x00	; 0
    37e4:	f9 01       	movw	r30, r18
    37e6:	20 81       	ld	r18, Z
    37e8:	20 62       	ori	r18, 0x20	; 32
    37ea:	fc 01       	movw	r30, r24
    37ec:	20 83       	st	Z, r18
	// set pin state when pwm is off (becomes active when COMA bits are cleared)
	#ifdef STIRRER_PWM_INVERSE
		OC1A_PORT |= (1 << OC1A_BIT);
	#else
		OC1A_PORT &= ~(1 << OC1A_BIT);
    37ee:	8b e2       	ldi	r24, 0x2B	; 43
    37f0:	90 e0       	ldi	r25, 0x00	; 0
    37f2:	2b e2       	ldi	r18, 0x2B	; 43
    37f4:	30 e0       	ldi	r19, 0x00	; 0
    37f6:	f9 01       	movw	r30, r18
    37f8:	20 81       	ld	r18, Z
    37fa:	2f 7d       	andi	r18, 0xDF	; 223
    37fc:	fc 01       	movw	r30, r24
    37fe:	20 83       	st	Z, r18
	#endif
}
    3800:	00 00       	nop
    3802:	df 91       	pop	r29
    3804:	cf 91       	pop	r28
    3806:	08 95       	ret

00003808 <stirrer_shutdown>:

void stirrer_shutdown()
{
    3808:	cf 93       	push	r28
    380a:	df 93       	push	r29
    380c:	cd b7       	in	r28, 0x3d	; 61
    380e:	de b7       	in	r29, 0x3e	; 62
	// stop timer clock
	TCCR1B &= ~STIRRER_PWM_PRESCALE_BITS;
    3810:	81 e8       	ldi	r24, 0x81	; 129
    3812:	90 e0       	ldi	r25, 0x00	; 0
    3814:	21 e8       	ldi	r18, 0x81	; 129
    3816:	30 e0       	ldi	r19, 0x00	; 0
    3818:	f9 01       	movw	r30, r18
    381a:	20 81       	ld	r18, Z
    381c:	2e 7f       	andi	r18, 0xFE	; 254
    381e:	fc 01       	movw	r30, r24
    3820:	20 83       	st	Z, r18
	// reset top value
	ICR1 = 0x0000;
    3822:	86 e8       	ldi	r24, 0x86	; 134
    3824:	90 e0       	ldi	r25, 0x00	; 0
    3826:	fc 01       	movw	r30, r24
    3828:	11 82       	std	Z+1, r1	; 0x01
    382a:	10 82       	st	Z, r1
	// reset duty cycle val
	TCNT1 = 0x0000;
    382c:	84 e8       	ldi	r24, 0x84	; 132
    382e:	90 e0       	ldi	r25, 0x00	; 0
    3830:	fc 01       	movw	r30, r24
    3832:	11 82       	std	Z+1, r1	; 0x01
    3834:	10 82       	st	Z, r1
	OCR1A = 0x0000;
    3836:	88 e8       	ldi	r24, 0x88	; 136
    3838:	90 e0       	ldi	r25, 0x00	; 0
    383a:	fc 01       	movw	r30, r24
    383c:	11 82       	std	Z+1, r1	; 0x01
    383e:	10 82       	st	Z, r1
	// back to normal mode
	TCCR1A &= ~(STIRRER_PWM_COMA_BITS | STIRRER_PWM_WGM_BITS_A);
    3840:	80 e8       	ldi	r24, 0x80	; 128
    3842:	90 e0       	ldi	r25, 0x00	; 0
    3844:	20 e8       	ldi	r18, 0x80	; 128
    3846:	30 e0       	ldi	r19, 0x00	; 0
    3848:	f9 01       	movw	r30, r18
    384a:	20 81       	ld	r18, Z
    384c:	2f 77       	andi	r18, 0x7F	; 127
    384e:	fc 01       	movw	r30, r24
    3850:	20 83       	st	Z, r18
	TCCR1B &= ~STIRRER_PWM_WGM_BITS_B;
    3852:	81 e8       	ldi	r24, 0x81	; 129
    3854:	90 e0       	ldi	r25, 0x00	; 0
    3856:	21 e8       	ldi	r18, 0x81	; 129
    3858:	30 e0       	ldi	r19, 0x00	; 0
    385a:	f9 01       	movw	r30, r18
    385c:	20 81       	ld	r18, Z
    385e:	2f 7e       	andi	r18, 0xEF	; 239
    3860:	fc 01       	movw	r30, r24
    3862:	20 83       	st	Z, r18
	// disable output pin
	OC1A_DDR &= ~(1 << OC1A_BIT);
    3864:	8a e2       	ldi	r24, 0x2A	; 42
    3866:	90 e0       	ldi	r25, 0x00	; 0
    3868:	2a e2       	ldi	r18, 0x2A	; 42
    386a:	30 e0       	ldi	r19, 0x00	; 0
    386c:	f9 01       	movw	r30, r18
    386e:	20 81       	ld	r18, Z
    3870:	2f 7d       	andi	r18, 0xDF	; 223
    3872:	fc 01       	movw	r30, r24
    3874:	20 83       	st	Z, r18
	OC1A_PORT &= ~(1 << OC1A_BIT);
    3876:	8b e2       	ldi	r24, 0x2B	; 43
    3878:	90 e0       	ldi	r25, 0x00	; 0
    387a:	2b e2       	ldi	r18, 0x2B	; 43
    387c:	30 e0       	ldi	r19, 0x00	; 0
    387e:	f9 01       	movw	r30, r18
    3880:	20 81       	ld	r18, Z
    3882:	2f 7d       	andi	r18, 0xDF	; 223
    3884:	fc 01       	movw	r30, r24
    3886:	20 83       	st	Z, r18
}
    3888:	00 00       	nop
    388a:	df 91       	pop	r29
    388c:	cf 91       	pop	r28
    388e:	08 95       	ret

00003890 <stirrer_set_duty_cycle>:

void stirrer_set_duty_cycle(uint8_t dc)
{
    3890:	cf 93       	push	r28
    3892:	df 93       	push	r29
    3894:	00 d0       	rcall	.+0      	; 0x3896 <stirrer_set_duty_cycle+0x6>
    3896:	00 d0       	rcall	.+0      	; 0x3898 <stirrer_set_duty_cycle+0x8>
    3898:	1f 92       	push	r1
    389a:	cd b7       	in	r28, 0x3d	; 61
    389c:	de b7       	in	r29, 0x3e	; 62
    389e:	8d 83       	std	Y+5, r24	; 0x05
	uint32_t compval = ((uint32_t)umax8(umin8(dc, 100), 0) * STIRRER_PWM_TOP) / 100;
    38a0:	64 e6       	ldi	r22, 0x64	; 100
    38a2:	8d 81       	ldd	r24, Y+5	; 0x05
    38a4:	0e 94 52 13 	call	0x26a4	; 0x26a4 <umin8>
    38a8:	60 e0       	ldi	r22, 0x00	; 0
    38aa:	0e 94 41 13 	call	0x2682	; 0x2682 <umax8>
    38ae:	28 2f       	mov	r18, r24
    38b0:	30 e0       	ldi	r19, 0x00	; 0
    38b2:	40 e0       	ldi	r20, 0x00	; 0
    38b4:	50 e0       	ldi	r21, 0x00	; 0
    38b6:	80 ea       	ldi	r24, 0xA0	; 160
    38b8:	90 e0       	ldi	r25, 0x00	; 0
    38ba:	dc 01       	movw	r26, r24
    38bc:	0e 94 ef 24 	call	0x49de	; 0x49de <__muluhisi3>
    38c0:	dc 01       	movw	r26, r24
    38c2:	cb 01       	movw	r24, r22
    38c4:	24 e6       	ldi	r18, 0x64	; 100
    38c6:	30 e0       	ldi	r19, 0x00	; 0
    38c8:	40 e0       	ldi	r20, 0x00	; 0
    38ca:	50 e0       	ldi	r21, 0x00	; 0
    38cc:	bc 01       	movw	r22, r24
    38ce:	cd 01       	movw	r24, r26
    38d0:	0e 94 b8 24 	call	0x4970	; 0x4970 <__udivmodsi4>
    38d4:	da 01       	movw	r26, r20
    38d6:	c9 01       	movw	r24, r18
    38d8:	89 83       	std	Y+1, r24	; 0x01
    38da:	9a 83       	std	Y+2, r25	; 0x02
    38dc:	ab 83       	std	Y+3, r26	; 0x03
    38de:	bc 83       	std	Y+4, r27	; 0x04
	OCR1A = (uint16_t)compval;
    38e0:	88 e8       	ldi	r24, 0x88	; 136
    38e2:	90 e0       	ldi	r25, 0x00	; 0
    38e4:	29 81       	ldd	r18, Y+1	; 0x01
    38e6:	3a 81       	ldd	r19, Y+2	; 0x02
    38e8:	fc 01       	movw	r30, r24
    38ea:	31 83       	std	Z+1, r19	; 0x01
    38ec:	20 83       	st	Z, r18
}
    38ee:	00 00       	nop
    38f0:	0f 90       	pop	r0
    38f2:	0f 90       	pop	r0
    38f4:	0f 90       	pop	r0
    38f6:	0f 90       	pop	r0
    38f8:	0f 90       	pop	r0
    38fa:	df 91       	pop	r29
    38fc:	cf 91       	pop	r28
    38fe:	08 95       	ret

00003900 <stirrer_on>:

void stirrer_on()
{
    3900:	cf 93       	push	r28
    3902:	df 93       	push	r29
    3904:	cd b7       	in	r28, 0x3d	; 61
    3906:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 0x0000;
    3908:	84 e8       	ldi	r24, 0x84	; 132
    390a:	90 e0       	ldi	r25, 0x00	; 0
    390c:	fc 01       	movw	r30, r24
    390e:	11 82       	std	Z+1, r1	; 0x01
    3910:	10 82       	st	Z, r1
	#ifdef STIRRER_PWM_INVERSE
		OCR1A = STIRRER_PWM_TOP;
	#else
		OCR1A = 0x0000;
    3912:	88 e8       	ldi	r24, 0x88	; 136
    3914:	90 e0       	ldi	r25, 0x00	; 0
    3916:	fc 01       	movw	r30, r24
    3918:	11 82       	std	Z+1, r1	; 0x01
    391a:	10 82       	st	Z, r1
	#endif
	TCCR1A |= STIRRER_PWM_COMA_BITS;
    391c:	80 e8       	ldi	r24, 0x80	; 128
    391e:	90 e0       	ldi	r25, 0x00	; 0
    3920:	20 e8       	ldi	r18, 0x80	; 128
    3922:	30 e0       	ldi	r19, 0x00	; 0
    3924:	f9 01       	movw	r30, r18
    3926:	20 81       	ld	r18, Z
    3928:	20 68       	ori	r18, 0x80	; 128
    392a:	fc 01       	movw	r30, r24
    392c:	20 83       	st	Z, r18
	TCCR1B |= STIRRER_PWM_PRESCALE_BITS;
    392e:	81 e8       	ldi	r24, 0x81	; 129
    3930:	90 e0       	ldi	r25, 0x00	; 0
    3932:	21 e8       	ldi	r18, 0x81	; 129
    3934:	30 e0       	ldi	r19, 0x00	; 0
    3936:	f9 01       	movw	r30, r18
    3938:	20 81       	ld	r18, Z
    393a:	21 60       	ori	r18, 0x01	; 1
    393c:	fc 01       	movw	r30, r24
    393e:	20 83       	st	Z, r18
}
    3940:	00 00       	nop
    3942:	df 91       	pop	r29
    3944:	cf 91       	pop	r28
    3946:	08 95       	ret

00003948 <stirrer_off>:

void stirrer_off()
{	
    3948:	cf 93       	push	r28
    394a:	df 93       	push	r29
    394c:	cd b7       	in	r28, 0x3d	; 61
    394e:	de b7       	in	r29, 0x3e	; 62
	TCCR1A &= ~STIRRER_PWM_COMA_BITS;
    3950:	80 e8       	ldi	r24, 0x80	; 128
    3952:	90 e0       	ldi	r25, 0x00	; 0
    3954:	20 e8       	ldi	r18, 0x80	; 128
    3956:	30 e0       	ldi	r19, 0x00	; 0
    3958:	f9 01       	movw	r30, r18
    395a:	20 81       	ld	r18, Z
    395c:	2f 77       	andi	r18, 0x7F	; 127
    395e:	fc 01       	movw	r30, r24
    3960:	20 83       	st	Z, r18
	TCCR1B &= ~STIRRER_PWM_PRESCALE_BITS;	
    3962:	81 e8       	ldi	r24, 0x81	; 129
    3964:	90 e0       	ldi	r25, 0x00	; 0
    3966:	21 e8       	ldi	r18, 0x81	; 129
    3968:	30 e0       	ldi	r19, 0x00	; 0
    396a:	f9 01       	movw	r30, r18
    396c:	20 81       	ld	r18, Z
    396e:	2e 7f       	andi	r18, 0xFE	; 254
    3970:	fc 01       	movw	r30, r24
    3972:	20 83       	st	Z, r18
	TCNT1 = 0x0000;
    3974:	84 e8       	ldi	r24, 0x84	; 132
    3976:	90 e0       	ldi	r25, 0x00	; 0
    3978:	fc 01       	movw	r30, r24
    397a:	11 82       	std	Z+1, r1	; 0x01
    397c:	10 82       	st	Z, r1
    397e:	00 00       	nop
    3980:	df 91       	pop	r29
    3982:	cf 91       	pop	r28
    3984:	08 95       	ret

00003986 <switch_init>:
static volatile uint8_t switch_debounce_ct1;

// ---------------------------- PUBLIC ------------------------------------------

void switch_init()
{
    3986:	cf 93       	push	r28
    3988:	df 93       	push	r29
    398a:	1f 92       	push	r1
    398c:	cd b7       	in	r28, 0x3d	; 61
    398e:	de b7       	in	r29, 0x3e	; 62
	// set data dir
	SWITCH_DDR &= ~SWITCH_PIN_MASK;
    3990:	84 e2       	ldi	r24, 0x24	; 36
    3992:	90 e0       	ldi	r25, 0x00	; 0
    3994:	24 e2       	ldi	r18, 0x24	; 36
    3996:	30 e0       	ldi	r19, 0x00	; 0
    3998:	f9 01       	movw	r30, r18
    399a:	20 81       	ld	r18, Z
    399c:	2c 7f       	andi	r18, 0xFC	; 252
    399e:	fc 01       	movw	r30, r24
    39a0:	20 83       	st	Z, r18
	// enable internal pullups
	SWITCH_PORT |= SWITCH_PIN_MASK;
    39a2:	85 e2       	ldi	r24, 0x25	; 37
    39a4:	90 e0       	ldi	r25, 0x00	; 0
    39a6:	25 e2       	ldi	r18, 0x25	; 37
    39a8:	30 e0       	ldi	r19, 0x00	; 0
    39aa:	f9 01       	movw	r30, r18
    39ac:	20 81       	ld	r18, Z
    39ae:	23 60       	ori	r18, 0x03	; 3
    39b0:	fc 01       	movw	r30, r24
    39b2:	20 83       	st	Z, r18
	
	// clear all state variables
	switch_state_press = 0x00;
    39b4:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <switch_state_press>
	switch_state_release = 0x00;
    39b8:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <switch_state_release>
	switch_state_longpress = 0x00;
    39bc:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <switch_state_longpress>
	switch_state = 0x00;
    39c0:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <switch_state>
	
	for (uint8_t i = 0; i < SWITCH_NUMBER; ++i)
    39c4:	19 82       	std	Y+1, r1	; 0x01
    39c6:	0a c0       	rjmp	.+20     	; 0x39dc <switch_init+0x56>
		switch_press_counter[i] = 0;
    39c8:	89 81       	ldd	r24, Y+1	; 0x01
    39ca:	88 2f       	mov	r24, r24
    39cc:	90 e0       	ldi	r25, 0x00	; 0
    39ce:	84 5f       	subi	r24, 0xF4	; 244
    39d0:	9e 4f       	sbci	r25, 0xFE	; 254
    39d2:	fc 01       	movw	r30, r24
    39d4:	10 82       	st	Z, r1
	switch_state_press = 0x00;
	switch_state_release = 0x00;
	switch_state_longpress = 0x00;
	switch_state = 0x00;
	
	for (uint8_t i = 0; i < SWITCH_NUMBER; ++i)
    39d6:	89 81       	ldd	r24, Y+1	; 0x01
    39d8:	8f 5f       	subi	r24, 0xFF	; 255
    39da:	89 83       	std	Y+1, r24	; 0x01
    39dc:	89 81       	ldd	r24, Y+1	; 0x01
    39de:	82 30       	cpi	r24, 0x02	; 2
    39e0:	98 f3       	brcs	.-26     	; 0x39c8 <switch_init+0x42>
		switch_press_counter[i] = 0;
	
	switch_debounce_ct0 = 0xFF & SWITCH_PIN_MASK;	
    39e2:	83 e0       	ldi	r24, 0x03	; 3
    39e4:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <switch_debounce_ct0>
	switch_debounce_ct1 = 0xFF & SWITCH_PIN_MASK;	
    39e8:	83 e0       	ldi	r24, 0x03	; 3
    39ea:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <switch_debounce_ct1>
}
    39ee:	00 00       	nop
    39f0:	0f 90       	pop	r0
    39f2:	df 91       	pop	r29
    39f4:	cf 91       	pop	r28
    39f6:	08 95       	ret

000039f8 <switch_shutdown>:

void switch_shutdown()
{
    39f8:	cf 93       	push	r28
    39fa:	df 93       	push	r29
    39fc:	1f 92       	push	r1
    39fe:	cd b7       	in	r28, 0x3d	; 61
    3a00:	de b7       	in	r29, 0x3e	; 62
	// disable internal pullups
	SWITCH_PORT &= ~SWITCH_PIN_MASK;
    3a02:	85 e2       	ldi	r24, 0x25	; 37
    3a04:	90 e0       	ldi	r25, 0x00	; 0
    3a06:	25 e2       	ldi	r18, 0x25	; 37
    3a08:	30 e0       	ldi	r19, 0x00	; 0
    3a0a:	f9 01       	movw	r30, r18
    3a0c:	20 81       	ld	r18, Z
    3a0e:	2c 7f       	andi	r18, 0xFC	; 252
    3a10:	fc 01       	movw	r30, r24
    3a12:	20 83       	st	Z, r18
	
	// clear all state variables
	switch_state_press = 0x00;
    3a14:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <switch_state_press>
	switch_state_release = 0x00;
    3a18:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <switch_state_release>
	switch_state_longpress = 0x00;
    3a1c:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <switch_state_longpress>
	switch_state = 0x00;
    3a20:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <switch_state>

	for (uint8_t i = 0; i < SWITCH_NUMBER; ++i)
    3a24:	19 82       	std	Y+1, r1	; 0x01
    3a26:	0a c0       	rjmp	.+20     	; 0x3a3c <switch_shutdown+0x44>
		switch_press_counter[i] = 0;
    3a28:	89 81       	ldd	r24, Y+1	; 0x01
    3a2a:	88 2f       	mov	r24, r24
    3a2c:	90 e0       	ldi	r25, 0x00	; 0
    3a2e:	84 5f       	subi	r24, 0xF4	; 244
    3a30:	9e 4f       	sbci	r25, 0xFE	; 254
    3a32:	fc 01       	movw	r30, r24
    3a34:	10 82       	st	Z, r1
	switch_state_press = 0x00;
	switch_state_release = 0x00;
	switch_state_longpress = 0x00;
	switch_state = 0x00;

	for (uint8_t i = 0; i < SWITCH_NUMBER; ++i)
    3a36:	89 81       	ldd	r24, Y+1	; 0x01
    3a38:	8f 5f       	subi	r24, 0xFF	; 255
    3a3a:	89 83       	std	Y+1, r24	; 0x01
    3a3c:	89 81       	ldd	r24, Y+1	; 0x01
    3a3e:	82 30       	cpi	r24, 0x02	; 2
    3a40:	98 f3       	brcs	.-26     	; 0x3a28 <switch_shutdown+0x30>
		switch_press_counter[i] = 0;
	
	switch_debounce_ct0 = 0xFF & SWITCH_PIN_MASK;
    3a42:	83 e0       	ldi	r24, 0x03	; 3
    3a44:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <switch_debounce_ct0>
	switch_debounce_ct1 = 0xFF & SWITCH_PIN_MASK;
    3a48:	83 e0       	ldi	r24, 0x03	; 3
    3a4a:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <switch_debounce_ct1>
}
    3a4e:	00 00       	nop
    3a50:	0f 90       	pop	r0
    3a52:	df 91       	pop	r29
    3a54:	cf 91       	pop	r28
    3a56:	08 95       	ret

00003a58 <switch_press>:

uint8_t switch_press(uint8_t index)
{
    3a58:	cf 93       	push	r28
    3a5a:	df 93       	push	r29
    3a5c:	1f 92       	push	r1
    3a5e:	cd b7       	in	r28, 0x3d	; 61
    3a60:	de b7       	in	r29, 0x3e	; 62
    3a62:	89 83       	std	Y+1, r24	; 0x01
	if(switch_state_press & (1 << index))
    3a64:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <switch_state_press>
    3a68:	88 2f       	mov	r24, r24
    3a6a:	90 e0       	ldi	r25, 0x00	; 0
    3a6c:	29 81       	ldd	r18, Y+1	; 0x01
    3a6e:	22 2f       	mov	r18, r18
    3a70:	30 e0       	ldi	r19, 0x00	; 0
    3a72:	02 c0       	rjmp	.+4      	; 0x3a78 <switch_press+0x20>
    3a74:	95 95       	asr	r25
    3a76:	87 95       	ror	r24
    3a78:	2a 95       	dec	r18
    3a7a:	e2 f7       	brpl	.-8      	; 0x3a74 <switch_press+0x1c>
    3a7c:	81 70       	andi	r24, 0x01	; 1
    3a7e:	99 27       	eor	r25, r25
    3a80:	89 2b       	or	r24, r25
    3a82:	91 f0       	breq	.+36     	; 0x3aa8 <switch_press+0x50>
	{
		switch_state_press &= ~(1 << index);
    3a84:	89 81       	ldd	r24, Y+1	; 0x01
    3a86:	28 2f       	mov	r18, r24
    3a88:	30 e0       	ldi	r19, 0x00	; 0
    3a8a:	81 e0       	ldi	r24, 0x01	; 1
    3a8c:	90 e0       	ldi	r25, 0x00	; 0
    3a8e:	02 c0       	rjmp	.+4      	; 0x3a94 <switch_press+0x3c>
    3a90:	88 0f       	add	r24, r24
    3a92:	99 1f       	adc	r25, r25
    3a94:	2a 95       	dec	r18
    3a96:	e2 f7       	brpl	.-8      	; 0x3a90 <switch_press+0x38>
    3a98:	80 95       	com	r24
    3a9a:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <switch_state_press>
    3a9e:	89 23       	and	r24, r25
    3aa0:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <switch_state_press>
		return 1;
    3aa4:	81 e0       	ldi	r24, 0x01	; 1
    3aa6:	01 c0       	rjmp	.+2      	; 0x3aaa <switch_press+0x52>
	}
	else
	{
		return 0;
    3aa8:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    3aaa:	0f 90       	pop	r0
    3aac:	df 91       	pop	r29
    3aae:	cf 91       	pop	r28
    3ab0:	08 95       	ret

00003ab2 <switch_release>:

uint8_t switch_release(uint8_t index)
{
    3ab2:	cf 93       	push	r28
    3ab4:	df 93       	push	r29
    3ab6:	1f 92       	push	r1
    3ab8:	cd b7       	in	r28, 0x3d	; 61
    3aba:	de b7       	in	r29, 0x3e	; 62
    3abc:	89 83       	std	Y+1, r24	; 0x01
	if(switch_state_release & (1 << index))
    3abe:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <switch_state_release>
    3ac2:	88 2f       	mov	r24, r24
    3ac4:	90 e0       	ldi	r25, 0x00	; 0
    3ac6:	29 81       	ldd	r18, Y+1	; 0x01
    3ac8:	22 2f       	mov	r18, r18
    3aca:	30 e0       	ldi	r19, 0x00	; 0
    3acc:	02 c0       	rjmp	.+4      	; 0x3ad2 <switch_release+0x20>
    3ace:	95 95       	asr	r25
    3ad0:	87 95       	ror	r24
    3ad2:	2a 95       	dec	r18
    3ad4:	e2 f7       	brpl	.-8      	; 0x3ace <switch_release+0x1c>
    3ad6:	81 70       	andi	r24, 0x01	; 1
    3ad8:	99 27       	eor	r25, r25
    3ada:	89 2b       	or	r24, r25
    3adc:	91 f0       	breq	.+36     	; 0x3b02 <switch_release+0x50>
	{
		switch_state_release &= ~(1 << index);
    3ade:	89 81       	ldd	r24, Y+1	; 0x01
    3ae0:	28 2f       	mov	r18, r24
    3ae2:	30 e0       	ldi	r19, 0x00	; 0
    3ae4:	81 e0       	ldi	r24, 0x01	; 1
    3ae6:	90 e0       	ldi	r25, 0x00	; 0
    3ae8:	02 c0       	rjmp	.+4      	; 0x3aee <switch_release+0x3c>
    3aea:	88 0f       	add	r24, r24
    3aec:	99 1f       	adc	r25, r25
    3aee:	2a 95       	dec	r18
    3af0:	e2 f7       	brpl	.-8      	; 0x3aea <switch_release+0x38>
    3af2:	80 95       	com	r24
    3af4:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <switch_state_release>
    3af8:	89 23       	and	r24, r25
    3afa:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <switch_state_release>
		return 1;
    3afe:	81 e0       	ldi	r24, 0x01	; 1
    3b00:	01 c0       	rjmp	.+2      	; 0x3b04 <switch_release+0x52>
	}
	else
	{
		return 0;
    3b02:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    3b04:	0f 90       	pop	r0
    3b06:	df 91       	pop	r29
    3b08:	cf 91       	pop	r28
    3b0a:	08 95       	ret

00003b0c <switch_longpress>:

uint8_t switch_longpress(uint8_t index)
{
    3b0c:	cf 93       	push	r28
    3b0e:	df 93       	push	r29
    3b10:	1f 92       	push	r1
    3b12:	cd b7       	in	r28, 0x3d	; 61
    3b14:	de b7       	in	r29, 0x3e	; 62
    3b16:	89 83       	std	Y+1, r24	; 0x01
	if(switch_state_longpress & (1 << index))
    3b18:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <switch_state_longpress>
    3b1c:	88 2f       	mov	r24, r24
    3b1e:	90 e0       	ldi	r25, 0x00	; 0
    3b20:	29 81       	ldd	r18, Y+1	; 0x01
    3b22:	22 2f       	mov	r18, r18
    3b24:	30 e0       	ldi	r19, 0x00	; 0
    3b26:	02 c0       	rjmp	.+4      	; 0x3b2c <switch_longpress+0x20>
    3b28:	95 95       	asr	r25
    3b2a:	87 95       	ror	r24
    3b2c:	2a 95       	dec	r18
    3b2e:	e2 f7       	brpl	.-8      	; 0x3b28 <switch_longpress+0x1c>
    3b30:	81 70       	andi	r24, 0x01	; 1
    3b32:	99 27       	eor	r25, r25
    3b34:	89 2b       	or	r24, r25
    3b36:	91 f0       	breq	.+36     	; 0x3b5c <switch_longpress+0x50>
	{
		switch_state_longpress &= ~(1 << index);
    3b38:	89 81       	ldd	r24, Y+1	; 0x01
    3b3a:	28 2f       	mov	r18, r24
    3b3c:	30 e0       	ldi	r19, 0x00	; 0
    3b3e:	81 e0       	ldi	r24, 0x01	; 1
    3b40:	90 e0       	ldi	r25, 0x00	; 0
    3b42:	02 c0       	rjmp	.+4      	; 0x3b48 <switch_longpress+0x3c>
    3b44:	88 0f       	add	r24, r24
    3b46:	99 1f       	adc	r25, r25
    3b48:	2a 95       	dec	r18
    3b4a:	e2 f7       	brpl	.-8      	; 0x3b44 <switch_longpress+0x38>
    3b4c:	80 95       	com	r24
    3b4e:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <switch_state_longpress>
    3b52:	89 23       	and	r24, r25
    3b54:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <switch_state_longpress>
		return 1;
    3b58:	81 e0       	ldi	r24, 0x01	; 1
    3b5a:	01 c0       	rjmp	.+2      	; 0x3b5e <switch_longpress+0x52>
	}
	else
	{
		return 0;
    3b5c:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    3b5e:	0f 90       	pop	r0
    3b60:	df 91       	pop	r29
    3b62:	cf 91       	pop	r28
    3b64:	08 95       	ret

00003b66 <switch_get_state>:

uint8_t switch_get_state(uint8_t index)
{
    3b66:	cf 93       	push	r28
    3b68:	df 93       	push	r29
    3b6a:	1f 92       	push	r1
    3b6c:	cd b7       	in	r28, 0x3d	; 61
    3b6e:	de b7       	in	r29, 0x3e	; 62
    3b70:	89 83       	std	Y+1, r24	; 0x01
	if(switch_state & (1 << index))
    3b72:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <switch_state>
    3b76:	88 2f       	mov	r24, r24
    3b78:	90 e0       	ldi	r25, 0x00	; 0
    3b7a:	29 81       	ldd	r18, Y+1	; 0x01
    3b7c:	22 2f       	mov	r18, r18
    3b7e:	30 e0       	ldi	r19, 0x00	; 0
    3b80:	02 c0       	rjmp	.+4      	; 0x3b86 <switch_get_state+0x20>
    3b82:	95 95       	asr	r25
    3b84:	87 95       	ror	r24
    3b86:	2a 95       	dec	r18
    3b88:	e2 f7       	brpl	.-8      	; 0x3b82 <switch_get_state+0x1c>
    3b8a:	81 70       	andi	r24, 0x01	; 1
    3b8c:	99 27       	eor	r25, r25
    3b8e:	89 2b       	or	r24, r25
    3b90:	11 f0       	breq	.+4      	; 0x3b96 <switch_get_state+0x30>
	{
		return SWITCH_PRESSED;
    3b92:	81 e0       	ldi	r24, 0x01	; 1
    3b94:	01 c0       	rjmp	.+2      	; 0x3b98 <switch_get_state+0x32>
	}
	else
	{
		return SWITCH_RELEASED;
    3b96:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    3b98:	0f 90       	pop	r0
    3b9a:	df 91       	pop	r29
    3b9c:	cf 91       	pop	r28
    3b9e:	08 95       	ret

00003ba0 <switch_update>:
0   0   0	1   1		~(0 & 0) => 1
			1   1		1 ^ (0 & 1) => 1
*/

void switch_update()
{
    3ba0:	cf 93       	push	r28
    3ba2:	df 93       	push	r29
    3ba4:	00 d0       	rcall	.+0      	; 0x3ba6 <switch_update+0x6>
    3ba6:	00 d0       	rcall	.+0      	; 0x3ba8 <switch_update+0x8>
    3ba8:	cd b7       	in	r28, 0x3d	; 61
    3baa:	de b7       	in	r29, 0x3e	; 62
	uint8_t pinchange = (switch_state ^ ~SWITCH_PIN);
    3bac:	83 e2       	ldi	r24, 0x23	; 35
    3bae:	90 e0       	ldi	r25, 0x00	; 0
    3bb0:	fc 01       	movw	r30, r24
    3bb2:	80 81       	ld	r24, Z
    3bb4:	80 95       	com	r24
    3bb6:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <switch_state>
    3bba:	89 27       	eor	r24, r25
    3bbc:	8a 83       	std	Y+2, r24	; 0x02
	// bit 0 of counter. Toggle if change detected, otherwise reset to 1
	switch_debounce_ct0 = ~(switch_debounce_ct0 & pinchange);
    3bbe:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <switch_debounce_ct0>
    3bc2:	8a 81       	ldd	r24, Y+2	; 0x02
    3bc4:	89 23       	and	r24, r25
    3bc6:	80 95       	com	r24
    3bc8:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <switch_debounce_ct0>
	// bit 1 of counter.
	switch_debounce_ct1 = switch_debounce_ct0 ^ (switch_debounce_ct1 & pinchange);
    3bcc:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <switch_debounce_ct1>
    3bd0:	8a 81       	ldd	r24, Y+2	; 0x02
    3bd2:	98 23       	and	r25, r24
    3bd4:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <switch_debounce_ct0>
    3bd8:	89 27       	eor	r24, r25
    3bda:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <switch_debounce_ct1>
	// if counter rolled back to 3 while change was present, write 1 into pinstate to record a debounced change event
	pinchange &= switch_debounce_ct0 & switch_debounce_ct1 & SWITCH_PIN_MASK;
    3bde:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <switch_debounce_ct0>
    3be2:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <switch_debounce_ct1>
    3be6:	89 23       	and	r24, r25
    3be8:	88 2f       	mov	r24, r24
    3bea:	90 e0       	ldi	r25, 0x00	; 0
    3bec:	83 70       	andi	r24, 0x03	; 3
    3bee:	99 27       	eor	r25, r25
    3bf0:	98 2f       	mov	r25, r24
    3bf2:	8a 81       	ldd	r24, Y+2	; 0x02
    3bf4:	89 23       	and	r24, r25
    3bf6:	8a 83       	std	Y+2, r24	; 0x02
	// change key state
	switch_state ^= pinchange;
    3bf8:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <switch_state>
    3bfc:	8a 81       	ldd	r24, Y+2	; 0x02
    3bfe:	89 27       	eor	r24, r25
    3c00:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <switch_state>
	
	// evaluate changes												// 00010100 new state; inverted: 11101011
	uint8_t key_presses = pinchange & switch_state;		// 00011100 pin changes
    3c04:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <switch_state>
    3c08:	9a 81       	ldd	r25, Y+2	; 0x02
    3c0a:	89 23       	and	r24, r25
    3c0c:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t key_releases = pinchange & ~switch_state;		// presses => 00010100; releases =>  00001000
    3c0e:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <switch_state>
    3c12:	98 2f       	mov	r25, r24
    3c14:	90 95       	com	r25
    3c16:	8a 81       	ldd	r24, Y+2	; 0x02
    3c18:	89 23       	and	r24, r25
    3c1a:	8c 83       	std	Y+4, r24	; 0x04
	
	for (uint8_t i = 0; i < SWITCH_NUMBER; ++i)
    3c1c:	19 82       	std	Y+1, r1	; 0x01
    3c1e:	81 c0       	rjmp	.+258    	; 0x3d22 <switch_update+0x182>
	{
		if (key_presses & (1 << i))
    3c20:	8b 81       	ldd	r24, Y+3	; 0x03
    3c22:	88 2f       	mov	r24, r24
    3c24:	90 e0       	ldi	r25, 0x00	; 0
    3c26:	29 81       	ldd	r18, Y+1	; 0x01
    3c28:	22 2f       	mov	r18, r18
    3c2a:	30 e0       	ldi	r19, 0x00	; 0
    3c2c:	02 c0       	rjmp	.+4      	; 0x3c32 <switch_update+0x92>
    3c2e:	95 95       	asr	r25
    3c30:	87 95       	ror	r24
    3c32:	2a 95       	dec	r18
    3c34:	e2 f7       	brpl	.-8      	; 0x3c2e <switch_update+0x8e>
    3c36:	81 70       	andi	r24, 0x01	; 1
    3c38:	99 27       	eor	r25, r25
    3c3a:	89 2b       	or	r24, r25
    3c3c:	c1 f0       	breq	.+48     	; 0x3c6e <switch_update+0xce>
		{
			switch_state_press |= (1 << i);
    3c3e:	89 81       	ldd	r24, Y+1	; 0x01
    3c40:	28 2f       	mov	r18, r24
    3c42:	30 e0       	ldi	r19, 0x00	; 0
    3c44:	81 e0       	ldi	r24, 0x01	; 1
    3c46:	90 e0       	ldi	r25, 0x00	; 0
    3c48:	02 c0       	rjmp	.+4      	; 0x3c4e <switch_update+0xae>
    3c4a:	88 0f       	add	r24, r24
    3c4c:	99 1f       	adc	r25, r25
    3c4e:	2a 95       	dec	r18
    3c50:	e2 f7       	brpl	.-8      	; 0x3c4a <switch_update+0xaa>
    3c52:	98 2f       	mov	r25, r24
    3c54:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <switch_state_press>
    3c58:	89 2b       	or	r24, r25
    3c5a:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <switch_state_press>
			switch_press_counter[i] = 0;
    3c5e:	89 81       	ldd	r24, Y+1	; 0x01
    3c60:	88 2f       	mov	r24, r24
    3c62:	90 e0       	ldi	r25, 0x00	; 0
    3c64:	84 5f       	subi	r24, 0xF4	; 244
    3c66:	9e 4f       	sbci	r25, 0xFE	; 254
    3c68:	fc 01       	movw	r30, r24
    3c6a:	10 82       	st	Z, r1
    3c6c:	1f c0       	rjmp	.+62     	; 0x3cac <switch_update+0x10c>
		}
		else if (key_releases & (1 << i))
    3c6e:	8c 81       	ldd	r24, Y+4	; 0x04
    3c70:	88 2f       	mov	r24, r24
    3c72:	90 e0       	ldi	r25, 0x00	; 0
    3c74:	29 81       	ldd	r18, Y+1	; 0x01
    3c76:	22 2f       	mov	r18, r18
    3c78:	30 e0       	ldi	r19, 0x00	; 0
    3c7a:	02 c0       	rjmp	.+4      	; 0x3c80 <switch_update+0xe0>
    3c7c:	95 95       	asr	r25
    3c7e:	87 95       	ror	r24
    3c80:	2a 95       	dec	r18
    3c82:	e2 f7       	brpl	.-8      	; 0x3c7c <switch_update+0xdc>
    3c84:	81 70       	andi	r24, 0x01	; 1
    3c86:	99 27       	eor	r25, r25
    3c88:	89 2b       	or	r24, r25
    3c8a:	81 f0       	breq	.+32     	; 0x3cac <switch_update+0x10c>
		{
			switch_state_release |= (1 << i);			
    3c8c:	89 81       	ldd	r24, Y+1	; 0x01
    3c8e:	28 2f       	mov	r18, r24
    3c90:	30 e0       	ldi	r19, 0x00	; 0
    3c92:	81 e0       	ldi	r24, 0x01	; 1
    3c94:	90 e0       	ldi	r25, 0x00	; 0
    3c96:	02 c0       	rjmp	.+4      	; 0x3c9c <switch_update+0xfc>
    3c98:	88 0f       	add	r24, r24
    3c9a:	99 1f       	adc	r25, r25
    3c9c:	2a 95       	dec	r18
    3c9e:	e2 f7       	brpl	.-8      	; 0x3c98 <switch_update+0xf8>
    3ca0:	98 2f       	mov	r25, r24
    3ca2:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <switch_state_release>
    3ca6:	89 2b       	or	r24, r25
    3ca8:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <switch_state_release>
		}
	
		// switch is held down
		if((switch_state & (1 << i)) && switch_press_counter[i] < SWITCH_LONGPRESS_TICKS)
    3cac:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <switch_state>
    3cb0:	88 2f       	mov	r24, r24
    3cb2:	90 e0       	ldi	r25, 0x00	; 0
    3cb4:	29 81       	ldd	r18, Y+1	; 0x01
    3cb6:	22 2f       	mov	r18, r18
    3cb8:	30 e0       	ldi	r19, 0x00	; 0
    3cba:	02 c0       	rjmp	.+4      	; 0x3cc0 <switch_update+0x120>
    3cbc:	95 95       	asr	r25
    3cbe:	87 95       	ror	r24
    3cc0:	2a 95       	dec	r18
    3cc2:	e2 f7       	brpl	.-8      	; 0x3cbc <switch_update+0x11c>
    3cc4:	81 70       	andi	r24, 0x01	; 1
    3cc6:	99 27       	eor	r25, r25
    3cc8:	89 2b       	or	r24, r25
    3cca:	41 f1       	breq	.+80     	; 0x3d1c <switch_update+0x17c>
    3ccc:	89 81       	ldd	r24, Y+1	; 0x01
    3cce:	88 2f       	mov	r24, r24
    3cd0:	90 e0       	ldi	r25, 0x00	; 0
    3cd2:	84 5f       	subi	r24, 0xF4	; 244
    3cd4:	9e 4f       	sbci	r25, 0xFE	; 254
    3cd6:	fc 01       	movw	r30, r24
    3cd8:	80 81       	ld	r24, Z
    3cda:	84 36       	cpi	r24, 0x64	; 100
    3cdc:	f8 f4       	brcc	.+62     	; 0x3d1c <switch_update+0x17c>
		{
			if(++switch_press_counter[i] == SWITCH_LONGPRESS_TICKS)
    3cde:	89 81       	ldd	r24, Y+1	; 0x01
    3ce0:	88 2f       	mov	r24, r24
    3ce2:	90 e0       	ldi	r25, 0x00	; 0
    3ce4:	9c 01       	movw	r18, r24
    3ce6:	24 5f       	subi	r18, 0xF4	; 244
    3ce8:	3e 4f       	sbci	r19, 0xFE	; 254
    3cea:	f9 01       	movw	r30, r18
    3cec:	20 81       	ld	r18, Z
    3cee:	2f 5f       	subi	r18, 0xFF	; 255
    3cf0:	84 5f       	subi	r24, 0xF4	; 244
    3cf2:	9e 4f       	sbci	r25, 0xFE	; 254
    3cf4:	fc 01       	movw	r30, r24
    3cf6:	20 83       	st	Z, r18
    3cf8:	24 36       	cpi	r18, 0x64	; 100
    3cfa:	81 f4       	brne	.+32     	; 0x3d1c <switch_update+0x17c>
			{
				switch_state_longpress |= (1 << i);
    3cfc:	89 81       	ldd	r24, Y+1	; 0x01
    3cfe:	28 2f       	mov	r18, r24
    3d00:	30 e0       	ldi	r19, 0x00	; 0
    3d02:	81 e0       	ldi	r24, 0x01	; 1
    3d04:	90 e0       	ldi	r25, 0x00	; 0
    3d06:	02 c0       	rjmp	.+4      	; 0x3d0c <switch_update+0x16c>
    3d08:	88 0f       	add	r24, r24
    3d0a:	99 1f       	adc	r25, r25
    3d0c:	2a 95       	dec	r18
    3d0e:	e2 f7       	brpl	.-8      	; 0x3d08 <switch_update+0x168>
    3d10:	98 2f       	mov	r25, r24
    3d12:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <switch_state_longpress>
    3d16:	89 2b       	or	r24, r25
    3d18:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <switch_state_longpress>
	
	// evaluate changes												// 00010100 new state; inverted: 11101011
	uint8_t key_presses = pinchange & switch_state;		// 00011100 pin changes
	uint8_t key_releases = pinchange & ~switch_state;		// presses => 00010100; releases =>  00001000
	
	for (uint8_t i = 0; i < SWITCH_NUMBER; ++i)
    3d1c:	89 81       	ldd	r24, Y+1	; 0x01
    3d1e:	8f 5f       	subi	r24, 0xFF	; 255
    3d20:	89 83       	std	Y+1, r24	; 0x01
    3d22:	89 81       	ldd	r24, Y+1	; 0x01
    3d24:	82 30       	cpi	r24, 0x02	; 2
    3d26:	08 f4       	brcc	.+2      	; 0x3d2a <switch_update+0x18a>
    3d28:	7b cf       	rjmp	.-266    	; 0x3c20 <switch_update+0x80>
			{
				switch_state_longpress |= (1 << i);
			}
		}
	}
}
    3d2a:	00 00       	nop
    3d2c:	0f 90       	pop	r0
    3d2e:	0f 90       	pop	r0
    3d30:	0f 90       	pop	r0
    3d32:	0f 90       	pop	r0
    3d34:	df 91       	pop	r29
    3d36:	cf 91       	pop	r28
    3d38:	08 95       	ret

00003d3a <__iCliRetVal>:
}

void tsens_stop_adc()
{
	ADCSRA &= ~(1 << ADEN);
}
    3d3a:	cf 93       	push	r28
    3d3c:	df 93       	push	r29
    3d3e:	cd b7       	in	r28, 0x3d	; 61
    3d40:	de b7       	in	r29, 0x3e	; 62
    3d42:	f8 94       	cli
    3d44:	81 e0       	ldi	r24, 0x01	; 1
    3d46:	df 91       	pop	r29
    3d48:	cf 91       	pop	r28
    3d4a:	08 95       	ret

00003d4c <__iRestore>:
    3d4c:	cf 93       	push	r28
    3d4e:	df 93       	push	r29
    3d50:	00 d0       	rcall	.+0      	; 0x3d52 <__iRestore+0x6>
    3d52:	cd b7       	in	r28, 0x3d	; 61
    3d54:	de b7       	in	r29, 0x3e	; 62
    3d56:	9a 83       	std	Y+2, r25	; 0x02
    3d58:	89 83       	std	Y+1, r24	; 0x01
    3d5a:	8f e5       	ldi	r24, 0x5F	; 95
    3d5c:	90 e0       	ldi	r25, 0x00	; 0
    3d5e:	29 81       	ldd	r18, Y+1	; 0x01
    3d60:	3a 81       	ldd	r19, Y+2	; 0x02
    3d62:	f9 01       	movw	r30, r18
    3d64:	20 81       	ld	r18, Z
    3d66:	fc 01       	movw	r30, r24
    3d68:	20 83       	st	Z, r18
    3d6a:	00 00       	nop
    3d6c:	0f 90       	pop	r0
    3d6e:	0f 90       	pop	r0
    3d70:	df 91       	pop	r29
    3d72:	cf 91       	pop	r28
    3d74:	08 95       	ret

00003d76 <tsens_init>:
    3d76:	cf 93       	push	r28
    3d78:	df 93       	push	r29
    3d7a:	cd b7       	in	r28, 0x3d	; 61
    3d7c:	de b7       	in	r29, 0x3e	; 62
    3d7e:	8a e7       	ldi	r24, 0x7A	; 122
    3d80:	90 e0       	ldi	r25, 0x00	; 0
    3d82:	2a e7       	ldi	r18, 0x7A	; 122
    3d84:	30 e0       	ldi	r19, 0x00	; 0
    3d86:	f9 01       	movw	r30, r18
    3d88:	20 81       	ld	r18, Z
    3d8a:	27 75       	andi	r18, 0x57	; 87
    3d8c:	fc 01       	movw	r30, r24
    3d8e:	20 83       	st	Z, r18
    3d90:	8c e7       	ldi	r24, 0x7C	; 124
    3d92:	90 e0       	ldi	r25, 0x00	; 0
    3d94:	fc 01       	movw	r30, r24
    3d96:	10 82       	st	Z, r1
    3d98:	8c e7       	ldi	r24, 0x7C	; 124
    3d9a:	90 e0       	ldi	r25, 0x00	; 0
    3d9c:	2c e7       	ldi	r18, 0x7C	; 124
    3d9e:	30 e0       	ldi	r19, 0x00	; 0
    3da0:	f9 01       	movw	r30, r18
    3da2:	20 81       	ld	r18, Z
    3da4:	20 64       	ori	r18, 0x40	; 64
    3da6:	fc 01       	movw	r30, r24
    3da8:	20 83       	st	Z, r18
    3daa:	8a e7       	ldi	r24, 0x7A	; 122
    3dac:	90 e0       	ldi	r25, 0x00	; 0
    3dae:	2a e7       	ldi	r18, 0x7A	; 122
    3db0:	30 e0       	ldi	r19, 0x00	; 0
    3db2:	f9 01       	movw	r30, r18
    3db4:	20 81       	ld	r18, Z
    3db6:	26 60       	ori	r18, 0x06	; 6
    3db8:	fc 01       	movw	r30, r24
    3dba:	20 83       	st	Z, r18
    3dbc:	8e e7       	ldi	r24, 0x7E	; 126
    3dbe:	90 e0       	ldi	r25, 0x00	; 0
    3dc0:	20 ef       	ldi	r18, 0xF0	; 240
    3dc2:	fc 01       	movw	r30, r24
    3dc4:	20 83       	st	Z, r18
    3dc6:	00 00       	nop
    3dc8:	df 91       	pop	r29
    3dca:	cf 91       	pop	r28
    3dcc:	08 95       	ret

00003dce <tsens_shutdown>:
    3dce:	cf 93       	push	r28
    3dd0:	df 93       	push	r29
    3dd2:	00 d0       	rcall	.+0      	; 0x3dd4 <tsens_shutdown+0x6>
    3dd4:	cd b7       	in	r28, 0x3d	; 61
    3dd6:	de b7       	in	r29, 0x3e	; 62
    3dd8:	8f e5       	ldi	r24, 0x5F	; 95
    3dda:	90 e0       	ldi	r25, 0x00	; 0
    3ddc:	fc 01       	movw	r30, r24
    3dde:	80 81       	ld	r24, Z
    3de0:	8a 83       	std	Y+2, r24	; 0x02
    3de2:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <__iCliRetVal>
    3de6:	89 83       	std	Y+1, r24	; 0x01
    3de8:	1c c0       	rjmp	.+56     	; 0x3e22 <tsens_shutdown+0x54>
    3dea:	8a e7       	ldi	r24, 0x7A	; 122
    3dec:	90 e0       	ldi	r25, 0x00	; 0
    3dee:	2a e7       	ldi	r18, 0x7A	; 122
    3df0:	30 e0       	ldi	r19, 0x00	; 0
    3df2:	f9 01       	movw	r30, r18
    3df4:	20 81       	ld	r18, Z
    3df6:	27 75       	andi	r18, 0x57	; 87
    3df8:	fc 01       	movw	r30, r24
    3dfa:	20 83       	st	Z, r18
    3dfc:	8c e7       	ldi	r24, 0x7C	; 124
    3dfe:	90 e0       	ldi	r25, 0x00	; 0
    3e00:	fc 01       	movw	r30, r24
    3e02:	10 82       	st	Z, r1
    3e04:	8a e7       	ldi	r24, 0x7A	; 122
    3e06:	90 e0       	ldi	r25, 0x00	; 0
    3e08:	2a e7       	ldi	r18, 0x7A	; 122
    3e0a:	30 e0       	ldi	r19, 0x00	; 0
    3e0c:	f9 01       	movw	r30, r18
    3e0e:	20 81       	ld	r18, Z
    3e10:	28 7f       	andi	r18, 0xF8	; 248
    3e12:	fc 01       	movw	r30, r24
    3e14:	20 83       	st	Z, r18
    3e16:	8e e7       	ldi	r24, 0x7E	; 126
    3e18:	90 e0       	ldi	r25, 0x00	; 0
    3e1a:	2f ef       	ldi	r18, 0xFF	; 255
    3e1c:	fc 01       	movw	r30, r24
    3e1e:	20 83       	st	Z, r18
    3e20:	19 82       	std	Y+1, r1	; 0x01
    3e22:	89 81       	ldd	r24, Y+1	; 0x01
    3e24:	88 23       	and	r24, r24
    3e26:	09 f7       	brne	.-62     	; 0x3dea <tsens_shutdown+0x1c>
    3e28:	ce 01       	movw	r24, r28
    3e2a:	02 96       	adiw	r24, 0x02	; 2
    3e2c:	0e 94 a6 1e 	call	0x3d4c	; 0x3d4c <__iRestore>
    3e30:	00 00       	nop
    3e32:	0f 90       	pop	r0
    3e34:	0f 90       	pop	r0
    3e36:	df 91       	pop	r29
    3e38:	cf 91       	pop	r28
    3e3a:	08 95       	ret

00003e3c <tsens_start_adc>:
    3e3c:	cf 93       	push	r28
    3e3e:	df 93       	push	r29
    3e40:	cd b7       	in	r28, 0x3d	; 61
    3e42:	de b7       	in	r29, 0x3e	; 62
    3e44:	8a e7       	ldi	r24, 0x7A	; 122
    3e46:	90 e0       	ldi	r25, 0x00	; 0
    3e48:	2a e7       	ldi	r18, 0x7A	; 122
    3e4a:	30 e0       	ldi	r19, 0x00	; 0
    3e4c:	f9 01       	movw	r30, r18
    3e4e:	20 81       	ld	r18, Z
    3e50:	20 68       	ori	r18, 0x80	; 128
    3e52:	fc 01       	movw	r30, r24
    3e54:	20 83       	st	Z, r18
    3e56:	8a e7       	ldi	r24, 0x7A	; 122
    3e58:	90 e0       	ldi	r25, 0x00	; 0
    3e5a:	2a e7       	ldi	r18, 0x7A	; 122
    3e5c:	30 e0       	ldi	r19, 0x00	; 0
    3e5e:	f9 01       	movw	r30, r18
    3e60:	20 81       	ld	r18, Z
    3e62:	20 64       	ori	r18, 0x40	; 64
    3e64:	fc 01       	movw	r30, r24
    3e66:	20 83       	st	Z, r18
    3e68:	00 00       	nop
    3e6a:	8a e7       	ldi	r24, 0x7A	; 122
    3e6c:	90 e0       	ldi	r25, 0x00	; 0
    3e6e:	fc 01       	movw	r30, r24
    3e70:	80 81       	ld	r24, Z
    3e72:	88 2f       	mov	r24, r24
    3e74:	90 e0       	ldi	r25, 0x00	; 0
    3e76:	80 74       	andi	r24, 0x40	; 64
    3e78:	99 27       	eor	r25, r25
    3e7a:	89 2b       	or	r24, r25
    3e7c:	b1 f7       	brne	.-20     	; 0x3e6a <tsens_start_adc+0x2e>
    3e7e:	88 e7       	ldi	r24, 0x78	; 120
    3e80:	90 e0       	ldi	r25, 0x00	; 0
    3e82:	fc 01       	movw	r30, r24
    3e84:	80 81       	ld	r24, Z
    3e86:	91 81       	ldd	r25, Z+1	; 0x01
    3e88:	00 00       	nop
    3e8a:	df 91       	pop	r29
    3e8c:	cf 91       	pop	r28
    3e8e:	08 95       	ret

00003e90 <tsens_measure0_raw>:

#ifdef TSENS_PROBE_0
uint16_t tsens_measure0_raw()
{
    3e90:	cf 93       	push	r28
    3e92:	df 93       	push	r29
    3e94:	cd b7       	in	r28, 0x3d	; 61
    3e96:	de b7       	in	r29, 0x3e	; 62
	// set channel
	ADMUX &= ~TSENS_ADC_MUX_MASK;
    3e98:	8c e7       	ldi	r24, 0x7C	; 124
    3e9a:	90 e0       	ldi	r25, 0x00	; 0
    3e9c:	2c e7       	ldi	r18, 0x7C	; 124
    3e9e:	30 e0       	ldi	r19, 0x00	; 0
    3ea0:	f9 01       	movw	r30, r18
    3ea2:	20 81       	ld	r18, Z
    3ea4:	20 7e       	andi	r18, 0xE0	; 224
    3ea6:	fc 01       	movw	r30, r24
    3ea8:	20 83       	st	Z, r18
	ADMUX |= TSENS_ADC_PROBE0_MUX_BITS;
    3eaa:	8c e7       	ldi	r24, 0x7C	; 124
    3eac:	90 e0       	ldi	r25, 0x00	; 0
    3eae:	2c e7       	ldi	r18, 0x7C	; 124
    3eb0:	30 e0       	ldi	r19, 0x00	; 0
    3eb2:	f9 01       	movw	r30, r18
    3eb4:	20 81       	ld	r18, Z
    3eb6:	fc 01       	movw	r30, r24
    3eb8:	20 83       	st	Z, r18
	// trigger reading
	ADCSRA |= (1 << ADSC);
    3eba:	8a e7       	ldi	r24, 0x7A	; 122
    3ebc:	90 e0       	ldi	r25, 0x00	; 0
    3ebe:	2a e7       	ldi	r18, 0x7A	; 122
    3ec0:	30 e0       	ldi	r19, 0x00	; 0
    3ec2:	f9 01       	movw	r30, r18
    3ec4:	20 81       	ld	r18, Z
    3ec6:	20 64       	ori	r18, 0x40	; 64
    3ec8:	fc 01       	movw	r30, r24
    3eca:	20 83       	st	Z, r18
	while(ADCSRA & (1 << ADSC)) {};
    3ecc:	00 00       	nop
    3ece:	8a e7       	ldi	r24, 0x7A	; 122
    3ed0:	90 e0       	ldi	r25, 0x00	; 0
    3ed2:	fc 01       	movw	r30, r24
    3ed4:	80 81       	ld	r24, Z
    3ed6:	88 2f       	mov	r24, r24
    3ed8:	90 e0       	ldi	r25, 0x00	; 0
    3eda:	80 74       	andi	r24, 0x40	; 64
    3edc:	99 27       	eor	r25, r25
    3ede:	89 2b       	or	r24, r25
    3ee0:	b1 f7       	brne	.-20     	; 0x3ece <tsens_measure0_raw+0x3e>
	// return result
	return ADCW;
    3ee2:	88 e7       	ldi	r24, 0x78	; 120
    3ee4:	90 e0       	ldi	r25, 0x00	; 0
    3ee6:	fc 01       	movw	r30, r24
    3ee8:	80 81       	ld	r24, Z
    3eea:	91 81       	ldd	r25, Z+1	; 0x01
}
    3eec:	df 91       	pop	r29
    3eee:	cf 91       	pop	r28
    3ef0:	08 95       	ret

00003ef2 <tsens_measure0_resistance>:

float tsens_measure0_resistance()
{
    3ef2:	cf 92       	push	r12
    3ef4:	df 92       	push	r13
    3ef6:	ef 92       	push	r14
    3ef8:	ff 92       	push	r15
    3efa:	cf 93       	push	r28
    3efc:	df 93       	push	r29
    3efe:	cd b7       	in	r28, 0x3d	; 61
    3f00:	de b7       	in	r29, 0x3e	; 62
    3f02:	29 97       	sbiw	r28, 0x09	; 9
    3f04:	0f b6       	in	r0, 0x3f	; 63
    3f06:	f8 94       	cli
    3f08:	de bf       	out	0x3e, r29	; 62
    3f0a:	0f be       	out	0x3f, r0	; 63
    3f0c:	cd bf       	out	0x3d, r28	; 61
	int32_t temp = 0;
    3f0e:	19 82       	std	Y+1, r1	; 0x01
    3f10:	1a 82       	std	Y+2, r1	; 0x02
    3f12:	1b 82       	std	Y+3, r1	; 0x03
    3f14:	1c 82       	std	Y+4, r1	; 0x04
	for(uint8_t i = 0; i < TSENS_NUM_MEASUREMENTS; ++i)
    3f16:	1d 82       	std	Y+5, r1	; 0x05
    3f18:	14 c0       	rjmp	.+40     	; 0x3f42 <tsens_measure0_resistance+0x50>
	{
		temp += tsens_measure0_raw();
    3f1a:	0e 94 48 1f 	call	0x3e90	; 0x3e90 <tsens_measure0_raw>
    3f1e:	cc 01       	movw	r24, r24
    3f20:	a0 e0       	ldi	r26, 0x00	; 0
    3f22:	b0 e0       	ldi	r27, 0x00	; 0
    3f24:	29 81       	ldd	r18, Y+1	; 0x01
    3f26:	3a 81       	ldd	r19, Y+2	; 0x02
    3f28:	4b 81       	ldd	r20, Y+3	; 0x03
    3f2a:	5c 81       	ldd	r21, Y+4	; 0x04
    3f2c:	82 0f       	add	r24, r18
    3f2e:	93 1f       	adc	r25, r19
    3f30:	a4 1f       	adc	r26, r20
    3f32:	b5 1f       	adc	r27, r21
    3f34:	89 83       	std	Y+1, r24	; 0x01
    3f36:	9a 83       	std	Y+2, r25	; 0x02
    3f38:	ab 83       	std	Y+3, r26	; 0x03
    3f3a:	bc 83       	std	Y+4, r27	; 0x04
}

float tsens_measure0_resistance()
{
	int32_t temp = 0;
	for(uint8_t i = 0; i < TSENS_NUM_MEASUREMENTS; ++i)
    3f3c:	8d 81       	ldd	r24, Y+5	; 0x05
    3f3e:	8f 5f       	subi	r24, 0xFF	; 255
    3f40:	8d 83       	std	Y+5, r24	; 0x05
    3f42:	8d 81       	ldd	r24, Y+5	; 0x05
    3f44:	84 30       	cpi	r24, 0x04	; 4
    3f46:	48 f3       	brcs	.-46     	; 0x3f1a <tsens_measure0_resistance+0x28>
	{
		temp += tsens_measure0_raw();
	}
	float tempf = ((float)temp / (TSENS_NUM_MEASUREMENTS * 1024)) * UVCC;
    3f48:	69 81       	ldd	r22, Y+1	; 0x01
    3f4a:	7a 81       	ldd	r23, Y+2	; 0x02
    3f4c:	8b 81       	ldd	r24, Y+3	; 0x03
    3f4e:	9c 81       	ldd	r25, Y+4	; 0x04
    3f50:	0e 94 ed 22 	call	0x45da	; 0x45da <__floatsisf>
    3f54:	dc 01       	movw	r26, r24
    3f56:	cb 01       	movw	r24, r22
    3f58:	20 e0       	ldi	r18, 0x00	; 0
    3f5a:	30 e0       	ldi	r19, 0x00	; 0
    3f5c:	40 e8       	ldi	r20, 0x80	; 128
    3f5e:	55 e4       	ldi	r21, 0x45	; 69
    3f60:	bc 01       	movw	r22, r24
    3f62:	cd 01       	movw	r24, r26
    3f64:	0e 94 07 22 	call	0x440e	; 0x440e <__divsf3>
    3f68:	dc 01       	movw	r26, r24
    3f6a:	cb 01       	movw	r24, r22
    3f6c:	20 e0       	ldi	r18, 0x00	; 0
    3f6e:	30 e0       	ldi	r19, 0x00	; 0
    3f70:	40 ea       	ldi	r20, 0xA0	; 160
    3f72:	50 e4       	ldi	r21, 0x40	; 64
    3f74:	bc 01       	movw	r22, r24
    3f76:	cd 01       	movw	r24, r26
    3f78:	0e 94 02 24 	call	0x4804	; 0x4804 <__mulsf3>
    3f7c:	dc 01       	movw	r26, r24
    3f7e:	cb 01       	movw	r24, r22
    3f80:	8e 83       	std	Y+6, r24	; 0x06
    3f82:	9f 83       	std	Y+7, r25	; 0x07
    3f84:	a8 87       	std	Y+8, r26	; 0x08
    3f86:	b9 87       	std	Y+9, r27	; 0x09
	
	// for now return resistance for calibration
	return (TSENS_PROBE_0_RESISTANCE * tempf) / (UVCC - tempf);
    3f88:	20 e0       	ldi	r18, 0x00	; 0
    3f8a:	30 e5       	ldi	r19, 0x50	; 80
    3f8c:	43 ec       	ldi	r20, 0xC3	; 195
    3f8e:	57 e4       	ldi	r21, 0x47	; 71
    3f90:	6e 81       	ldd	r22, Y+6	; 0x06
    3f92:	7f 81       	ldd	r23, Y+7	; 0x07
    3f94:	88 85       	ldd	r24, Y+8	; 0x08
    3f96:	99 85       	ldd	r25, Y+9	; 0x09
    3f98:	0e 94 02 24 	call	0x4804	; 0x4804 <__mulsf3>
    3f9c:	dc 01       	movw	r26, r24
    3f9e:	cb 01       	movw	r24, r22
    3fa0:	6c 01       	movw	r12, r24
    3fa2:	7d 01       	movw	r14, r26
    3fa4:	2e 81       	ldd	r18, Y+6	; 0x06
    3fa6:	3f 81       	ldd	r19, Y+7	; 0x07
    3fa8:	48 85       	ldd	r20, Y+8	; 0x08
    3faa:	59 85       	ldd	r21, Y+9	; 0x09
    3fac:	60 e0       	ldi	r22, 0x00	; 0
    3fae:	70 e0       	ldi	r23, 0x00	; 0
    3fb0:	80 ea       	ldi	r24, 0xA0	; 160
    3fb2:	90 e4       	ldi	r25, 0x40	; 64
    3fb4:	0e 94 95 21 	call	0x432a	; 0x432a <__subsf3>
    3fb8:	dc 01       	movw	r26, r24
    3fba:	cb 01       	movw	r24, r22
    3fbc:	9c 01       	movw	r18, r24
    3fbe:	ad 01       	movw	r20, r26
    3fc0:	c7 01       	movw	r24, r14
    3fc2:	b6 01       	movw	r22, r12
    3fc4:	0e 94 07 22 	call	0x440e	; 0x440e <__divsf3>
    3fc8:	dc 01       	movw	r26, r24
    3fca:	cb 01       	movw	r24, r22
}
    3fcc:	bc 01       	movw	r22, r24
    3fce:	cd 01       	movw	r24, r26
    3fd0:	29 96       	adiw	r28, 0x09	; 9
    3fd2:	0f b6       	in	r0, 0x3f	; 63
    3fd4:	f8 94       	cli
    3fd6:	de bf       	out	0x3e, r29	; 62
    3fd8:	0f be       	out	0x3f, r0	; 63
    3fda:	cd bf       	out	0x3d, r28	; 61
    3fdc:	df 91       	pop	r29
    3fde:	cf 91       	pop	r28
    3fe0:	ff 90       	pop	r15
    3fe2:	ef 90       	pop	r14
    3fe4:	df 90       	pop	r13
    3fe6:	cf 90       	pop	r12
    3fe8:	08 95       	ret

00003fea <tsens_measure_probe0_temp>:

float tsens_measure_probe0_temp()
{
    3fea:	cf 92       	push	r12
    3fec:	df 92       	push	r13
    3fee:	ef 92       	push	r14
    3ff0:	ff 92       	push	r15
    3ff2:	cf 93       	push	r28
    3ff4:	df 93       	push	r29
    3ff6:	00 d0       	rcall	.+0      	; 0x3ff8 <tsens_measure_probe0_temp+0xe>
    3ff8:	00 d0       	rcall	.+0      	; 0x3ffa <tsens_measure_probe0_temp+0x10>
    3ffa:	cd b7       	in	r28, 0x3d	; 61
    3ffc:	de b7       	in	r29, 0x3e	; 62
	float logR = log(tsens_measure0_resistance());
    3ffe:	0e 94 79 1f 	call	0x3ef2	; 0x3ef2 <tsens_measure0_resistance>
    4002:	dc 01       	movw	r26, r24
    4004:	cb 01       	movw	r24, r22
    4006:	bc 01       	movw	r22, r24
    4008:	cd 01       	movw	r24, r26
    400a:	0e 94 ba 23 	call	0x4774	; 0x4774 <log>
    400e:	dc 01       	movw	r26, r24
    4010:	cb 01       	movw	r24, r22
    4012:	89 83       	std	Y+1, r24	; 0x01
    4014:	9a 83       	std	Y+2, r25	; 0x02
    4016:	ab 83       	std	Y+3, r26	; 0x03
    4018:	bc 83       	std	Y+4, r27	; 0x04
	return (1.0 / (TSENS_PROBE_0_A0 + TSENS_PROBE_0_A1 * logR + TSENS_PROBE_0_A2 * logR * logR * logR)) - 273.15;
    401a:	20 ea       	ldi	r18, 0xA0	; 160
    401c:	30 e6       	ldi	r19, 0x60	; 96
    401e:	42 ef       	ldi	r20, 0xF2	; 242
    4020:	59 e3       	ldi	r21, 0x39	; 57
    4022:	69 81       	ldd	r22, Y+1	; 0x01
    4024:	7a 81       	ldd	r23, Y+2	; 0x02
    4026:	8b 81       	ldd	r24, Y+3	; 0x03
    4028:	9c 81       	ldd	r25, Y+4	; 0x04
    402a:	0e 94 02 24 	call	0x4804	; 0x4804 <__mulsf3>
    402e:	dc 01       	movw	r26, r24
    4030:	cb 01       	movw	r24, r22
    4032:	25 e5       	ldi	r18, 0x55	; 85
    4034:	39 ef       	ldi	r19, 0xF9	; 249
    4036:	46 e9       	ldi	r20, 0x96	; 150
    4038:	5a e3       	ldi	r21, 0x3A	; 58
    403a:	bc 01       	movw	r22, r24
    403c:	cd 01       	movw	r24, r26
    403e:	0e 94 95 21 	call	0x432a	; 0x432a <__subsf3>
    4042:	dc 01       	movw	r26, r24
    4044:	cb 01       	movw	r24, r22
    4046:	6c 01       	movw	r12, r24
    4048:	7d 01       	movw	r14, r26
    404a:	2b e0       	ldi	r18, 0x0B	; 11
    404c:	37 ed       	ldi	r19, 0xD7	; 215
    404e:	4b e0       	ldi	r20, 0x0B	; 11
    4050:	55 eb       	ldi	r21, 0xB5	; 181
    4052:	69 81       	ldd	r22, Y+1	; 0x01
    4054:	7a 81       	ldd	r23, Y+2	; 0x02
    4056:	8b 81       	ldd	r24, Y+3	; 0x03
    4058:	9c 81       	ldd	r25, Y+4	; 0x04
    405a:	0e 94 02 24 	call	0x4804	; 0x4804 <__mulsf3>
    405e:	dc 01       	movw	r26, r24
    4060:	cb 01       	movw	r24, r22
    4062:	29 81       	ldd	r18, Y+1	; 0x01
    4064:	3a 81       	ldd	r19, Y+2	; 0x02
    4066:	4b 81       	ldd	r20, Y+3	; 0x03
    4068:	5c 81       	ldd	r21, Y+4	; 0x04
    406a:	bc 01       	movw	r22, r24
    406c:	cd 01       	movw	r24, r26
    406e:	0e 94 02 24 	call	0x4804	; 0x4804 <__mulsf3>
    4072:	dc 01       	movw	r26, r24
    4074:	cb 01       	movw	r24, r22
    4076:	29 81       	ldd	r18, Y+1	; 0x01
    4078:	3a 81       	ldd	r19, Y+2	; 0x02
    407a:	4b 81       	ldd	r20, Y+3	; 0x03
    407c:	5c 81       	ldd	r21, Y+4	; 0x04
    407e:	bc 01       	movw	r22, r24
    4080:	cd 01       	movw	r24, r26
    4082:	0e 94 02 24 	call	0x4804	; 0x4804 <__mulsf3>
    4086:	dc 01       	movw	r26, r24
    4088:	cb 01       	movw	r24, r22
    408a:	9c 01       	movw	r18, r24
    408c:	ad 01       	movw	r20, r26
    408e:	c7 01       	movw	r24, r14
    4090:	b6 01       	movw	r22, r12
    4092:	0e 94 96 21 	call	0x432c	; 0x432c <__addsf3>
    4096:	dc 01       	movw	r26, r24
    4098:	cb 01       	movw	r24, r22
    409a:	9c 01       	movw	r18, r24
    409c:	ad 01       	movw	r20, r26
    409e:	60 e0       	ldi	r22, 0x00	; 0
    40a0:	70 e0       	ldi	r23, 0x00	; 0
    40a2:	80 e8       	ldi	r24, 0x80	; 128
    40a4:	9f e3       	ldi	r25, 0x3F	; 63
    40a6:	0e 94 07 22 	call	0x440e	; 0x440e <__divsf3>
    40aa:	dc 01       	movw	r26, r24
    40ac:	cb 01       	movw	r24, r22
    40ae:	23 e3       	ldi	r18, 0x33	; 51
    40b0:	33 e9       	ldi	r19, 0x93	; 147
    40b2:	48 e8       	ldi	r20, 0x88	; 136
    40b4:	53 e4       	ldi	r21, 0x43	; 67
    40b6:	bc 01       	movw	r22, r24
    40b8:	cd 01       	movw	r24, r26
    40ba:	0e 94 95 21 	call	0x432a	; 0x432a <__subsf3>
    40be:	dc 01       	movw	r26, r24
    40c0:	cb 01       	movw	r24, r22
}
    40c2:	bc 01       	movw	r22, r24
    40c4:	cd 01       	movw	r24, r26
    40c6:	0f 90       	pop	r0
    40c8:	0f 90       	pop	r0
    40ca:	0f 90       	pop	r0
    40cc:	0f 90       	pop	r0
    40ce:	df 91       	pop	r29
    40d0:	cf 91       	pop	r28
    40d2:	ff 90       	pop	r15
    40d4:	ef 90       	pop	r14
    40d6:	df 90       	pop	r13
    40d8:	cf 90       	pop	r12
    40da:	08 95       	ret

000040dc <tsens_measure1_raw>:
#endif

#ifdef TSENS_PROBE_1
uint16_t tsens_measure1_raw()
{
    40dc:	cf 93       	push	r28
    40de:	df 93       	push	r29
    40e0:	cd b7       	in	r28, 0x3d	; 61
    40e2:	de b7       	in	r29, 0x3e	; 62
	// set channel
	ADMUX &= ~TSENS_ADC_MUX_MASK;
    40e4:	8c e7       	ldi	r24, 0x7C	; 124
    40e6:	90 e0       	ldi	r25, 0x00	; 0
    40e8:	2c e7       	ldi	r18, 0x7C	; 124
    40ea:	30 e0       	ldi	r19, 0x00	; 0
    40ec:	f9 01       	movw	r30, r18
    40ee:	20 81       	ld	r18, Z
    40f0:	20 7e       	andi	r18, 0xE0	; 224
    40f2:	fc 01       	movw	r30, r24
    40f4:	20 83       	st	Z, r18
	ADMUX |= TSENS_ADC_PROBE1_MUX_BITS;
    40f6:	8c e7       	ldi	r24, 0x7C	; 124
    40f8:	90 e0       	ldi	r25, 0x00	; 0
    40fa:	2c e7       	ldi	r18, 0x7C	; 124
    40fc:	30 e0       	ldi	r19, 0x00	; 0
    40fe:	f9 01       	movw	r30, r18
    4100:	20 81       	ld	r18, Z
    4102:	21 60       	ori	r18, 0x01	; 1
    4104:	fc 01       	movw	r30, r24
    4106:	20 83       	st	Z, r18
	// trigger reading
	ADCSRA |= (1 << ADSC);
    4108:	8a e7       	ldi	r24, 0x7A	; 122
    410a:	90 e0       	ldi	r25, 0x00	; 0
    410c:	2a e7       	ldi	r18, 0x7A	; 122
    410e:	30 e0       	ldi	r19, 0x00	; 0
    4110:	f9 01       	movw	r30, r18
    4112:	20 81       	ld	r18, Z
    4114:	20 64       	ori	r18, 0x40	; 64
    4116:	fc 01       	movw	r30, r24
    4118:	20 83       	st	Z, r18
	while(ADCSRA & (1 << ADSC)) {};
    411a:	00 00       	nop
    411c:	8a e7       	ldi	r24, 0x7A	; 122
    411e:	90 e0       	ldi	r25, 0x00	; 0
    4120:	fc 01       	movw	r30, r24
    4122:	80 81       	ld	r24, Z
    4124:	88 2f       	mov	r24, r24
    4126:	90 e0       	ldi	r25, 0x00	; 0
    4128:	80 74       	andi	r24, 0x40	; 64
    412a:	99 27       	eor	r25, r25
    412c:	89 2b       	or	r24, r25
    412e:	b1 f7       	brne	.-20     	; 0x411c <tsens_measure1_raw+0x40>
	// return result
	return ADCW;
    4130:	88 e7       	ldi	r24, 0x78	; 120
    4132:	90 e0       	ldi	r25, 0x00	; 0
    4134:	fc 01       	movw	r30, r24
    4136:	80 81       	ld	r24, Z
    4138:	91 81       	ldd	r25, Z+1	; 0x01
}
    413a:	df 91       	pop	r29
    413c:	cf 91       	pop	r28
    413e:	08 95       	ret

00004140 <tsens_measure1_resistance>:

float tsens_measure1_resistance()
{
    4140:	cf 92       	push	r12
    4142:	df 92       	push	r13
    4144:	ef 92       	push	r14
    4146:	ff 92       	push	r15
    4148:	cf 93       	push	r28
    414a:	df 93       	push	r29
    414c:	cd b7       	in	r28, 0x3d	; 61
    414e:	de b7       	in	r29, 0x3e	; 62
    4150:	29 97       	sbiw	r28, 0x09	; 9
    4152:	0f b6       	in	r0, 0x3f	; 63
    4154:	f8 94       	cli
    4156:	de bf       	out	0x3e, r29	; 62
    4158:	0f be       	out	0x3f, r0	; 63
    415a:	cd bf       	out	0x3d, r28	; 61
	int32_t temp = 0;
    415c:	19 82       	std	Y+1, r1	; 0x01
    415e:	1a 82       	std	Y+2, r1	; 0x02
    4160:	1b 82       	std	Y+3, r1	; 0x03
    4162:	1c 82       	std	Y+4, r1	; 0x04
	for(uint8_t i = 0; i < TSENS_NUM_MEASUREMENTS; ++i)
    4164:	1d 82       	std	Y+5, r1	; 0x05
    4166:	14 c0       	rjmp	.+40     	; 0x4190 <tsens_measure1_resistance+0x50>
	{
		temp += tsens_measure1_raw();
    4168:	0e 94 6e 20 	call	0x40dc	; 0x40dc <tsens_measure1_raw>
    416c:	cc 01       	movw	r24, r24
    416e:	a0 e0       	ldi	r26, 0x00	; 0
    4170:	b0 e0       	ldi	r27, 0x00	; 0
    4172:	29 81       	ldd	r18, Y+1	; 0x01
    4174:	3a 81       	ldd	r19, Y+2	; 0x02
    4176:	4b 81       	ldd	r20, Y+3	; 0x03
    4178:	5c 81       	ldd	r21, Y+4	; 0x04
    417a:	82 0f       	add	r24, r18
    417c:	93 1f       	adc	r25, r19
    417e:	a4 1f       	adc	r26, r20
    4180:	b5 1f       	adc	r27, r21
    4182:	89 83       	std	Y+1, r24	; 0x01
    4184:	9a 83       	std	Y+2, r25	; 0x02
    4186:	ab 83       	std	Y+3, r26	; 0x03
    4188:	bc 83       	std	Y+4, r27	; 0x04
}

float tsens_measure1_resistance()
{
	int32_t temp = 0;
	for(uint8_t i = 0; i < TSENS_NUM_MEASUREMENTS; ++i)
    418a:	8d 81       	ldd	r24, Y+5	; 0x05
    418c:	8f 5f       	subi	r24, 0xFF	; 255
    418e:	8d 83       	std	Y+5, r24	; 0x05
    4190:	8d 81       	ldd	r24, Y+5	; 0x05
    4192:	84 30       	cpi	r24, 0x04	; 4
    4194:	48 f3       	brcs	.-46     	; 0x4168 <tsens_measure1_resistance+0x28>
	{
		temp += tsens_measure1_raw();
	}
	float tempf = ((float)temp / (TSENS_NUM_MEASUREMENTS * 1024)) * UVCC;
    4196:	69 81       	ldd	r22, Y+1	; 0x01
    4198:	7a 81       	ldd	r23, Y+2	; 0x02
    419a:	8b 81       	ldd	r24, Y+3	; 0x03
    419c:	9c 81       	ldd	r25, Y+4	; 0x04
    419e:	0e 94 ed 22 	call	0x45da	; 0x45da <__floatsisf>
    41a2:	dc 01       	movw	r26, r24
    41a4:	cb 01       	movw	r24, r22
    41a6:	20 e0       	ldi	r18, 0x00	; 0
    41a8:	30 e0       	ldi	r19, 0x00	; 0
    41aa:	40 e8       	ldi	r20, 0x80	; 128
    41ac:	55 e4       	ldi	r21, 0x45	; 69
    41ae:	bc 01       	movw	r22, r24
    41b0:	cd 01       	movw	r24, r26
    41b2:	0e 94 07 22 	call	0x440e	; 0x440e <__divsf3>
    41b6:	dc 01       	movw	r26, r24
    41b8:	cb 01       	movw	r24, r22
    41ba:	20 e0       	ldi	r18, 0x00	; 0
    41bc:	30 e0       	ldi	r19, 0x00	; 0
    41be:	40 ea       	ldi	r20, 0xA0	; 160
    41c0:	50 e4       	ldi	r21, 0x40	; 64
    41c2:	bc 01       	movw	r22, r24
    41c4:	cd 01       	movw	r24, r26
    41c6:	0e 94 02 24 	call	0x4804	; 0x4804 <__mulsf3>
    41ca:	dc 01       	movw	r26, r24
    41cc:	cb 01       	movw	r24, r22
    41ce:	8e 83       	std	Y+6, r24	; 0x06
    41d0:	9f 83       	std	Y+7, r25	; 0x07
    41d2:	a8 87       	std	Y+8, r26	; 0x08
    41d4:	b9 87       	std	Y+9, r27	; 0x09
	
	// for now return resistance for calibration
	return (TSENS_PROBE_1_RESISTANCE * tempf) / (UVCC - tempf);
    41d6:	20 e0       	ldi	r18, 0x00	; 0
    41d8:	30 e4       	ldi	r19, 0x40	; 64
    41da:	4c e1       	ldi	r20, 0x1C	; 28
    41dc:	56 e4       	ldi	r21, 0x46	; 70
    41de:	6e 81       	ldd	r22, Y+6	; 0x06
    41e0:	7f 81       	ldd	r23, Y+7	; 0x07
    41e2:	88 85       	ldd	r24, Y+8	; 0x08
    41e4:	99 85       	ldd	r25, Y+9	; 0x09
    41e6:	0e 94 02 24 	call	0x4804	; 0x4804 <__mulsf3>
    41ea:	dc 01       	movw	r26, r24
    41ec:	cb 01       	movw	r24, r22
    41ee:	6c 01       	movw	r12, r24
    41f0:	7d 01       	movw	r14, r26
    41f2:	2e 81       	ldd	r18, Y+6	; 0x06
    41f4:	3f 81       	ldd	r19, Y+7	; 0x07
    41f6:	48 85       	ldd	r20, Y+8	; 0x08
    41f8:	59 85       	ldd	r21, Y+9	; 0x09
    41fa:	60 e0       	ldi	r22, 0x00	; 0
    41fc:	70 e0       	ldi	r23, 0x00	; 0
    41fe:	80 ea       	ldi	r24, 0xA0	; 160
    4200:	90 e4       	ldi	r25, 0x40	; 64
    4202:	0e 94 95 21 	call	0x432a	; 0x432a <__subsf3>
    4206:	dc 01       	movw	r26, r24
    4208:	cb 01       	movw	r24, r22
    420a:	9c 01       	movw	r18, r24
    420c:	ad 01       	movw	r20, r26
    420e:	c7 01       	movw	r24, r14
    4210:	b6 01       	movw	r22, r12
    4212:	0e 94 07 22 	call	0x440e	; 0x440e <__divsf3>
    4216:	dc 01       	movw	r26, r24
    4218:	cb 01       	movw	r24, r22
}
    421a:	bc 01       	movw	r22, r24
    421c:	cd 01       	movw	r24, r26
    421e:	29 96       	adiw	r28, 0x09	; 9
    4220:	0f b6       	in	r0, 0x3f	; 63
    4222:	f8 94       	cli
    4224:	de bf       	out	0x3e, r29	; 62
    4226:	0f be       	out	0x3f, r0	; 63
    4228:	cd bf       	out	0x3d, r28	; 61
    422a:	df 91       	pop	r29
    422c:	cf 91       	pop	r28
    422e:	ff 90       	pop	r15
    4230:	ef 90       	pop	r14
    4232:	df 90       	pop	r13
    4234:	cf 90       	pop	r12
    4236:	08 95       	ret

00004238 <tsens_measure_probe1_temp>:

float tsens_measure_probe1_temp()
{
    4238:	cf 92       	push	r12
    423a:	df 92       	push	r13
    423c:	ef 92       	push	r14
    423e:	ff 92       	push	r15
    4240:	cf 93       	push	r28
    4242:	df 93       	push	r29
    4244:	00 d0       	rcall	.+0      	; 0x4246 <tsens_measure_probe1_temp+0xe>
    4246:	00 d0       	rcall	.+0      	; 0x4248 <tsens_measure_probe1_temp+0x10>
    4248:	cd b7       	in	r28, 0x3d	; 61
    424a:	de b7       	in	r29, 0x3e	; 62
	float logR = log(tsens_measure1_resistance());
    424c:	0e 94 a0 20 	call	0x4140	; 0x4140 <tsens_measure1_resistance>
    4250:	dc 01       	movw	r26, r24
    4252:	cb 01       	movw	r24, r22
    4254:	bc 01       	movw	r22, r24
    4256:	cd 01       	movw	r24, r26
    4258:	0e 94 ba 23 	call	0x4774	; 0x4774 <log>
    425c:	dc 01       	movw	r26, r24
    425e:	cb 01       	movw	r24, r22
    4260:	89 83       	std	Y+1, r24	; 0x01
    4262:	9a 83       	std	Y+2, r25	; 0x02
    4264:	ab 83       	std	Y+3, r26	; 0x03
    4266:	bc 83       	std	Y+4, r27	; 0x04
	return (1.0 / (TSENS_PROBE_1_A0 + TSENS_PROBE_1_A1 * logR + TSENS_PROBE_1_A2 * logR * logR * logR)) - 273.15;
    4268:	25 ee       	ldi	r18, 0xE5	; 229
    426a:	31 ec       	ldi	r19, 0xC1	; 193
    426c:	44 e5       	ldi	r20, 0x54	; 84
    426e:	59 e3       	ldi	r21, 0x39	; 57
    4270:	69 81       	ldd	r22, Y+1	; 0x01
    4272:	7a 81       	ldd	r23, Y+2	; 0x02
    4274:	8b 81       	ldd	r24, Y+3	; 0x03
    4276:	9c 81       	ldd	r25, Y+4	; 0x04
    4278:	0e 94 02 24 	call	0x4804	; 0x4804 <__mulsf3>
    427c:	dc 01       	movw	r26, r24
    427e:	cb 01       	movw	r24, r22
    4280:	21 ea       	ldi	r18, 0xA1	; 161
    4282:	38 ee       	ldi	r19, 0xE8	; 232
    4284:	4c ea       	ldi	r20, 0xAC	; 172
    4286:	5a e3       	ldi	r21, 0x3A	; 58
    4288:	bc 01       	movw	r22, r24
    428a:	cd 01       	movw	r24, r26
    428c:	0e 94 96 21 	call	0x432c	; 0x432c <__addsf3>
    4290:	dc 01       	movw	r26, r24
    4292:	cb 01       	movw	r24, r22
    4294:	6c 01       	movw	r12, r24
    4296:	7d 01       	movw	r14, r26
    4298:	29 e4       	ldi	r18, 0x49	; 73
    429a:	36 e8       	ldi	r19, 0x86	; 134
    429c:	4c e7       	ldi	r20, 0x7C	; 124
    429e:	54 e3       	ldi	r21, 0x34	; 52
    42a0:	69 81       	ldd	r22, Y+1	; 0x01
    42a2:	7a 81       	ldd	r23, Y+2	; 0x02
    42a4:	8b 81       	ldd	r24, Y+3	; 0x03
    42a6:	9c 81       	ldd	r25, Y+4	; 0x04
    42a8:	0e 94 02 24 	call	0x4804	; 0x4804 <__mulsf3>
    42ac:	dc 01       	movw	r26, r24
    42ae:	cb 01       	movw	r24, r22
    42b0:	29 81       	ldd	r18, Y+1	; 0x01
    42b2:	3a 81       	ldd	r19, Y+2	; 0x02
    42b4:	4b 81       	ldd	r20, Y+3	; 0x03
    42b6:	5c 81       	ldd	r21, Y+4	; 0x04
    42b8:	bc 01       	movw	r22, r24
    42ba:	cd 01       	movw	r24, r26
    42bc:	0e 94 02 24 	call	0x4804	; 0x4804 <__mulsf3>
    42c0:	dc 01       	movw	r26, r24
    42c2:	cb 01       	movw	r24, r22
    42c4:	29 81       	ldd	r18, Y+1	; 0x01
    42c6:	3a 81       	ldd	r19, Y+2	; 0x02
    42c8:	4b 81       	ldd	r20, Y+3	; 0x03
    42ca:	5c 81       	ldd	r21, Y+4	; 0x04
    42cc:	bc 01       	movw	r22, r24
    42ce:	cd 01       	movw	r24, r26
    42d0:	0e 94 02 24 	call	0x4804	; 0x4804 <__mulsf3>
    42d4:	dc 01       	movw	r26, r24
    42d6:	cb 01       	movw	r24, r22
    42d8:	9c 01       	movw	r18, r24
    42da:	ad 01       	movw	r20, r26
    42dc:	c7 01       	movw	r24, r14
    42de:	b6 01       	movw	r22, r12
    42e0:	0e 94 96 21 	call	0x432c	; 0x432c <__addsf3>
    42e4:	dc 01       	movw	r26, r24
    42e6:	cb 01       	movw	r24, r22
    42e8:	9c 01       	movw	r18, r24
    42ea:	ad 01       	movw	r20, r26
    42ec:	60 e0       	ldi	r22, 0x00	; 0
    42ee:	70 e0       	ldi	r23, 0x00	; 0
    42f0:	80 e8       	ldi	r24, 0x80	; 128
    42f2:	9f e3       	ldi	r25, 0x3F	; 63
    42f4:	0e 94 07 22 	call	0x440e	; 0x440e <__divsf3>
    42f8:	dc 01       	movw	r26, r24
    42fa:	cb 01       	movw	r24, r22
    42fc:	23 e3       	ldi	r18, 0x33	; 51
    42fe:	33 e9       	ldi	r19, 0x93	; 147
    4300:	48 e8       	ldi	r20, 0x88	; 136
    4302:	53 e4       	ldi	r21, 0x43	; 67
    4304:	bc 01       	movw	r22, r24
    4306:	cd 01       	movw	r24, r26
    4308:	0e 94 95 21 	call	0x432a	; 0x432a <__subsf3>
    430c:	dc 01       	movw	r26, r24
    430e:	cb 01       	movw	r24, r22
}
    4310:	bc 01       	movw	r22, r24
    4312:	cd 01       	movw	r24, r26
    4314:	0f 90       	pop	r0
    4316:	0f 90       	pop	r0
    4318:	0f 90       	pop	r0
    431a:	0f 90       	pop	r0
    431c:	df 91       	pop	r29
    431e:	cf 91       	pop	r28
    4320:	ff 90       	pop	r15
    4322:	ef 90       	pop	r14
    4324:	df 90       	pop	r13
    4326:	cf 90       	pop	r12
    4328:	08 95       	ret

0000432a <__subsf3>:
    432a:	50 58       	subi	r21, 0x80	; 128

0000432c <__addsf3>:
    432c:	bb 27       	eor	r27, r27
    432e:	aa 27       	eor	r26, r26
    4330:	0e 94 ad 21 	call	0x435a	; 0x435a <__addsf3x>
    4334:	0c 94 73 23 	jmp	0x46e6	; 0x46e6 <__fp_round>
    4338:	0e 94 65 23 	call	0x46ca	; 0x46ca <__fp_pscA>
    433c:	38 f0       	brcs	.+14     	; 0x434c <__addsf3+0x20>
    433e:	0e 94 6c 23 	call	0x46d8	; 0x46d8 <__fp_pscB>
    4342:	20 f0       	brcs	.+8      	; 0x434c <__addsf3+0x20>
    4344:	39 f4       	brne	.+14     	; 0x4354 <__addsf3+0x28>
    4346:	9f 3f       	cpi	r25, 0xFF	; 255
    4348:	19 f4       	brne	.+6      	; 0x4350 <__addsf3+0x24>
    434a:	26 f4       	brtc	.+8      	; 0x4354 <__addsf3+0x28>
    434c:	0c 94 52 23 	jmp	0x46a4	; 0x46a4 <__fp_nan>
    4350:	0e f4       	brtc	.+2      	; 0x4354 <__addsf3+0x28>
    4352:	e0 95       	com	r30
    4354:	e7 fb       	bst	r30, 7
    4356:	0c 94 4c 23 	jmp	0x4698	; 0x4698 <__fp_inf>

0000435a <__addsf3x>:
    435a:	e9 2f       	mov	r30, r25
    435c:	0e 94 84 23 	call	0x4708	; 0x4708 <__fp_split3>
    4360:	58 f3       	brcs	.-42     	; 0x4338 <__addsf3+0xc>
    4362:	ba 17       	cp	r27, r26
    4364:	62 07       	cpc	r22, r18
    4366:	73 07       	cpc	r23, r19
    4368:	84 07       	cpc	r24, r20
    436a:	95 07       	cpc	r25, r21
    436c:	20 f0       	brcs	.+8      	; 0x4376 <__addsf3x+0x1c>
    436e:	79 f4       	brne	.+30     	; 0x438e <__addsf3x+0x34>
    4370:	a6 f5       	brtc	.+104    	; 0x43da <__addsf3x+0x80>
    4372:	0c 94 a6 23 	jmp	0x474c	; 0x474c <__fp_zero>
    4376:	0e f4       	brtc	.+2      	; 0x437a <__addsf3x+0x20>
    4378:	e0 95       	com	r30
    437a:	0b 2e       	mov	r0, r27
    437c:	ba 2f       	mov	r27, r26
    437e:	a0 2d       	mov	r26, r0
    4380:	0b 01       	movw	r0, r22
    4382:	b9 01       	movw	r22, r18
    4384:	90 01       	movw	r18, r0
    4386:	0c 01       	movw	r0, r24
    4388:	ca 01       	movw	r24, r20
    438a:	a0 01       	movw	r20, r0
    438c:	11 24       	eor	r1, r1
    438e:	ff 27       	eor	r31, r31
    4390:	59 1b       	sub	r21, r25
    4392:	99 f0       	breq	.+38     	; 0x43ba <__addsf3x+0x60>
    4394:	59 3f       	cpi	r21, 0xF9	; 249
    4396:	50 f4       	brcc	.+20     	; 0x43ac <__addsf3x+0x52>
    4398:	50 3e       	cpi	r21, 0xE0	; 224
    439a:	68 f1       	brcs	.+90     	; 0x43f6 <__addsf3x+0x9c>
    439c:	1a 16       	cp	r1, r26
    439e:	f0 40       	sbci	r31, 0x00	; 0
    43a0:	a2 2f       	mov	r26, r18
    43a2:	23 2f       	mov	r18, r19
    43a4:	34 2f       	mov	r19, r20
    43a6:	44 27       	eor	r20, r20
    43a8:	58 5f       	subi	r21, 0xF8	; 248
    43aa:	f3 cf       	rjmp	.-26     	; 0x4392 <__addsf3x+0x38>
    43ac:	46 95       	lsr	r20
    43ae:	37 95       	ror	r19
    43b0:	27 95       	ror	r18
    43b2:	a7 95       	ror	r26
    43b4:	f0 40       	sbci	r31, 0x00	; 0
    43b6:	53 95       	inc	r21
    43b8:	c9 f7       	brne	.-14     	; 0x43ac <__addsf3x+0x52>
    43ba:	7e f4       	brtc	.+30     	; 0x43da <__addsf3x+0x80>
    43bc:	1f 16       	cp	r1, r31
    43be:	ba 0b       	sbc	r27, r26
    43c0:	62 0b       	sbc	r22, r18
    43c2:	73 0b       	sbc	r23, r19
    43c4:	84 0b       	sbc	r24, r20
    43c6:	ba f0       	brmi	.+46     	; 0x43f6 <__addsf3x+0x9c>
    43c8:	91 50       	subi	r25, 0x01	; 1
    43ca:	a1 f0       	breq	.+40     	; 0x43f4 <__addsf3x+0x9a>
    43cc:	ff 0f       	add	r31, r31
    43ce:	bb 1f       	adc	r27, r27
    43d0:	66 1f       	adc	r22, r22
    43d2:	77 1f       	adc	r23, r23
    43d4:	88 1f       	adc	r24, r24
    43d6:	c2 f7       	brpl	.-16     	; 0x43c8 <__addsf3x+0x6e>
    43d8:	0e c0       	rjmp	.+28     	; 0x43f6 <__addsf3x+0x9c>
    43da:	ba 0f       	add	r27, r26
    43dc:	62 1f       	adc	r22, r18
    43de:	73 1f       	adc	r23, r19
    43e0:	84 1f       	adc	r24, r20
    43e2:	48 f4       	brcc	.+18     	; 0x43f6 <__addsf3x+0x9c>
    43e4:	87 95       	ror	r24
    43e6:	77 95       	ror	r23
    43e8:	67 95       	ror	r22
    43ea:	b7 95       	ror	r27
    43ec:	f7 95       	ror	r31
    43ee:	9e 3f       	cpi	r25, 0xFE	; 254
    43f0:	08 f0       	brcs	.+2      	; 0x43f4 <__addsf3x+0x9a>
    43f2:	b0 cf       	rjmp	.-160    	; 0x4354 <__addsf3+0x28>
    43f4:	93 95       	inc	r25
    43f6:	88 0f       	add	r24, r24
    43f8:	08 f0       	brcs	.+2      	; 0x43fc <__addsf3x+0xa2>
    43fa:	99 27       	eor	r25, r25
    43fc:	ee 0f       	add	r30, r30
    43fe:	97 95       	ror	r25
    4400:	87 95       	ror	r24
    4402:	08 95       	ret

00004404 <__cmpsf2>:
    4404:	0e 94 28 23 	call	0x4650	; 0x4650 <__fp_cmp>
    4408:	08 f4       	brcc	.+2      	; 0x440c <__cmpsf2+0x8>
    440a:	81 e0       	ldi	r24, 0x01	; 1
    440c:	08 95       	ret

0000440e <__divsf3>:
    440e:	0e 94 1b 22 	call	0x4436	; 0x4436 <__divsf3x>
    4412:	0c 94 73 23 	jmp	0x46e6	; 0x46e6 <__fp_round>
    4416:	0e 94 6c 23 	call	0x46d8	; 0x46d8 <__fp_pscB>
    441a:	58 f0       	brcs	.+22     	; 0x4432 <__divsf3+0x24>
    441c:	0e 94 65 23 	call	0x46ca	; 0x46ca <__fp_pscA>
    4420:	40 f0       	brcs	.+16     	; 0x4432 <__divsf3+0x24>
    4422:	29 f4       	brne	.+10     	; 0x442e <__divsf3+0x20>
    4424:	5f 3f       	cpi	r21, 0xFF	; 255
    4426:	29 f0       	breq	.+10     	; 0x4432 <__divsf3+0x24>
    4428:	0c 94 4c 23 	jmp	0x4698	; 0x4698 <__fp_inf>
    442c:	51 11       	cpse	r21, r1
    442e:	0c 94 a7 23 	jmp	0x474e	; 0x474e <__fp_szero>
    4432:	0c 94 52 23 	jmp	0x46a4	; 0x46a4 <__fp_nan>

00004436 <__divsf3x>:
    4436:	0e 94 84 23 	call	0x4708	; 0x4708 <__fp_split3>
    443a:	68 f3       	brcs	.-38     	; 0x4416 <__divsf3+0x8>

0000443c <__divsf3_pse>:
    443c:	99 23       	and	r25, r25
    443e:	b1 f3       	breq	.-20     	; 0x442c <__divsf3+0x1e>
    4440:	55 23       	and	r21, r21
    4442:	91 f3       	breq	.-28     	; 0x4428 <__divsf3+0x1a>
    4444:	95 1b       	sub	r25, r21
    4446:	55 0b       	sbc	r21, r21
    4448:	bb 27       	eor	r27, r27
    444a:	aa 27       	eor	r26, r26
    444c:	62 17       	cp	r22, r18
    444e:	73 07       	cpc	r23, r19
    4450:	84 07       	cpc	r24, r20
    4452:	38 f0       	brcs	.+14     	; 0x4462 <__divsf3_pse+0x26>
    4454:	9f 5f       	subi	r25, 0xFF	; 255
    4456:	5f 4f       	sbci	r21, 0xFF	; 255
    4458:	22 0f       	add	r18, r18
    445a:	33 1f       	adc	r19, r19
    445c:	44 1f       	adc	r20, r20
    445e:	aa 1f       	adc	r26, r26
    4460:	a9 f3       	breq	.-22     	; 0x444c <__divsf3_pse+0x10>
    4462:	35 d0       	rcall	.+106    	; 0x44ce <__divsf3_pse+0x92>
    4464:	0e 2e       	mov	r0, r30
    4466:	3a f0       	brmi	.+14     	; 0x4476 <__divsf3_pse+0x3a>
    4468:	e0 e8       	ldi	r30, 0x80	; 128
    446a:	32 d0       	rcall	.+100    	; 0x44d0 <__divsf3_pse+0x94>
    446c:	91 50       	subi	r25, 0x01	; 1
    446e:	50 40       	sbci	r21, 0x00	; 0
    4470:	e6 95       	lsr	r30
    4472:	00 1c       	adc	r0, r0
    4474:	ca f7       	brpl	.-14     	; 0x4468 <__divsf3_pse+0x2c>
    4476:	2b d0       	rcall	.+86     	; 0x44ce <__divsf3_pse+0x92>
    4478:	fe 2f       	mov	r31, r30
    447a:	29 d0       	rcall	.+82     	; 0x44ce <__divsf3_pse+0x92>
    447c:	66 0f       	add	r22, r22
    447e:	77 1f       	adc	r23, r23
    4480:	88 1f       	adc	r24, r24
    4482:	bb 1f       	adc	r27, r27
    4484:	26 17       	cp	r18, r22
    4486:	37 07       	cpc	r19, r23
    4488:	48 07       	cpc	r20, r24
    448a:	ab 07       	cpc	r26, r27
    448c:	b0 e8       	ldi	r27, 0x80	; 128
    448e:	09 f0       	breq	.+2      	; 0x4492 <__divsf3_pse+0x56>
    4490:	bb 0b       	sbc	r27, r27
    4492:	80 2d       	mov	r24, r0
    4494:	bf 01       	movw	r22, r30
    4496:	ff 27       	eor	r31, r31
    4498:	93 58       	subi	r25, 0x83	; 131
    449a:	5f 4f       	sbci	r21, 0xFF	; 255
    449c:	3a f0       	brmi	.+14     	; 0x44ac <__divsf3_pse+0x70>
    449e:	9e 3f       	cpi	r25, 0xFE	; 254
    44a0:	51 05       	cpc	r21, r1
    44a2:	78 f0       	brcs	.+30     	; 0x44c2 <__divsf3_pse+0x86>
    44a4:	0c 94 4c 23 	jmp	0x4698	; 0x4698 <__fp_inf>
    44a8:	0c 94 a7 23 	jmp	0x474e	; 0x474e <__fp_szero>
    44ac:	5f 3f       	cpi	r21, 0xFF	; 255
    44ae:	e4 f3       	brlt	.-8      	; 0x44a8 <__divsf3_pse+0x6c>
    44b0:	98 3e       	cpi	r25, 0xE8	; 232
    44b2:	d4 f3       	brlt	.-12     	; 0x44a8 <__divsf3_pse+0x6c>
    44b4:	86 95       	lsr	r24
    44b6:	77 95       	ror	r23
    44b8:	67 95       	ror	r22
    44ba:	b7 95       	ror	r27
    44bc:	f7 95       	ror	r31
    44be:	9f 5f       	subi	r25, 0xFF	; 255
    44c0:	c9 f7       	brne	.-14     	; 0x44b4 <__divsf3_pse+0x78>
    44c2:	88 0f       	add	r24, r24
    44c4:	91 1d       	adc	r25, r1
    44c6:	96 95       	lsr	r25
    44c8:	87 95       	ror	r24
    44ca:	97 f9       	bld	r25, 7
    44cc:	08 95       	ret
    44ce:	e1 e0       	ldi	r30, 0x01	; 1
    44d0:	66 0f       	add	r22, r22
    44d2:	77 1f       	adc	r23, r23
    44d4:	88 1f       	adc	r24, r24
    44d6:	bb 1f       	adc	r27, r27
    44d8:	62 17       	cp	r22, r18
    44da:	73 07       	cpc	r23, r19
    44dc:	84 07       	cpc	r24, r20
    44de:	ba 07       	cpc	r27, r26
    44e0:	20 f0       	brcs	.+8      	; 0x44ea <__divsf3_pse+0xae>
    44e2:	62 1b       	sub	r22, r18
    44e4:	73 0b       	sbc	r23, r19
    44e6:	84 0b       	sbc	r24, r20
    44e8:	ba 0b       	sbc	r27, r26
    44ea:	ee 1f       	adc	r30, r30
    44ec:	88 f7       	brcc	.-30     	; 0x44d0 <__divsf3_pse+0x94>
    44ee:	e0 95       	com	r30
    44f0:	08 95       	ret

000044f2 <__fixsfdi>:
    44f2:	be e3       	ldi	r27, 0x3E	; 62
    44f4:	04 d0       	rcall	.+8      	; 0x44fe <__fixunssfdi+0x2>
    44f6:	08 f4       	brcc	.+2      	; 0x44fa <__fixsfdi+0x8>
    44f8:	90 e8       	ldi	r25, 0x80	; 128
    44fa:	08 95       	ret

000044fc <__fixunssfdi>:
    44fc:	bf e3       	ldi	r27, 0x3F	; 63
    44fe:	22 27       	eor	r18, r18
    4500:	33 27       	eor	r19, r19
    4502:	a9 01       	movw	r20, r18
    4504:	0e 94 8c 23 	call	0x4718	; 0x4718 <__fp_splitA>
    4508:	60 f1       	brcs	.+88     	; 0x4562 <__fixunssfdi+0x66>
    450a:	9f 57       	subi	r25, 0x7F	; 127
    450c:	48 f1       	brcs	.+82     	; 0x4560 <__fixunssfdi+0x64>
    450e:	b9 17       	cp	r27, r25
    4510:	40 f1       	brcs	.+80     	; 0x4562 <__fixunssfdi+0x66>
    4512:	bf e3       	ldi	r27, 0x3F	; 63
    4514:	b9 1b       	sub	r27, r25
    4516:	99 27       	eor	r25, r25
    4518:	b8 50       	subi	r27, 0x08	; 8
    451a:	3a f4       	brpl	.+14     	; 0x452a <__fixunssfdi+0x2e>
    451c:	66 0f       	add	r22, r22
    451e:	77 1f       	adc	r23, r23
    4520:	88 1f       	adc	r24, r24
    4522:	99 1f       	adc	r25, r25
    4524:	b3 95       	inc	r27
    4526:	d2 f3       	brmi	.-12     	; 0x451c <__fixunssfdi+0x20>
    4528:	16 c0       	rjmp	.+44     	; 0x4556 <__fixunssfdi+0x5a>
    452a:	b8 50       	subi	r27, 0x08	; 8
    452c:	4a f0       	brmi	.+18     	; 0x4540 <__fixunssfdi+0x44>
    452e:	23 2f       	mov	r18, r19
    4530:	34 2f       	mov	r19, r20
    4532:	45 2f       	mov	r20, r21
    4534:	56 2f       	mov	r21, r22
    4536:	67 2f       	mov	r22, r23
    4538:	78 2f       	mov	r23, r24
    453a:	88 27       	eor	r24, r24
    453c:	b8 50       	subi	r27, 0x08	; 8
    453e:	ba f7       	brpl	.-18     	; 0x452e <__fixunssfdi+0x32>
    4540:	b8 5f       	subi	r27, 0xF8	; 248
    4542:	49 f0       	breq	.+18     	; 0x4556 <__fixunssfdi+0x5a>
    4544:	86 95       	lsr	r24
    4546:	77 95       	ror	r23
    4548:	67 95       	ror	r22
    454a:	57 95       	ror	r21
    454c:	47 95       	ror	r20
    454e:	37 95       	ror	r19
    4550:	27 95       	ror	r18
    4552:	ba 95       	dec	r27
    4554:	b9 f7       	brne	.-18     	; 0x4544 <__fixunssfdi+0x48>
    4556:	16 f4       	brtc	.+4      	; 0x455c <__fixunssfdi+0x60>
    4558:	0e 94 55 23 	call	0x46aa	; 0x46aa <__fp_negdi>
    455c:	88 94       	clc
    455e:	08 95       	ret
    4560:	88 94       	clc
    4562:	60 e0       	ldi	r22, 0x00	; 0
    4564:	70 e0       	ldi	r23, 0x00	; 0
    4566:	cb 01       	movw	r24, r22
    4568:	08 95       	ret

0000456a <__fixsfsi>:
    456a:	0e 94 bc 22 	call	0x4578	; 0x4578 <__fixunssfsi>
    456e:	68 94       	set
    4570:	b1 11       	cpse	r27, r1
    4572:	0c 94 a7 23 	jmp	0x474e	; 0x474e <__fp_szero>
    4576:	08 95       	ret

00004578 <__fixunssfsi>:
    4578:	0e 94 8c 23 	call	0x4718	; 0x4718 <__fp_splitA>
    457c:	88 f0       	brcs	.+34     	; 0x45a0 <__fixunssfsi+0x28>
    457e:	9f 57       	subi	r25, 0x7F	; 127
    4580:	98 f0       	brcs	.+38     	; 0x45a8 <__fixunssfsi+0x30>
    4582:	b9 2f       	mov	r27, r25
    4584:	99 27       	eor	r25, r25
    4586:	b7 51       	subi	r27, 0x17	; 23
    4588:	b0 f0       	brcs	.+44     	; 0x45b6 <__fixunssfsi+0x3e>
    458a:	e1 f0       	breq	.+56     	; 0x45c4 <__fixunssfsi+0x4c>
    458c:	66 0f       	add	r22, r22
    458e:	77 1f       	adc	r23, r23
    4590:	88 1f       	adc	r24, r24
    4592:	99 1f       	adc	r25, r25
    4594:	1a f0       	brmi	.+6      	; 0x459c <__fixunssfsi+0x24>
    4596:	ba 95       	dec	r27
    4598:	c9 f7       	brne	.-14     	; 0x458c <__fixunssfsi+0x14>
    459a:	14 c0       	rjmp	.+40     	; 0x45c4 <__fixunssfsi+0x4c>
    459c:	b1 30       	cpi	r27, 0x01	; 1
    459e:	91 f0       	breq	.+36     	; 0x45c4 <__fixunssfsi+0x4c>
    45a0:	0e 94 a6 23 	call	0x474c	; 0x474c <__fp_zero>
    45a4:	b1 e0       	ldi	r27, 0x01	; 1
    45a6:	08 95       	ret
    45a8:	0c 94 a6 23 	jmp	0x474c	; 0x474c <__fp_zero>
    45ac:	67 2f       	mov	r22, r23
    45ae:	78 2f       	mov	r23, r24
    45b0:	88 27       	eor	r24, r24
    45b2:	b8 5f       	subi	r27, 0xF8	; 248
    45b4:	39 f0       	breq	.+14     	; 0x45c4 <__fixunssfsi+0x4c>
    45b6:	b9 3f       	cpi	r27, 0xF9	; 249
    45b8:	cc f3       	brlt	.-14     	; 0x45ac <__fixunssfsi+0x34>
    45ba:	86 95       	lsr	r24
    45bc:	77 95       	ror	r23
    45be:	67 95       	ror	r22
    45c0:	b3 95       	inc	r27
    45c2:	d9 f7       	brne	.-10     	; 0x45ba <__fixunssfsi+0x42>
    45c4:	3e f4       	brtc	.+14     	; 0x45d4 <__fixunssfsi+0x5c>
    45c6:	90 95       	com	r25
    45c8:	80 95       	com	r24
    45ca:	70 95       	com	r23
    45cc:	61 95       	neg	r22
    45ce:	7f 4f       	sbci	r23, 0xFF	; 255
    45d0:	8f 4f       	sbci	r24, 0xFF	; 255
    45d2:	9f 4f       	sbci	r25, 0xFF	; 255
    45d4:	08 95       	ret

000045d6 <__floatunsisf>:
    45d6:	e8 94       	clt
    45d8:	09 c0       	rjmp	.+18     	; 0x45ec <__floatsisf+0x12>

000045da <__floatsisf>:
    45da:	97 fb       	bst	r25, 7
    45dc:	3e f4       	brtc	.+14     	; 0x45ec <__floatsisf+0x12>
    45de:	90 95       	com	r25
    45e0:	80 95       	com	r24
    45e2:	70 95       	com	r23
    45e4:	61 95       	neg	r22
    45e6:	7f 4f       	sbci	r23, 0xFF	; 255
    45e8:	8f 4f       	sbci	r24, 0xFF	; 255
    45ea:	9f 4f       	sbci	r25, 0xFF	; 255
    45ec:	99 23       	and	r25, r25
    45ee:	a9 f0       	breq	.+42     	; 0x461a <__floatsisf+0x40>
    45f0:	f9 2f       	mov	r31, r25
    45f2:	96 e9       	ldi	r25, 0x96	; 150
    45f4:	bb 27       	eor	r27, r27
    45f6:	93 95       	inc	r25
    45f8:	f6 95       	lsr	r31
    45fa:	87 95       	ror	r24
    45fc:	77 95       	ror	r23
    45fe:	67 95       	ror	r22
    4600:	b7 95       	ror	r27
    4602:	f1 11       	cpse	r31, r1
    4604:	f8 cf       	rjmp	.-16     	; 0x45f6 <__floatsisf+0x1c>
    4606:	fa f4       	brpl	.+62     	; 0x4646 <__floatsisf+0x6c>
    4608:	bb 0f       	add	r27, r27
    460a:	11 f4       	brne	.+4      	; 0x4610 <__floatsisf+0x36>
    460c:	60 ff       	sbrs	r22, 0
    460e:	1b c0       	rjmp	.+54     	; 0x4646 <__floatsisf+0x6c>
    4610:	6f 5f       	subi	r22, 0xFF	; 255
    4612:	7f 4f       	sbci	r23, 0xFF	; 255
    4614:	8f 4f       	sbci	r24, 0xFF	; 255
    4616:	9f 4f       	sbci	r25, 0xFF	; 255
    4618:	16 c0       	rjmp	.+44     	; 0x4646 <__floatsisf+0x6c>
    461a:	88 23       	and	r24, r24
    461c:	11 f0       	breq	.+4      	; 0x4622 <__floatsisf+0x48>
    461e:	96 e9       	ldi	r25, 0x96	; 150
    4620:	11 c0       	rjmp	.+34     	; 0x4644 <__floatsisf+0x6a>
    4622:	77 23       	and	r23, r23
    4624:	21 f0       	breq	.+8      	; 0x462e <__floatsisf+0x54>
    4626:	9e e8       	ldi	r25, 0x8E	; 142
    4628:	87 2f       	mov	r24, r23
    462a:	76 2f       	mov	r23, r22
    462c:	05 c0       	rjmp	.+10     	; 0x4638 <__floatsisf+0x5e>
    462e:	66 23       	and	r22, r22
    4630:	71 f0       	breq	.+28     	; 0x464e <__floatsisf+0x74>
    4632:	96 e8       	ldi	r25, 0x86	; 134
    4634:	86 2f       	mov	r24, r22
    4636:	70 e0       	ldi	r23, 0x00	; 0
    4638:	60 e0       	ldi	r22, 0x00	; 0
    463a:	2a f0       	brmi	.+10     	; 0x4646 <__floatsisf+0x6c>
    463c:	9a 95       	dec	r25
    463e:	66 0f       	add	r22, r22
    4640:	77 1f       	adc	r23, r23
    4642:	88 1f       	adc	r24, r24
    4644:	da f7       	brpl	.-10     	; 0x463c <__floatsisf+0x62>
    4646:	88 0f       	add	r24, r24
    4648:	96 95       	lsr	r25
    464a:	87 95       	ror	r24
    464c:	97 f9       	bld	r25, 7
    464e:	08 95       	ret

00004650 <__fp_cmp>:
    4650:	99 0f       	add	r25, r25
    4652:	00 08       	sbc	r0, r0
    4654:	55 0f       	add	r21, r21
    4656:	aa 0b       	sbc	r26, r26
    4658:	e0 e8       	ldi	r30, 0x80	; 128
    465a:	fe ef       	ldi	r31, 0xFE	; 254
    465c:	16 16       	cp	r1, r22
    465e:	17 06       	cpc	r1, r23
    4660:	e8 07       	cpc	r30, r24
    4662:	f9 07       	cpc	r31, r25
    4664:	c0 f0       	brcs	.+48     	; 0x4696 <__fp_cmp+0x46>
    4666:	12 16       	cp	r1, r18
    4668:	13 06       	cpc	r1, r19
    466a:	e4 07       	cpc	r30, r20
    466c:	f5 07       	cpc	r31, r21
    466e:	98 f0       	brcs	.+38     	; 0x4696 <__fp_cmp+0x46>
    4670:	62 1b       	sub	r22, r18
    4672:	73 0b       	sbc	r23, r19
    4674:	84 0b       	sbc	r24, r20
    4676:	95 0b       	sbc	r25, r21
    4678:	39 f4       	brne	.+14     	; 0x4688 <__fp_cmp+0x38>
    467a:	0a 26       	eor	r0, r26
    467c:	61 f0       	breq	.+24     	; 0x4696 <__fp_cmp+0x46>
    467e:	23 2b       	or	r18, r19
    4680:	24 2b       	or	r18, r20
    4682:	25 2b       	or	r18, r21
    4684:	21 f4       	brne	.+8      	; 0x468e <__fp_cmp+0x3e>
    4686:	08 95       	ret
    4688:	0a 26       	eor	r0, r26
    468a:	09 f4       	brne	.+2      	; 0x468e <__fp_cmp+0x3e>
    468c:	a1 40       	sbci	r26, 0x01	; 1
    468e:	a6 95       	lsr	r26
    4690:	8f ef       	ldi	r24, 0xFF	; 255
    4692:	81 1d       	adc	r24, r1
    4694:	81 1d       	adc	r24, r1
    4696:	08 95       	ret

00004698 <__fp_inf>:
    4698:	97 f9       	bld	r25, 7
    469a:	9f 67       	ori	r25, 0x7F	; 127
    469c:	80 e8       	ldi	r24, 0x80	; 128
    469e:	70 e0       	ldi	r23, 0x00	; 0
    46a0:	60 e0       	ldi	r22, 0x00	; 0
    46a2:	08 95       	ret

000046a4 <__fp_nan>:
    46a4:	9f ef       	ldi	r25, 0xFF	; 255
    46a6:	80 ec       	ldi	r24, 0xC0	; 192
    46a8:	08 95       	ret

000046aa <__fp_negdi>:
    46aa:	90 95       	com	r25
    46ac:	80 95       	com	r24
    46ae:	70 95       	com	r23
    46b0:	60 95       	com	r22
    46b2:	50 95       	com	r21
    46b4:	40 95       	com	r20
    46b6:	30 95       	com	r19
    46b8:	21 95       	neg	r18
    46ba:	3f 4f       	sbci	r19, 0xFF	; 255
    46bc:	4f 4f       	sbci	r20, 0xFF	; 255
    46be:	5f 4f       	sbci	r21, 0xFF	; 255
    46c0:	6f 4f       	sbci	r22, 0xFF	; 255
    46c2:	7f 4f       	sbci	r23, 0xFF	; 255
    46c4:	8f 4f       	sbci	r24, 0xFF	; 255
    46c6:	9f 4f       	sbci	r25, 0xFF	; 255
    46c8:	08 95       	ret

000046ca <__fp_pscA>:
    46ca:	00 24       	eor	r0, r0
    46cc:	0a 94       	dec	r0
    46ce:	16 16       	cp	r1, r22
    46d0:	17 06       	cpc	r1, r23
    46d2:	18 06       	cpc	r1, r24
    46d4:	09 06       	cpc	r0, r25
    46d6:	08 95       	ret

000046d8 <__fp_pscB>:
    46d8:	00 24       	eor	r0, r0
    46da:	0a 94       	dec	r0
    46dc:	12 16       	cp	r1, r18
    46de:	13 06       	cpc	r1, r19
    46e0:	14 06       	cpc	r1, r20
    46e2:	05 06       	cpc	r0, r21
    46e4:	08 95       	ret

000046e6 <__fp_round>:
    46e6:	09 2e       	mov	r0, r25
    46e8:	03 94       	inc	r0
    46ea:	00 0c       	add	r0, r0
    46ec:	11 f4       	brne	.+4      	; 0x46f2 <__fp_round+0xc>
    46ee:	88 23       	and	r24, r24
    46f0:	52 f0       	brmi	.+20     	; 0x4706 <__fp_round+0x20>
    46f2:	bb 0f       	add	r27, r27
    46f4:	40 f4       	brcc	.+16     	; 0x4706 <__fp_round+0x20>
    46f6:	bf 2b       	or	r27, r31
    46f8:	11 f4       	brne	.+4      	; 0x46fe <__fp_round+0x18>
    46fa:	60 ff       	sbrs	r22, 0
    46fc:	04 c0       	rjmp	.+8      	; 0x4706 <__fp_round+0x20>
    46fe:	6f 5f       	subi	r22, 0xFF	; 255
    4700:	7f 4f       	sbci	r23, 0xFF	; 255
    4702:	8f 4f       	sbci	r24, 0xFF	; 255
    4704:	9f 4f       	sbci	r25, 0xFF	; 255
    4706:	08 95       	ret

00004708 <__fp_split3>:
    4708:	57 fd       	sbrc	r21, 7
    470a:	90 58       	subi	r25, 0x80	; 128
    470c:	44 0f       	add	r20, r20
    470e:	55 1f       	adc	r21, r21
    4710:	59 f0       	breq	.+22     	; 0x4728 <__fp_splitA+0x10>
    4712:	5f 3f       	cpi	r21, 0xFF	; 255
    4714:	71 f0       	breq	.+28     	; 0x4732 <__fp_splitA+0x1a>
    4716:	47 95       	ror	r20

00004718 <__fp_splitA>:
    4718:	88 0f       	add	r24, r24
    471a:	97 fb       	bst	r25, 7
    471c:	99 1f       	adc	r25, r25
    471e:	61 f0       	breq	.+24     	; 0x4738 <__fp_splitA+0x20>
    4720:	9f 3f       	cpi	r25, 0xFF	; 255
    4722:	79 f0       	breq	.+30     	; 0x4742 <__fp_splitA+0x2a>
    4724:	87 95       	ror	r24
    4726:	08 95       	ret
    4728:	12 16       	cp	r1, r18
    472a:	13 06       	cpc	r1, r19
    472c:	14 06       	cpc	r1, r20
    472e:	55 1f       	adc	r21, r21
    4730:	f2 cf       	rjmp	.-28     	; 0x4716 <__fp_split3+0xe>
    4732:	46 95       	lsr	r20
    4734:	f1 df       	rcall	.-30     	; 0x4718 <__fp_splitA>
    4736:	08 c0       	rjmp	.+16     	; 0x4748 <__fp_splitA+0x30>
    4738:	16 16       	cp	r1, r22
    473a:	17 06       	cpc	r1, r23
    473c:	18 06       	cpc	r1, r24
    473e:	99 1f       	adc	r25, r25
    4740:	f1 cf       	rjmp	.-30     	; 0x4724 <__fp_splitA+0xc>
    4742:	86 95       	lsr	r24
    4744:	71 05       	cpc	r23, r1
    4746:	61 05       	cpc	r22, r1
    4748:	08 94       	sec
    474a:	08 95       	ret

0000474c <__fp_zero>:
    474c:	e8 94       	clt

0000474e <__fp_szero>:
    474e:	bb 27       	eor	r27, r27
    4750:	66 27       	eor	r22, r22
    4752:	77 27       	eor	r23, r23
    4754:	cb 01       	movw	r24, r22
    4756:	97 f9       	bld	r25, 7
    4758:	08 95       	ret

0000475a <__gesf2>:
    475a:	0e 94 28 23 	call	0x4650	; 0x4650 <__fp_cmp>
    475e:	08 f4       	brcc	.+2      	; 0x4762 <__gesf2+0x8>
    4760:	8f ef       	ldi	r24, 0xFF	; 255
    4762:	08 95       	ret
    4764:	16 f0       	brts	.+4      	; 0x476a <__gesf2+0x10>
    4766:	0c 94 6f 24 	jmp	0x48de	; 0x48de <__fp_mpack>
    476a:	0c 94 52 23 	jmp	0x46a4	; 0x46a4 <__fp_nan>
    476e:	68 94       	set
    4770:	0c 94 4c 23 	jmp	0x4698	; 0x4698 <__fp_inf>

00004774 <log>:
    4774:	0e 94 8c 23 	call	0x4718	; 0x4718 <__fp_splitA>
    4778:	a8 f3       	brcs	.-22     	; 0x4764 <__gesf2+0xa>
    477a:	99 23       	and	r25, r25
    477c:	c1 f3       	breq	.-16     	; 0x476e <__gesf2+0x14>
    477e:	ae f3       	brts	.-22     	; 0x476a <__gesf2+0x10>
    4780:	df 93       	push	r29
    4782:	cf 93       	push	r28
    4784:	1f 93       	push	r17
    4786:	0f 93       	push	r16
    4788:	ff 92       	push	r15
    478a:	c9 2f       	mov	r28, r25
    478c:	dd 27       	eor	r29, r29
    478e:	88 23       	and	r24, r24
    4790:	2a f0       	brmi	.+10     	; 0x479c <log+0x28>
    4792:	21 97       	sbiw	r28, 0x01	; 1
    4794:	66 0f       	add	r22, r22
    4796:	77 1f       	adc	r23, r23
    4798:	88 1f       	adc	r24, r24
    479a:	da f7       	brpl	.-10     	; 0x4792 <log+0x1e>
    479c:	20 e0       	ldi	r18, 0x00	; 0
    479e:	30 e0       	ldi	r19, 0x00	; 0
    47a0:	40 e8       	ldi	r20, 0x80	; 128
    47a2:	5f eb       	ldi	r21, 0xBF	; 191
    47a4:	9f e3       	ldi	r25, 0x3F	; 63
    47a6:	88 39       	cpi	r24, 0x98	; 152
    47a8:	20 f0       	brcs	.+8      	; 0x47b2 <log+0x3e>
    47aa:	80 3e       	cpi	r24, 0xE0	; 224
    47ac:	38 f0       	brcs	.+14     	; 0x47bc <log+0x48>
    47ae:	21 96       	adiw	r28, 0x01	; 1
    47b0:	8f 77       	andi	r24, 0x7F	; 127
    47b2:	0e 94 96 21 	call	0x432c	; 0x432c <__addsf3>
    47b6:	e0 e9       	ldi	r30, 0x90	; 144
    47b8:	f0 e0       	ldi	r31, 0x00	; 0
    47ba:	04 c0       	rjmp	.+8      	; 0x47c4 <log+0x50>
    47bc:	0e 94 96 21 	call	0x432c	; 0x432c <__addsf3>
    47c0:	ed eb       	ldi	r30, 0xBD	; 189
    47c2:	f0 e0       	ldi	r31, 0x00	; 0
    47c4:	0e 94 7d 24 	call	0x48fa	; 0x48fa <__fp_powser>
    47c8:	8b 01       	movw	r16, r22
    47ca:	be 01       	movw	r22, r28
    47cc:	ec 01       	movw	r28, r24
    47ce:	fb 2e       	mov	r15, r27
    47d0:	6f 57       	subi	r22, 0x7F	; 127
    47d2:	71 09       	sbc	r23, r1
    47d4:	75 95       	asr	r23
    47d6:	77 1f       	adc	r23, r23
    47d8:	88 0b       	sbc	r24, r24
    47da:	99 0b       	sbc	r25, r25
    47dc:	0e 94 ed 22 	call	0x45da	; 0x45da <__floatsisf>
    47e0:	28 e1       	ldi	r18, 0x18	; 24
    47e2:	32 e7       	ldi	r19, 0x72	; 114
    47e4:	41 e3       	ldi	r20, 0x31	; 49
    47e6:	5f e3       	ldi	r21, 0x3F	; 63
    47e8:	0e 94 15 24 	call	0x482a	; 0x482a <__mulsf3x>
    47ec:	af 2d       	mov	r26, r15
    47ee:	98 01       	movw	r18, r16
    47f0:	ae 01       	movw	r20, r28
    47f2:	ff 90       	pop	r15
    47f4:	0f 91       	pop	r16
    47f6:	1f 91       	pop	r17
    47f8:	cf 91       	pop	r28
    47fa:	df 91       	pop	r29
    47fc:	0e 94 ad 21 	call	0x435a	; 0x435a <__addsf3x>
    4800:	0c 94 73 23 	jmp	0x46e6	; 0x46e6 <__fp_round>

00004804 <__mulsf3>:
    4804:	0e 94 15 24 	call	0x482a	; 0x482a <__mulsf3x>
    4808:	0c 94 73 23 	jmp	0x46e6	; 0x46e6 <__fp_round>
    480c:	0e 94 65 23 	call	0x46ca	; 0x46ca <__fp_pscA>
    4810:	38 f0       	brcs	.+14     	; 0x4820 <__mulsf3+0x1c>
    4812:	0e 94 6c 23 	call	0x46d8	; 0x46d8 <__fp_pscB>
    4816:	20 f0       	brcs	.+8      	; 0x4820 <__mulsf3+0x1c>
    4818:	95 23       	and	r25, r21
    481a:	11 f0       	breq	.+4      	; 0x4820 <__mulsf3+0x1c>
    481c:	0c 94 4c 23 	jmp	0x4698	; 0x4698 <__fp_inf>
    4820:	0c 94 52 23 	jmp	0x46a4	; 0x46a4 <__fp_nan>
    4824:	11 24       	eor	r1, r1
    4826:	0c 94 a7 23 	jmp	0x474e	; 0x474e <__fp_szero>

0000482a <__mulsf3x>:
    482a:	0e 94 84 23 	call	0x4708	; 0x4708 <__fp_split3>
    482e:	70 f3       	brcs	.-36     	; 0x480c <__mulsf3+0x8>

00004830 <__mulsf3_pse>:
    4830:	95 9f       	mul	r25, r21
    4832:	c1 f3       	breq	.-16     	; 0x4824 <__mulsf3+0x20>
    4834:	95 0f       	add	r25, r21
    4836:	50 e0       	ldi	r21, 0x00	; 0
    4838:	55 1f       	adc	r21, r21
    483a:	62 9f       	mul	r22, r18
    483c:	f0 01       	movw	r30, r0
    483e:	72 9f       	mul	r23, r18
    4840:	bb 27       	eor	r27, r27
    4842:	f0 0d       	add	r31, r0
    4844:	b1 1d       	adc	r27, r1
    4846:	63 9f       	mul	r22, r19
    4848:	aa 27       	eor	r26, r26
    484a:	f0 0d       	add	r31, r0
    484c:	b1 1d       	adc	r27, r1
    484e:	aa 1f       	adc	r26, r26
    4850:	64 9f       	mul	r22, r20
    4852:	66 27       	eor	r22, r22
    4854:	b0 0d       	add	r27, r0
    4856:	a1 1d       	adc	r26, r1
    4858:	66 1f       	adc	r22, r22
    485a:	82 9f       	mul	r24, r18
    485c:	22 27       	eor	r18, r18
    485e:	b0 0d       	add	r27, r0
    4860:	a1 1d       	adc	r26, r1
    4862:	62 1f       	adc	r22, r18
    4864:	73 9f       	mul	r23, r19
    4866:	b0 0d       	add	r27, r0
    4868:	a1 1d       	adc	r26, r1
    486a:	62 1f       	adc	r22, r18
    486c:	83 9f       	mul	r24, r19
    486e:	a0 0d       	add	r26, r0
    4870:	61 1d       	adc	r22, r1
    4872:	22 1f       	adc	r18, r18
    4874:	74 9f       	mul	r23, r20
    4876:	33 27       	eor	r19, r19
    4878:	a0 0d       	add	r26, r0
    487a:	61 1d       	adc	r22, r1
    487c:	23 1f       	adc	r18, r19
    487e:	84 9f       	mul	r24, r20
    4880:	60 0d       	add	r22, r0
    4882:	21 1d       	adc	r18, r1
    4884:	82 2f       	mov	r24, r18
    4886:	76 2f       	mov	r23, r22
    4888:	6a 2f       	mov	r22, r26
    488a:	11 24       	eor	r1, r1
    488c:	9f 57       	subi	r25, 0x7F	; 127
    488e:	50 40       	sbci	r21, 0x00	; 0
    4890:	9a f0       	brmi	.+38     	; 0x48b8 <__mulsf3_pse+0x88>
    4892:	f1 f0       	breq	.+60     	; 0x48d0 <__mulsf3_pse+0xa0>
    4894:	88 23       	and	r24, r24
    4896:	4a f0       	brmi	.+18     	; 0x48aa <__mulsf3_pse+0x7a>
    4898:	ee 0f       	add	r30, r30
    489a:	ff 1f       	adc	r31, r31
    489c:	bb 1f       	adc	r27, r27
    489e:	66 1f       	adc	r22, r22
    48a0:	77 1f       	adc	r23, r23
    48a2:	88 1f       	adc	r24, r24
    48a4:	91 50       	subi	r25, 0x01	; 1
    48a6:	50 40       	sbci	r21, 0x00	; 0
    48a8:	a9 f7       	brne	.-22     	; 0x4894 <__mulsf3_pse+0x64>
    48aa:	9e 3f       	cpi	r25, 0xFE	; 254
    48ac:	51 05       	cpc	r21, r1
    48ae:	80 f0       	brcs	.+32     	; 0x48d0 <__mulsf3_pse+0xa0>
    48b0:	0c 94 4c 23 	jmp	0x4698	; 0x4698 <__fp_inf>
    48b4:	0c 94 a7 23 	jmp	0x474e	; 0x474e <__fp_szero>
    48b8:	5f 3f       	cpi	r21, 0xFF	; 255
    48ba:	e4 f3       	brlt	.-8      	; 0x48b4 <__mulsf3_pse+0x84>
    48bc:	98 3e       	cpi	r25, 0xE8	; 232
    48be:	d4 f3       	brlt	.-12     	; 0x48b4 <__mulsf3_pse+0x84>
    48c0:	86 95       	lsr	r24
    48c2:	77 95       	ror	r23
    48c4:	67 95       	ror	r22
    48c6:	b7 95       	ror	r27
    48c8:	f7 95       	ror	r31
    48ca:	e7 95       	ror	r30
    48cc:	9f 5f       	subi	r25, 0xFF	; 255
    48ce:	c1 f7       	brne	.-16     	; 0x48c0 <__mulsf3_pse+0x90>
    48d0:	fe 2b       	or	r31, r30
    48d2:	88 0f       	add	r24, r24
    48d4:	91 1d       	adc	r25, r1
    48d6:	96 95       	lsr	r25
    48d8:	87 95       	ror	r24
    48da:	97 f9       	bld	r25, 7
    48dc:	08 95       	ret

000048de <__fp_mpack>:
    48de:	9f 3f       	cpi	r25, 0xFF	; 255
    48e0:	31 f0       	breq	.+12     	; 0x48ee <__fp_mpack_finite+0xc>

000048e2 <__fp_mpack_finite>:
    48e2:	91 50       	subi	r25, 0x01	; 1
    48e4:	20 f4       	brcc	.+8      	; 0x48ee <__fp_mpack_finite+0xc>
    48e6:	87 95       	ror	r24
    48e8:	77 95       	ror	r23
    48ea:	67 95       	ror	r22
    48ec:	b7 95       	ror	r27
    48ee:	88 0f       	add	r24, r24
    48f0:	91 1d       	adc	r25, r1
    48f2:	96 95       	lsr	r25
    48f4:	87 95       	ror	r24
    48f6:	97 f9       	bld	r25, 7
    48f8:	08 95       	ret

000048fa <__fp_powser>:
    48fa:	df 93       	push	r29
    48fc:	cf 93       	push	r28
    48fe:	1f 93       	push	r17
    4900:	0f 93       	push	r16
    4902:	ff 92       	push	r15
    4904:	ef 92       	push	r14
    4906:	df 92       	push	r13
    4908:	7b 01       	movw	r14, r22
    490a:	8c 01       	movw	r16, r24
    490c:	68 94       	set
    490e:	06 c0       	rjmp	.+12     	; 0x491c <__fp_powser+0x22>
    4910:	da 2e       	mov	r13, r26
    4912:	ef 01       	movw	r28, r30
    4914:	0e 94 15 24 	call	0x482a	; 0x482a <__mulsf3x>
    4918:	fe 01       	movw	r30, r28
    491a:	e8 94       	clt
    491c:	a5 91       	lpm	r26, Z+
    491e:	25 91       	lpm	r18, Z+
    4920:	35 91       	lpm	r19, Z+
    4922:	45 91       	lpm	r20, Z+
    4924:	55 91       	lpm	r21, Z+
    4926:	a6 f3       	brts	.-24     	; 0x4910 <__fp_powser+0x16>
    4928:	ef 01       	movw	r28, r30
    492a:	0e 94 ad 21 	call	0x435a	; 0x435a <__addsf3x>
    492e:	fe 01       	movw	r30, r28
    4930:	97 01       	movw	r18, r14
    4932:	a8 01       	movw	r20, r16
    4934:	da 94       	dec	r13
    4936:	69 f7       	brne	.-38     	; 0x4912 <__fp_powser+0x18>
    4938:	df 90       	pop	r13
    493a:	ef 90       	pop	r14
    493c:	ff 90       	pop	r15
    493e:	0f 91       	pop	r16
    4940:	1f 91       	pop	r17
    4942:	cf 91       	pop	r28
    4944:	df 91       	pop	r29
    4946:	08 95       	ret

00004948 <__divmodhi4>:
    4948:	97 fb       	bst	r25, 7
    494a:	07 2e       	mov	r0, r23
    494c:	16 f4       	brtc	.+4      	; 0x4952 <__divmodhi4+0xa>
    494e:	00 94       	com	r0
    4950:	07 d0       	rcall	.+14     	; 0x4960 <__divmodhi4_neg1>
    4952:	77 fd       	sbrc	r23, 7
    4954:	09 d0       	rcall	.+18     	; 0x4968 <__divmodhi4_neg2>
    4956:	0e 94 21 25 	call	0x4a42	; 0x4a42 <__udivmodhi4>
    495a:	07 fc       	sbrc	r0, 7
    495c:	05 d0       	rcall	.+10     	; 0x4968 <__divmodhi4_neg2>
    495e:	3e f4       	brtc	.+14     	; 0x496e <__divmodhi4_exit>

00004960 <__divmodhi4_neg1>:
    4960:	90 95       	com	r25
    4962:	81 95       	neg	r24
    4964:	9f 4f       	sbci	r25, 0xFF	; 255
    4966:	08 95       	ret

00004968 <__divmodhi4_neg2>:
    4968:	70 95       	com	r23
    496a:	61 95       	neg	r22
    496c:	7f 4f       	sbci	r23, 0xFF	; 255

0000496e <__divmodhi4_exit>:
    496e:	08 95       	ret

00004970 <__udivmodsi4>:
    4970:	a1 e2       	ldi	r26, 0x21	; 33
    4972:	1a 2e       	mov	r1, r26
    4974:	aa 1b       	sub	r26, r26
    4976:	bb 1b       	sub	r27, r27
    4978:	fd 01       	movw	r30, r26
    497a:	0d c0       	rjmp	.+26     	; 0x4996 <__udivmodsi4_ep>

0000497c <__udivmodsi4_loop>:
    497c:	aa 1f       	adc	r26, r26
    497e:	bb 1f       	adc	r27, r27
    4980:	ee 1f       	adc	r30, r30
    4982:	ff 1f       	adc	r31, r31
    4984:	a2 17       	cp	r26, r18
    4986:	b3 07       	cpc	r27, r19
    4988:	e4 07       	cpc	r30, r20
    498a:	f5 07       	cpc	r31, r21
    498c:	20 f0       	brcs	.+8      	; 0x4996 <__udivmodsi4_ep>
    498e:	a2 1b       	sub	r26, r18
    4990:	b3 0b       	sbc	r27, r19
    4992:	e4 0b       	sbc	r30, r20
    4994:	f5 0b       	sbc	r31, r21

00004996 <__udivmodsi4_ep>:
    4996:	66 1f       	adc	r22, r22
    4998:	77 1f       	adc	r23, r23
    499a:	88 1f       	adc	r24, r24
    499c:	99 1f       	adc	r25, r25
    499e:	1a 94       	dec	r1
    49a0:	69 f7       	brne	.-38     	; 0x497c <__udivmodsi4_loop>
    49a2:	60 95       	com	r22
    49a4:	70 95       	com	r23
    49a6:	80 95       	com	r24
    49a8:	90 95       	com	r25
    49aa:	9b 01       	movw	r18, r22
    49ac:	ac 01       	movw	r20, r24
    49ae:	bd 01       	movw	r22, r26
    49b0:	cf 01       	movw	r24, r30
    49b2:	08 95       	ret

000049b4 <__tablejump2__>:
    49b4:	ee 0f       	add	r30, r30
    49b6:	ff 1f       	adc	r31, r31
    49b8:	05 90       	lpm	r0, Z+
    49ba:	f4 91       	lpm	r31, Z
    49bc:	e0 2d       	mov	r30, r0
    49be:	09 94       	ijmp

000049c0 <__umulhisi3>:
    49c0:	a2 9f       	mul	r26, r18
    49c2:	b0 01       	movw	r22, r0
    49c4:	b3 9f       	mul	r27, r19
    49c6:	c0 01       	movw	r24, r0
    49c8:	a3 9f       	mul	r26, r19
    49ca:	70 0d       	add	r23, r0
    49cc:	81 1d       	adc	r24, r1
    49ce:	11 24       	eor	r1, r1
    49d0:	91 1d       	adc	r25, r1
    49d2:	b2 9f       	mul	r27, r18
    49d4:	70 0d       	add	r23, r0
    49d6:	81 1d       	adc	r24, r1
    49d8:	11 24       	eor	r1, r1
    49da:	91 1d       	adc	r25, r1
    49dc:	08 95       	ret

000049de <__muluhisi3>:
    49de:	0e 94 e0 24 	call	0x49c0	; 0x49c0 <__umulhisi3>
    49e2:	a5 9f       	mul	r26, r21
    49e4:	90 0d       	add	r25, r0
    49e6:	b4 9f       	mul	r27, r20
    49e8:	90 0d       	add	r25, r0
    49ea:	a4 9f       	mul	r26, r20
    49ec:	80 0d       	add	r24, r0
    49ee:	91 1d       	adc	r25, r1
    49f0:	11 24       	eor	r1, r1
    49f2:	08 95       	ret

000049f4 <__adddi3>:
    49f4:	2a 0d       	add	r18, r10
    49f6:	3b 1d       	adc	r19, r11
    49f8:	4c 1d       	adc	r20, r12
    49fa:	5d 1d       	adc	r21, r13
    49fc:	6e 1d       	adc	r22, r14
    49fe:	7f 1d       	adc	r23, r15
    4a00:	80 1f       	adc	r24, r16
    4a02:	91 1f       	adc	r25, r17
    4a04:	08 95       	ret

00004a06 <__adddi3_s8>:
    4a06:	00 24       	eor	r0, r0
    4a08:	a7 fd       	sbrc	r26, 7
    4a0a:	00 94       	com	r0
    4a0c:	2a 0f       	add	r18, r26
    4a0e:	30 1d       	adc	r19, r0
    4a10:	40 1d       	adc	r20, r0
    4a12:	50 1d       	adc	r21, r0
    4a14:	60 1d       	adc	r22, r0
    4a16:	70 1d       	adc	r23, r0
    4a18:	80 1d       	adc	r24, r0
    4a1a:	90 1d       	adc	r25, r0
    4a1c:	08 95       	ret

00004a1e <__subdi3>:
    4a1e:	2a 19       	sub	r18, r10
    4a20:	3b 09       	sbc	r19, r11
    4a22:	4c 09       	sbc	r20, r12
    4a24:	5d 09       	sbc	r21, r13
    4a26:	6e 09       	sbc	r22, r14
    4a28:	7f 09       	sbc	r23, r15
    4a2a:	80 0b       	sbc	r24, r16
    4a2c:	91 0b       	sbc	r25, r17
    4a2e:	08 95       	ret

00004a30 <__cmpdi2>:
    4a30:	2a 15       	cp	r18, r10
    4a32:	3b 05       	cpc	r19, r11
    4a34:	4c 05       	cpc	r20, r12
    4a36:	5d 05       	cpc	r21, r13
    4a38:	6e 05       	cpc	r22, r14
    4a3a:	7f 05       	cpc	r23, r15
    4a3c:	80 07       	cpc	r24, r16
    4a3e:	91 07       	cpc	r25, r17
    4a40:	08 95       	ret

00004a42 <__udivmodhi4>:
    4a42:	aa 1b       	sub	r26, r26
    4a44:	bb 1b       	sub	r27, r27
    4a46:	51 e1       	ldi	r21, 0x11	; 17
    4a48:	07 c0       	rjmp	.+14     	; 0x4a58 <__udivmodhi4_ep>

00004a4a <__udivmodhi4_loop>:
    4a4a:	aa 1f       	adc	r26, r26
    4a4c:	bb 1f       	adc	r27, r27
    4a4e:	a6 17       	cp	r26, r22
    4a50:	b7 07       	cpc	r27, r23
    4a52:	10 f0       	brcs	.+4      	; 0x4a58 <__udivmodhi4_ep>
    4a54:	a6 1b       	sub	r26, r22
    4a56:	b7 0b       	sbc	r27, r23

00004a58 <__udivmodhi4_ep>:
    4a58:	88 1f       	adc	r24, r24
    4a5a:	99 1f       	adc	r25, r25
    4a5c:	5a 95       	dec	r21
    4a5e:	a9 f7       	brne	.-22     	; 0x4a4a <__udivmodhi4_loop>
    4a60:	80 95       	com	r24
    4a62:	90 95       	com	r25
    4a64:	bc 01       	movw	r22, r24
    4a66:	cd 01       	movw	r24, r26
    4a68:	08 95       	ret

00004a6a <abort>:
    4a6a:	81 e0       	ldi	r24, 0x01	; 1
    4a6c:	90 e0       	ldi	r25, 0x00	; 0
    4a6e:	f8 94       	cli
    4a70:	0c 94 3a 25 	jmp	0x4a74	; 0x4a74 <_exit>

00004a74 <_exit>:
    4a74:	f8 94       	cli

00004a76 <__stop_program>:
    4a76:	ff cf       	rjmp	.-2      	; 0x4a76 <__stop_program>
