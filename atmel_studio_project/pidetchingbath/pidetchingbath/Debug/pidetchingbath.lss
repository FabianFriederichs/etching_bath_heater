
pidetchingbath.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00005aca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005a20  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000d1  00800100  00800100  00005ab4  2**0
                  ALLOC
  3 .eeprom       00000016  00810000  00810000  00005ab4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  00005aca  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00005afc  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000698  00000000  00000000  00005b40  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00003360  00000000  00000000  000061d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000137b  00000000  00000000  00009538  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00004c42  00000000  00000000  0000a8b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001b50  00000000  00000000  0000f4f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000c622  00000000  00000000  00011048  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000039ef  00000000  00000000  0001d66a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000568  00000000  00000000  00021059  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00004c91  00000000  00000000  000215c1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 85 00 	jmp	0x10a	; 0x10a <__ctors_end>
       4:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
       8:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
       c:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      10:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      14:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      18:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      1c:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      20:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      24:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      28:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      2c:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      30:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      34:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      38:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      3c:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      40:	0c 94 f6 13 	jmp	0x27ec	; 0x27ec <__vector_16>
      44:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      48:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      4c:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      50:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      54:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      58:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      5c:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      60:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      64:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      68:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      6c:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      70:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      74:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      78:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      7c:	3d 1f       	adc	r19, r29
      7e:	3f 1f       	adc	r19, r31
      80:	41 1f       	adc	r20, r17
      82:	43 1f       	adc	r20, r19
      84:	45 1f       	adc	r20, r21
      86:	47 1f       	adc	r20, r23
      88:	49 1f       	adc	r20, r25
      8a:	4b 1f       	adc	r20, r27
      8c:	4d 1f       	adc	r20, r29
      8e:	4f 1f       	adc	r20, r31
      90:	08 00       	.word	0x0008	; ????
      92:	00 00       	nop
      94:	be 92       	st	-X, r11
      96:	24 49       	sbci	r18, 0x94	; 148
      98:	12 3e       	cpi	r17, 0xE2	; 226
      9a:	ab aa       	std	Y+51, r10	; 0x33
      9c:	aa 2a       	or	r10, r26
      9e:	be cd       	rjmp	.-1156   	; 0xfffffc1c <__eeprom_end+0xff7efc06>
      a0:	cc cc       	rjmp	.-1640   	; 0xfffffa3a <__eeprom_end+0xff7efa24>
      a2:	4c 3e       	cpi	r20, 0xEC	; 236
      a4:	00 00       	nop
      a6:	00 80       	ld	r0, Z
      a8:	be ab       	std	Y+54, r27	; 0x36
      aa:	aa aa       	std	Y+50, r10	; 0x32
      ac:	aa 3e       	cpi	r26, 0xEA	; 234
      ae:	00 00       	nop
      b0:	00 00       	nop
      b2:	bf 00       	.word	0x00bf	; ????
      b4:	00 00       	nop
      b6:	80 3f       	cpi	r24, 0xF0	; 240
      b8:	00 00       	nop
      ba:	00 00       	nop
      bc:	00 08       	sbc	r0, r0
      be:	41 78       	andi	r20, 0x81	; 129
      c0:	d3 bb       	out	0x13, r29	; 19
      c2:	43 87       	std	Z+11, r20	; 0x0b
      c4:	d1 13       	cpse	r29, r17
      c6:	3d 19       	sub	r19, r13
      c8:	0e 3c       	cpi	r16, 0xCE	; 206
      ca:	c3 bd       	out	0x23, r28	; 35
      cc:	42 82       	std	Z+2, r4	; 0x02
      ce:	ad 2b       	or	r26, r29
      d0:	3e 68       	ori	r19, 0x8E	; 142
      d2:	ec 82       	std	Y+4, r14	; 0x04
      d4:	76 be       	out	0x36, r7	; 54
      d6:	d9 8f       	std	Y+25, r29	; 0x19
      d8:	e1 a9       	ldd	r30, Z+49	; 0x31
      da:	3e 4c       	sbci	r19, 0xCE	; 206
      dc:	80 ef       	ldi	r24, 0xF0	; 240
      de:	ff be       	out	0x3f, r15	; 63
      e0:	01 c4       	rjmp	.+2050   	; 0x8e4 <app_control+0x498>
      e2:	ff 7f       	andi	r31, 0xFF	; 255
      e4:	3f 00       	.word	0x003f	; ????
      e6:	00 00       	nop
	...

000000ea <__trampolines_end>:
	...
      f6:	00 00       	nop
      f8:	01 00       	.word	0x0001	; ????
	...
     102:	00 00       	nop
     104:	ff ff       	.word	0xffff	; ????
     106:	00 00       	nop
	...

0000010a <__ctors_end>:
     10a:	11 24       	eor	r1, r1
     10c:	1f be       	out	0x3f, r1	; 63
     10e:	cf ef       	ldi	r28, 0xFF	; 255
     110:	d0 e1       	ldi	r29, 0x10	; 16
     112:	de bf       	out	0x3e, r29	; 62
     114:	cd bf       	out	0x3d, r28	; 61

00000116 <__do_clear_bss>:
     116:	21 e0       	ldi	r18, 0x01	; 1
     118:	a0 e0       	ldi	r26, 0x00	; 0
     11a:	b1 e0       	ldi	r27, 0x01	; 1
     11c:	01 c0       	rjmp	.+2      	; 0x120 <.do_clear_bss_start>

0000011e <.do_clear_bss_loop>:
     11e:	1d 92       	st	X+, r1

00000120 <.do_clear_bss_start>:
     120:	a1 3d       	cpi	r26, 0xD1	; 209
     122:	b2 07       	cpc	r27, r18
     124:	e1 f7       	brne	.-8      	; 0x11e <.do_clear_bss_loop>
     126:	0e 94 39 15 	call	0x2a72	; 0x2a72 <main>
     12a:	0c 94 0e 2d 	jmp	0x5a1c	; 0x5a1c <_exit>

0000012e <__bad_interrupt>:
     12e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000132 <app_run>:
}

void app_shutdown()
{
	app_state.should_stop = TRUE;
}
     132:	8f 92       	push	r8
     134:	9f 92       	push	r9
     136:	af 92       	push	r10
     138:	bf 92       	push	r11
     13a:	cf 92       	push	r12
     13c:	df 92       	push	r13
     13e:	ef 92       	push	r14
     140:	ff 92       	push	r15
     142:	0f 93       	push	r16
     144:	1f 93       	push	r17
     146:	cf 93       	push	r28
     148:	df 93       	push	r29
     14a:	cd b7       	in	r28, 0x3d	; 61
     14c:	de b7       	in	r29, 0x3e	; 62
     14e:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <app_state+0x1f>
     152:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <appt_init>
     156:	0e 94 02 22 	call	0x4404	; 0x4404 <srd_init>
     15a:	0e 94 c7 23 	call	0x478e	; 0x478e <switch_init>
     15e:	0e 94 4c 1d 	call	0x3a98	; 0x3a98 <rotenc_init>
     162:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <app_load_settings_from_eeprom>
     166:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <app_state+0x3c>
     16a:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <app_state+0x3e>
     16e:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <app_state+0x3f>
     172:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <app_state+0x3d>
     176:	0e 94 bf 22 	call	0x457e	; 0x457e <stirrer_init>
     17a:	0e 94 a8 23 	call	0x4750	; 0x4750 <stirrer_off>
     17e:	0e 94 5e 14 	call	0x28bc	; 0x28bc <heater_init>
     182:	0e 94 1b 15 	call	0x2a36	; 0x2a36 <heater_off>
     186:	e0 90 1d 01 	lds	r14, 0x011D	; 0x80011d <app_state+0xc>
     18a:	f0 90 1e 01 	lds	r15, 0x011E	; 0x80011e <app_state+0xd>
     18e:	00 91 1f 01 	lds	r16, 0x011F	; 0x80011f <app_state+0xe>
     192:	10 91 20 01 	lds	r17, 0x0120	; 0x800120 <app_state+0xf>
     196:	20 91 19 01 	lds	r18, 0x0119	; 0x800119 <app_state+0x8>
     19a:	30 91 1a 01 	lds	r19, 0x011A	; 0x80011a <app_state+0x9>
     19e:	40 91 1b 01 	lds	r20, 0x011B	; 0x80011b <app_state+0xa>
     1a2:	50 91 1c 01 	lds	r21, 0x011C	; 0x80011c <app_state+0xb>
     1a6:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <app_state+0x4>
     1aa:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <app_state+0x5>
     1ae:	a0 91 17 01 	lds	r26, 0x0117	; 0x800117 <app_state+0x6>
     1b2:	b0 91 18 01 	lds	r27, 0x0118	; 0x800118 <app_state+0x7>
     1b6:	62 e4       	ldi	r22, 0x42	; 66
     1b8:	6f 93       	push	r22
     1ba:	68 ec       	ldi	r22, 0xC8	; 200
     1bc:	6f 93       	push	r22
     1be:	1f 92       	push	r1
     1c0:	1f 92       	push	r1
     1c2:	81 2c       	mov	r8, r1
     1c4:	91 2c       	mov	r9, r1
     1c6:	54 01       	movw	r10, r8
     1c8:	67 01       	movw	r12, r14
     1ca:	78 01       	movw	r14, r16
     1cc:	89 01       	movw	r16, r18
     1ce:	9a 01       	movw	r18, r20
     1d0:	ac 01       	movw	r20, r24
     1d2:	bd 01       	movw	r22, r26
     1d4:	81 e3       	ldi	r24, 0x31	; 49
     1d6:	91 e0       	ldi	r25, 0x01	; 1
     1d8:	0e 94 cb 1a 	call	0x3596	; 0x3596 <pid_init>
     1dc:	0f 90       	pop	r0
     1de:	0f 90       	pop	r0
     1e0:	0f 90       	pop	r0
     1e2:	0f 90       	pop	r0
     1e4:	0e 94 bf 25 	call	0x4b7e	; 0x4b7e <tsens_init>
     1e8:	20 e0       	ldi	r18, 0x00	; 0
     1ea:	46 e2       	ldi	r20, 0x26	; 38
     1ec:	52 e0       	ldi	r21, 0x02	; 2
     1ee:	6a e0       	ldi	r22, 0x0A	; 10
     1f0:	77 ed       	ldi	r23, 0xD7	; 215
     1f2:	83 ea       	ldi	r24, 0xA3	; 163
     1f4:	9c e3       	ldi	r25, 0x3C	; 60
     1f6:	0e 94 60 13 	call	0x26c0	; 0x26c0 <appt_set_callback>
     1fa:	21 e0       	ldi	r18, 0x01	; 1
     1fc:	49 ee       	ldi	r20, 0xE9	; 233
     1fe:	51 e0       	ldi	r21, 0x01	; 1
     200:	6a e0       	ldi	r22, 0x0A	; 10
     202:	77 ed       	ldi	r23, 0xD7	; 215
     204:	83 e2       	ldi	r24, 0x23	; 35
     206:	9d e3       	ldi	r25, 0x3D	; 61
     208:	0e 94 60 13 	call	0x26c0	; 0x26c0 <appt_set_callback>
     20c:	22 e0       	ldi	r18, 0x02	; 2
     20e:	45 ef       	ldi	r20, 0xF5	; 245
     210:	55 e0       	ldi	r21, 0x05	; 5
     212:	6f e6       	ldi	r22, 0x6F	; 111
     214:	72 e1       	ldi	r23, 0x12	; 18
     216:	83 e8       	ldi	r24, 0x83	; 131
     218:	9a e3       	ldi	r25, 0x3A	; 58
     21a:	0e 94 60 13 	call	0x26c0	; 0x26c0 <appt_set_callback>
     21e:	23 e0       	ldi	r18, 0x03	; 3
     220:	4f ef       	ldi	r20, 0xFF	; 255
     222:	55 e0       	ldi	r21, 0x05	; 5
     224:	6a e0       	ldi	r22, 0x0A	; 10
     226:	77 ed       	ldi	r23, 0xD7	; 215
     228:	83 ea       	ldi	r24, 0xA3	; 163
     22a:	9b e3       	ldi	r25, 0x3B	; 59
     22c:	0e 94 60 13 	call	0x26c0	; 0x26c0 <appt_set_callback>
     230:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <app_clear_input>
     234:	89 e0       	ldi	r24, 0x09	; 9
     236:	96 e0       	ldi	r25, 0x06	; 6
     238:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <app_state+0x1d>
     23c:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <app_state+0x1c>
     240:	0e 94 22 26 	call	0x4c44	; 0x4c44 <tsens_start_adc>
     244:	80 e3       	ldi	r24, 0x30	; 48
     246:	91 e0       	ldi	r25, 0x01	; 1
     248:	0e 94 22 27 	call	0x4e44	; 0x4e44 <tsens_measure_probe0_temp>
     24c:	dc 01       	movw	r26, r24
     24e:	cb 01       	movw	r24, r22
     250:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <app_state+0x40>
     254:	90 93 52 01 	sts	0x0152, r25	; 0x800152 <app_state+0x41>
     258:	a0 93 53 01 	sts	0x0153, r26	; 0x800153 <app_state+0x42>
     25c:	b0 93 54 01 	sts	0x0154, r27	; 0x800154 <app_state+0x43>
     260:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <app_state+0x1f>
     264:	88 23       	and	r24, r24
     266:	79 f0       	breq	.+30     	; 0x286 <app_run+0x154>
     268:	0e 94 96 14 	call	0x292c	; 0x292c <heater_shutdown>
     26c:	0e 94 08 23 	call	0x4610	; 0x4610 <stirrer_shutdown>
     270:	0e 94 eb 25 	call	0x4bd6	; 0x4bd6 <tsens_shutdown>
     274:	0e 94 86 1d 	call	0x3b0c	; 0x3b0c <rotenc_shutdown>
     278:	0e 94 00 24 	call	0x4800	; 0x4800 <switch_shutdown>
     27c:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <app_error_display>
     280:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <app_state+0x1f>
     284:	99 c0       	rjmp	.+306    	; 0x3b8 <app_run+0x286>
     286:	80 e3       	ldi	r24, 0x30	; 48
     288:	91 e0       	ldi	r25, 0x01	; 1
     28a:	0e 94 a2 26 	call	0x4d44	; 0x4d44 <tsens_measure0_resistance>
     28e:	dc 01       	movw	r26, r24
     290:	cb 01       	movw	r24, r22
     292:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <app_state+0x44>
     296:	90 93 56 01 	sts	0x0156, r25	; 0x800156 <app_state+0x45>
     29a:	a0 93 57 01 	sts	0x0157, r26	; 0x800157 <app_state+0x46>
     29e:	b0 93 58 01 	sts	0x0158, r27	; 0x800158 <app_state+0x47>
     2a2:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <app_state+0x1f>
     2a6:	88 23       	and	r24, r24
     2a8:	79 f0       	breq	.+30     	; 0x2c8 <app_run+0x196>
     2aa:	0e 94 96 14 	call	0x292c	; 0x292c <heater_shutdown>
     2ae:	0e 94 08 23 	call	0x4610	; 0x4610 <stirrer_shutdown>
     2b2:	0e 94 eb 25 	call	0x4bd6	; 0x4bd6 <tsens_shutdown>
     2b6:	0e 94 86 1d 	call	0x3b0c	; 0x3b0c <rotenc_shutdown>
     2ba:	0e 94 00 24 	call	0x4800	; 0x4800 <switch_shutdown>
     2be:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <app_error_display>
     2c2:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <app_state+0x1f>
     2c6:	78 c0       	rjmp	.+240    	; 0x3b8 <app_run+0x286>
     2c8:	80 e3       	ldi	r24, 0x30	; 48
     2ca:	91 e0       	ldi	r25, 0x01	; 1
     2cc:	0e 94 79 28 	call	0x50f2	; 0x50f2 <tsens_measure_probe1_temp>
     2d0:	dc 01       	movw	r26, r24
     2d2:	cb 01       	movw	r24, r22
     2d4:	80 93 65 01 	sts	0x0165, r24	; 0x800165 <app_state+0x54>
     2d8:	90 93 66 01 	sts	0x0166, r25	; 0x800166 <app_state+0x55>
     2dc:	a0 93 67 01 	sts	0x0167, r26	; 0x800167 <app_state+0x56>
     2e0:	b0 93 68 01 	sts	0x0168, r27	; 0x800168 <app_state+0x57>
     2e4:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <app_state+0x1f>
     2e8:	88 23       	and	r24, r24
     2ea:	79 f0       	breq	.+30     	; 0x30a <app_run+0x1d8>
     2ec:	0e 94 96 14 	call	0x292c	; 0x292c <heater_shutdown>
     2f0:	0e 94 08 23 	call	0x4610	; 0x4610 <stirrer_shutdown>
     2f4:	0e 94 eb 25 	call	0x4bd6	; 0x4bd6 <tsens_shutdown>
     2f8:	0e 94 86 1d 	call	0x3b0c	; 0x3b0c <rotenc_shutdown>
     2fc:	0e 94 00 24 	call	0x4800	; 0x4800 <switch_shutdown>
     300:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <app_error_display>
     304:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <app_state+0x1f>
     308:	57 c0       	rjmp	.+174    	; 0x3b8 <app_run+0x286>
     30a:	80 e3       	ldi	r24, 0x30	; 48
     30c:	91 e0       	ldi	r25, 0x01	; 1
     30e:	0e 94 f9 27 	call	0x4ff2	; 0x4ff2 <tsens_measure1_resistance>
     312:	dc 01       	movw	r26, r24
     314:	cb 01       	movw	r24, r22
     316:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <app_state+0x58>
     31a:	90 93 6a 01 	sts	0x016A, r25	; 0x80016a <app_state+0x59>
     31e:	a0 93 6b 01 	sts	0x016B, r26	; 0x80016b <app_state+0x5a>
     322:	b0 93 6c 01 	sts	0x016C, r27	; 0x80016c <app_state+0x5b>
     326:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <app_state+0x1f>
     32a:	88 23       	and	r24, r24
     32c:	79 f0       	breq	.+30     	; 0x34c <app_run+0x21a>
     32e:	0e 94 96 14 	call	0x292c	; 0x292c <heater_shutdown>
     332:	0e 94 08 23 	call	0x4610	; 0x4610 <stirrer_shutdown>
     336:	0e 94 eb 25 	call	0x4bd6	; 0x4bd6 <tsens_shutdown>
     33a:	0e 94 86 1d 	call	0x3b0c	; 0x3b0c <rotenc_shutdown>
     33e:	0e 94 00 24 	call	0x4800	; 0x4800 <switch_shutdown>
     342:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <app_error_display>
     346:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <app_state+0x1f>
     34a:	36 c0       	rjmp	.+108    	; 0x3b8 <app_run+0x286>
     34c:	0e 94 3b 10 	call	0x2076	; 0x2076 <appt_start>
     350:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <app_state+0x15>
     354:	0b c0       	rjmp	.+22     	; 0x36c <app_run+0x23a>
     356:	0e 94 81 10 	call	0x2102	; 0x2102 <appt_update>
     35a:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <app_state+0x1f>
     35e:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <app_state+0x1f>
     362:	88 23       	and	r24, r24
     364:	19 f0       	breq	.+6      	; 0x36c <app_run+0x23a>
     366:	81 e0       	ldi	r24, 0x01	; 1
     368:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <app_state+0x15>
     36c:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <app_state+0x15>
     370:	88 23       	and	r24, r24
     372:	89 f3       	breq	.-30     	; 0x356 <app_run+0x224>
     374:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <app_state+0x1f>
     378:	88 23       	and	r24, r24
     37a:	79 f0       	breq	.+30     	; 0x39a <app_run+0x268>
     37c:	0e 94 96 14 	call	0x292c	; 0x292c <heater_shutdown>
     380:	0e 94 08 23 	call	0x4610	; 0x4610 <stirrer_shutdown>
     384:	0e 94 eb 25 	call	0x4bd6	; 0x4bd6 <tsens_shutdown>
     388:	0e 94 86 1d 	call	0x3b0c	; 0x3b0c <rotenc_shutdown>
     38c:	0e 94 00 24 	call	0x4800	; 0x4800 <switch_shutdown>
     390:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <app_error_display>
     394:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <app_state+0x1f>
     398:	0f c0       	rjmp	.+30     	; 0x3b8 <app_run+0x286>
     39a:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <appt_shutdown>
     39e:	0e 94 08 23 	call	0x4610	; 0x4610 <stirrer_shutdown>
     3a2:	0e 94 96 14 	call	0x292c	; 0x292c <heater_shutdown>
     3a6:	0e 94 eb 25 	call	0x4bd6	; 0x4bd6 <tsens_shutdown>
     3aa:	0e 94 86 1d 	call	0x3b0c	; 0x3b0c <rotenc_shutdown>
     3ae:	0e 94 00 24 	call	0x4800	; 0x4800 <switch_shutdown>
     3b2:	0e 94 10 22 	call	0x4420	; 0x4420 <srd_shutdown>
     3b6:	80 e0       	ldi	r24, 0x00	; 0
     3b8:	df 91       	pop	r29
     3ba:	cf 91       	pop	r28
     3bc:	1f 91       	pop	r17
     3be:	0f 91       	pop	r16
     3c0:	ff 90       	pop	r15
     3c2:	ef 90       	pop	r14
     3c4:	df 90       	pop	r13
     3c6:	cf 90       	pop	r12
     3c8:	bf 90       	pop	r11
     3ca:	af 90       	pop	r10
     3cc:	9f 90       	pop	r9
     3ce:	8f 90       	pop	r8
     3d0:	08 95       	ret

000003d2 <app_user_main>:

////////////////////////////////////////// INPUT CALLBACK /////////////////////////////////////////
ErrorCode app_user_main()
{
     3d2:	cf 93       	push	r28
     3d4:	df 93       	push	r29
     3d6:	cd b7       	in	r28, 0x3d	; 61
     3d8:	de b7       	in	r29, 0x3e	; 62
	// INPUT	
	app_clear_input();
     3da:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <app_clear_input>
	app_state.current_input.rotenc_delta = rotenc_get_inc();
     3de:	0e 94 9b 1d 	call	0x3b36	; 0x3b36 <rotenc_get_inc>
     3e2:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <app_state+0x17>
     3e6:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <app_state+0x16>
	// Rotenc Button
	app_state.current_input.button_states |= (switch_get_state(BUTTON0) << BUTTON0);
     3ea:	80 e0       	ldi	r24, 0x00	; 0
     3ec:	0e 94 b7 24 	call	0x496e	; 0x496e <switch_get_state>
     3f0:	88 2f       	mov	r24, r24
     3f2:	90 e0       	ldi	r25, 0x00	; 0
     3f4:	20 91 2c 01 	lds	r18, 0x012C	; 0x80012c <app_state+0x1b>
     3f8:	82 2b       	or	r24, r18
     3fa:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <app_state+0x1b>
	app_state.current_input.button_presses |= (switch_press(BUTTON0) << BUTTON0);
     3fe:	80 e0       	ldi	r24, 0x00	; 0
     400:	0e 94 30 24 	call	0x4860	; 0x4860 <switch_press>
     404:	88 2f       	mov	r24, r24
     406:	90 e0       	ldi	r25, 0x00	; 0
     408:	20 91 29 01 	lds	r18, 0x0129	; 0x800129 <app_state+0x18>
     40c:	82 2b       	or	r24, r18
     40e:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <app_state+0x18>
	app_state.current_input.button_long_presses |= (switch_longpress(BUTTON0) << BUTTON0);
     412:	80 e0       	ldi	r24, 0x00	; 0
     414:	0e 94 8a 24 	call	0x4914	; 0x4914 <switch_longpress>
     418:	88 2f       	mov	r24, r24
     41a:	90 e0       	ldi	r25, 0x00	; 0
     41c:	20 91 2a 01 	lds	r18, 0x012A	; 0x80012a <app_state+0x19>
     420:	82 2b       	or	r24, r18
     422:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <app_state+0x19>
	app_state.current_input.button_releases |= (switch_release(BUTTON0) << BUTTON0);
     426:	80 e0       	ldi	r24, 0x00	; 0
     428:	0e 94 5d 24 	call	0x48ba	; 0x48ba <switch_release>
     42c:	88 2f       	mov	r24, r24
     42e:	90 e0       	ldi	r25, 0x00	; 0
     430:	20 91 2b 01 	lds	r18, 0x012B	; 0x80012b <app_state+0x1a>
     434:	82 2b       	or	r24, r18
     436:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <app_state+0x1a>
	// Secondary Button
	//---
	
	// query menu state machine
	return (*app_state.current_state_func)();
     43a:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <app_state+0x1c>
     43e:	90 91 2e 01 	lds	r25, 0x012E	; 0x80012e <app_state+0x1d>
     442:	fc 01       	movw	r30, r24
     444:	09 95       	icall
}
     446:	df 91       	pop	r29
     448:	cf 91       	pop	r28
     44a:	08 95       	ret

0000044c <app_control>:

///////////////////////////////////////// PID CONTROL CALLBACK ////////////////////////////////////
ErrorCode app_control()
{
     44c:	2f 92       	push	r2
     44e:	3f 92       	push	r3
     450:	4f 92       	push	r4
     452:	5f 92       	push	r5
     454:	6f 92       	push	r6
     456:	7f 92       	push	r7
     458:	8f 92       	push	r8
     45a:	9f 92       	push	r9
     45c:	af 92       	push	r10
     45e:	bf 92       	push	r11
     460:	cf 92       	push	r12
     462:	df 92       	push	r13
     464:	ef 92       	push	r14
     466:	ff 92       	push	r15
     468:	0f 93       	push	r16
     46a:	1f 93       	push	r17
     46c:	cf 93       	push	r28
     46e:	df 93       	push	r29
     470:	cd b7       	in	r28, 0x3d	; 61
     472:	de b7       	in	r29, 0x3e	; 62
     474:	29 97       	sbiw	r28, 0x09	; 9
     476:	0f b6       	in	r0, 0x3f	; 63
     478:	f8 94       	cli
     47a:	de bf       	out	0x3e, r29	; 62
     47c:	0f be       	out	0x3f, r0	; 63
     47e:	cd bf       	out	0x3d, r28	; 61
	// do measurements
	// if calibration menu is active, update corresponding resistance value
	#ifdef TSENS_PROBE_0
		// measure temperature and resistance, with open and short circuit protection
		app_state.t0_current_temp = tsens_measure_probe0_temp(&app_state.current_error);
     480:	80 e3       	ldi	r24, 0x30	; 48
     482:	91 e0       	ldi	r25, 0x01	; 1
     484:	0e 94 22 27 	call	0x4e44	; 0x4e44 <tsens_measure_probe0_temp>
     488:	dc 01       	movw	r26, r24
     48a:	cb 01       	movw	r24, r22
     48c:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <app_state+0x40>
     490:	90 93 52 01 	sts	0x0152, r25	; 0x800152 <app_state+0x41>
     494:	a0 93 53 01 	sts	0x0153, r26	; 0x800153 <app_state+0x42>
     498:	b0 93 54 01 	sts	0x0154, r27	; 0x800154 <app_state+0x43>
		if(app_state.current_error)
     49c:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <app_state+0x1f>
     4a0:	88 23       	and	r24, r24
     4a2:	19 f0       	breq	.+6      	; 0x4aa <app_control+0x5e>
		{
			return app_state.current_error;
     4a4:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <app_state+0x1f>
     4a8:	87 c3       	rjmp	.+1806   	; 0xbb8 <app_control+0x76c>
		}
		if(app_state.current_state_func == app_state_menu_tprobe0_calib)
     4aa:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <app_state+0x1c>
     4ae:	90 91 2e 01 	lds	r25, 0x012E	; 0x80012e <app_state+0x1d>
     4b2:	81 5f       	subi	r24, 0xF1	; 241
     4b4:	9c 40       	sbci	r25, 0x0C	; 12
     4b6:	a9 f4       	brne	.+42     	; 0x4e2 <app_control+0x96>
		{
			app_state.t0_resistance = tsens_measure0_resistance(&app_state.current_error);
     4b8:	80 e3       	ldi	r24, 0x30	; 48
     4ba:	91 e0       	ldi	r25, 0x01	; 1
     4bc:	0e 94 a2 26 	call	0x4d44	; 0x4d44 <tsens_measure0_resistance>
     4c0:	dc 01       	movw	r26, r24
     4c2:	cb 01       	movw	r24, r22
     4c4:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <app_state+0x44>
     4c8:	90 93 56 01 	sts	0x0156, r25	; 0x800156 <app_state+0x45>
     4cc:	a0 93 57 01 	sts	0x0157, r26	; 0x800157 <app_state+0x46>
     4d0:	b0 93 58 01 	sts	0x0158, r27	; 0x800158 <app_state+0x47>
			if(app_state.current_error)
     4d4:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <app_state+0x1f>
     4d8:	88 23       	and	r24, r24
     4da:	19 f0       	breq	.+6      	; 0x4e2 <app_control+0x96>
			{
				return app_state.current_error;
     4dc:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <app_state+0x1f>
     4e0:	6b c3       	rjmp	.+1750   	; 0xbb8 <app_control+0x76c>
			}
		}
		// min, max temp protection
		if(app_state.t0_current_temp < HEATER_TR_PROTECTION_MIN_TEMP)
     4e2:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <app_state+0x40>
     4e6:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <app_state+0x41>
     4ea:	a0 91 53 01 	lds	r26, 0x0153	; 0x800153 <app_state+0x42>
     4ee:	b0 91 54 01 	lds	r27, 0x0154	; 0x800154 <app_state+0x43>
     4f2:	20 e0       	ldi	r18, 0x00	; 0
     4f4:	30 e0       	ldi	r19, 0x00	; 0
     4f6:	a9 01       	movw	r20, r18
     4f8:	bc 01       	movw	r22, r24
     4fa:	cd 01       	movw	r24, r26
     4fc:	0e 94 66 29 	call	0x52cc	; 0x52cc <__cmpsf2>
     500:	88 23       	and	r24, r24
     502:	14 f4       	brge	.+4      	; 0x508 <app_control+0xbc>
			return EC_THERMISTOR_MIN_TEMP;
     504:	86 e0       	ldi	r24, 0x06	; 6
     506:	58 c3       	rjmp	.+1712   	; 0xbb8 <app_control+0x76c>
		else if(app_state.t0_current_temp > HEATER_TR_PROTECTION_MAX_TEMP)
     508:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <app_state+0x40>
     50c:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <app_state+0x41>
     510:	a0 91 53 01 	lds	r26, 0x0153	; 0x800153 <app_state+0x42>
     514:	b0 91 54 01 	lds	r27, 0x0154	; 0x800154 <app_state+0x43>
     518:	20 e0       	ldi	r18, 0x00	; 0
     51a:	30 e0       	ldi	r19, 0x00	; 0
     51c:	48 e4       	ldi	r20, 0x48	; 72
     51e:	53 e4       	ldi	r21, 0x43	; 67
     520:	bc 01       	movw	r22, r24
     522:	cd 01       	movw	r24, r26
     524:	0e 94 4f 2b 	call	0x569e	; 0x569e <__gesf2>
     528:	18 16       	cp	r1, r24
     52a:	14 f4       	brge	.+4      	; 0x530 <app_control+0xe4>
			return EC_THERMISTOR_MAX_TEMP;
     52c:	85 e0       	ldi	r24, 0x05	; 5
     52e:	44 c3       	rjmp	.+1672   	; 0xbb8 <app_control+0x76c>
		
		// unresponsive thermistor protection
		if(app_state.settings.controlling_tprobe == 0 || HEATER_SAFETY_TPROBE == 0)
		{
			if(app_state.heater_rapid_heating
     530:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <app_state+0x3d>
     534:	88 23       	and	r24, r24
     536:	09 f4       	brne	.+2      	; 0x53a <app_control+0xee>
     538:	6d c0       	rjmp	.+218    	; 0x614 <app_control+0x1c8>
				&& (app_state.t0_current_temp - app_state.t0_tr_check_start_temp) < HEATER_PROBE0_TR_PROTECTION_EXPECTED_TEMP_CHANGE
     53a:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <app_state+0x40>
     53e:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <app_state+0x41>
     542:	a0 91 53 01 	lds	r26, 0x0153	; 0x800153 <app_state+0x42>
     546:	b0 91 54 01 	lds	r27, 0x0154	; 0x800154 <app_state+0x43>
     54a:	20 91 59 01 	lds	r18, 0x0159	; 0x800159 <app_state+0x48>
     54e:	30 91 5a 01 	lds	r19, 0x015A	; 0x80015a <app_state+0x49>
     552:	40 91 5b 01 	lds	r20, 0x015B	; 0x80015b <app_state+0x4a>
     556:	50 91 5c 01 	lds	r21, 0x015C	; 0x80015c <app_state+0x4b>
     55a:	bc 01       	movw	r22, r24
     55c:	cd 01       	movw	r24, r26
     55e:	0e 94 f9 28 	call	0x51f2	; 0x51f2 <__subsf3>
     562:	dc 01       	movw	r26, r24
     564:	cb 01       	movw	r24, r22
     566:	20 e0       	ldi	r18, 0x00	; 0
     568:	30 e0       	ldi	r19, 0x00	; 0
     56a:	40 ea       	ldi	r20, 0xA0	; 160
     56c:	50 e4       	ldi	r21, 0x40	; 64
     56e:	bc 01       	movw	r22, r24
     570:	cd 01       	movw	r24, r26
     572:	0e 94 66 29 	call	0x52cc	; 0x52cc <__cmpsf2>
     576:	88 23       	and	r24, r24
     578:	0c f0       	brlt	.+2      	; 0x57c <app_control+0x130>
     57a:	4c c0       	rjmp	.+152    	; 0x614 <app_control+0x1c8>
				&& appt_cycles_to_seconds(appt_get_cycles_since_startup() - app_state.t0_tr_check_start_time) > HEATER_PROBE0_TR_PROTECTION_INTERVAL) // if temp change under full power not reached within interval
     57c:	0e 94 29 13 	call	0x2652	; 0x2652 <appt_get_cycles_since_startup>
     580:	a2 2e       	mov	r10, r18
     582:	b3 2e       	mov	r11, r19
     584:	c4 2e       	mov	r12, r20
     586:	d5 2e       	mov	r13, r21
     588:	e6 2e       	mov	r14, r22
     58a:	f7 2e       	mov	r15, r23
     58c:	08 2f       	mov	r16, r24
     58e:	19 2f       	mov	r17, r25
     590:	20 90 5d 01 	lds	r2, 0x015D	; 0x80015d <app_state+0x4c>
     594:	30 90 5e 01 	lds	r3, 0x015E	; 0x80015e <app_state+0x4d>
     598:	40 90 5f 01 	lds	r4, 0x015F	; 0x80015f <app_state+0x4e>
     59c:	50 90 60 01 	lds	r5, 0x0160	; 0x800160 <app_state+0x4f>
     5a0:	60 90 61 01 	lds	r6, 0x0161	; 0x800161 <app_state+0x50>
     5a4:	70 90 62 01 	lds	r7, 0x0162	; 0x800162 <app_state+0x51>
     5a8:	80 90 63 01 	lds	r8, 0x0163	; 0x800163 <app_state+0x52>
     5ac:	90 90 64 01 	lds	r9, 0x0164	; 0x800164 <app_state+0x53>
     5b0:	2a 2d       	mov	r18, r10
     5b2:	3b 2d       	mov	r19, r11
     5b4:	4c 2d       	mov	r20, r12
     5b6:	5d 2d       	mov	r21, r13
     5b8:	6e 2d       	mov	r22, r14
     5ba:	7f 2d       	mov	r23, r15
     5bc:	80 2f       	mov	r24, r16
     5be:	91 2f       	mov	r25, r17
     5c0:	a2 2c       	mov	r10, r2
     5c2:	b3 2c       	mov	r11, r3
     5c4:	c4 2c       	mov	r12, r4
     5c6:	d5 2c       	mov	r13, r5
     5c8:	e6 2c       	mov	r14, r6
     5ca:	f7 2c       	mov	r15, r7
     5cc:	08 2d       	mov	r16, r8
     5ce:	19 2d       	mov	r17, r9
     5d0:	0e 94 b1 2c 	call	0x5962	; 0x5962 <__subdi3>
     5d4:	a2 2e       	mov	r10, r18
     5d6:	b3 2e       	mov	r11, r19
     5d8:	c4 2e       	mov	r12, r20
     5da:	d5 2e       	mov	r13, r21
     5dc:	e6 2e       	mov	r14, r22
     5de:	f7 2e       	mov	r15, r23
     5e0:	08 2f       	mov	r16, r24
     5e2:	19 2f       	mov	r17, r25
     5e4:	2a 2d       	mov	r18, r10
     5e6:	3b 2d       	mov	r19, r11
     5e8:	4c 2d       	mov	r20, r12
     5ea:	5d 2d       	mov	r21, r13
     5ec:	6e 2d       	mov	r22, r14
     5ee:	7f 2d       	mov	r23, r15
     5f0:	80 2f       	mov	r24, r16
     5f2:	91 2f       	mov	r25, r17
     5f4:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <appt_cycles_to_seconds>
     5f8:	dc 01       	movw	r26, r24
     5fa:	cb 01       	movw	r24, r22
     5fc:	20 e0       	ldi	r18, 0x00	; 0
     5fe:	30 e0       	ldi	r19, 0x00	; 0
     600:	40 e7       	ldi	r20, 0x70	; 112
     602:	51 e4       	ldi	r21, 0x41	; 65
     604:	bc 01       	movw	r22, r24
     606:	cd 01       	movw	r24, r26
     608:	0e 94 4f 2b 	call	0x569e	; 0x569e <__gesf2>
     60c:	18 16       	cp	r1, r24
     60e:	14 f4       	brge	.+4      	; 0x614 <app_control+0x1c8>
			{
				return EC_THERMISTOR_NOT_RESPONDING;
     610:	83 e0       	ldi	r24, 0x03	; 3
     612:	d2 c2       	rjmp	.+1444   	; 0xbb8 <app_control+0x76c>
			}
			else if(app_state.heater_rapid_heating
     614:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <app_state+0x3d>
     618:	88 23       	and	r24, r24
     61a:	09 f4       	brne	.+2      	; 0x61e <app_control+0x1d2>
     61c:	95 c0       	rjmp	.+298    	; 0x748 <app_control+0x2fc>
				&& (app_state.t0_current_temp - app_state.t0_tr_check_start_temp) >= HEATER_PROBE0_TR_PROTECTION_EXPECTED_TEMP_CHANGE
     61e:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <app_state+0x40>
     622:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <app_state+0x41>
     626:	a0 91 53 01 	lds	r26, 0x0153	; 0x800153 <app_state+0x42>
     62a:	b0 91 54 01 	lds	r27, 0x0154	; 0x800154 <app_state+0x43>
     62e:	20 91 59 01 	lds	r18, 0x0159	; 0x800159 <app_state+0x48>
     632:	30 91 5a 01 	lds	r19, 0x015A	; 0x80015a <app_state+0x49>
     636:	40 91 5b 01 	lds	r20, 0x015B	; 0x80015b <app_state+0x4a>
     63a:	50 91 5c 01 	lds	r21, 0x015C	; 0x80015c <app_state+0x4b>
     63e:	bc 01       	movw	r22, r24
     640:	cd 01       	movw	r24, r26
     642:	0e 94 f9 28 	call	0x51f2	; 0x51f2 <__subsf3>
     646:	dc 01       	movw	r26, r24
     648:	cb 01       	movw	r24, r22
     64a:	20 e0       	ldi	r18, 0x00	; 0
     64c:	30 e0       	ldi	r19, 0x00	; 0
     64e:	40 ea       	ldi	r20, 0xA0	; 160
     650:	50 e4       	ldi	r21, 0x40	; 64
     652:	bc 01       	movw	r22, r24
     654:	cd 01       	movw	r24, r26
     656:	0e 94 4f 2b 	call	0x569e	; 0x569e <__gesf2>
     65a:	88 23       	and	r24, r24
     65c:	0c f4       	brge	.+2      	; 0x660 <app_control+0x214>
     65e:	74 c0       	rjmp	.+232    	; 0x748 <app_control+0x2fc>
				&& appt_cycles_to_seconds(appt_get_cycles_since_startup() - app_state.t0_tr_check_start_time) <= HEATER_PROBE0_TR_PROTECTION_INTERVAL)// reset start temp and time for next cycle
     660:	0e 94 29 13 	call	0x2652	; 0x2652 <appt_get_cycles_since_startup>
     664:	a2 2e       	mov	r10, r18
     666:	b3 2e       	mov	r11, r19
     668:	c4 2e       	mov	r12, r20
     66a:	d5 2e       	mov	r13, r21
     66c:	e6 2e       	mov	r14, r22
     66e:	f7 2e       	mov	r15, r23
     670:	08 2f       	mov	r16, r24
     672:	19 2f       	mov	r17, r25
     674:	20 90 5d 01 	lds	r2, 0x015D	; 0x80015d <app_state+0x4c>
     678:	30 90 5e 01 	lds	r3, 0x015E	; 0x80015e <app_state+0x4d>
     67c:	40 90 5f 01 	lds	r4, 0x015F	; 0x80015f <app_state+0x4e>
     680:	50 90 60 01 	lds	r5, 0x0160	; 0x800160 <app_state+0x4f>
     684:	60 90 61 01 	lds	r6, 0x0161	; 0x800161 <app_state+0x50>
     688:	70 90 62 01 	lds	r7, 0x0162	; 0x800162 <app_state+0x51>
     68c:	80 90 63 01 	lds	r8, 0x0163	; 0x800163 <app_state+0x52>
     690:	90 90 64 01 	lds	r9, 0x0164	; 0x800164 <app_state+0x53>
     694:	2a 2d       	mov	r18, r10
     696:	3b 2d       	mov	r19, r11
     698:	4c 2d       	mov	r20, r12
     69a:	5d 2d       	mov	r21, r13
     69c:	6e 2d       	mov	r22, r14
     69e:	7f 2d       	mov	r23, r15
     6a0:	80 2f       	mov	r24, r16
     6a2:	91 2f       	mov	r25, r17
     6a4:	a2 2c       	mov	r10, r2
     6a6:	b3 2c       	mov	r11, r3
     6a8:	c4 2c       	mov	r12, r4
     6aa:	d5 2c       	mov	r13, r5
     6ac:	e6 2c       	mov	r14, r6
     6ae:	f7 2c       	mov	r15, r7
     6b0:	08 2d       	mov	r16, r8
     6b2:	19 2d       	mov	r17, r9
     6b4:	0e 94 b1 2c 	call	0x5962	; 0x5962 <__subdi3>
     6b8:	a2 2e       	mov	r10, r18
     6ba:	b3 2e       	mov	r11, r19
     6bc:	c4 2e       	mov	r12, r20
     6be:	d5 2e       	mov	r13, r21
     6c0:	e6 2e       	mov	r14, r22
     6c2:	f7 2e       	mov	r15, r23
     6c4:	08 2f       	mov	r16, r24
     6c6:	19 2f       	mov	r17, r25
     6c8:	2a 2d       	mov	r18, r10
     6ca:	3b 2d       	mov	r19, r11
     6cc:	4c 2d       	mov	r20, r12
     6ce:	5d 2d       	mov	r21, r13
     6d0:	6e 2d       	mov	r22, r14
     6d2:	7f 2d       	mov	r23, r15
     6d4:	80 2f       	mov	r24, r16
     6d6:	91 2f       	mov	r25, r17
     6d8:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <appt_cycles_to_seconds>
     6dc:	dc 01       	movw	r26, r24
     6de:	cb 01       	movw	r24, r22
     6e0:	20 e0       	ldi	r18, 0x00	; 0
     6e2:	30 e0       	ldi	r19, 0x00	; 0
     6e4:	40 e7       	ldi	r20, 0x70	; 112
     6e6:	51 e4       	ldi	r21, 0x41	; 65
     6e8:	bc 01       	movw	r22, r24
     6ea:	cd 01       	movw	r24, r26
     6ec:	0e 94 66 29 	call	0x52cc	; 0x52cc <__cmpsf2>
     6f0:	18 16       	cp	r1, r24
     6f2:	54 f1       	brlt	.+84     	; 0x748 <app_control+0x2fc>
			{
				app_state.t0_tr_check_start_temp = app_state.t0_current_temp;
     6f4:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <app_state+0x40>
     6f8:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <app_state+0x41>
     6fc:	a0 91 53 01 	lds	r26, 0x0153	; 0x800153 <app_state+0x42>
     700:	b0 91 54 01 	lds	r27, 0x0154	; 0x800154 <app_state+0x43>
     704:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <app_state+0x48>
     708:	90 93 5a 01 	sts	0x015A, r25	; 0x80015a <app_state+0x49>
     70c:	a0 93 5b 01 	sts	0x015B, r26	; 0x80015b <app_state+0x4a>
     710:	b0 93 5c 01 	sts	0x015C, r27	; 0x80015c <app_state+0x4b>
				app_state.t0_tr_check_start_time = appt_get_cycles_since_startup();
     714:	0e 94 29 13 	call	0x2652	; 0x2652 <appt_get_cycles_since_startup>
     718:	a2 2e       	mov	r10, r18
     71a:	b3 2e       	mov	r11, r19
     71c:	c4 2e       	mov	r12, r20
     71e:	d5 2e       	mov	r13, r21
     720:	e6 2e       	mov	r14, r22
     722:	f7 2e       	mov	r15, r23
     724:	08 2f       	mov	r16, r24
     726:	19 2f       	mov	r17, r25
     728:	a0 92 5d 01 	sts	0x015D, r10	; 0x80015d <app_state+0x4c>
     72c:	b0 92 5e 01 	sts	0x015E, r11	; 0x80015e <app_state+0x4d>
     730:	c0 92 5f 01 	sts	0x015F, r12	; 0x80015f <app_state+0x4e>
     734:	d0 92 60 01 	sts	0x0160, r13	; 0x800160 <app_state+0x4f>
     738:	e0 92 61 01 	sts	0x0161, r14	; 0x800161 <app_state+0x50>
     73c:	f0 92 62 01 	sts	0x0162, r15	; 0x800162 <app_state+0x51>
     740:	00 93 63 01 	sts	0x0163, r16	; 0x800163 <app_state+0x52>
     744:	10 93 64 01 	sts	0x0164, r17	; 0x800164 <app_state+0x53>
			}
		}
	#endif
	
	#ifdef TSENS_PROBE_1
		app_state.t1_current_temp = tsens_measure_probe1_temp(&app_state.current_error);
     748:	80 e3       	ldi	r24, 0x30	; 48
     74a:	91 e0       	ldi	r25, 0x01	; 1
     74c:	0e 94 79 28 	call	0x50f2	; 0x50f2 <tsens_measure_probe1_temp>
     750:	dc 01       	movw	r26, r24
     752:	cb 01       	movw	r24, r22
     754:	80 93 65 01 	sts	0x0165, r24	; 0x800165 <app_state+0x54>
     758:	90 93 66 01 	sts	0x0166, r25	; 0x800166 <app_state+0x55>
     75c:	a0 93 67 01 	sts	0x0167, r26	; 0x800167 <app_state+0x56>
     760:	b0 93 68 01 	sts	0x0168, r27	; 0x800168 <app_state+0x57>
		if(app_state.current_error)
     764:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <app_state+0x1f>
     768:	88 23       	and	r24, r24
     76a:	19 f0       	breq	.+6      	; 0x772 <app_control+0x326>
		{
			return app_state.current_error;
     76c:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <app_state+0x1f>
     770:	23 c2       	rjmp	.+1094   	; 0xbb8 <app_control+0x76c>
		}
		if(app_state.current_state_func == app_state_menu_tprobe1_calib)
     772:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <app_state+0x1c>
     776:	90 91 2e 01 	lds	r25, 0x012E	; 0x80012e <app_state+0x1d>
     77a:	8a 51       	subi	r24, 0x1A	; 26
     77c:	9d 40       	sbci	r25, 0x0D	; 13
     77e:	a9 f4       	brne	.+42     	; 0x7aa <app_control+0x35e>
		{
			app_state.t1_resistance = tsens_measure1_resistance(&app_state.current_error);
     780:	80 e3       	ldi	r24, 0x30	; 48
     782:	91 e0       	ldi	r25, 0x01	; 1
     784:	0e 94 f9 27 	call	0x4ff2	; 0x4ff2 <tsens_measure1_resistance>
     788:	dc 01       	movw	r26, r24
     78a:	cb 01       	movw	r24, r22
     78c:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <app_state+0x58>
     790:	90 93 6a 01 	sts	0x016A, r25	; 0x80016a <app_state+0x59>
     794:	a0 93 6b 01 	sts	0x016B, r26	; 0x80016b <app_state+0x5a>
     798:	b0 93 6c 01 	sts	0x016C, r27	; 0x80016c <app_state+0x5b>
			if(app_state.current_error)
     79c:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <app_state+0x1f>
     7a0:	88 23       	and	r24, r24
     7a2:	19 f0       	breq	.+6      	; 0x7aa <app_control+0x35e>
			{
				return app_state.current_error;
     7a4:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <app_state+0x1f>
     7a8:	07 c2       	rjmp	.+1038   	; 0xbb8 <app_control+0x76c>
			}
		}
		// min, max temp protection
		if(app_state.t1_current_temp < HEATER_TR_PROTECTION_MIN_TEMP)
     7aa:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <app_state+0x54>
     7ae:	90 91 66 01 	lds	r25, 0x0166	; 0x800166 <app_state+0x55>
     7b2:	a0 91 67 01 	lds	r26, 0x0167	; 0x800167 <app_state+0x56>
     7b6:	b0 91 68 01 	lds	r27, 0x0168	; 0x800168 <app_state+0x57>
     7ba:	20 e0       	ldi	r18, 0x00	; 0
     7bc:	30 e0       	ldi	r19, 0x00	; 0
     7be:	a9 01       	movw	r20, r18
     7c0:	bc 01       	movw	r22, r24
     7c2:	cd 01       	movw	r24, r26
     7c4:	0e 94 66 29 	call	0x52cc	; 0x52cc <__cmpsf2>
     7c8:	88 23       	and	r24, r24
     7ca:	14 f4       	brge	.+4      	; 0x7d0 <app_control+0x384>
			return EC_THERMISTOR_MIN_TEMP;
     7cc:	86 e0       	ldi	r24, 0x06	; 6
     7ce:	f4 c1       	rjmp	.+1000   	; 0xbb8 <app_control+0x76c>
		else if(app_state.t1_current_temp > HEATER_TR_PROTECTION_MAX_TEMP)
     7d0:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <app_state+0x54>
     7d4:	90 91 66 01 	lds	r25, 0x0166	; 0x800166 <app_state+0x55>
     7d8:	a0 91 67 01 	lds	r26, 0x0167	; 0x800167 <app_state+0x56>
     7dc:	b0 91 68 01 	lds	r27, 0x0168	; 0x800168 <app_state+0x57>
     7e0:	20 e0       	ldi	r18, 0x00	; 0
     7e2:	30 e0       	ldi	r19, 0x00	; 0
     7e4:	48 e4       	ldi	r20, 0x48	; 72
     7e6:	53 e4       	ldi	r21, 0x43	; 67
     7e8:	bc 01       	movw	r22, r24
     7ea:	cd 01       	movw	r24, r26
     7ec:	0e 94 4f 2b 	call	0x569e	; 0x569e <__gesf2>
     7f0:	18 16       	cp	r1, r24
     7f2:	14 f4       	brge	.+4      	; 0x7f8 <app_control+0x3ac>
			return EC_THERMISTOR_MAX_TEMP;
     7f4:	85 e0       	ldi	r24, 0x05	; 5
     7f6:	e0 c1       	rjmp	.+960    	; 0xbb8 <app_control+0x76c>
		
		// unresponsive thermistor protection
		if(app_state.settings.controlling_tprobe == 1 || HEATER_SAFETY_TPROBE == 1)
     7f8:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <app_state+0x14>
     7fc:	81 30       	cpi	r24, 0x01	; 1
     7fe:	09 f0       	breq	.+2      	; 0x802 <app_control+0x3b6>
     800:	0c c1       	rjmp	.+536    	; 0xa1a <app_control+0x5ce>
		{
			if(app_state.heater_rapid_heating
     802:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <app_state+0x3d>
     806:	88 23       	and	r24, r24
     808:	09 f4       	brne	.+2      	; 0x80c <app_control+0x3c0>
     80a:	6d c0       	rjmp	.+218    	; 0x8e6 <app_control+0x49a>
				&& (app_state.t1_current_temp - app_state.t1_tr_check_start_temp) < HEATER_PROBE1_TR_PROTECTION_EXPECTED_TEMP_CHANGE
     80c:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <app_state+0x54>
     810:	90 91 66 01 	lds	r25, 0x0166	; 0x800166 <app_state+0x55>
     814:	a0 91 67 01 	lds	r26, 0x0167	; 0x800167 <app_state+0x56>
     818:	b0 91 68 01 	lds	r27, 0x0168	; 0x800168 <app_state+0x57>
     81c:	20 91 6d 01 	lds	r18, 0x016D	; 0x80016d <app_state+0x5c>
     820:	30 91 6e 01 	lds	r19, 0x016E	; 0x80016e <app_state+0x5d>
     824:	40 91 6f 01 	lds	r20, 0x016F	; 0x80016f <app_state+0x5e>
     828:	50 91 70 01 	lds	r21, 0x0170	; 0x800170 <app_state+0x5f>
     82c:	bc 01       	movw	r22, r24
     82e:	cd 01       	movw	r24, r26
     830:	0e 94 f9 28 	call	0x51f2	; 0x51f2 <__subsf3>
     834:	dc 01       	movw	r26, r24
     836:	cb 01       	movw	r24, r22
     838:	20 e0       	ldi	r18, 0x00	; 0
     83a:	30 e0       	ldi	r19, 0x00	; 0
     83c:	40 ea       	ldi	r20, 0xA0	; 160
     83e:	50 e4       	ldi	r21, 0x40	; 64
     840:	bc 01       	movw	r22, r24
     842:	cd 01       	movw	r24, r26
     844:	0e 94 66 29 	call	0x52cc	; 0x52cc <__cmpsf2>
     848:	88 23       	and	r24, r24
     84a:	0c f0       	brlt	.+2      	; 0x84e <app_control+0x402>
     84c:	4c c0       	rjmp	.+152    	; 0x8e6 <app_control+0x49a>
				&& appt_cycles_to_seconds(appt_get_cycles_since_startup() - app_state.t1_tr_check_start_time) > HEATER_PROBE1_TR_PROTECTION_INTERVAL) // if temp change under full power not reached within interval
     84e:	0e 94 29 13 	call	0x2652	; 0x2652 <appt_get_cycles_since_startup>
     852:	a2 2e       	mov	r10, r18
     854:	b3 2e       	mov	r11, r19
     856:	c4 2e       	mov	r12, r20
     858:	d5 2e       	mov	r13, r21
     85a:	e6 2e       	mov	r14, r22
     85c:	f7 2e       	mov	r15, r23
     85e:	08 2f       	mov	r16, r24
     860:	19 2f       	mov	r17, r25
     862:	20 90 71 01 	lds	r2, 0x0171	; 0x800171 <app_state+0x60>
     866:	30 90 72 01 	lds	r3, 0x0172	; 0x800172 <app_state+0x61>
     86a:	40 90 73 01 	lds	r4, 0x0173	; 0x800173 <app_state+0x62>
     86e:	50 90 74 01 	lds	r5, 0x0174	; 0x800174 <app_state+0x63>
     872:	60 90 75 01 	lds	r6, 0x0175	; 0x800175 <app_state+0x64>
     876:	70 90 76 01 	lds	r7, 0x0176	; 0x800176 <app_state+0x65>
     87a:	80 90 77 01 	lds	r8, 0x0177	; 0x800177 <app_state+0x66>
     87e:	90 90 78 01 	lds	r9, 0x0178	; 0x800178 <app_state+0x67>
     882:	2a 2d       	mov	r18, r10
     884:	3b 2d       	mov	r19, r11
     886:	4c 2d       	mov	r20, r12
     888:	5d 2d       	mov	r21, r13
     88a:	6e 2d       	mov	r22, r14
     88c:	7f 2d       	mov	r23, r15
     88e:	80 2f       	mov	r24, r16
     890:	91 2f       	mov	r25, r17
     892:	a2 2c       	mov	r10, r2
     894:	b3 2c       	mov	r11, r3
     896:	c4 2c       	mov	r12, r4
     898:	d5 2c       	mov	r13, r5
     89a:	e6 2c       	mov	r14, r6
     89c:	f7 2c       	mov	r15, r7
     89e:	08 2d       	mov	r16, r8
     8a0:	19 2d       	mov	r17, r9
     8a2:	0e 94 b1 2c 	call	0x5962	; 0x5962 <__subdi3>
     8a6:	a2 2e       	mov	r10, r18
     8a8:	b3 2e       	mov	r11, r19
     8aa:	c4 2e       	mov	r12, r20
     8ac:	d5 2e       	mov	r13, r21
     8ae:	e6 2e       	mov	r14, r22
     8b0:	f7 2e       	mov	r15, r23
     8b2:	08 2f       	mov	r16, r24
     8b4:	19 2f       	mov	r17, r25
     8b6:	2a 2d       	mov	r18, r10
     8b8:	3b 2d       	mov	r19, r11
     8ba:	4c 2d       	mov	r20, r12
     8bc:	5d 2d       	mov	r21, r13
     8be:	6e 2d       	mov	r22, r14
     8c0:	7f 2d       	mov	r23, r15
     8c2:	80 2f       	mov	r24, r16
     8c4:	91 2f       	mov	r25, r17
     8c6:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <appt_cycles_to_seconds>
     8ca:	dc 01       	movw	r26, r24
     8cc:	cb 01       	movw	r24, r22
     8ce:	20 e0       	ldi	r18, 0x00	; 0
     8d0:	30 e0       	ldi	r19, 0x00	; 0
     8d2:	40 e7       	ldi	r20, 0x70	; 112
     8d4:	51 e4       	ldi	r21, 0x41	; 65
     8d6:	bc 01       	movw	r22, r24
     8d8:	cd 01       	movw	r24, r26
     8da:	0e 94 4f 2b 	call	0x569e	; 0x569e <__gesf2>
     8de:	18 16       	cp	r1, r24
     8e0:	14 f4       	brge	.+4      	; 0x8e6 <app_control+0x49a>
			{
				return EC_THERMISTOR_NOT_RESPONDING;
     8e2:	83 e0       	ldi	r24, 0x03	; 3
     8e4:	69 c1       	rjmp	.+722    	; 0xbb8 <app_control+0x76c>
			}
			else if(app_state.heater_rapid_heating
     8e6:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <app_state+0x3d>
     8ea:	88 23       	and	r24, r24
     8ec:	09 f4       	brne	.+2      	; 0x8f0 <app_control+0x4a4>
     8ee:	95 c0       	rjmp	.+298    	; 0xa1a <app_control+0x5ce>
				&& (app_state.t1_current_temp - app_state.t1_tr_check_start_temp) >= HEATER_PROBE1_TR_PROTECTION_EXPECTED_TEMP_CHANGE
     8f0:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <app_state+0x54>
     8f4:	90 91 66 01 	lds	r25, 0x0166	; 0x800166 <app_state+0x55>
     8f8:	a0 91 67 01 	lds	r26, 0x0167	; 0x800167 <app_state+0x56>
     8fc:	b0 91 68 01 	lds	r27, 0x0168	; 0x800168 <app_state+0x57>
     900:	20 91 6d 01 	lds	r18, 0x016D	; 0x80016d <app_state+0x5c>
     904:	30 91 6e 01 	lds	r19, 0x016E	; 0x80016e <app_state+0x5d>
     908:	40 91 6f 01 	lds	r20, 0x016F	; 0x80016f <app_state+0x5e>
     90c:	50 91 70 01 	lds	r21, 0x0170	; 0x800170 <app_state+0x5f>
     910:	bc 01       	movw	r22, r24
     912:	cd 01       	movw	r24, r26
     914:	0e 94 f9 28 	call	0x51f2	; 0x51f2 <__subsf3>
     918:	dc 01       	movw	r26, r24
     91a:	cb 01       	movw	r24, r22
     91c:	20 e0       	ldi	r18, 0x00	; 0
     91e:	30 e0       	ldi	r19, 0x00	; 0
     920:	40 ea       	ldi	r20, 0xA0	; 160
     922:	50 e4       	ldi	r21, 0x40	; 64
     924:	bc 01       	movw	r22, r24
     926:	cd 01       	movw	r24, r26
     928:	0e 94 4f 2b 	call	0x569e	; 0x569e <__gesf2>
     92c:	88 23       	and	r24, r24
     92e:	0c f4       	brge	.+2      	; 0x932 <app_control+0x4e6>
     930:	74 c0       	rjmp	.+232    	; 0xa1a <app_control+0x5ce>
				&& appt_cycles_to_seconds(appt_get_cycles_since_startup() - app_state.t1_tr_check_start_time) <= HEATER_PROBE1_TR_PROTECTION_INTERVAL)// reset start temp and time for next cycle
     932:	0e 94 29 13 	call	0x2652	; 0x2652 <appt_get_cycles_since_startup>
     936:	a2 2e       	mov	r10, r18
     938:	b3 2e       	mov	r11, r19
     93a:	c4 2e       	mov	r12, r20
     93c:	d5 2e       	mov	r13, r21
     93e:	e6 2e       	mov	r14, r22
     940:	f7 2e       	mov	r15, r23
     942:	08 2f       	mov	r16, r24
     944:	19 2f       	mov	r17, r25
     946:	20 90 71 01 	lds	r2, 0x0171	; 0x800171 <app_state+0x60>
     94a:	30 90 72 01 	lds	r3, 0x0172	; 0x800172 <app_state+0x61>
     94e:	40 90 73 01 	lds	r4, 0x0173	; 0x800173 <app_state+0x62>
     952:	50 90 74 01 	lds	r5, 0x0174	; 0x800174 <app_state+0x63>
     956:	60 90 75 01 	lds	r6, 0x0175	; 0x800175 <app_state+0x64>
     95a:	70 90 76 01 	lds	r7, 0x0176	; 0x800176 <app_state+0x65>
     95e:	80 90 77 01 	lds	r8, 0x0177	; 0x800177 <app_state+0x66>
     962:	90 90 78 01 	lds	r9, 0x0178	; 0x800178 <app_state+0x67>
     966:	2a 2d       	mov	r18, r10
     968:	3b 2d       	mov	r19, r11
     96a:	4c 2d       	mov	r20, r12
     96c:	5d 2d       	mov	r21, r13
     96e:	6e 2d       	mov	r22, r14
     970:	7f 2d       	mov	r23, r15
     972:	80 2f       	mov	r24, r16
     974:	91 2f       	mov	r25, r17
     976:	a2 2c       	mov	r10, r2
     978:	b3 2c       	mov	r11, r3
     97a:	c4 2c       	mov	r12, r4
     97c:	d5 2c       	mov	r13, r5
     97e:	e6 2c       	mov	r14, r6
     980:	f7 2c       	mov	r15, r7
     982:	08 2d       	mov	r16, r8
     984:	19 2d       	mov	r17, r9
     986:	0e 94 b1 2c 	call	0x5962	; 0x5962 <__subdi3>
     98a:	a2 2e       	mov	r10, r18
     98c:	b3 2e       	mov	r11, r19
     98e:	c4 2e       	mov	r12, r20
     990:	d5 2e       	mov	r13, r21
     992:	e6 2e       	mov	r14, r22
     994:	f7 2e       	mov	r15, r23
     996:	08 2f       	mov	r16, r24
     998:	19 2f       	mov	r17, r25
     99a:	2a 2d       	mov	r18, r10
     99c:	3b 2d       	mov	r19, r11
     99e:	4c 2d       	mov	r20, r12
     9a0:	5d 2d       	mov	r21, r13
     9a2:	6e 2d       	mov	r22, r14
     9a4:	7f 2d       	mov	r23, r15
     9a6:	80 2f       	mov	r24, r16
     9a8:	91 2f       	mov	r25, r17
     9aa:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <appt_cycles_to_seconds>
     9ae:	dc 01       	movw	r26, r24
     9b0:	cb 01       	movw	r24, r22
     9b2:	20 e0       	ldi	r18, 0x00	; 0
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	40 e7       	ldi	r20, 0x70	; 112
     9b8:	51 e4       	ldi	r21, 0x41	; 65
     9ba:	bc 01       	movw	r22, r24
     9bc:	cd 01       	movw	r24, r26
     9be:	0e 94 66 29 	call	0x52cc	; 0x52cc <__cmpsf2>
     9c2:	18 16       	cp	r1, r24
     9c4:	54 f1       	brlt	.+84     	; 0xa1a <app_control+0x5ce>
			{
				app_state.t1_tr_check_start_temp = app_state.t1_current_temp;
     9c6:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <app_state+0x54>
     9ca:	90 91 66 01 	lds	r25, 0x0166	; 0x800166 <app_state+0x55>
     9ce:	a0 91 67 01 	lds	r26, 0x0167	; 0x800167 <app_state+0x56>
     9d2:	b0 91 68 01 	lds	r27, 0x0168	; 0x800168 <app_state+0x57>
     9d6:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <app_state+0x5c>
     9da:	90 93 6e 01 	sts	0x016E, r25	; 0x80016e <app_state+0x5d>
     9de:	a0 93 6f 01 	sts	0x016F, r26	; 0x80016f <app_state+0x5e>
     9e2:	b0 93 70 01 	sts	0x0170, r27	; 0x800170 <app_state+0x5f>
				app_state.t1_tr_check_start_time = appt_get_cycles_since_startup();
     9e6:	0e 94 29 13 	call	0x2652	; 0x2652 <appt_get_cycles_since_startup>
     9ea:	a2 2e       	mov	r10, r18
     9ec:	b3 2e       	mov	r11, r19
     9ee:	c4 2e       	mov	r12, r20
     9f0:	d5 2e       	mov	r13, r21
     9f2:	e6 2e       	mov	r14, r22
     9f4:	f7 2e       	mov	r15, r23
     9f6:	08 2f       	mov	r16, r24
     9f8:	19 2f       	mov	r17, r25
     9fa:	a0 92 71 01 	sts	0x0171, r10	; 0x800171 <app_state+0x60>
     9fe:	b0 92 72 01 	sts	0x0172, r11	; 0x800172 <app_state+0x61>
     a02:	c0 92 73 01 	sts	0x0173, r12	; 0x800173 <app_state+0x62>
     a06:	d0 92 74 01 	sts	0x0174, r13	; 0x800174 <app_state+0x63>
     a0a:	e0 92 75 01 	sts	0x0175, r14	; 0x800175 <app_state+0x64>
     a0e:	f0 92 76 01 	sts	0x0176, r15	; 0x800176 <app_state+0x65>
     a12:	00 93 77 01 	sts	0x0177, r16	; 0x800177 <app_state+0x66>
     a16:	10 93 78 01 	sts	0x0178, r17	; 0x800178 <app_state+0x67>
			}
		}
	#endif
	
	// pid stuff
	if(app_state.heater_onoff)
     a1a:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <app_state+0x3e>
     a1e:	88 23       	and	r24, r24
     a20:	09 f4       	brne	.+2      	; 0xa24 <app_control+0x5d8>
     a22:	c9 c0       	rjmp	.+402    	; 0xbb6 <app_control+0x76a>
	{
		float process_val;
		switch(app_state.settings.controlling_tprobe)
     a24:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <app_state+0x14>
     a28:	88 2f       	mov	r24, r24
     a2a:	90 e0       	ldi	r25, 0x00	; 0
     a2c:	00 97       	sbiw	r24, 0x00	; 0
     a2e:	19 f0       	breq	.+6      	; 0xa36 <app_control+0x5ea>
     a30:	01 97       	sbiw	r24, 0x01	; 1
     a32:	71 f0       	breq	.+28     	; 0xa50 <app_control+0x604>
     a34:	1a c0       	rjmp	.+52     	; 0xa6a <app_control+0x61e>
		{
			#ifdef TSENS_PROBE_0
			case 0:				
				process_val = app_state.t0_current_temp;				
     a36:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <app_state+0x40>
     a3a:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <app_state+0x41>
     a3e:	a0 91 53 01 	lds	r26, 0x0153	; 0x800153 <app_state+0x42>
     a42:	b0 91 54 01 	lds	r27, 0x0154	; 0x800154 <app_state+0x43>
     a46:	89 83       	std	Y+1, r24	; 0x01
     a48:	9a 83       	std	Y+2, r25	; 0x02
     a4a:	ab 83       	std	Y+3, r26	; 0x03
     a4c:	bc 83       	std	Y+4, r27	; 0x04
				break;
     a4e:	0f c0       	rjmp	.+30     	; 0xa6e <app_control+0x622>
				#endif
			#ifdef TSENS_PROBE_1
			case 1:				
				process_val = app_state.t1_current_temp;				
     a50:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <app_state+0x54>
     a54:	90 91 66 01 	lds	r25, 0x0166	; 0x800166 <app_state+0x55>
     a58:	a0 91 67 01 	lds	r26, 0x0167	; 0x800167 <app_state+0x56>
     a5c:	b0 91 68 01 	lds	r27, 0x0168	; 0x800168 <app_state+0x57>
     a60:	89 83       	std	Y+1, r24	; 0x01
     a62:	9a 83       	std	Y+2, r25	; 0x02
     a64:	ab 83       	std	Y+3, r26	; 0x03
     a66:	bc 83       	std	Y+4, r27	; 0x04
				break;
     a68:	02 c0       	rjmp	.+4      	; 0xa6e <app_control+0x622>
			case 3:				
				process_val = app_state.t3_current_temp;				
				break;
				#endif
			default:
				return EC_NO_CONTROLLING_TPROBE;
     a6a:	84 e0       	ldi	r24, 0x04	; 4
     a6c:	a5 c0       	rjmp	.+330    	; 0xbb8 <app_control+0x76c>
		}
		
		float pid_res = pid_step(&app_state.pid_state, process_val, app_state.settings.heater_target_temp);
     a6e:	20 91 11 01 	lds	r18, 0x0111	; 0x800111 <app_state>
     a72:	30 91 12 01 	lds	r19, 0x0112	; 0x800112 <app_state+0x1>
     a76:	40 91 13 01 	lds	r20, 0x0113	; 0x800113 <app_state+0x2>
     a7a:	50 91 14 01 	lds	r21, 0x0114	; 0x800114 <app_state+0x3>
     a7e:	89 81       	ldd	r24, Y+1	; 0x01
     a80:	9a 81       	ldd	r25, Y+2	; 0x02
     a82:	ab 81       	ldd	r26, Y+3	; 0x03
     a84:	bc 81       	ldd	r27, Y+4	; 0x04
     a86:	89 01       	movw	r16, r18
     a88:	9a 01       	movw	r18, r20
     a8a:	ac 01       	movw	r20, r24
     a8c:	bd 01       	movw	r22, r26
     a8e:	81 e3       	ldi	r24, 0x31	; 49
     a90:	91 e0       	ldi	r25, 0x01	; 1
     a92:	0e 94 c9 1b 	call	0x3792	; 0x3792 <pid_step>
     a96:	dc 01       	movw	r26, r24
     a98:	cb 01       	movw	r24, r22
     a9a:	8e 83       	std	Y+6, r24	; 0x06
     a9c:	9f 83       	std	Y+7, r25	; 0x07
     a9e:	a8 87       	std	Y+8, r26	; 0x08
     aa0:	b9 87       	std	Y+9, r27	; 0x09
		// if heater temp is > than safe maximum, default pwm duty cycle to 0
		uint8_t hdc;
		if(HEATER_SAFETY_TPROBE_CURRENT_TEMP > HEATER_MAX_OPERATING_TEMP) // HEATER_SAFETY_TPROBE_CURRENT_TEMP is the selected heater probe used to limit the maximum heater temperature
     aa2:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <app_state+0x40>
     aa6:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <app_state+0x41>
     aaa:	a0 91 53 01 	lds	r26, 0x0153	; 0x800153 <app_state+0x42>
     aae:	b0 91 54 01 	lds	r27, 0x0154	; 0x800154 <app_state+0x43>
     ab2:	20 e0       	ldi	r18, 0x00	; 0
     ab4:	30 e0       	ldi	r19, 0x00	; 0
     ab6:	48 ec       	ldi	r20, 0xC8	; 200
     ab8:	52 e4       	ldi	r21, 0x42	; 66
     aba:	bc 01       	movw	r22, r24
     abc:	cd 01       	movw	r24, r26
     abe:	0e 94 4f 2b 	call	0x569e	; 0x569e <__gesf2>
     ac2:	18 16       	cp	r1, r24
     ac4:	14 f4       	brge	.+4      	; 0xaca <app_control+0x67e>
			hdc = 0;
     ac6:	1d 82       	std	Y+5, r1	; 0x05
     ac8:	09 c0       	rjmp	.+18     	; 0xadc <app_control+0x690>
		else
			hdc = (uint8_t)pid_res;
     aca:	6e 81       	ldd	r22, Y+6	; 0x06
     acc:	7f 81       	ldd	r23, Y+7	; 0x07
     ace:	88 85       	ldd	r24, Y+8	; 0x08
     ad0:	99 85       	ldd	r25, Y+9	; 0x09
     ad2:	0e 94 20 2a 	call	0x5440	; 0x5440 <__fixunssfsi>
     ad6:	dc 01       	movw	r26, r24
     ad8:	cb 01       	movw	r24, r22
     ada:	8d 83       	std	Y+5, r24	; 0x05
		
		if(hdc >= HEATER_TR_DUTY_CYCLE && !app_state.heater_rapid_heating) // beginning of rapid heating period.
     adc:	8d 81       	ldd	r24, Y+5	; 0x05
     ade:	83 36       	cpi	r24, 0x63	; 99
     ae0:	08 f4       	brcc	.+2      	; 0xae4 <app_control+0x698>
     ae2:	5d c0       	rjmp	.+186    	; 0xb9e <app_control+0x752>
     ae4:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <app_state+0x3d>
     ae8:	88 23       	and	r24, r24
     aea:	09 f0       	breq	.+2      	; 0xaee <app_control+0x6a2>
     aec:	58 c0       	rjmp	.+176    	; 0xb9e <app_control+0x752>
		{
			app_state.heater_rapid_heating = TRUE;
     aee:	81 e0       	ldi	r24, 0x01	; 1
     af0:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <app_state+0x3d>
			#ifdef TSENS_PROBE_0
				app_state.t0_tr_check_start_temp = app_state.t0_current_temp;
     af4:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <app_state+0x40>
     af8:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <app_state+0x41>
     afc:	a0 91 53 01 	lds	r26, 0x0153	; 0x800153 <app_state+0x42>
     b00:	b0 91 54 01 	lds	r27, 0x0154	; 0x800154 <app_state+0x43>
     b04:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <app_state+0x48>
     b08:	90 93 5a 01 	sts	0x015A, r25	; 0x80015a <app_state+0x49>
     b0c:	a0 93 5b 01 	sts	0x015B, r26	; 0x80015b <app_state+0x4a>
     b10:	b0 93 5c 01 	sts	0x015C, r27	; 0x80015c <app_state+0x4b>
				app_state.t0_tr_check_start_time = appt_get_cycles_since_startup();
     b14:	0e 94 29 13 	call	0x2652	; 0x2652 <appt_get_cycles_since_startup>
     b18:	a2 2e       	mov	r10, r18
     b1a:	b3 2e       	mov	r11, r19
     b1c:	c4 2e       	mov	r12, r20
     b1e:	d5 2e       	mov	r13, r21
     b20:	e6 2e       	mov	r14, r22
     b22:	f7 2e       	mov	r15, r23
     b24:	08 2f       	mov	r16, r24
     b26:	19 2f       	mov	r17, r25
     b28:	a0 92 5d 01 	sts	0x015D, r10	; 0x80015d <app_state+0x4c>
     b2c:	b0 92 5e 01 	sts	0x015E, r11	; 0x80015e <app_state+0x4d>
     b30:	c0 92 5f 01 	sts	0x015F, r12	; 0x80015f <app_state+0x4e>
     b34:	d0 92 60 01 	sts	0x0160, r13	; 0x800160 <app_state+0x4f>
     b38:	e0 92 61 01 	sts	0x0161, r14	; 0x800161 <app_state+0x50>
     b3c:	f0 92 62 01 	sts	0x0162, r15	; 0x800162 <app_state+0x51>
     b40:	00 93 63 01 	sts	0x0163, r16	; 0x800163 <app_state+0x52>
     b44:	10 93 64 01 	sts	0x0164, r17	; 0x800164 <app_state+0x53>
			#endif
			
			#ifdef TSENS_PROBE_1
				app_state.t1_tr_check_start_temp = app_state.t1_current_temp;
     b48:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <app_state+0x54>
     b4c:	90 91 66 01 	lds	r25, 0x0166	; 0x800166 <app_state+0x55>
     b50:	a0 91 67 01 	lds	r26, 0x0167	; 0x800167 <app_state+0x56>
     b54:	b0 91 68 01 	lds	r27, 0x0168	; 0x800168 <app_state+0x57>
     b58:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <app_state+0x5c>
     b5c:	90 93 6e 01 	sts	0x016E, r25	; 0x80016e <app_state+0x5d>
     b60:	a0 93 6f 01 	sts	0x016F, r26	; 0x80016f <app_state+0x5e>
     b64:	b0 93 70 01 	sts	0x0170, r27	; 0x800170 <app_state+0x5f>
				app_state.t1_tr_check_start_time = appt_get_cycles_since_startup();
     b68:	0e 94 29 13 	call	0x2652	; 0x2652 <appt_get_cycles_since_startup>
     b6c:	a2 2e       	mov	r10, r18
     b6e:	b3 2e       	mov	r11, r19
     b70:	c4 2e       	mov	r12, r20
     b72:	d5 2e       	mov	r13, r21
     b74:	e6 2e       	mov	r14, r22
     b76:	f7 2e       	mov	r15, r23
     b78:	08 2f       	mov	r16, r24
     b7a:	19 2f       	mov	r17, r25
     b7c:	a0 92 71 01 	sts	0x0171, r10	; 0x800171 <app_state+0x60>
     b80:	b0 92 72 01 	sts	0x0172, r11	; 0x800172 <app_state+0x61>
     b84:	c0 92 73 01 	sts	0x0173, r12	; 0x800173 <app_state+0x62>
     b88:	d0 92 74 01 	sts	0x0174, r13	; 0x800174 <app_state+0x63>
     b8c:	e0 92 75 01 	sts	0x0175, r14	; 0x800175 <app_state+0x64>
     b90:	f0 92 76 01 	sts	0x0176, r15	; 0x800176 <app_state+0x65>
     b94:	00 93 77 01 	sts	0x0177, r16	; 0x800177 <app_state+0x66>
     b98:	10 93 78 01 	sts	0x0178, r17	; 0x800178 <app_state+0x67>
     b9c:	09 c0       	rjmp	.+18     	; 0xbb0 <app_control+0x764>
			#ifdef TSENS_PROBE_3
				app_state.t3_tr_check_start_temp = app_state.t3_current_temp;
				app_state.t3_tr_check_start_time = appt_get_cycles_since_startup();
			#endif
		}
		else if(hdc < HEATER_TR_DUTY_CYCLE && app_state.heater_rapid_heating) // reset TRP state, end of rapid heating period
     b9e:	8d 81       	ldd	r24, Y+5	; 0x05
     ba0:	83 36       	cpi	r24, 0x63	; 99
     ba2:	30 f4       	brcc	.+12     	; 0xbb0 <app_control+0x764>
     ba4:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <app_state+0x3d>
     ba8:	88 23       	and	r24, r24
     baa:	11 f0       	breq	.+4      	; 0xbb0 <app_control+0x764>
		{
			app_state.heater_rapid_heating = FALSE;
     bac:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <app_state+0x3d>
		}
		
		// set heater duty cycle
		heater_set_duty_cycle(hdc);
     bb0:	8d 81       	ldd	r24, Y+5	; 0x05
     bb2:	0e 94 ca 14 	call	0x2994	; 0x2994 <heater_set_duty_cycle>
	}
	return EC_SUCCESS; // everything ok
     bb6:	80 e0       	ldi	r24, 0x00	; 0
}
     bb8:	29 96       	adiw	r28, 0x09	; 9
     bba:	0f b6       	in	r0, 0x3f	; 63
     bbc:	f8 94       	cli
     bbe:	de bf       	out	0x3e, r29	; 62
     bc0:	0f be       	out	0x3f, r0	; 63
     bc2:	cd bf       	out	0x3d, r28	; 61
     bc4:	df 91       	pop	r29
     bc6:	cf 91       	pop	r28
     bc8:	1f 91       	pop	r17
     bca:	0f 91       	pop	r16
     bcc:	ff 90       	pop	r15
     bce:	ef 90       	pop	r14
     bd0:	df 90       	pop	r13
     bd2:	cf 90       	pop	r12
     bd4:	bf 90       	pop	r11
     bd6:	af 90       	pop	r10
     bd8:	9f 90       	pop	r9
     bda:	8f 90       	pop	r8
     bdc:	7f 90       	pop	r7
     bde:	6f 90       	pop	r6
     be0:	5f 90       	pop	r5
     be2:	4f 90       	pop	r4
     be4:	3f 90       	pop	r3
     be6:	2f 90       	pop	r2
     be8:	08 95       	ret

00000bea <app_rotenc_update>:

/////////////////////////////////////// ROT_ENC UPDATE CALLBACK ///////////////////////////////////
ErrorCode app_rotenc_update()
{
     bea:	cf 93       	push	r28
     bec:	df 93       	push	r29
     bee:	cd b7       	in	r28, 0x3d	; 61
     bf0:	de b7       	in	r29, 0x3e	; 62
	rotenc_update();
     bf2:	0e 94 c5 1d 	call	0x3b8a	; 0x3b8a <rotenc_update>
	return EC_SUCCESS;
     bf6:	80 e0       	ldi	r24, 0x00	; 0
}
     bf8:	df 91       	pop	r29
     bfa:	cf 91       	pop	r28
     bfc:	08 95       	ret

00000bfe <app_button_update>:

/////////////////////////////////////// BUTTONS UPDATE CALLBACK ///////////////////////////////////
ErrorCode app_button_update()
{
     bfe:	cf 93       	push	r28
     c00:	df 93       	push	r29
     c02:	cd b7       	in	r28, 0x3d	; 61
     c04:	de b7       	in	r29, 0x3e	; 62
	switch_update();
     c06:	0e 94 d4 24 	call	0x49a8	; 0x49a8 <switch_update>
	return EC_SUCCESS;
     c0a:	80 e0       	ldi	r24, 0x00	; 0
}
     c0c:	df 91       	pop	r29
     c0e:	cf 91       	pop	r28
     c10:	08 95       	ret

00000c12 <app_state_main>:

/////////////////////////////////////// STATE MACHINE IMPLEMENTATION //////////////////////////////
// all the state functions
ErrorCode app_state_main()
{
     c12:	cf 93       	push	r28
     c14:	df 93       	push	r29
     c16:	cd b7       	in	r28, 0x3d	; 61
     c18:	de b7       	in	r29, 0x3e	; 62
	if(app_state.current_input.rotenc_delta > 0)
     c1a:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <app_state+0x16>
     c1e:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <app_state+0x17>
     c22:	18 16       	cp	r1, r24
     c24:	19 06       	cpc	r1, r25
     c26:	64 f4       	brge	.+24     	; 0xc40 <app_state_main+0x2e>
		app_state.selected_menu_item_index = imax8(imin8(app_state.selected_menu_item_index + 1, 1), 0);
     c28:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <app_state+0x1e>
     c2c:	8f 5f       	subi	r24, 0xFF	; 255
     c2e:	61 e0       	ldi	r22, 0x01	; 1
     c30:	0e 94 1b 1a 	call	0x3436	; 0x3436 <imin8>
     c34:	60 e0       	ldi	r22, 0x00	; 0
     c36:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <imax8>
     c3a:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <app_state+0x1e>
     c3e:	11 c0       	rjmp	.+34     	; 0xc62 <app_state_main+0x50>
	else if(app_state.current_input.rotenc_delta < 0)
     c40:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <app_state+0x16>
     c44:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <app_state+0x17>
     c48:	99 23       	and	r25, r25
     c4a:	5c f4       	brge	.+22     	; 0xc62 <app_state_main+0x50>
		app_state.selected_menu_item_index = imax8(imin8(app_state.selected_menu_item_index - 1, 1), 0);
     c4c:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <app_state+0x1e>
     c50:	81 50       	subi	r24, 0x01	; 1
     c52:	61 e0       	ldi	r22, 0x01	; 1
     c54:	0e 94 1b 1a 	call	0x3436	; 0x3436 <imin8>
     c58:	60 e0       	ldi	r22, 0x00	; 0
     c5a:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <imax8>
     c5e:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <app_state+0x1e>
	// display current temp
	srd_clear();
     c62:	0e 94 a6 22 	call	0x454c	; 0x454c <srd_clear>
	switch(app_state.selected_menu_item_index)
     c66:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <app_state+0x1e>
     c6a:	08 2e       	mov	r0, r24
     c6c:	00 0c       	add	r0, r0
     c6e:	99 0b       	sbc	r25, r25
     c70:	00 97       	sbiw	r24, 0x00	; 0
     c72:	19 f0       	breq	.+6      	; 0xc7a <app_state_main+0x68>
     c74:	01 97       	sbiw	r24, 0x01	; 1
     c76:	79 f0       	breq	.+30     	; 0xc96 <app_state_main+0x84>
     c78:	1c c0       	rjmp	.+56     	; 0xcb2 <app_state_main+0xa0>
	{
		#ifdef TSENS_PROBE_0
		case 0:
			mr_main(app_state.t0_current_temp, 0);
     c7a:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <app_state+0x40>
     c7e:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <app_state+0x41>
     c82:	a0 91 53 01 	lds	r26, 0x0153	; 0x800153 <app_state+0x42>
     c86:	b0 91 54 01 	lds	r27, 0x0154	; 0x800154 <app_state+0x43>
     c8a:	40 e0       	ldi	r20, 0x00	; 0
     c8c:	bc 01       	movw	r22, r24
     c8e:	cd 01       	movw	r24, r26
     c90:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <mr_main>
			break;
     c94:	10 c0       	rjmp	.+32     	; 0xcb6 <app_state_main+0xa4>
			#endif
		#ifdef TSENS_PROBE_1
		case 1:
			mr_main(app_state.t1_current_temp, 1);
     c96:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <app_state+0x54>
     c9a:	90 91 66 01 	lds	r25, 0x0166	; 0x800166 <app_state+0x55>
     c9e:	a0 91 67 01 	lds	r26, 0x0167	; 0x800167 <app_state+0x56>
     ca2:	b0 91 68 01 	lds	r27, 0x0168	; 0x800168 <app_state+0x57>
     ca6:	41 e0       	ldi	r20, 0x01	; 1
     ca8:	bc 01       	movw	r22, r24
     caa:	cd 01       	movw	r24, r26
     cac:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <mr_main>
			break;
     cb0:	02 c0       	rjmp	.+4      	; 0xcb6 <app_state_main+0xa4>
		case 3:
			mr_main(app_state.t3_current_temp, 3);
			break;
			#endif
		default:
			return EC_NO_CONTROLLING_TPROBE;
     cb2:	84 e0       	ldi	r24, 0x04	; 4
     cb4:	13 c0       	rjmp	.+38     	; 0xcdc <app_state_main+0xca>
			break;
	}
	srd_display();
     cb6:	0e 94 95 22 	call	0x452a	; 0x452a <srd_display>
	
	// state change
	if(app_state.current_input.button_presses & (1 << BUTTON0))
     cba:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <app_state+0x18>
     cbe:	88 2f       	mov	r24, r24
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	81 70       	andi	r24, 0x01	; 1
     cc4:	99 27       	eor	r25, r25
     cc6:	89 2b       	or	r24, r25
     cc8:	41 f0       	breq	.+16     	; 0xcda <app_state_main+0xc8>
	{
		app_state.selected_menu_item_index = 0;
     cca:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <app_state+0x1e>
		app_state.current_state_func = app_state_menu_main;
     cce:	81 e7       	ldi	r24, 0x71	; 113
     cd0:	96 e0       	ldi	r25, 0x06	; 6
     cd2:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <app_state+0x1d>
     cd6:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <app_state+0x1c>
	}
	
	return EC_SUCCESS; // everything ok	
     cda:	80 e0       	ldi	r24, 0x00	; 0
}
     cdc:	df 91       	pop	r29
     cde:	cf 91       	pop	r28
     ce0:	08 95       	ret

00000ce2 <app_state_menu_main>:

ErrorCode app_state_menu_main()
{
     ce2:	cf 93       	push	r28
     ce4:	df 93       	push	r29
     ce6:	cd b7       	in	r28, 0x3d	; 61
     ce8:	de b7       	in	r29, 0x3e	; 62
	if(app_state.current_input.rotenc_delta > 0)
     cea:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <app_state+0x16>
     cee:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <app_state+0x17>
     cf2:	18 16       	cp	r1, r24
     cf4:	19 06       	cpc	r1, r25
     cf6:	64 f4       	brge	.+24     	; 0xd10 <app_state_menu_main+0x2e>
		app_state.selected_menu_item_index = imax8(imin8(app_state.selected_menu_item_index + 1, 5), 0);
     cf8:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <app_state+0x1e>
     cfc:	8f 5f       	subi	r24, 0xFF	; 255
     cfe:	65 e0       	ldi	r22, 0x05	; 5
     d00:	0e 94 1b 1a 	call	0x3436	; 0x3436 <imin8>
     d04:	60 e0       	ldi	r22, 0x00	; 0
     d06:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <imax8>
     d0a:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <app_state+0x1e>
     d0e:	11 c0       	rjmp	.+34     	; 0xd32 <app_state_menu_main+0x50>
	else if(app_state.current_input.rotenc_delta < 0)
     d10:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <app_state+0x16>
     d14:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <app_state+0x17>
     d18:	99 23       	and	r25, r25
     d1a:	5c f4       	brge	.+22     	; 0xd32 <app_state_menu_main+0x50>
		app_state.selected_menu_item_index = imax8(imin8(app_state.selected_menu_item_index - 1, 5), 0);
     d1c:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <app_state+0x1e>
     d20:	81 50       	subi	r24, 0x01	; 1
     d22:	65 e0       	ldi	r22, 0x05	; 5
     d24:	0e 94 1b 1a 	call	0x3436	; 0x3436 <imin8>
     d28:	60 e0       	ldi	r22, 0x00	; 0
     d2a:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <imax8>
     d2e:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <app_state+0x1e>
	// display selected menu item
	srd_clear();
     d32:	0e 94 a6 22 	call	0x454c	; 0x454c <srd_clear>
	mr_main_menu(app_state.selected_menu_item_index);
     d36:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <app_state+0x1e>
     d3a:	0e 94 93 15 	call	0x2b26	; 0x2b26 <mr_main_menu>
	srd_display();
     d3e:	0e 94 95 22 	call	0x452a	; 0x452a <srd_display>
	
	// state change
	if(app_state.current_input.button_presses & (1 << BUTTON0))
     d42:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <app_state+0x18>
     d46:	88 2f       	mov	r24, r24
     d48:	90 e0       	ldi	r25, 0x00	; 0
     d4a:	81 70       	andi	r24, 0x01	; 1
     d4c:	99 27       	eor	r25, r25
     d4e:	89 2b       	or	r24, r25
     d50:	09 f4       	brne	.+2      	; 0xd54 <app_state_menu_main+0x72>
     d52:	43 c0       	rjmp	.+134    	; 0xdda <app_state_menu_main+0xf8>
	{
		switch(app_state.selected_menu_item_index)
     d54:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <app_state+0x1e>
     d58:	08 2e       	mov	r0, r24
     d5a:	00 0c       	add	r0, r0
     d5c:	99 0b       	sbc	r25, r25
     d5e:	82 30       	cpi	r24, 0x02	; 2
     d60:	91 05       	cpc	r25, r1
     d62:	19 f1       	breq	.+70     	; 0xdaa <app_state_menu_main+0xc8>
     d64:	83 30       	cpi	r24, 0x03	; 3
     d66:	91 05       	cpc	r25, r1
     d68:	2c f4       	brge	.+10     	; 0xd74 <app_state_menu_main+0x92>
     d6a:	00 97       	sbiw	r24, 0x00	; 0
     d6c:	61 f0       	breq	.+24     	; 0xd86 <app_state_menu_main+0xa4>
     d6e:	01 97       	sbiw	r24, 0x01	; 1
     d70:	99 f0       	breq	.+38     	; 0xd98 <app_state_menu_main+0xb6>
     d72:	33 c0       	rjmp	.+102    	; 0xdda <app_state_menu_main+0xf8>
     d74:	84 30       	cpi	r24, 0x04	; 4
     d76:	91 05       	cpc	r25, r1
     d78:	51 f1       	breq	.+84     	; 0xdce <app_state_menu_main+0xec>
     d7a:	84 30       	cpi	r24, 0x04	; 4
     d7c:	91 05       	cpc	r25, r1
     d7e:	f4 f0       	brlt	.+60     	; 0xdbc <app_state_menu_main+0xda>
     d80:	05 97       	sbiw	r24, 0x05	; 5
     d82:	41 f1       	breq	.+80     	; 0xdd4 <app_state_menu_main+0xf2>
     d84:	2a c0       	rjmp	.+84     	; 0xdda <app_state_menu_main+0xf8>
		{
			case 0:	// back to main screen
				app_state.selected_menu_item_index = 0;
     d86:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <app_state+0x1e>
				app_state.current_state_func = app_state_main;
     d8a:	89 e0       	ldi	r24, 0x09	; 9
     d8c:	96 e0       	ldi	r25, 0x06	; 6
     d8e:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <app_state+0x1d>
     d92:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <app_state+0x1c>
				break;
     d96:	21 c0       	rjmp	.+66     	; 0xdda <app_state_menu_main+0xf8>
			case 1: // heater menu
				app_state.selected_menu_item_index = 0;
     d98:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <app_state+0x1e>
				app_state.current_state_func = app_state_menu_heater;
     d9c:	81 ef       	ldi	r24, 0xF1	; 241
     d9e:	96 e0       	ldi	r25, 0x06	; 6
     da0:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <app_state+0x1d>
     da4:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <app_state+0x1c>
				break;
     da8:	18 c0       	rjmp	.+48     	; 0xdda <app_state_menu_main+0xf8>
			case 2:	// stirrer menu
				app_state.selected_menu_item_index = 0;
     daa:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <app_state+0x1e>
				app_state.current_state_func = app_state_menu_stirrer;
     dae:	8b eb       	ldi	r24, 0xBB	; 187
     db0:	9b e0       	ldi	r25, 0x0B	; 11
     db2:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <app_state+0x1d>
     db6:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <app_state+0x1c>
				break;
     dba:	0f c0       	rjmp	.+30     	; 0xdda <app_state_menu_main+0xf8>
			case 3:	// thermistor calibration menu
				app_state.selected_menu_item_index = 0;
     dbc:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <app_state+0x1e>
				app_state.current_state_func = app_state_menu_tprobe;
     dc0:	80 e7       	ldi	r24, 0x70	; 112
     dc2:	9c e0       	ldi	r25, 0x0C	; 12
     dc4:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <app_state+0x1d>
     dc8:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <app_state+0x1c>
				break;
     dcc:	06 c0       	rjmp	.+12     	; 0xdda <app_state_menu_main+0xf8>
			case 4:	// load settings from eeprom
				//app_state.selected_menu_item_index = 0;
				//app_state.current_state_func = app_state_menu_load_eeprom_settings;
				app_load_settings_from_eeprom();
     dce:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <app_load_settings_from_eeprom>
				break;
     dd2:	03 c0       	rjmp	.+6      	; 0xdda <app_state_menu_main+0xf8>
			case 5:	// store settings to eeprom
				//app_state.selected_menu_item_index = 0;
				//app_state.current_state_func = app_state_menu_store_eeprom_settings;
				app_store_settings_to_eeprom();
     dd4:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <app_store_settings_to_eeprom>
				break;
     dd8:	00 00       	nop
		}
	}
	return EC_SUCCESS;
     dda:	80 e0       	ldi	r24, 0x00	; 0
}
     ddc:	df 91       	pop	r29
     dde:	cf 91       	pop	r28
     de0:	08 95       	ret

00000de2 <app_state_menu_heater>:

ErrorCode app_state_menu_heater()
{
     de2:	cf 93       	push	r28
     de4:	df 93       	push	r29
     de6:	cd b7       	in	r28, 0x3d	; 61
     de8:	de b7       	in	r29, 0x3e	; 62
	if(app_state.current_input.rotenc_delta > 0)
     dea:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <app_state+0x16>
     dee:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <app_state+0x17>
     df2:	18 16       	cp	r1, r24
     df4:	19 06       	cpc	r1, r25
     df6:	64 f4       	brge	.+24     	; 0xe10 <app_state_menu_heater+0x2e>
		app_state.selected_menu_item_index = imax8(imin8(app_state.selected_menu_item_index + 1, 5), 0);
     df8:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <app_state+0x1e>
     dfc:	8f 5f       	subi	r24, 0xFF	; 255
     dfe:	65 e0       	ldi	r22, 0x05	; 5
     e00:	0e 94 1b 1a 	call	0x3436	; 0x3436 <imin8>
     e04:	60 e0       	ldi	r22, 0x00	; 0
     e06:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <imax8>
     e0a:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <app_state+0x1e>
     e0e:	11 c0       	rjmp	.+34     	; 0xe32 <app_state_menu_heater+0x50>
	else if(app_state.current_input.rotenc_delta < 0)
     e10:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <app_state+0x16>
     e14:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <app_state+0x17>
     e18:	99 23       	and	r25, r25
     e1a:	5c f4       	brge	.+22     	; 0xe32 <app_state_menu_heater+0x50>
		app_state.selected_menu_item_index = imax8(imin8(app_state.selected_menu_item_index - 1, 5), 0);
     e1c:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <app_state+0x1e>
     e20:	81 50       	subi	r24, 0x01	; 1
     e22:	65 e0       	ldi	r22, 0x05	; 5
     e24:	0e 94 1b 1a 	call	0x3436	; 0x3436 <imin8>
     e28:	60 e0       	ldi	r22, 0x00	; 0
     e2a:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <imax8>
     e2e:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <app_state+0x1e>
	// display selected menu item
	srd_clear();
     e32:	0e 94 a6 22 	call	0x454c	; 0x454c <srd_clear>
	mr_heater_menu(app_state.selected_menu_item_index);
     e36:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <app_state+0x1e>
     e3a:	0e 94 25 16 	call	0x2c4a	; 0x2c4a <mr_heater_menu>
	srd_display();
     e3e:	0e 94 95 22 	call	0x452a	; 0x452a <srd_display>
	
	// state change
	if(app_state.current_input.button_presses & (1 << BUTTON0))
     e42:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <app_state+0x18>
     e46:	88 2f       	mov	r24, r24
     e48:	90 e0       	ldi	r25, 0x00	; 0
     e4a:	81 70       	andi	r24, 0x01	; 1
     e4c:	99 27       	eor	r25, r25
     e4e:	89 2b       	or	r24, r25
     e50:	09 f4       	brne	.+2      	; 0xe54 <app_state_menu_heater+0x72>
     e52:	52 c0       	rjmp	.+164    	; 0xef8 <app_state_menu_heater+0x116>
	{
		switch(app_state.selected_menu_item_index)
     e54:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <app_state+0x1e>
     e58:	08 2e       	mov	r0, r24
     e5a:	00 0c       	add	r0, r0
     e5c:	99 0b       	sbc	r25, r25
     e5e:	82 30       	cpi	r24, 0x02	; 2
     e60:	91 05       	cpc	r25, r1
     e62:	21 f1       	breq	.+72     	; 0xeac <app_state_menu_heater+0xca>
     e64:	83 30       	cpi	r24, 0x03	; 3
     e66:	91 05       	cpc	r25, r1
     e68:	2c f4       	brge	.+10     	; 0xe74 <app_state_menu_heater+0x92>
     e6a:	00 97       	sbiw	r24, 0x00	; 0
     e6c:	61 f0       	breq	.+24     	; 0xe86 <app_state_menu_heater+0xa4>
     e6e:	01 97       	sbiw	r24, 0x01	; 1
     e70:	a1 f0       	breq	.+40     	; 0xe9a <app_state_menu_heater+0xb8>
     e72:	42 c0       	rjmp	.+132    	; 0xef8 <app_state_menu_heater+0x116>
     e74:	84 30       	cpi	r24, 0x04	; 4
     e76:	91 05       	cpc	r25, r1
     e78:	69 f1       	breq	.+90     	; 0xed4 <app_state_menu_heater+0xf2>
     e7a:	84 30       	cpi	r24, 0x04	; 4
     e7c:	91 05       	cpc	r25, r1
     e7e:	fc f0       	brlt	.+62     	; 0xebe <app_state_menu_heater+0xdc>
     e80:	05 97       	sbiw	r24, 0x05	; 5
     e82:	89 f1       	breq	.+98     	; 0xee6 <app_state_menu_heater+0x104>
     e84:	39 c0       	rjmp	.+114    	; 0xef8 <app_state_menu_heater+0x116>
		{
			case 0:	// back to main menu
				app_state.selected_menu_item_index = 1;
     e86:	81 e0       	ldi	r24, 0x01	; 1
     e88:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <app_state+0x1e>
				app_state.current_state_func = app_state_menu_main;
     e8c:	81 e7       	ldi	r24, 0x71	; 113
     e8e:	96 e0       	ldi	r25, 0x06	; 6
     e90:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <app_state+0x1d>
     e94:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <app_state+0x1c>
				break;
     e98:	2f c0       	rjmp	.+94     	; 0xef8 <app_state_menu_heater+0x116>
			case 1: // heater on / off
				app_state.selected_menu_item_index = 0;
     e9a:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <app_state+0x1e>
				app_state.current_state_func = app_state_menu_heater_onoff;
     e9e:	80 e8       	ldi	r24, 0x80	; 128
     ea0:	97 e0       	ldi	r25, 0x07	; 7
     ea2:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <app_state+0x1d>
     ea6:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <app_state+0x1c>
				break;
     eaa:	26 c0       	rjmp	.+76     	; 0xef8 <app_state_menu_heater+0x116>
			case 2:	// heater target temp
				app_state.selected_menu_item_index = 0;
     eac:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <app_state+0x1e>
				app_state.current_state_func = app_state_menu_heater_target_temp;
     eb0:	8e eb       	ldi	r24, 0xBE	; 190
     eb2:	97 e0       	ldi	r25, 0x07	; 7
     eb4:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <app_state+0x1d>
     eb8:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <app_state+0x1c>
				break;
     ebc:	1d c0       	rjmp	.+58     	; 0xef8 <app_state_menu_heater+0x116>
			case 3:	// thermistor select
				app_state.selected_menu_item_index = app_state.settings.controlling_tprobe;
     ebe:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <app_state+0x14>
     ec2:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <app_state+0x1e>
				app_state.current_state_func = app_state_menu_heater_controlling_tprobe;
     ec6:	89 e3       	ldi	r24, 0x39	; 57
     ec8:	98 e0       	ldi	r25, 0x08	; 8
     eca:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <app_state+0x1d>
     ece:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <app_state+0x1c>
				break;
     ed2:	12 c0       	rjmp	.+36     	; 0xef8 <app_state_menu_heater+0x116>
			case 4:	// heater pid menu
				app_state.selected_menu_item_index = 0;
     ed4:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <app_state+0x1e>
				app_state.current_state_func = app_state_menu_heater_pid;
     ed8:	88 ea       	ldi	r24, 0xA8	; 168
     eda:	98 e0       	ldi	r25, 0x08	; 8
     edc:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <app_state+0x1d>
     ee0:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <app_state+0x1c>
				break;
     ee4:	09 c0       	rjmp	.+18     	; 0xef8 <app_state_menu_heater+0x116>
			case 5:	// heater offset
				app_state.selected_menu_item_index = 0;
     ee6:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <app_state+0x1e>
				app_state.current_state_func = app_state_menu_heater_offset;
     eea:	8f e3       	ldi	r24, 0x3F	; 63
     eec:	9b e0       	ldi	r25, 0x0B	; 11
     eee:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <app_state+0x1d>
     ef2:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <app_state+0x1c>
				break;
     ef6:	00 00       	nop
		}
	}
	return EC_SUCCESS;
     ef8:	80 e0       	ldi	r24, 0x00	; 0
}
     efa:	df 91       	pop	r29
     efc:	cf 91       	pop	r28
     efe:	08 95       	ret

00000f00 <app_state_menu_heater_onoff>:

ErrorCode app_state_menu_heater_onoff()
{
     f00:	cf 93       	push	r28
     f02:	df 93       	push	r29
     f04:	cd b7       	in	r28, 0x3d	; 61
     f06:	de b7       	in	r29, 0x3e	; 62
	if(app_state.current_input.rotenc_delta != 0)
     f08:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <app_state+0x16>
     f0c:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <app_state+0x17>
     f10:	89 2b       	or	r24, r25
     f12:	b9 f0       	breq	.+46     	; 0xf42 <app_state_menu_heater_onoff+0x42>
	{
		app_state.heater_onoff = !app_state.heater_onoff;
     f14:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <app_state+0x3e>
     f18:	81 e0       	ldi	r24, 0x01	; 1
     f1a:	99 23       	and	r25, r25
     f1c:	09 f0       	breq	.+2      	; 0xf20 <app_state_menu_heater_onoff+0x20>
     f1e:	80 e0       	ldi	r24, 0x00	; 0
     f20:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <app_state+0x3e>
		if(app_state.heater_onoff)
     f24:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <app_state+0x3e>
     f28:	88 23       	and	r24, r24
     f2a:	19 f0       	breq	.+6      	; 0xf32 <app_state_menu_heater_onoff+0x32>
		{
			heater_on();
     f2c:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <heater_on>
     f30:	04 c0       	rjmp	.+8      	; 0xf3a <app_state_menu_heater_onoff+0x3a>
		}
		else
		{
			heater_off();
     f32:	0e 94 1b 15 	call	0x2a36	; 0x2a36 <heater_off>
			app_state.heater_rapid_heating = FALSE;
     f36:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <app_state+0x3d>
		}
		pid_reset(&app_state.pid_state);
     f3a:	81 e3       	ldi	r24, 0x31	; 49
     f3c:	91 e0       	ldi	r25, 0x01	; 1
     f3e:	0e 94 13 1d 	call	0x3a26	; 0x3a26 <pid_reset>
	}
	
	// display current value
	srd_clear();
     f42:	0e 94 a6 22 	call	0x454c	; 0x454c <srd_clear>
	mr_heater_menu_onoff(app_state.heater_onoff);
     f46:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <app_state+0x3e>
     f4a:	0e 94 6a 17 	call	0x2ed4	; 0x2ed4 <mr_heater_menu_onoff>
	srd_display();
     f4e:	0e 94 95 22 	call	0x452a	; 0x452a <srd_display>
	
	if(app_state.current_input.button_presses & (1 << BUTTON0))
     f52:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <app_state+0x18>
     f56:	88 2f       	mov	r24, r24
     f58:	90 e0       	ldi	r25, 0x00	; 0
     f5a:	81 70       	andi	r24, 0x01	; 1
     f5c:	99 27       	eor	r25, r25
     f5e:	89 2b       	or	r24, r25
     f60:	49 f0       	breq	.+18     	; 0xf74 <app_state_menu_heater_onoff+0x74>
	{
		app_state.selected_menu_item_index = 1;
     f62:	81 e0       	ldi	r24, 0x01	; 1
     f64:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <app_state+0x1e>
		app_state.current_state_func = app_state_menu_heater;
     f68:	81 ef       	ldi	r24, 0xF1	; 241
     f6a:	96 e0       	ldi	r25, 0x06	; 6
     f6c:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <app_state+0x1d>
     f70:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <app_state+0x1c>
	}
	return EC_SUCCESS;
     f74:	80 e0       	ldi	r24, 0x00	; 0
}
     f76:	df 91       	pop	r29
     f78:	cf 91       	pop	r28
     f7a:	08 95       	ret

00000f7c <app_state_menu_heater_target_temp>:

ErrorCode app_state_menu_heater_target_temp()
{
     f7c:	cf 92       	push	r12
     f7e:	df 92       	push	r13
     f80:	ef 92       	push	r14
     f82:	ff 92       	push	r15
     f84:	cf 93       	push	r28
     f86:	df 93       	push	r29
     f88:	cd b7       	in	r28, 0x3d	; 61
     f8a:	de b7       	in	r29, 0x3e	; 62
	if(app_state.current_input.rotenc_delta != 0)
     f8c:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <app_state+0x16>
     f90:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <app_state+0x17>
     f94:	89 2b       	or	r24, r25
     f96:	09 f4       	brne	.+2      	; 0xf9a <app_state_menu_heater_target_temp+0x1e>
     f98:	43 c0       	rjmp	.+134    	; 0x1020 <app_state_menu_heater_target_temp+0xa4>
		app_state.settings.heater_target_temp = fmax(fmin(app_state.settings.heater_target_temp + app_state.current_input.rotenc_delta * TEMP_CHANGE_PER_ROTENC_STEP, MAX_HEATER_TARGET_TEMP), MIN_HEATER_TARGET_TEMP);
     f9a:	c0 90 11 01 	lds	r12, 0x0111	; 0x800111 <app_state>
     f9e:	d0 90 12 01 	lds	r13, 0x0112	; 0x800112 <app_state+0x1>
     fa2:	e0 90 13 01 	lds	r14, 0x0113	; 0x800113 <app_state+0x2>
     fa6:	f0 90 14 01 	lds	r15, 0x0114	; 0x800114 <app_state+0x3>
     faa:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <app_state+0x16>
     fae:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <app_state+0x17>
     fb2:	09 2e       	mov	r0, r25
     fb4:	00 0c       	add	r0, r0
     fb6:	aa 0b       	sbc	r26, r26
     fb8:	bb 0b       	sbc	r27, r27
     fba:	bc 01       	movw	r22, r24
     fbc:	cd 01       	movw	r24, r26
     fbe:	0e 94 51 2a 	call	0x54a2	; 0x54a2 <__floatsisf>
     fc2:	dc 01       	movw	r26, r24
     fc4:	cb 01       	movw	r24, r22
     fc6:	20 e0       	ldi	r18, 0x00	; 0
     fc8:	30 e0       	ldi	r19, 0x00	; 0
     fca:	40 e0       	ldi	r20, 0x00	; 0
     fcc:	5f e3       	ldi	r21, 0x3F	; 63
     fce:	bc 01       	movw	r22, r24
     fd0:	cd 01       	movw	r24, r26
     fd2:	0e 94 a4 2b 	call	0x5748	; 0x5748 <__mulsf3>
     fd6:	dc 01       	movw	r26, r24
     fd8:	cb 01       	movw	r24, r22
     fda:	9c 01       	movw	r18, r24
     fdc:	ad 01       	movw	r20, r26
     fde:	c7 01       	movw	r24, r14
     fe0:	b6 01       	movw	r22, r12
     fe2:	0e 94 fa 28 	call	0x51f4	; 0x51f4 <__addsf3>
     fe6:	dc 01       	movw	r26, r24
     fe8:	cb 01       	movw	r24, r22
     fea:	20 e0       	ldi	r18, 0x00	; 0
     fec:	30 e0       	ldi	r19, 0x00	; 0
     fee:	48 ec       	ldi	r20, 0xC8	; 200
     ff0:	52 e4       	ldi	r21, 0x42	; 66
     ff2:	bc 01       	movw	r22, r24
     ff4:	cd 01       	movw	r24, r26
     ff6:	0e 94 99 1a 	call	0x3532	; 0x3532 <fmin>
     ffa:	dc 01       	movw	r26, r24
     ffc:	cb 01       	movw	r24, r22
     ffe:	20 e0       	ldi	r18, 0x00	; 0
    1000:	30 e0       	ldi	r19, 0x00	; 0
    1002:	a9 01       	movw	r20, r18
    1004:	bc 01       	movw	r22, r24
    1006:	cd 01       	movw	r24, r26
    1008:	0e 94 67 1a 	call	0x34ce	; 0x34ce <fmax>
    100c:	dc 01       	movw	r26, r24
    100e:	cb 01       	movw	r24, r22
    1010:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <app_state>
    1014:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <app_state+0x1>
    1018:	a0 93 13 01 	sts	0x0113, r26	; 0x800113 <app_state+0x2>
    101c:	b0 93 14 01 	sts	0x0114, r27	; 0x800114 <app_state+0x3>
	
	// display current value
	srd_clear();
    1020:	0e 94 a6 22 	call	0x454c	; 0x454c <srd_clear>
	mr_heater_menu_target_temp(app_state.settings.heater_target_temp);
    1024:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <app_state>
    1028:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <app_state+0x1>
    102c:	a0 91 13 01 	lds	r26, 0x0113	; 0x800113 <app_state+0x2>
    1030:	b0 91 14 01 	lds	r27, 0x0114	; 0x800114 <app_state+0x3>
    1034:	bc 01       	movw	r22, r24
    1036:	cd 01       	movw	r24, r26
    1038:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <mr_heater_menu_target_temp>
	srd_display();
    103c:	0e 94 95 22 	call	0x452a	; 0x452a <srd_display>
	
	if(app_state.current_input.button_presses & (1 << BUTTON0))
    1040:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <app_state+0x18>
    1044:	88 2f       	mov	r24, r24
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	81 70       	andi	r24, 0x01	; 1
    104a:	99 27       	eor	r25, r25
    104c:	89 2b       	or	r24, r25
    104e:	49 f0       	breq	.+18     	; 0x1062 <app_state_menu_heater_target_temp+0xe6>
	{
		app_state.selected_menu_item_index = 2;
    1050:	82 e0       	ldi	r24, 0x02	; 2
    1052:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <app_state+0x1e>
		app_state.current_state_func = app_state_menu_heater;
    1056:	81 ef       	ldi	r24, 0xF1	; 241
    1058:	96 e0       	ldi	r25, 0x06	; 6
    105a:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <app_state+0x1d>
    105e:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <app_state+0x1c>
	}
	return EC_SUCCESS;
    1062:	80 e0       	ldi	r24, 0x00	; 0
}
    1064:	df 91       	pop	r29
    1066:	cf 91       	pop	r28
    1068:	ff 90       	pop	r15
    106a:	ef 90       	pop	r14
    106c:	df 90       	pop	r13
    106e:	cf 90       	pop	r12
    1070:	08 95       	ret

00001072 <app_state_menu_heater_controlling_tprobe>:

ErrorCode app_state_menu_heater_controlling_tprobe()
{
    1072:	cf 93       	push	r28
    1074:	df 93       	push	r29
    1076:	1f 92       	push	r1
    1078:	cd b7       	in	r28, 0x3d	; 61
    107a:	de b7       	in	r29, 0x3e	; 62
	if(app_state.current_input.rotenc_delta > 0)
    107c:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <app_state+0x16>
    1080:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <app_state+0x17>
    1084:	18 16       	cp	r1, r24
    1086:	19 06       	cpc	r1, r25
    1088:	64 f4       	brge	.+24     	; 0x10a2 <app_state_menu_heater_controlling_tprobe+0x30>
		app_state.selected_menu_item_index = imax8(imin8(app_state.selected_menu_item_index + 1, 3), 0);
    108a:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <app_state+0x1e>
    108e:	8f 5f       	subi	r24, 0xFF	; 255
    1090:	63 e0       	ldi	r22, 0x03	; 3
    1092:	0e 94 1b 1a 	call	0x3436	; 0x3436 <imin8>
    1096:	60 e0       	ldi	r22, 0x00	; 0
    1098:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <imax8>
    109c:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <app_state+0x1e>
    10a0:	11 c0       	rjmp	.+34     	; 0x10c4 <app_state_menu_heater_controlling_tprobe+0x52>
	else if(app_state.current_input.rotenc_delta < 0)
    10a2:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <app_state+0x16>
    10a6:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <app_state+0x17>
    10aa:	99 23       	and	r25, r25
    10ac:	5c f4       	brge	.+22     	; 0x10c4 <app_state_menu_heater_controlling_tprobe+0x52>
		app_state.selected_menu_item_index = imax8(imin8(app_state.selected_menu_item_index - 1, 3), 0);
    10ae:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <app_state+0x1e>
    10b2:	81 50       	subi	r24, 0x01	; 1
    10b4:	63 e0       	ldi	r22, 0x03	; 3
    10b6:	0e 94 1b 1a 	call	0x3436	; 0x3436 <imin8>
    10ba:	60 e0       	ldi	r22, 0x00	; 0
    10bc:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <imax8>
    10c0:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <app_state+0x1e>
	
	uint8_t selection_valid;
	switch(app_state.selected_menu_item_index)
    10c4:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <app_state+0x1e>
    10c8:	08 2e       	mov	r0, r24
    10ca:	00 0c       	add	r0, r0
    10cc:	99 0b       	sbc	r25, r25
    10ce:	81 30       	cpi	r24, 0x01	; 1
    10d0:	91 05       	cpc	r25, r1
    10d2:	79 f0       	breq	.+30     	; 0x10f2 <app_state_menu_heater_controlling_tprobe+0x80>
    10d4:	82 30       	cpi	r24, 0x02	; 2
    10d6:	91 05       	cpc	r25, r1
    10d8:	1c f4       	brge	.+6      	; 0x10e0 <app_state_menu_heater_controlling_tprobe+0x6e>
    10da:	89 2b       	or	r24, r25
    10dc:	39 f0       	breq	.+14     	; 0x10ec <app_state_menu_heater_controlling_tprobe+0x7a>
    10de:	10 c0       	rjmp	.+32     	; 0x1100 <__stack+0x1>
    10e0:	82 30       	cpi	r24, 0x02	; 2
    10e2:	91 05       	cpc	r25, r1
    10e4:	49 f0       	breq	.+18     	; 0x10f8 <app_state_menu_heater_controlling_tprobe+0x86>
    10e6:	03 97       	sbiw	r24, 0x03	; 3
    10e8:	49 f0       	breq	.+18     	; 0x10fc <app_state_menu_heater_controlling_tprobe+0x8a>
    10ea:	0a c0       	rjmp	.+20     	; 0x1100 <__stack+0x1>
	{
		case 0:
			#ifdef TSENS_PROBE_0
				selection_valid = TRUE;
    10ec:	81 e0       	ldi	r24, 0x01	; 1
    10ee:	89 83       	std	Y+1, r24	; 0x01
			#else
				selection_valid = FALSE;
			#endif
			break;
    10f0:	09 c0       	rjmp	.+18     	; 0x1104 <__stack+0x5>
		case 1:
			#ifdef TSENS_PROBE_1
				selection_valid = TRUE;
    10f2:	81 e0       	ldi	r24, 0x01	; 1
    10f4:	89 83       	std	Y+1, r24	; 0x01
			#else
				selection_valid = FALSE;
			#endif
			break;
    10f6:	06 c0       	rjmp	.+12     	; 0x1104 <__stack+0x5>
		case 2:
			#ifdef TSENS_PROBE_2
				selection_valid = TRUE;
			#else
				selection_valid = FALSE;
    10f8:	19 82       	std	Y+1, r1	; 0x01
			#endif
			break;
    10fa:	04 c0       	rjmp	.+8      	; 0x1104 <__stack+0x5>
		case 3:
			#ifdef TSENS_PROBE_3
				selection_valid = TRUE;
			#else
				selection_valid = FALSE;
    10fc:	19 82       	std	Y+1, r1	; 0x01
			#endif
			break;
    10fe:	02 c0       	rjmp	.+4      	; 0x1104 <__stack+0x5>
		default:
			selection_valid = FALSE;
    1100:	19 82       	std	Y+1, r1	; 0x01
			break;
    1102:	00 00       	nop
	}
	
	// display current selection
	srd_clear();
    1104:	0e 94 a6 22 	call	0x454c	; 0x454c <srd_clear>
	mr_heater_menu_controlling_probe_select(app_state.selected_menu_item_index, selection_valid);
    1108:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <app_state+0x1e>
    110c:	69 81       	ldd	r22, Y+1	; 0x01
    110e:	0e 94 d8 16 	call	0x2db0	; 0x2db0 <mr_heater_menu_controlling_probe_select>
	srd_display();
    1112:	0e 94 95 22 	call	0x452a	; 0x452a <srd_display>
	
	if(app_state.current_input.button_presses & (1 << BUTTON0))
    1116:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <app_state+0x18>
    111a:	88 2f       	mov	r24, r24
    111c:	90 e0       	ldi	r25, 0x00	; 0
    111e:	81 70       	andi	r24, 0x01	; 1
    1120:	99 27       	eor	r25, r25
    1122:	89 2b       	or	r24, r25
    1124:	81 f0       	breq	.+32     	; 0x1146 <__stack+0x47>
	{
		if(selection_valid)
    1126:	89 81       	ldd	r24, Y+1	; 0x01
    1128:	88 23       	and	r24, r24
    112a:	69 f0       	breq	.+26     	; 0x1146 <__stack+0x47>
		{
			app_state.settings.controlling_tprobe = (uint8_t)app_state.selected_menu_item_index;
    112c:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <app_state+0x1e>
    1130:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <app_state+0x14>
			app_state.selected_menu_item_index = 3;
    1134:	83 e0       	ldi	r24, 0x03	; 3
    1136:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <app_state+0x1e>
			app_state.current_state_func = app_state_menu_heater;
    113a:	81 ef       	ldi	r24, 0xF1	; 241
    113c:	96 e0       	ldi	r25, 0x06	; 6
    113e:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <app_state+0x1d>
    1142:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <app_state+0x1c>
		}		
	}
	return EC_SUCCESS;
    1146:	80 e0       	ldi	r24, 0x00	; 0
}
    1148:	0f 90       	pop	r0
    114a:	df 91       	pop	r29
    114c:	cf 91       	pop	r28
    114e:	08 95       	ret

00001150 <app_state_menu_heater_pid>:

ErrorCode app_state_menu_heater_pid()
{
    1150:	cf 93       	push	r28
    1152:	df 93       	push	r29
    1154:	cd b7       	in	r28, 0x3d	; 61
    1156:	de b7       	in	r29, 0x3e	; 62
	if(app_state.current_input.rotenc_delta > 0)
    1158:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <app_state+0x16>
    115c:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <app_state+0x17>
    1160:	18 16       	cp	r1, r24
    1162:	19 06       	cpc	r1, r25
    1164:	64 f4       	brge	.+24     	; 0x117e <app_state_menu_heater_pid+0x2e>
		app_state.selected_menu_item_index = imax8(imin8(app_state.selected_menu_item_index + 1, 3), 0);
    1166:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <app_state+0x1e>
    116a:	8f 5f       	subi	r24, 0xFF	; 255
    116c:	63 e0       	ldi	r22, 0x03	; 3
    116e:	0e 94 1b 1a 	call	0x3436	; 0x3436 <imin8>
    1172:	60 e0       	ldi	r22, 0x00	; 0
    1174:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <imax8>
    1178:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <app_state+0x1e>
    117c:	11 c0       	rjmp	.+34     	; 0x11a0 <app_state_menu_heater_pid+0x50>
	else if(app_state.current_input.rotenc_delta < 0)
    117e:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <app_state+0x16>
    1182:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <app_state+0x17>
    1186:	99 23       	and	r25, r25
    1188:	5c f4       	brge	.+22     	; 0x11a0 <app_state_menu_heater_pid+0x50>
		app_state.selected_menu_item_index = imax8(imin8(app_state.selected_menu_item_index - 1, 3), 0);
    118a:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <app_state+0x1e>
    118e:	81 50       	subi	r24, 0x01	; 1
    1190:	63 e0       	ldi	r22, 0x03	; 3
    1192:	0e 94 1b 1a 	call	0x3436	; 0x3436 <imin8>
    1196:	60 e0       	ldi	r22, 0x00	; 0
    1198:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <imax8>
    119c:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <app_state+0x1e>
	// display selected menu item
	srd_clear();
    11a0:	0e 94 a6 22 	call	0x454c	; 0x454c <srd_clear>
	mr_heater_menu_pid(app_state.selected_menu_item_index);
    11a4:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <app_state+0x1e>
    11a8:	0e 94 31 17 	call	0x2e62	; 0x2e62 <mr_heater_menu_pid>
	srd_display();
    11ac:	0e 94 95 22 	call	0x452a	; 0x452a <srd_display>
	
	// state change
	if(app_state.current_input.button_presses & (1 << BUTTON0))
    11b0:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <app_state+0x18>
    11b4:	88 2f       	mov	r24, r24
    11b6:	90 e0       	ldi	r25, 0x00	; 0
    11b8:	81 70       	andi	r24, 0x01	; 1
    11ba:	99 27       	eor	r25, r25
    11bc:	89 2b       	or	r24, r25
    11be:	c9 f1       	breq	.+114    	; 0x1232 <app_state_menu_heater_pid+0xe2>
	{
		switch(app_state.selected_menu_item_index)
    11c0:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <app_state+0x1e>
    11c4:	08 2e       	mov	r0, r24
    11c6:	00 0c       	add	r0, r0
    11c8:	99 0b       	sbc	r25, r25
    11ca:	81 30       	cpi	r24, 0x01	; 1
    11cc:	91 05       	cpc	r25, r1
    11ce:	b1 f0       	breq	.+44     	; 0x11fc <app_state_menu_heater_pid+0xac>
    11d0:	82 30       	cpi	r24, 0x02	; 2
    11d2:	91 05       	cpc	r25, r1
    11d4:	1c f4       	brge	.+6      	; 0x11dc <app_state_menu_heater_pid+0x8c>
    11d6:	89 2b       	or	r24, r25
    11d8:	39 f0       	breq	.+14     	; 0x11e8 <app_state_menu_heater_pid+0x98>
    11da:	2b c0       	rjmp	.+86     	; 0x1232 <app_state_menu_heater_pid+0xe2>
    11dc:	82 30       	cpi	r24, 0x02	; 2
    11de:	91 05       	cpc	r25, r1
    11e0:	b1 f0       	breq	.+44     	; 0x120e <app_state_menu_heater_pid+0xbe>
    11e2:	03 97       	sbiw	r24, 0x03	; 3
    11e4:	e9 f0       	breq	.+58     	; 0x1220 <app_state_menu_heater_pid+0xd0>
    11e6:	25 c0       	rjmp	.+74     	; 0x1232 <app_state_menu_heater_pid+0xe2>
		{
			case 0:	// back to main menu
				app_state.selected_menu_item_index = 4;
    11e8:	84 e0       	ldi	r24, 0x04	; 4
    11ea:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <app_state+0x1e>
				app_state.current_state_func = app_state_menu_heater;
    11ee:	81 ef       	ldi	r24, 0xF1	; 241
    11f0:	96 e0       	ldi	r25, 0x06	; 6
    11f2:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <app_state+0x1d>
    11f6:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <app_state+0x1c>
				break;
    11fa:	1b c0       	rjmp	.+54     	; 0x1232 <app_state_menu_heater_pid+0xe2>
			case 1: // P
				app_state.selected_menu_item_index = 0;
    11fc:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <app_state+0x1e>
				app_state.current_state_func = app_state_menu_heater_pid_p;
    1200:	8d e1       	ldi	r24, 0x1D	; 29
    1202:	99 e0       	ldi	r25, 0x09	; 9
    1204:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <app_state+0x1d>
    1208:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <app_state+0x1c>
				break;
    120c:	12 c0       	rjmp	.+36     	; 0x1232 <app_state_menu_heater_pid+0xe2>
			case 2:	// I
				app_state.selected_menu_item_index = 0;
    120e:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <app_state+0x1e>
				app_state.current_state_func = app_state_menu_heater_pid_i;
    1212:	83 ed       	ldi	r24, 0xD3	; 211
    1214:	99 e0       	ldi	r25, 0x09	; 9
    1216:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <app_state+0x1d>
    121a:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <app_state+0x1c>
				break;
    121e:	09 c0       	rjmp	.+18     	; 0x1232 <app_state_menu_heater_pid+0xe2>
			case 3:	// D
				app_state.selected_menu_item_index = 0;
    1220:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <app_state+0x1e>
				app_state.current_state_func = app_state_menu_heater_pid_d;
    1224:	89 e8       	ldi	r24, 0x89	; 137
    1226:	9a e0       	ldi	r25, 0x0A	; 10
    1228:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <app_state+0x1d>
    122c:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <app_state+0x1c>
				break;
    1230:	00 00       	nop
		}
	}
	return EC_SUCCESS;
    1232:	80 e0       	ldi	r24, 0x00	; 0
}
    1234:	df 91       	pop	r29
    1236:	cf 91       	pop	r28
    1238:	08 95       	ret

0000123a <app_state_menu_heater_pid_p>:

ErrorCode app_state_menu_heater_pid_p()
{
    123a:	8f 92       	push	r8
    123c:	9f 92       	push	r9
    123e:	af 92       	push	r10
    1240:	bf 92       	push	r11
    1242:	cf 92       	push	r12
    1244:	df 92       	push	r13
    1246:	ef 92       	push	r14
    1248:	ff 92       	push	r15
    124a:	0f 93       	push	r16
    124c:	1f 93       	push	r17
    124e:	cf 93       	push	r28
    1250:	df 93       	push	r29
    1252:	cd b7       	in	r28, 0x3d	; 61
    1254:	de b7       	in	r29, 0x3e	; 62
	if(app_state.current_input.rotenc_delta != 0)
    1256:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <app_state+0x16>
    125a:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <app_state+0x17>
    125e:	89 2b       	or	r24, r25
    1260:	09 f4       	brne	.+2      	; 0x1264 <app_state_menu_heater_pid_p+0x2a>
    1262:	72 c0       	rjmp	.+228    	; 0x1348 <app_state_menu_heater_pid_p+0x10e>
	{
		app_state.settings.heater_pid_p = fmax(fmin(app_state.settings.heater_pid_p + app_state.current_input.rotenc_delta * PID_CHANGE_PER_ROTENC_STEP, MAX_HEATER_PID_P), MIN_HEATER_PID_P);
    1264:	c0 90 15 01 	lds	r12, 0x0115	; 0x800115 <app_state+0x4>
    1268:	d0 90 16 01 	lds	r13, 0x0116	; 0x800116 <app_state+0x5>
    126c:	e0 90 17 01 	lds	r14, 0x0117	; 0x800117 <app_state+0x6>
    1270:	f0 90 18 01 	lds	r15, 0x0118	; 0x800118 <app_state+0x7>
    1274:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <app_state+0x16>
    1278:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <app_state+0x17>
    127c:	09 2e       	mov	r0, r25
    127e:	00 0c       	add	r0, r0
    1280:	aa 0b       	sbc	r26, r26
    1282:	bb 0b       	sbc	r27, r27
    1284:	bc 01       	movw	r22, r24
    1286:	cd 01       	movw	r24, r26
    1288:	0e 94 51 2a 	call	0x54a2	; 0x54a2 <__floatsisf>
    128c:	dc 01       	movw	r26, r24
    128e:	cb 01       	movw	r24, r22
    1290:	2a e0       	ldi	r18, 0x0A	; 10
    1292:	37 ed       	ldi	r19, 0xD7	; 215
    1294:	43 e2       	ldi	r20, 0x23	; 35
    1296:	5c e3       	ldi	r21, 0x3C	; 60
    1298:	bc 01       	movw	r22, r24
    129a:	cd 01       	movw	r24, r26
    129c:	0e 94 a4 2b 	call	0x5748	; 0x5748 <__mulsf3>
    12a0:	dc 01       	movw	r26, r24
    12a2:	cb 01       	movw	r24, r22
    12a4:	9c 01       	movw	r18, r24
    12a6:	ad 01       	movw	r20, r26
    12a8:	c7 01       	movw	r24, r14
    12aa:	b6 01       	movw	r22, r12
    12ac:	0e 94 fa 28 	call	0x51f4	; 0x51f4 <__addsf3>
    12b0:	dc 01       	movw	r26, r24
    12b2:	cb 01       	movw	r24, r22
    12b4:	20 e0       	ldi	r18, 0x00	; 0
    12b6:	30 e0       	ldi	r19, 0x00	; 0
    12b8:	4a e7       	ldi	r20, 0x7A	; 122
    12ba:	54 e4       	ldi	r21, 0x44	; 68
    12bc:	bc 01       	movw	r22, r24
    12be:	cd 01       	movw	r24, r26
    12c0:	0e 94 99 1a 	call	0x3532	; 0x3532 <fmin>
    12c4:	dc 01       	movw	r26, r24
    12c6:	cb 01       	movw	r24, r22
    12c8:	20 e0       	ldi	r18, 0x00	; 0
    12ca:	30 e0       	ldi	r19, 0x00	; 0
    12cc:	a9 01       	movw	r20, r18
    12ce:	bc 01       	movw	r22, r24
    12d0:	cd 01       	movw	r24, r26
    12d2:	0e 94 67 1a 	call	0x34ce	; 0x34ce <fmax>
    12d6:	dc 01       	movw	r26, r24
    12d8:	cb 01       	movw	r24, r22
    12da:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <app_state+0x4>
    12de:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <app_state+0x5>
    12e2:	a0 93 17 01 	sts	0x0117, r26	; 0x800117 <app_state+0x6>
    12e6:	b0 93 18 01 	sts	0x0118, r27	; 0x800118 <app_state+0x7>
		pid_set_params(&app_state.pid_state, app_state.settings.heater_pid_p, app_state.settings.heater_pid_i, app_state.settings.heater_pid_d, HEATER_CONTROL_MIN, HEATER_CONTROL_MAX);
    12ea:	e0 90 1d 01 	lds	r14, 0x011D	; 0x80011d <app_state+0xc>
    12ee:	f0 90 1e 01 	lds	r15, 0x011E	; 0x80011e <app_state+0xd>
    12f2:	00 91 1f 01 	lds	r16, 0x011F	; 0x80011f <app_state+0xe>
    12f6:	10 91 20 01 	lds	r17, 0x0120	; 0x800120 <app_state+0xf>
    12fa:	20 91 19 01 	lds	r18, 0x0119	; 0x800119 <app_state+0x8>
    12fe:	30 91 1a 01 	lds	r19, 0x011A	; 0x80011a <app_state+0x9>
    1302:	40 91 1b 01 	lds	r20, 0x011B	; 0x80011b <app_state+0xa>
    1306:	50 91 1c 01 	lds	r21, 0x011C	; 0x80011c <app_state+0xb>
    130a:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <app_state+0x4>
    130e:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <app_state+0x5>
    1312:	a0 91 17 01 	lds	r26, 0x0117	; 0x800117 <app_state+0x6>
    1316:	b0 91 18 01 	lds	r27, 0x0118	; 0x800118 <app_state+0x7>
    131a:	62 e4       	ldi	r22, 0x42	; 66
    131c:	6f 93       	push	r22
    131e:	68 ec       	ldi	r22, 0xC8	; 200
    1320:	6f 93       	push	r22
    1322:	1f 92       	push	r1
    1324:	1f 92       	push	r1
    1326:	81 2c       	mov	r8, r1
    1328:	91 2c       	mov	r9, r1
    132a:	54 01       	movw	r10, r8
    132c:	67 01       	movw	r12, r14
    132e:	78 01       	movw	r14, r16
    1330:	89 01       	movw	r16, r18
    1332:	9a 01       	movw	r18, r20
    1334:	ac 01       	movw	r20, r24
    1336:	bd 01       	movw	r22, r26
    1338:	81 e3       	ldi	r24, 0x31	; 49
    133a:	91 e0       	ldi	r25, 0x01	; 1
    133c:	0e 94 4a 1b 	call	0x3694	; 0x3694 <pid_set_params>
    1340:	0f 90       	pop	r0
    1342:	0f 90       	pop	r0
    1344:	0f 90       	pop	r0
    1346:	0f 90       	pop	r0
	}
	
	// display current value
	srd_clear();
    1348:	0e 94 a6 22 	call	0x454c	; 0x454c <srd_clear>
	mr_heater_menu_pid_p(app_state.settings.heater_pid_p);
    134c:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <app_state+0x4>
    1350:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <app_state+0x5>
    1354:	a0 91 17 01 	lds	r26, 0x0117	; 0x800117 <app_state+0x6>
    1358:	b0 91 18 01 	lds	r27, 0x0118	; 0x800118 <app_state+0x7>
    135c:	bc 01       	movw	r22, r24
    135e:	cd 01       	movw	r24, r26
    1360:	0e 94 b8 17 	call	0x2f70	; 0x2f70 <mr_heater_menu_pid_p>
	srd_display();
    1364:	0e 94 95 22 	call	0x452a	; 0x452a <srd_display>
	
	if(app_state.current_input.button_presses & (1 << BUTTON0))
    1368:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <app_state+0x18>
    136c:	88 2f       	mov	r24, r24
    136e:	90 e0       	ldi	r25, 0x00	; 0
    1370:	81 70       	andi	r24, 0x01	; 1
    1372:	99 27       	eor	r25, r25
    1374:	89 2b       	or	r24, r25
    1376:	49 f0       	breq	.+18     	; 0x138a <app_state_menu_heater_pid_p+0x150>
	{
		app_state.selected_menu_item_index = 1;
    1378:	81 e0       	ldi	r24, 0x01	; 1
    137a:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <app_state+0x1e>
		app_state.current_state_func = app_state_menu_heater_pid;
    137e:	88 ea       	ldi	r24, 0xA8	; 168
    1380:	98 e0       	ldi	r25, 0x08	; 8
    1382:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <app_state+0x1d>
    1386:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <app_state+0x1c>
	}
	return EC_SUCCESS;
    138a:	80 e0       	ldi	r24, 0x00	; 0
}
    138c:	df 91       	pop	r29
    138e:	cf 91       	pop	r28
    1390:	1f 91       	pop	r17
    1392:	0f 91       	pop	r16
    1394:	ff 90       	pop	r15
    1396:	ef 90       	pop	r14
    1398:	df 90       	pop	r13
    139a:	cf 90       	pop	r12
    139c:	bf 90       	pop	r11
    139e:	af 90       	pop	r10
    13a0:	9f 90       	pop	r9
    13a2:	8f 90       	pop	r8
    13a4:	08 95       	ret

000013a6 <app_state_menu_heater_pid_i>:

ErrorCode app_state_menu_heater_pid_i()
{
    13a6:	8f 92       	push	r8
    13a8:	9f 92       	push	r9
    13aa:	af 92       	push	r10
    13ac:	bf 92       	push	r11
    13ae:	cf 92       	push	r12
    13b0:	df 92       	push	r13
    13b2:	ef 92       	push	r14
    13b4:	ff 92       	push	r15
    13b6:	0f 93       	push	r16
    13b8:	1f 93       	push	r17
    13ba:	cf 93       	push	r28
    13bc:	df 93       	push	r29
    13be:	cd b7       	in	r28, 0x3d	; 61
    13c0:	de b7       	in	r29, 0x3e	; 62
	if(app_state.current_input.rotenc_delta != 0)
    13c2:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <app_state+0x16>
    13c6:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <app_state+0x17>
    13ca:	89 2b       	or	r24, r25
    13cc:	09 f4       	brne	.+2      	; 0x13d0 <app_state_menu_heater_pid_i+0x2a>
    13ce:	72 c0       	rjmp	.+228    	; 0x14b4 <app_state_menu_heater_pid_i+0x10e>
	{
		app_state.settings.heater_pid_i = fmax(fmin(app_state.settings.heater_pid_i + app_state.current_input.rotenc_delta * PID_CHANGE_PER_ROTENC_STEP, MAX_HEATER_PID_I), MIN_HEATER_PID_I);
    13d0:	c0 90 19 01 	lds	r12, 0x0119	; 0x800119 <app_state+0x8>
    13d4:	d0 90 1a 01 	lds	r13, 0x011A	; 0x80011a <app_state+0x9>
    13d8:	e0 90 1b 01 	lds	r14, 0x011B	; 0x80011b <app_state+0xa>
    13dc:	f0 90 1c 01 	lds	r15, 0x011C	; 0x80011c <app_state+0xb>
    13e0:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <app_state+0x16>
    13e4:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <app_state+0x17>
    13e8:	09 2e       	mov	r0, r25
    13ea:	00 0c       	add	r0, r0
    13ec:	aa 0b       	sbc	r26, r26
    13ee:	bb 0b       	sbc	r27, r27
    13f0:	bc 01       	movw	r22, r24
    13f2:	cd 01       	movw	r24, r26
    13f4:	0e 94 51 2a 	call	0x54a2	; 0x54a2 <__floatsisf>
    13f8:	dc 01       	movw	r26, r24
    13fa:	cb 01       	movw	r24, r22
    13fc:	2a e0       	ldi	r18, 0x0A	; 10
    13fe:	37 ed       	ldi	r19, 0xD7	; 215
    1400:	43 e2       	ldi	r20, 0x23	; 35
    1402:	5c e3       	ldi	r21, 0x3C	; 60
    1404:	bc 01       	movw	r22, r24
    1406:	cd 01       	movw	r24, r26
    1408:	0e 94 a4 2b 	call	0x5748	; 0x5748 <__mulsf3>
    140c:	dc 01       	movw	r26, r24
    140e:	cb 01       	movw	r24, r22
    1410:	9c 01       	movw	r18, r24
    1412:	ad 01       	movw	r20, r26
    1414:	c7 01       	movw	r24, r14
    1416:	b6 01       	movw	r22, r12
    1418:	0e 94 fa 28 	call	0x51f4	; 0x51f4 <__addsf3>
    141c:	dc 01       	movw	r26, r24
    141e:	cb 01       	movw	r24, r22
    1420:	20 e0       	ldi	r18, 0x00	; 0
    1422:	30 e0       	ldi	r19, 0x00	; 0
    1424:	4a e7       	ldi	r20, 0x7A	; 122
    1426:	54 e4       	ldi	r21, 0x44	; 68
    1428:	bc 01       	movw	r22, r24
    142a:	cd 01       	movw	r24, r26
    142c:	0e 94 99 1a 	call	0x3532	; 0x3532 <fmin>
    1430:	dc 01       	movw	r26, r24
    1432:	cb 01       	movw	r24, r22
    1434:	20 e0       	ldi	r18, 0x00	; 0
    1436:	30 e0       	ldi	r19, 0x00	; 0
    1438:	a9 01       	movw	r20, r18
    143a:	bc 01       	movw	r22, r24
    143c:	cd 01       	movw	r24, r26
    143e:	0e 94 67 1a 	call	0x34ce	; 0x34ce <fmax>
    1442:	dc 01       	movw	r26, r24
    1444:	cb 01       	movw	r24, r22
    1446:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <app_state+0x8>
    144a:	90 93 1a 01 	sts	0x011A, r25	; 0x80011a <app_state+0x9>
    144e:	a0 93 1b 01 	sts	0x011B, r26	; 0x80011b <app_state+0xa>
    1452:	b0 93 1c 01 	sts	0x011C, r27	; 0x80011c <app_state+0xb>
		pid_set_params(&app_state.pid_state, app_state.settings.heater_pid_p, app_state.settings.heater_pid_i, app_state.settings.heater_pid_d, HEATER_CONTROL_MIN, HEATER_CONTROL_MAX);
    1456:	e0 90 1d 01 	lds	r14, 0x011D	; 0x80011d <app_state+0xc>
    145a:	f0 90 1e 01 	lds	r15, 0x011E	; 0x80011e <app_state+0xd>
    145e:	00 91 1f 01 	lds	r16, 0x011F	; 0x80011f <app_state+0xe>
    1462:	10 91 20 01 	lds	r17, 0x0120	; 0x800120 <app_state+0xf>
    1466:	20 91 19 01 	lds	r18, 0x0119	; 0x800119 <app_state+0x8>
    146a:	30 91 1a 01 	lds	r19, 0x011A	; 0x80011a <app_state+0x9>
    146e:	40 91 1b 01 	lds	r20, 0x011B	; 0x80011b <app_state+0xa>
    1472:	50 91 1c 01 	lds	r21, 0x011C	; 0x80011c <app_state+0xb>
    1476:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <app_state+0x4>
    147a:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <app_state+0x5>
    147e:	a0 91 17 01 	lds	r26, 0x0117	; 0x800117 <app_state+0x6>
    1482:	b0 91 18 01 	lds	r27, 0x0118	; 0x800118 <app_state+0x7>
    1486:	62 e4       	ldi	r22, 0x42	; 66
    1488:	6f 93       	push	r22
    148a:	68 ec       	ldi	r22, 0xC8	; 200
    148c:	6f 93       	push	r22
    148e:	1f 92       	push	r1
    1490:	1f 92       	push	r1
    1492:	81 2c       	mov	r8, r1
    1494:	91 2c       	mov	r9, r1
    1496:	54 01       	movw	r10, r8
    1498:	67 01       	movw	r12, r14
    149a:	78 01       	movw	r14, r16
    149c:	89 01       	movw	r16, r18
    149e:	9a 01       	movw	r18, r20
    14a0:	ac 01       	movw	r20, r24
    14a2:	bd 01       	movw	r22, r26
    14a4:	81 e3       	ldi	r24, 0x31	; 49
    14a6:	91 e0       	ldi	r25, 0x01	; 1
    14a8:	0e 94 4a 1b 	call	0x3694	; 0x3694 <pid_set_params>
    14ac:	0f 90       	pop	r0
    14ae:	0f 90       	pop	r0
    14b0:	0f 90       	pop	r0
    14b2:	0f 90       	pop	r0
	}
	
	// display current value
	srd_clear();
    14b4:	0e 94 a6 22 	call	0x454c	; 0x454c <srd_clear>
	mr_heater_menu_pid_i(app_state.settings.heater_pid_i);
    14b8:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <app_state+0x8>
    14bc:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <app_state+0x9>
    14c0:	a0 91 1b 01 	lds	r26, 0x011B	; 0x80011b <app_state+0xa>
    14c4:	b0 91 1c 01 	lds	r27, 0x011C	; 0x80011c <app_state+0xb>
    14c8:	bc 01       	movw	r22, r24
    14ca:	cd 01       	movw	r24, r26
    14cc:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <mr_heater_menu_pid_i>
	srd_display();
    14d0:	0e 94 95 22 	call	0x452a	; 0x452a <srd_display>
	
	if(app_state.current_input.button_presses & (1 << BUTTON0))
    14d4:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <app_state+0x18>
    14d8:	88 2f       	mov	r24, r24
    14da:	90 e0       	ldi	r25, 0x00	; 0
    14dc:	81 70       	andi	r24, 0x01	; 1
    14de:	99 27       	eor	r25, r25
    14e0:	89 2b       	or	r24, r25
    14e2:	49 f0       	breq	.+18     	; 0x14f6 <app_state_menu_heater_pid_i+0x150>
	{
		app_state.selected_menu_item_index = 2;
    14e4:	82 e0       	ldi	r24, 0x02	; 2
    14e6:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <app_state+0x1e>
		app_state.current_state_func = app_state_menu_heater_pid;
    14ea:	88 ea       	ldi	r24, 0xA8	; 168
    14ec:	98 e0       	ldi	r25, 0x08	; 8
    14ee:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <app_state+0x1d>
    14f2:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <app_state+0x1c>
	}
	return EC_SUCCESS;
    14f6:	80 e0       	ldi	r24, 0x00	; 0
}
    14f8:	df 91       	pop	r29
    14fa:	cf 91       	pop	r28
    14fc:	1f 91       	pop	r17
    14fe:	0f 91       	pop	r16
    1500:	ff 90       	pop	r15
    1502:	ef 90       	pop	r14
    1504:	df 90       	pop	r13
    1506:	cf 90       	pop	r12
    1508:	bf 90       	pop	r11
    150a:	af 90       	pop	r10
    150c:	9f 90       	pop	r9
    150e:	8f 90       	pop	r8
    1510:	08 95       	ret

00001512 <app_state_menu_heater_pid_d>:

ErrorCode app_state_menu_heater_pid_d()
{
    1512:	8f 92       	push	r8
    1514:	9f 92       	push	r9
    1516:	af 92       	push	r10
    1518:	bf 92       	push	r11
    151a:	cf 92       	push	r12
    151c:	df 92       	push	r13
    151e:	ef 92       	push	r14
    1520:	ff 92       	push	r15
    1522:	0f 93       	push	r16
    1524:	1f 93       	push	r17
    1526:	cf 93       	push	r28
    1528:	df 93       	push	r29
    152a:	cd b7       	in	r28, 0x3d	; 61
    152c:	de b7       	in	r29, 0x3e	; 62
	if(app_state.current_input.rotenc_delta != 0)
    152e:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <app_state+0x16>
    1532:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <app_state+0x17>
    1536:	89 2b       	or	r24, r25
    1538:	09 f4       	brne	.+2      	; 0x153c <app_state_menu_heater_pid_d+0x2a>
    153a:	72 c0       	rjmp	.+228    	; 0x1620 <app_state_menu_heater_pid_d+0x10e>
	{
		app_state.settings.heater_pid_d = fmax(fmin(app_state.settings.heater_pid_d + app_state.current_input.rotenc_delta * PID_CHANGE_PER_ROTENC_STEP, MAX_HEATER_PID_D), MIN_HEATER_PID_D);
    153c:	c0 90 1d 01 	lds	r12, 0x011D	; 0x80011d <app_state+0xc>
    1540:	d0 90 1e 01 	lds	r13, 0x011E	; 0x80011e <app_state+0xd>
    1544:	e0 90 1f 01 	lds	r14, 0x011F	; 0x80011f <app_state+0xe>
    1548:	f0 90 20 01 	lds	r15, 0x0120	; 0x800120 <app_state+0xf>
    154c:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <app_state+0x16>
    1550:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <app_state+0x17>
    1554:	09 2e       	mov	r0, r25
    1556:	00 0c       	add	r0, r0
    1558:	aa 0b       	sbc	r26, r26
    155a:	bb 0b       	sbc	r27, r27
    155c:	bc 01       	movw	r22, r24
    155e:	cd 01       	movw	r24, r26
    1560:	0e 94 51 2a 	call	0x54a2	; 0x54a2 <__floatsisf>
    1564:	dc 01       	movw	r26, r24
    1566:	cb 01       	movw	r24, r22
    1568:	2a e0       	ldi	r18, 0x0A	; 10
    156a:	37 ed       	ldi	r19, 0xD7	; 215
    156c:	43 e2       	ldi	r20, 0x23	; 35
    156e:	5c e3       	ldi	r21, 0x3C	; 60
    1570:	bc 01       	movw	r22, r24
    1572:	cd 01       	movw	r24, r26
    1574:	0e 94 a4 2b 	call	0x5748	; 0x5748 <__mulsf3>
    1578:	dc 01       	movw	r26, r24
    157a:	cb 01       	movw	r24, r22
    157c:	9c 01       	movw	r18, r24
    157e:	ad 01       	movw	r20, r26
    1580:	c7 01       	movw	r24, r14
    1582:	b6 01       	movw	r22, r12
    1584:	0e 94 fa 28 	call	0x51f4	; 0x51f4 <__addsf3>
    1588:	dc 01       	movw	r26, r24
    158a:	cb 01       	movw	r24, r22
    158c:	20 e0       	ldi	r18, 0x00	; 0
    158e:	30 e0       	ldi	r19, 0x00	; 0
    1590:	4a e7       	ldi	r20, 0x7A	; 122
    1592:	54 e4       	ldi	r21, 0x44	; 68
    1594:	bc 01       	movw	r22, r24
    1596:	cd 01       	movw	r24, r26
    1598:	0e 94 99 1a 	call	0x3532	; 0x3532 <fmin>
    159c:	dc 01       	movw	r26, r24
    159e:	cb 01       	movw	r24, r22
    15a0:	20 e0       	ldi	r18, 0x00	; 0
    15a2:	30 e0       	ldi	r19, 0x00	; 0
    15a4:	a9 01       	movw	r20, r18
    15a6:	bc 01       	movw	r22, r24
    15a8:	cd 01       	movw	r24, r26
    15aa:	0e 94 67 1a 	call	0x34ce	; 0x34ce <fmax>
    15ae:	dc 01       	movw	r26, r24
    15b0:	cb 01       	movw	r24, r22
    15b2:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <app_state+0xc>
    15b6:	90 93 1e 01 	sts	0x011E, r25	; 0x80011e <app_state+0xd>
    15ba:	a0 93 1f 01 	sts	0x011F, r26	; 0x80011f <app_state+0xe>
    15be:	b0 93 20 01 	sts	0x0120, r27	; 0x800120 <app_state+0xf>
		pid_set_params(&app_state.pid_state, app_state.settings.heater_pid_p, app_state.settings.heater_pid_i, app_state.settings.heater_pid_d, HEATER_CONTROL_MIN, HEATER_CONTROL_MAX);
    15c2:	e0 90 1d 01 	lds	r14, 0x011D	; 0x80011d <app_state+0xc>
    15c6:	f0 90 1e 01 	lds	r15, 0x011E	; 0x80011e <app_state+0xd>
    15ca:	00 91 1f 01 	lds	r16, 0x011F	; 0x80011f <app_state+0xe>
    15ce:	10 91 20 01 	lds	r17, 0x0120	; 0x800120 <app_state+0xf>
    15d2:	20 91 19 01 	lds	r18, 0x0119	; 0x800119 <app_state+0x8>
    15d6:	30 91 1a 01 	lds	r19, 0x011A	; 0x80011a <app_state+0x9>
    15da:	40 91 1b 01 	lds	r20, 0x011B	; 0x80011b <app_state+0xa>
    15de:	50 91 1c 01 	lds	r21, 0x011C	; 0x80011c <app_state+0xb>
    15e2:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <app_state+0x4>
    15e6:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <app_state+0x5>
    15ea:	a0 91 17 01 	lds	r26, 0x0117	; 0x800117 <app_state+0x6>
    15ee:	b0 91 18 01 	lds	r27, 0x0118	; 0x800118 <app_state+0x7>
    15f2:	62 e4       	ldi	r22, 0x42	; 66
    15f4:	6f 93       	push	r22
    15f6:	68 ec       	ldi	r22, 0xC8	; 200
    15f8:	6f 93       	push	r22
    15fa:	1f 92       	push	r1
    15fc:	1f 92       	push	r1
    15fe:	81 2c       	mov	r8, r1
    1600:	91 2c       	mov	r9, r1
    1602:	54 01       	movw	r10, r8
    1604:	67 01       	movw	r12, r14
    1606:	78 01       	movw	r14, r16
    1608:	89 01       	movw	r16, r18
    160a:	9a 01       	movw	r18, r20
    160c:	ac 01       	movw	r20, r24
    160e:	bd 01       	movw	r22, r26
    1610:	81 e3       	ldi	r24, 0x31	; 49
    1612:	91 e0       	ldi	r25, 0x01	; 1
    1614:	0e 94 4a 1b 	call	0x3694	; 0x3694 <pid_set_params>
    1618:	0f 90       	pop	r0
    161a:	0f 90       	pop	r0
    161c:	0f 90       	pop	r0
    161e:	0f 90       	pop	r0
	}
	
	// display current value
	srd_clear();
    1620:	0e 94 a6 22 	call	0x454c	; 0x454c <srd_clear>
	mr_heater_menu_pid_d(app_state.settings.heater_pid_d);
    1624:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <app_state+0xc>
    1628:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <app_state+0xd>
    162c:	a0 91 1f 01 	lds	r26, 0x011F	; 0x80011f <app_state+0xe>
    1630:	b0 91 20 01 	lds	r27, 0x0120	; 0x800120 <app_state+0xf>
    1634:	bc 01       	movw	r22, r24
    1636:	cd 01       	movw	r24, r26
    1638:	0e 94 fe 17 	call	0x2ffc	; 0x2ffc <mr_heater_menu_pid_d>
	srd_display();
    163c:	0e 94 95 22 	call	0x452a	; 0x452a <srd_display>
	
	if(app_state.current_input.button_presses & (1 << BUTTON0))
    1640:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <app_state+0x18>
    1644:	88 2f       	mov	r24, r24
    1646:	90 e0       	ldi	r25, 0x00	; 0
    1648:	81 70       	andi	r24, 0x01	; 1
    164a:	99 27       	eor	r25, r25
    164c:	89 2b       	or	r24, r25
    164e:	49 f0       	breq	.+18     	; 0x1662 <app_state_menu_heater_pid_d+0x150>
	{
		app_state.selected_menu_item_index = 3;
    1650:	83 e0       	ldi	r24, 0x03	; 3
    1652:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <app_state+0x1e>
		app_state.current_state_func = app_state_menu_heater_pid;
    1656:	88 ea       	ldi	r24, 0xA8	; 168
    1658:	98 e0       	ldi	r25, 0x08	; 8
    165a:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <app_state+0x1d>
    165e:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <app_state+0x1c>
	}
	return EC_SUCCESS;
    1662:	80 e0       	ldi	r24, 0x00	; 0
}
    1664:	df 91       	pop	r29
    1666:	cf 91       	pop	r28
    1668:	1f 91       	pop	r17
    166a:	0f 91       	pop	r16
    166c:	ff 90       	pop	r15
    166e:	ef 90       	pop	r14
    1670:	df 90       	pop	r13
    1672:	cf 90       	pop	r12
    1674:	bf 90       	pop	r11
    1676:	af 90       	pop	r10
    1678:	9f 90       	pop	r9
    167a:	8f 90       	pop	r8
    167c:	08 95       	ret

0000167e <app_state_menu_heater_offset>:

ErrorCode app_state_menu_heater_offset()
{
    167e:	cf 92       	push	r12
    1680:	df 92       	push	r13
    1682:	ef 92       	push	r14
    1684:	ff 92       	push	r15
    1686:	cf 93       	push	r28
    1688:	df 93       	push	r29
    168a:	cd b7       	in	r28, 0x3d	; 61
    168c:	de b7       	in	r29, 0x3e	; 62
	if(app_state.current_input.rotenc_delta != 0)
    168e:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <app_state+0x16>
    1692:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <app_state+0x17>
    1696:	89 2b       	or	r24, r25
    1698:	09 f4       	brne	.+2      	; 0x169c <app_state_menu_heater_offset+0x1e>
    169a:	44 c0       	rjmp	.+136    	; 0x1724 <app_state_menu_heater_offset+0xa6>
	{
		app_state.settings.heater_offset = fmax(fmin(app_state.settings.heater_offset + app_state.current_input.rotenc_delta * TEMP_CHANGE_PER_ROTENC_STEP, MAX_HEATER_OFFSET), MIN_HEATER_OFFSET);
    169c:	c0 90 21 01 	lds	r12, 0x0121	; 0x800121 <app_state+0x10>
    16a0:	d0 90 22 01 	lds	r13, 0x0122	; 0x800122 <app_state+0x11>
    16a4:	e0 90 23 01 	lds	r14, 0x0123	; 0x800123 <app_state+0x12>
    16a8:	f0 90 24 01 	lds	r15, 0x0124	; 0x800124 <app_state+0x13>
    16ac:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <app_state+0x16>
    16b0:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <app_state+0x17>
    16b4:	09 2e       	mov	r0, r25
    16b6:	00 0c       	add	r0, r0
    16b8:	aa 0b       	sbc	r26, r26
    16ba:	bb 0b       	sbc	r27, r27
    16bc:	bc 01       	movw	r22, r24
    16be:	cd 01       	movw	r24, r26
    16c0:	0e 94 51 2a 	call	0x54a2	; 0x54a2 <__floatsisf>
    16c4:	dc 01       	movw	r26, r24
    16c6:	cb 01       	movw	r24, r22
    16c8:	20 e0       	ldi	r18, 0x00	; 0
    16ca:	30 e0       	ldi	r19, 0x00	; 0
    16cc:	40 e0       	ldi	r20, 0x00	; 0
    16ce:	5f e3       	ldi	r21, 0x3F	; 63
    16d0:	bc 01       	movw	r22, r24
    16d2:	cd 01       	movw	r24, r26
    16d4:	0e 94 a4 2b 	call	0x5748	; 0x5748 <__mulsf3>
    16d8:	dc 01       	movw	r26, r24
    16da:	cb 01       	movw	r24, r22
    16dc:	9c 01       	movw	r18, r24
    16de:	ad 01       	movw	r20, r26
    16e0:	c7 01       	movw	r24, r14
    16e2:	b6 01       	movw	r22, r12
    16e4:	0e 94 fa 28 	call	0x51f4	; 0x51f4 <__addsf3>
    16e8:	dc 01       	movw	r26, r24
    16ea:	cb 01       	movw	r24, r22
    16ec:	20 e0       	ldi	r18, 0x00	; 0
    16ee:	30 e0       	ldi	r19, 0x00	; 0
    16f0:	48 e4       	ldi	r20, 0x48	; 72
    16f2:	52 e4       	ldi	r21, 0x42	; 66
    16f4:	bc 01       	movw	r22, r24
    16f6:	cd 01       	movw	r24, r26
    16f8:	0e 94 99 1a 	call	0x3532	; 0x3532 <fmin>
    16fc:	dc 01       	movw	r26, r24
    16fe:	cb 01       	movw	r24, r22
    1700:	20 e0       	ldi	r18, 0x00	; 0
    1702:	30 e0       	ldi	r19, 0x00	; 0
    1704:	48 e4       	ldi	r20, 0x48	; 72
    1706:	52 ec       	ldi	r21, 0xC2	; 194
    1708:	bc 01       	movw	r22, r24
    170a:	cd 01       	movw	r24, r26
    170c:	0e 94 67 1a 	call	0x34ce	; 0x34ce <fmax>
    1710:	dc 01       	movw	r26, r24
    1712:	cb 01       	movw	r24, r22
    1714:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <app_state+0x10>
    1718:	90 93 22 01 	sts	0x0122, r25	; 0x800122 <app_state+0x11>
    171c:	a0 93 23 01 	sts	0x0123, r26	; 0x800123 <app_state+0x12>
    1720:	b0 93 24 01 	sts	0x0124, r27	; 0x800124 <app_state+0x13>
	}
	
	// display current value
	srd_clear();
    1724:	0e 94 a6 22 	call	0x454c	; 0x454c <srd_clear>
	mr_heater_menu_offset(app_state.settings.heater_offset);
    1728:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <app_state+0x10>
    172c:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <app_state+0x11>
    1730:	a0 91 23 01 	lds	r26, 0x0123	; 0x800123 <app_state+0x12>
    1734:	b0 91 24 01 	lds	r27, 0x0124	; 0x800124 <app_state+0x13>
    1738:	bc 01       	movw	r22, r24
    173a:	cd 01       	movw	r24, r26
    173c:	0e 94 21 18 	call	0x3042	; 0x3042 <mr_heater_menu_offset>
	srd_display();
    1740:	0e 94 95 22 	call	0x452a	; 0x452a <srd_display>
	
	if(app_state.current_input.button_presses & (1 << BUTTON0))
    1744:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <app_state+0x18>
    1748:	88 2f       	mov	r24, r24
    174a:	90 e0       	ldi	r25, 0x00	; 0
    174c:	81 70       	andi	r24, 0x01	; 1
    174e:	99 27       	eor	r25, r25
    1750:	89 2b       	or	r24, r25
    1752:	49 f0       	breq	.+18     	; 0x1766 <app_state_menu_heater_offset+0xe8>
	{
		app_state.selected_menu_item_index = 5;
    1754:	85 e0       	ldi	r24, 0x05	; 5
    1756:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <app_state+0x1e>
		app_state.current_state_func = app_state_menu_heater;
    175a:	81 ef       	ldi	r24, 0xF1	; 241
    175c:	96 e0       	ldi	r25, 0x06	; 6
    175e:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <app_state+0x1d>
    1762:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <app_state+0x1c>
	}
	return EC_SUCCESS;
    1766:	80 e0       	ldi	r24, 0x00	; 0
}
    1768:	df 91       	pop	r29
    176a:	cf 91       	pop	r28
    176c:	ff 90       	pop	r15
    176e:	ef 90       	pop	r14
    1770:	df 90       	pop	r13
    1772:	cf 90       	pop	r12
    1774:	08 95       	ret

00001776 <app_state_menu_stirrer>:

ErrorCode app_state_menu_stirrer()
{
    1776:	cf 93       	push	r28
    1778:	df 93       	push	r29
    177a:	cd b7       	in	r28, 0x3d	; 61
    177c:	de b7       	in	r29, 0x3e	; 62
	if(app_state.current_input.rotenc_delta > 0)
    177e:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <app_state+0x16>
    1782:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <app_state+0x17>
    1786:	18 16       	cp	r1, r24
    1788:	19 06       	cpc	r1, r25
    178a:	64 f4       	brge	.+24     	; 0x17a4 <app_state_menu_stirrer+0x2e>
		app_state.selected_menu_item_index = imax8(imin8(app_state.selected_menu_item_index + 1, 1), 0);
    178c:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <app_state+0x1e>
    1790:	8f 5f       	subi	r24, 0xFF	; 255
    1792:	61 e0       	ldi	r22, 0x01	; 1
    1794:	0e 94 1b 1a 	call	0x3436	; 0x3436 <imin8>
    1798:	60 e0       	ldi	r22, 0x00	; 0
    179a:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <imax8>
    179e:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <app_state+0x1e>
    17a2:	11 c0       	rjmp	.+34     	; 0x17c6 <app_state_menu_stirrer+0x50>
	else if(app_state.current_input.rotenc_delta < 0)
    17a4:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <app_state+0x16>
    17a8:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <app_state+0x17>
    17ac:	99 23       	and	r25, r25
    17ae:	5c f4       	brge	.+22     	; 0x17c6 <app_state_menu_stirrer+0x50>
		app_state.selected_menu_item_index = imax8(imin8(app_state.selected_menu_item_index - 1, 1), 0);
    17b0:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <app_state+0x1e>
    17b4:	81 50       	subi	r24, 0x01	; 1
    17b6:	61 e0       	ldi	r22, 0x01	; 1
    17b8:	0e 94 1b 1a 	call	0x3436	; 0x3436 <imin8>
    17bc:	60 e0       	ldi	r22, 0x00	; 0
    17be:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <imax8>
    17c2:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <app_state+0x1e>
	// display selected menu item
	srd_clear();
    17c6:	0e 94 a6 22 	call	0x454c	; 0x454c <srd_clear>
	mr_stirrer_menu(app_state.selected_menu_item_index);
    17ca:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <app_state+0x1e>
    17ce:	0e 94 a7 16 	call	0x2d4e	; 0x2d4e <mr_stirrer_menu>
	srd_display();
    17d2:	0e 94 95 22 	call	0x452a	; 0x452a <srd_display>
	
	// state change
	if(app_state.current_input.button_presses & (1 << BUTTON0))
    17d6:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <app_state+0x18>
    17da:	88 2f       	mov	r24, r24
    17dc:	90 e0       	ldi	r25, 0x00	; 0
    17de:	81 70       	andi	r24, 0x01	; 1
    17e0:	99 27       	eor	r25, r25
    17e2:	89 2b       	or	r24, r25
    17e4:	e9 f0       	breq	.+58     	; 0x1820 <app_state_menu_stirrer+0xaa>
	{
		switch(app_state.selected_menu_item_index)
    17e6:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <app_state+0x1e>
    17ea:	08 2e       	mov	r0, r24
    17ec:	00 0c       	add	r0, r0
    17ee:	99 0b       	sbc	r25, r25
    17f0:	00 97       	sbiw	r24, 0x00	; 0
    17f2:	19 f0       	breq	.+6      	; 0x17fa <app_state_menu_stirrer+0x84>
    17f4:	01 97       	sbiw	r24, 0x01	; 1
    17f6:	59 f0       	breq	.+22     	; 0x180e <app_state_menu_stirrer+0x98>
    17f8:	13 c0       	rjmp	.+38     	; 0x1820 <app_state_menu_stirrer+0xaa>
		{
			case 0:	// back to main menu
				app_state.selected_menu_item_index = 2;
    17fa:	82 e0       	ldi	r24, 0x02	; 2
    17fc:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <app_state+0x1e>
				app_state.current_state_func = app_state_menu_main;
    1800:	81 e7       	ldi	r24, 0x71	; 113
    1802:	96 e0       	ldi	r25, 0x06	; 6
    1804:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <app_state+0x1d>
    1808:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <app_state+0x1c>
				break;
    180c:	09 c0       	rjmp	.+18     	; 0x1820 <app_state_menu_stirrer+0xaa>
			case 1: // heater duty cycle
				app_state.selected_menu_item_index = 0;
    180e:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <app_state+0x1e>
				app_state.current_state_func = app_state_menu_stirrer_duty_cycle;
    1812:	84 e1       	ldi	r24, 0x14	; 20
    1814:	9c e0       	ldi	r25, 0x0C	; 12
    1816:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <app_state+0x1d>
    181a:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <app_state+0x1c>
				break;
    181e:	00 00       	nop
		}
	}
	return EC_SUCCESS;
    1820:	80 e0       	ldi	r24, 0x00	; 0
}
    1822:	df 91       	pop	r29
    1824:	cf 91       	pop	r28
    1826:	08 95       	ret

00001828 <app_state_menu_stirrer_duty_cycle>:

ErrorCode app_state_menu_stirrer_duty_cycle()
{
    1828:	cf 93       	push	r28
    182a:	df 93       	push	r29
    182c:	cd b7       	in	r28, 0x3d	; 61
    182e:	de b7       	in	r29, 0x3e	; 62
	if(app_state.current_input.rotenc_delta != 0)
    1830:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <app_state+0x16>
    1834:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <app_state+0x17>
    1838:	89 2b       	or	r24, r25
    183a:	a9 f1       	breq	.+106    	; 0x18a6 <app_state_menu_stirrer_duty_cycle+0x7e>
	{
		app_state.stirrer_duty_cycle = (uint8_t)imax16(imin16((int16_t)app_state.stirrer_duty_cycle + app_state.current_input.rotenc_delta * STIRRER_DC_CHANGE_PER_STEP, 100), 0);
    183c:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <app_state+0x3c>
    1840:	28 2f       	mov	r18, r24
    1842:	30 e0       	ldi	r19, 0x00	; 0
    1844:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <app_state+0x16>
    1848:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <app_state+0x17>
    184c:	82 0f       	add	r24, r18
    184e:	93 1f       	adc	r25, r19
    1850:	64 e6       	ldi	r22, 0x64	; 100
    1852:	70 e0       	ldi	r23, 0x00	; 0
    1854:	0e 94 2c 1a 	call	0x3458	; 0x3458 <imin16>
    1858:	60 e0       	ldi	r22, 0x00	; 0
    185a:	70 e0       	ldi	r23, 0x00	; 0
    185c:	0e 94 02 1a 	call	0x3404	; 0x3404 <imax16>
    1860:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <app_state+0x3c>
		
		if(!app_state.stirrer_onoff && app_state.stirrer_duty_cycle > 0) // stirrer was switched on
    1864:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <app_state+0x3f>
    1868:	88 23       	and	r24, r24
    186a:	39 f4       	brne	.+14     	; 0x187a <app_state_menu_stirrer_duty_cycle+0x52>
    186c:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <app_state+0x3c>
    1870:	88 23       	and	r24, r24
    1872:	19 f0       	breq	.+6      	; 0x187a <app_state_menu_stirrer_duty_cycle+0x52>
		{
			stirrer_on();
    1874:	0e 94 84 23 	call	0x4708	; 0x4708 <stirrer_on>
    1878:	0a c0       	rjmp	.+20     	; 0x188e <app_state_menu_stirrer_duty_cycle+0x66>
		}
		else if(app_state.stirrer_onoff && (app_state.stirrer_duty_cycle == 0)) // stirrer was switched off
    187a:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <app_state+0x3f>
    187e:	88 23       	and	r24, r24
    1880:	31 f0       	breq	.+12     	; 0x188e <app_state_menu_stirrer_duty_cycle+0x66>
    1882:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <app_state+0x3c>
    1886:	88 23       	and	r24, r24
    1888:	11 f4       	brne	.+4      	; 0x188e <app_state_menu_stirrer_duty_cycle+0x66>
		{
			stirrer_off();
    188a:	0e 94 a8 23 	call	0x4750	; 0x4750 <stirrer_off>
		}
			
		app_state.stirrer_onoff = app_state.stirrer_duty_cycle > 0;
    188e:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <app_state+0x3c>
    1892:	81 e0       	ldi	r24, 0x01	; 1
    1894:	99 23       	and	r25, r25
    1896:	09 f4       	brne	.+2      	; 0x189a <app_state_menu_stirrer_duty_cycle+0x72>
    1898:	80 e0       	ldi	r24, 0x00	; 0
    189a:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <app_state+0x3f>
		
		// set stirrer duty cycle
		stirrer_set_duty_cycle(app_state.stirrer_duty_cycle);
    189e:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <app_state+0x3c>
    18a2:	0e 94 4c 23 	call	0x4698	; 0x4698 <stirrer_set_duty_cycle>
	}
	
	// display current value
	srd_clear();
    18a6:	0e 94 a6 22 	call	0x454c	; 0x454c <srd_clear>
	mr_stirrer_menu_dc(app_state.stirrer_duty_cycle);
    18aa:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <app_state+0x3c>
    18ae:	0e 94 44 18 	call	0x3088	; 0x3088 <mr_stirrer_menu_dc>
	srd_display();
    18b2:	0e 94 95 22 	call	0x452a	; 0x452a <srd_display>
	
	if(app_state.current_input.button_presses & (1 << BUTTON0))
    18b6:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <app_state+0x18>
    18ba:	88 2f       	mov	r24, r24
    18bc:	90 e0       	ldi	r25, 0x00	; 0
    18be:	81 70       	andi	r24, 0x01	; 1
    18c0:	99 27       	eor	r25, r25
    18c2:	89 2b       	or	r24, r25
    18c4:	49 f0       	breq	.+18     	; 0x18d8 <app_state_menu_stirrer_duty_cycle+0xb0>
	{
		app_state.selected_menu_item_index = 1;
    18c6:	81 e0       	ldi	r24, 0x01	; 1
    18c8:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <app_state+0x1e>
		app_state.current_state_func = app_state_menu_stirrer;
    18cc:	8b eb       	ldi	r24, 0xBB	; 187
    18ce:	9b e0       	ldi	r25, 0x0B	; 11
    18d0:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <app_state+0x1d>
    18d4:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <app_state+0x1c>
	}
	return EC_SUCCESS;
    18d8:	80 e0       	ldi	r24, 0x00	; 0
}
    18da:	df 91       	pop	r29
    18dc:	cf 91       	pop	r28
    18de:	08 95       	ret

000018e0 <app_state_menu_tprobe>:

ErrorCode app_state_menu_tprobe()
{
    18e0:	cf 93       	push	r28
    18e2:	df 93       	push	r29
    18e4:	cd b7       	in	r28, 0x3d	; 61
    18e6:	de b7       	in	r29, 0x3e	; 62
	if(app_state.current_input.rotenc_delta > 0)
    18e8:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <app_state+0x16>
    18ec:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <app_state+0x17>
    18f0:	18 16       	cp	r1, r24
    18f2:	19 06       	cpc	r1, r25
    18f4:	64 f4       	brge	.+24     	; 0x190e <app_state_menu_tprobe+0x2e>
		app_state.selected_menu_item_index = imax8(imin8(app_state.selected_menu_item_index + 1, 4), 0);
    18f6:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <app_state+0x1e>
    18fa:	8f 5f       	subi	r24, 0xFF	; 255
    18fc:	64 e0       	ldi	r22, 0x04	; 4
    18fe:	0e 94 1b 1a 	call	0x3436	; 0x3436 <imin8>
    1902:	60 e0       	ldi	r22, 0x00	; 0
    1904:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <imax8>
    1908:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <app_state+0x1e>
    190c:	11 c0       	rjmp	.+34     	; 0x1930 <app_state_menu_tprobe+0x50>
	else if(app_state.current_input.rotenc_delta < 0)
    190e:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <app_state+0x16>
    1912:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <app_state+0x17>
    1916:	99 23       	and	r25, r25
    1918:	5c f4       	brge	.+22     	; 0x1930 <app_state_menu_tprobe+0x50>
		app_state.selected_menu_item_index = imax8(imin8(app_state.selected_menu_item_index - 1, 4), 0);
    191a:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <app_state+0x1e>
    191e:	81 50       	subi	r24, 0x01	; 1
    1920:	64 e0       	ldi	r22, 0x04	; 4
    1922:	0e 94 1b 1a 	call	0x3436	; 0x3436 <imin8>
    1926:	60 e0       	ldi	r22, 0x00	; 0
    1928:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <imax8>
    192c:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <app_state+0x1e>
	// display selected menu item
	srd_clear();
    1930:	0e 94 a6 22 	call	0x454c	; 0x454c <srd_clear>
	mr_tprobe_menu(app_state.selected_menu_item_index);
    1934:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <app_state+0x1e>
    1938:	0e 94 6a 18 	call	0x30d4	; 0x30d4 <mr_tprobe_menu>
	srd_display();
    193c:	0e 94 95 22 	call	0x452a	; 0x452a <srd_display>
	
	// state change
	if(app_state.current_input.button_presses & (1 << BUTTON0))
    1940:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <app_state+0x18>
    1944:	88 2f       	mov	r24, r24
    1946:	90 e0       	ldi	r25, 0x00	; 0
    1948:	81 70       	andi	r24, 0x01	; 1
    194a:	99 27       	eor	r25, r25
    194c:	89 2b       	or	r24, r25
    194e:	09 f4       	brne	.+2      	; 0x1952 <app_state_menu_tprobe+0x72>
    1950:	44 c0       	rjmp	.+136    	; 0x19da <app_state_menu_tprobe+0xfa>
	{
		switch(app_state.selected_menu_item_index)
    1952:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <app_state+0x1e>
    1956:	08 2e       	mov	r0, r24
    1958:	00 0c       	add	r0, r0
    195a:	99 0b       	sbc	r25, r25
    195c:	82 30       	cpi	r24, 0x02	; 2
    195e:	91 05       	cpc	r25, r1
    1960:	09 f1       	breq	.+66     	; 0x19a4 <app_state_menu_tprobe+0xc4>
    1962:	83 30       	cpi	r24, 0x03	; 3
    1964:	91 05       	cpc	r25, r1
    1966:	2c f4       	brge	.+10     	; 0x1972 <app_state_menu_tprobe+0x92>
    1968:	00 97       	sbiw	r24, 0x00	; 0
    196a:	49 f0       	breq	.+18     	; 0x197e <app_state_menu_tprobe+0x9e>
    196c:	01 97       	sbiw	r24, 0x01	; 1
    196e:	89 f0       	breq	.+34     	; 0x1992 <app_state_menu_tprobe+0xb2>
    1970:	34 c0       	rjmp	.+104    	; 0x19da <app_state_menu_tprobe+0xfa>
    1972:	83 30       	cpi	r24, 0x03	; 3
    1974:	91 05       	cpc	r25, r1
    1976:	f9 f0       	breq	.+62     	; 0x19b6 <app_state_menu_tprobe+0xd6>
    1978:	04 97       	sbiw	r24, 0x04	; 4
    197a:	31 f1       	breq	.+76     	; 0x19c8 <app_state_menu_tprobe+0xe8>
    197c:	2e c0       	rjmp	.+92     	; 0x19da <app_state_menu_tprobe+0xfa>
		{
			case 0:	// back to main menu
				app_state.selected_menu_item_index = 3;
    197e:	83 e0       	ldi	r24, 0x03	; 3
    1980:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <app_state+0x1e>
				app_state.current_state_func = app_state_menu_main;
    1984:	81 e7       	ldi	r24, 0x71	; 113
    1986:	96 e0       	ldi	r25, 0x06	; 6
    1988:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <app_state+0x1d>
    198c:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <app_state+0x1c>
				break;
    1990:	24 c0       	rjmp	.+72     	; 0x19da <app_state_menu_tprobe+0xfa>
			case 1: // thermistor 0 resistance
				app_state.selected_menu_item_index = 0;
    1992:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <app_state+0x1e>
				app_state.current_state_func = app_state_menu_tprobe0_calib;
    1996:	81 ef       	ldi	r24, 0xF1	; 241
    1998:	9c e0       	ldi	r25, 0x0C	; 12
    199a:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <app_state+0x1d>
    199e:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <app_state+0x1c>
				break;
    19a2:	1b c0       	rjmp	.+54     	; 0x19da <app_state_menu_tprobe+0xfa>
			case 2: // thermistor 1 resistance
				app_state.selected_menu_item_index = 0;
    19a4:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <app_state+0x1e>
				app_state.current_state_func = app_state_menu_tprobe1_calib;
    19a8:	8a e1       	ldi	r24, 0x1A	; 26
    19aa:	9d e0       	ldi	r25, 0x0D	; 13
    19ac:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <app_state+0x1d>
    19b0:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <app_state+0x1c>
				break;
    19b4:	12 c0       	rjmp	.+36     	; 0x19da <app_state_menu_tprobe+0xfa>
			case 3: // thermistor 2 resistance
				app_state.selected_menu_item_index = 0;
    19b6:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <app_state+0x1e>
				app_state.current_state_func = app_state_menu_tprobe2_calib;
    19ba:	83 e4       	ldi	r24, 0x43	; 67
    19bc:	9d e0       	ldi	r25, 0x0D	; 13
    19be:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <app_state+0x1d>
    19c2:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <app_state+0x1c>
				break;
    19c6:	09 c0       	rjmp	.+18     	; 0x19da <app_state_menu_tprobe+0xfa>
			case 4: // thermistor 3 resistance
				app_state.selected_menu_item_index = 0;
    19c8:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <app_state+0x1e>
				app_state.current_state_func = app_state_menu_tprobe3_calib;
    19cc:	82 e6       	ldi	r24, 0x62	; 98
    19ce:	9d e0       	ldi	r25, 0x0D	; 13
    19d0:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <app_state+0x1d>
    19d4:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <app_state+0x1c>
				break;
    19d8:	00 00       	nop
		}
	}
	return EC_SUCCESS;
    19da:	80 e0       	ldi	r24, 0x00	; 0
}
    19dc:	df 91       	pop	r29
    19de:	cf 91       	pop	r28
    19e0:	08 95       	ret

000019e2 <app_state_menu_tprobe0_calib>:

ErrorCode app_state_menu_tprobe0_calib()
{
    19e2:	cf 93       	push	r28
    19e4:	df 93       	push	r29
    19e6:	cd b7       	in	r28, 0x3d	; 61
    19e8:	de b7       	in	r29, 0x3e	; 62
	// display current resistance
	#ifdef TSENS_PROBE_0
	srd_clear();
    19ea:	0e 94 a6 22 	call	0x454c	; 0x454c <srd_clear>
	mr_tprobe_calib_menu(app_state.t0_resistance);
    19ee:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <app_state+0x44>
    19f2:	90 91 56 01 	lds	r25, 0x0156	; 0x800156 <app_state+0x45>
    19f6:	a0 91 57 01 	lds	r26, 0x0157	; 0x800157 <app_state+0x46>
    19fa:	b0 91 58 01 	lds	r27, 0x0158	; 0x800158 <app_state+0x47>
    19fe:	bc 01       	movw	r22, r24
    1a00:	cd 01       	movw	r24, r26
    1a02:	0e 94 b6 18 	call	0x316c	; 0x316c <mr_tprobe_calib_menu>
	srd_display();
    1a06:	0e 94 95 22 	call	0x452a	; 0x452a <srd_display>
	mr_tprobe_calib_menu_nc();
	srd_display();
	#endif
	
	// state change
	if(app_state.current_input.button_presses & (1 << BUTTON0))
    1a0a:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <app_state+0x18>
    1a0e:	88 2f       	mov	r24, r24
    1a10:	90 e0       	ldi	r25, 0x00	; 0
    1a12:	81 70       	andi	r24, 0x01	; 1
    1a14:	99 27       	eor	r25, r25
    1a16:	89 2b       	or	r24, r25
    1a18:	49 f0       	breq	.+18     	; 0x1a2c <app_state_menu_tprobe0_calib+0x4a>
	{
		app_state.selected_menu_item_index = 1;
    1a1a:	81 e0       	ldi	r24, 0x01	; 1
    1a1c:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <app_state+0x1e>
		app_state.current_state_func = app_state_menu_tprobe;
    1a20:	80 e7       	ldi	r24, 0x70	; 112
    1a22:	9c e0       	ldi	r25, 0x0C	; 12
    1a24:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <app_state+0x1d>
    1a28:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <app_state+0x1c>
	}
	
	return EC_SUCCESS; // everything ok
    1a2c:	80 e0       	ldi	r24, 0x00	; 0
}
    1a2e:	df 91       	pop	r29
    1a30:	cf 91       	pop	r28
    1a32:	08 95       	ret

00001a34 <app_state_menu_tprobe1_calib>:

ErrorCode app_state_menu_tprobe1_calib()
{
    1a34:	cf 93       	push	r28
    1a36:	df 93       	push	r29
    1a38:	cd b7       	in	r28, 0x3d	; 61
    1a3a:	de b7       	in	r29, 0x3e	; 62
	// display current resistance
	#ifdef TSENS_PROBE_1
	srd_clear();
    1a3c:	0e 94 a6 22 	call	0x454c	; 0x454c <srd_clear>
	mr_tprobe_calib_menu(app_state.t1_resistance);
    1a40:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <app_state+0x58>
    1a44:	90 91 6a 01 	lds	r25, 0x016A	; 0x80016a <app_state+0x59>
    1a48:	a0 91 6b 01 	lds	r26, 0x016B	; 0x80016b <app_state+0x5a>
    1a4c:	b0 91 6c 01 	lds	r27, 0x016C	; 0x80016c <app_state+0x5b>
    1a50:	bc 01       	movw	r22, r24
    1a52:	cd 01       	movw	r24, r26
    1a54:	0e 94 b6 18 	call	0x316c	; 0x316c <mr_tprobe_calib_menu>
	srd_display();
    1a58:	0e 94 95 22 	call	0x452a	; 0x452a <srd_display>
	mr_tprobe_calib_menu_nc();
	srd_display();
	#endif
	
	// state change
	if(app_state.current_input.button_presses & (1 << BUTTON0))
    1a5c:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <app_state+0x18>
    1a60:	88 2f       	mov	r24, r24
    1a62:	90 e0       	ldi	r25, 0x00	; 0
    1a64:	81 70       	andi	r24, 0x01	; 1
    1a66:	99 27       	eor	r25, r25
    1a68:	89 2b       	or	r24, r25
    1a6a:	49 f0       	breq	.+18     	; 0x1a7e <app_state_menu_tprobe1_calib+0x4a>
	{
		app_state.selected_menu_item_index = 2;
    1a6c:	82 e0       	ldi	r24, 0x02	; 2
    1a6e:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <app_state+0x1e>
		app_state.current_state_func = app_state_menu_tprobe;
    1a72:	80 e7       	ldi	r24, 0x70	; 112
    1a74:	9c e0       	ldi	r25, 0x0C	; 12
    1a76:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <app_state+0x1d>
    1a7a:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <app_state+0x1c>
	}
	
	return EC_SUCCESS; // everything ok
    1a7e:	80 e0       	ldi	r24, 0x00	; 0
}
    1a80:	df 91       	pop	r29
    1a82:	cf 91       	pop	r28
    1a84:	08 95       	ret

00001a86 <app_state_menu_tprobe2_calib>:

ErrorCode app_state_menu_tprobe2_calib()
{
    1a86:	cf 93       	push	r28
    1a88:	df 93       	push	r29
    1a8a:	cd b7       	in	r28, 0x3d	; 61
    1a8c:	de b7       	in	r29, 0x3e	; 62
	#ifdef TSENS_PROBE_2
	srd_clear();
	mr_tprobe_calib_menu(app_state.t2_resistance);
	srd_display();
	#else
	srd_clear();
    1a8e:	0e 94 a6 22 	call	0x454c	; 0x454c <srd_clear>
	mr_tprobe_calib_menu_nc();
    1a92:	0e 94 e0 18 	call	0x31c0	; 0x31c0 <mr_tprobe_calib_menu_nc>
	srd_display();
    1a96:	0e 94 95 22 	call	0x452a	; 0x452a <srd_display>
	#endif
	
	// state change
	if(app_state.current_input.button_presses & (1 << BUTTON0))
    1a9a:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <app_state+0x18>
    1a9e:	88 2f       	mov	r24, r24
    1aa0:	90 e0       	ldi	r25, 0x00	; 0
    1aa2:	81 70       	andi	r24, 0x01	; 1
    1aa4:	99 27       	eor	r25, r25
    1aa6:	89 2b       	or	r24, r25
    1aa8:	49 f0       	breq	.+18     	; 0x1abc <app_state_menu_tprobe2_calib+0x36>
	{
		app_state.selected_menu_item_index = 3;
    1aaa:	83 e0       	ldi	r24, 0x03	; 3
    1aac:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <app_state+0x1e>
		app_state.current_state_func = app_state_menu_tprobe;
    1ab0:	80 e7       	ldi	r24, 0x70	; 112
    1ab2:	9c e0       	ldi	r25, 0x0C	; 12
    1ab4:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <app_state+0x1d>
    1ab8:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <app_state+0x1c>
	}
	
	return EC_SUCCESS; // everything ok
    1abc:	80 e0       	ldi	r24, 0x00	; 0
}
    1abe:	df 91       	pop	r29
    1ac0:	cf 91       	pop	r28
    1ac2:	08 95       	ret

00001ac4 <app_state_menu_tprobe3_calib>:

ErrorCode app_state_menu_tprobe3_calib()
{
    1ac4:	cf 93       	push	r28
    1ac6:	df 93       	push	r29
    1ac8:	cd b7       	in	r28, 0x3d	; 61
    1aca:	de b7       	in	r29, 0x3e	; 62
	#ifdef TSENS_PROBE_3
	srd_clear();
	mr_tprobe_calib_menu(app_state.t3_resistance);
	srd_display();
	#else
	srd_clear();
    1acc:	0e 94 a6 22 	call	0x454c	; 0x454c <srd_clear>
	mr_tprobe_calib_menu_nc();
    1ad0:	0e 94 e0 18 	call	0x31c0	; 0x31c0 <mr_tprobe_calib_menu_nc>
	srd_display();
    1ad4:	0e 94 95 22 	call	0x452a	; 0x452a <srd_display>
	#endif
	
	// state change
	if(app_state.current_input.button_presses & (1 << BUTTON0))
    1ad8:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <app_state+0x18>
    1adc:	88 2f       	mov	r24, r24
    1ade:	90 e0       	ldi	r25, 0x00	; 0
    1ae0:	81 70       	andi	r24, 0x01	; 1
    1ae2:	99 27       	eor	r25, r25
    1ae4:	89 2b       	or	r24, r25
    1ae6:	49 f0       	breq	.+18     	; 0x1afa <app_state_menu_tprobe3_calib+0x36>
	{
		app_state.selected_menu_item_index = 4;
    1ae8:	84 e0       	ldi	r24, 0x04	; 4
    1aea:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <app_state+0x1e>
		app_state.current_state_func = app_state_menu_tprobe;
    1aee:	80 e7       	ldi	r24, 0x70	; 112
    1af0:	9c e0       	ldi	r25, 0x0C	; 12
    1af2:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <app_state+0x1d>
    1af6:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <app_state+0x1c>
	}
	
	return EC_SUCCESS; // everything ok
    1afa:	80 e0       	ldi	r24, 0x00	; 0
}
    1afc:	df 91       	pop	r29
    1afe:	cf 91       	pop	r28
    1b00:	08 95       	ret

00001b02 <app_clear_input>:
	//return EC_SUCCESS;
//}

////////////////////////////////////// HELPERS ////////////////////////////////////////////////////
void app_clear_input()
{
    1b02:	cf 93       	push	r28
    1b04:	df 93       	push	r29
    1b06:	cd b7       	in	r28, 0x3d	; 61
    1b08:	de b7       	in	r29, 0x3e	; 62
	app_state.current_input.rotenc_delta = 0;
    1b0a:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <app_state+0x17>
    1b0e:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <app_state+0x16>
	app_state.current_input.button_presses = 0;
    1b12:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <app_state+0x18>
	app_state.current_input.button_long_presses = 0;
    1b16:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <app_state+0x19>
	app_state.current_input.button_releases = 0;
    1b1a:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <app_state+0x1a>
	app_state.current_input.button_states = 0;
    1b1e:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <app_state+0x1b>
}
    1b22:	00 00       	nop
    1b24:	df 91       	pop	r29
    1b26:	cf 91       	pop	r28
    1b28:	08 95       	ret

00001b2a <app_error_display>:

void app_error_display()
{
    1b2a:	cf 93       	push	r28
    1b2c:	df 93       	push	r29
    1b2e:	cd b7       	in	r28, 0x3d	; 61
    1b30:	de b7       	in	r29, 0x3e	; 62
	switch(app_state.current_error)
    1b32:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <app_state+0x1f>
    1b36:	88 2f       	mov	r24, r24
    1b38:	90 e0       	ldi	r25, 0x00	; 0
    1b3a:	89 2b       	or	r24, r25
    1b3c:	49 f0       	breq	.+18     	; 0x1b50 <app_error_display+0x26>
	{
		case EC_SUCCESS:
			break;
		default:
			srd_clear();
    1b3e:	0e 94 a6 22 	call	0x454c	; 0x454c <srd_clear>
			mr_thermistor_error(app_state.current_error);
    1b42:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <app_state+0x1f>
    1b46:	0e 94 f0 18 	call	0x31e0	; 0x31e0 <mr_thermistor_error>
			srd_display();
    1b4a:	0e 94 95 22 	call	0x452a	; 0x452a <srd_display>
			break;
    1b4e:	01 c0       	rjmp	.+2      	; 0x1b52 <app_error_display+0x28>
void app_error_display()
{
	switch(app_state.current_error)
	{
		case EC_SUCCESS:
			break;
    1b50:	00 00       	nop
			srd_clear();
			mr_thermistor_error(app_state.current_error);
			srd_display();
			break;
	}
}
    1b52:	00 00       	nop
    1b54:	df 91       	pop	r29
    1b56:	cf 91       	pop	r28
    1b58:	08 95       	ret

00001b5a <app_load_default_settings>:

void app_load_default_settings()
{
    1b5a:	cf 93       	push	r28
    1b5c:	df 93       	push	r29
    1b5e:	cd b7       	in	r28, 0x3d	; 61
    1b60:	de b7       	in	r29, 0x3e	; 62
	app_state.settings.heater_target_temp = SETTINGS_DEFAULT_HEATER_TARGET_TEMP;
    1b62:	80 e0       	ldi	r24, 0x00	; 0
    1b64:	90 e0       	ldi	r25, 0x00	; 0
    1b66:	a8 ec       	ldi	r26, 0xC8	; 200
    1b68:	b1 e4       	ldi	r27, 0x41	; 65
    1b6a:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <app_state>
    1b6e:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <app_state+0x1>
    1b72:	a0 93 13 01 	sts	0x0113, r26	; 0x800113 <app_state+0x2>
    1b76:	b0 93 14 01 	sts	0x0114, r27	; 0x800114 <app_state+0x3>
	app_state.settings.heater_pid_p = SETTINGS_DEFAULT_HEATER_PID_P;
    1b7a:	80 e0       	ldi	r24, 0x00	; 0
    1b7c:	90 e0       	ldi	r25, 0x00	; 0
    1b7e:	a0 e8       	ldi	r26, 0x80	; 128
    1b80:	bf e3       	ldi	r27, 0x3F	; 63
    1b82:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <app_state+0x4>
    1b86:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <app_state+0x5>
    1b8a:	a0 93 17 01 	sts	0x0117, r26	; 0x800117 <app_state+0x6>
    1b8e:	b0 93 18 01 	sts	0x0118, r27	; 0x800118 <app_state+0x7>
	app_state.settings.heater_pid_i = SETTINGS_DEFAULT_HEATER_PID_I;
    1b92:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <app_state+0x8>
    1b96:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <app_state+0x9>
    1b9a:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <app_state+0xa>
    1b9e:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <app_state+0xb>
	app_state.settings.heater_pid_d = SETTINGS_DEFAULT_HEATER_PID_D;
    1ba2:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <app_state+0xc>
    1ba6:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <app_state+0xd>
    1baa:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <app_state+0xe>
    1bae:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <app_state+0xf>
	app_state.settings.heater_offset = SETTINGS_DEFAULT_HEATER_OFFSET;
    1bb2:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <app_state+0x10>
    1bb6:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <app_state+0x11>
    1bba:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <app_state+0x12>
    1bbe:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <app_state+0x13>
	app_state.settings.controlling_tprobe = HEATER_SAFETY_TPROBE;
    1bc2:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <app_state+0x14>
}
    1bc6:	00 00       	nop
    1bc8:	df 91       	pop	r29
    1bca:	cf 91       	pop	r28
    1bcc:	08 95       	ret

00001bce <app_load_settings_from_eeprom>:

void app_load_settings_from_eeprom()
{
    1bce:	cf 93       	push	r28
    1bd0:	df 93       	push	r29
    1bd2:	cd b7       	in	r28, 0x3d	; 61
    1bd4:	de b7       	in	r29, 0x3e	; 62
    1bd6:	66 97       	sbiw	r28, 0x16	; 22
    1bd8:	0f b6       	in	r0, 0x3f	; 63
    1bda:	f8 94       	cli
    1bdc:	de bf       	out	0x3e, r29	; 62
    1bde:	0f be       	out	0x3f, r0	; 63
    1be0:	cd bf       	out	0x3d, r28	; 61
	eeprom_settings_t load_settings;
	eeprom_read_block(&load_settings, &app_eeprom_settings, sizeof(eeprom_settings_t));
    1be2:	46 e1       	ldi	r20, 0x16	; 22
    1be4:	50 e0       	ldi	r21, 0x00	; 0
    1be6:	60 e0       	ldi	r22, 0x00	; 0
    1be8:	70 e0       	ldi	r23, 0x00	; 0
    1bea:	ce 01       	movw	r24, r28
    1bec:	01 96       	adiw	r24, 0x01	; 1
    1bee:	0e 94 dc 2c 	call	0x59b8	; 0x59b8 <eeprom_read_block>
	// if no valid data was found in eeprom, initialize it with default settings
	if(load_settings.magic_number != EEPROM_SETTINGS_MAGIC_NUMBER)
    1bf2:	89 81       	ldd	r24, Y+1	; 0x01
    1bf4:	8a 32       	cpi	r24, 0x2A	; 42
    1bf6:	29 f0       	breq	.+10     	; 0x1c02 <app_load_settings_from_eeprom+0x34>
	{
		app_load_default_settings();
    1bf8:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <app_load_default_settings>
		app_store_settings_to_eeprom();
    1bfc:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <app_store_settings_to_eeprom>
	}
	else
	{
		app_state.settings = load_settings.settings;
	}
}
    1c00:	09 c0       	rjmp	.+18     	; 0x1c14 <app_load_settings_from_eeprom+0x46>
		app_load_default_settings();
		app_store_settings_to_eeprom();
	}
	else
	{
		app_state.settings = load_settings.settings;
    1c02:	85 e1       	ldi	r24, 0x15	; 21
    1c04:	fe 01       	movw	r30, r28
    1c06:	32 96       	adiw	r30, 0x02	; 2
    1c08:	a1 e1       	ldi	r26, 0x11	; 17
    1c0a:	b1 e0       	ldi	r27, 0x01	; 1
    1c0c:	01 90       	ld	r0, Z+
    1c0e:	0d 92       	st	X+, r0
    1c10:	8a 95       	dec	r24
    1c12:	e1 f7       	brne	.-8      	; 0x1c0c <app_load_settings_from_eeprom+0x3e>
	}
}
    1c14:	00 00       	nop
    1c16:	66 96       	adiw	r28, 0x16	; 22
    1c18:	0f b6       	in	r0, 0x3f	; 63
    1c1a:	f8 94       	cli
    1c1c:	de bf       	out	0x3e, r29	; 62
    1c1e:	0f be       	out	0x3f, r0	; 63
    1c20:	cd bf       	out	0x3d, r28	; 61
    1c22:	df 91       	pop	r29
    1c24:	cf 91       	pop	r28
    1c26:	08 95       	ret

00001c28 <app_store_settings_to_eeprom>:

void app_store_settings_to_eeprom()
{
    1c28:	cf 93       	push	r28
    1c2a:	df 93       	push	r29
    1c2c:	cd b7       	in	r28, 0x3d	; 61
    1c2e:	de b7       	in	r29, 0x3e	; 62
    1c30:	66 97       	sbiw	r28, 0x16	; 22
    1c32:	0f b6       	in	r0, 0x3f	; 63
    1c34:	f8 94       	cli
    1c36:	de bf       	out	0x3e, r29	; 62
    1c38:	0f be       	out	0x3f, r0	; 63
    1c3a:	cd bf       	out	0x3d, r28	; 61
	eeprom_settings_t store_settings = {EEPROM_SETTINGS_MAGIC_NUMBER, app_state.settings};
    1c3c:	8a e2       	ldi	r24, 0x2A	; 42
    1c3e:	89 83       	std	Y+1, r24	; 0x01
    1c40:	85 e1       	ldi	r24, 0x15	; 21
    1c42:	e1 e1       	ldi	r30, 0x11	; 17
    1c44:	f1 e0       	ldi	r31, 0x01	; 1
    1c46:	de 01       	movw	r26, r28
    1c48:	12 96       	adiw	r26, 0x02	; 2
    1c4a:	01 90       	ld	r0, Z+
    1c4c:	0d 92       	st	X+, r0
    1c4e:	8a 95       	dec	r24
    1c50:	e1 f7       	brne	.-8      	; 0x1c4a <app_store_settings_to_eeprom+0x22>
	eeprom_update_block(&store_settings, &app_eeprom_settings, sizeof(eeprom_settings_t));
    1c52:	46 e1       	ldi	r20, 0x16	; 22
    1c54:	50 e0       	ldi	r21, 0x00	; 0
    1c56:	60 e0       	ldi	r22, 0x00	; 0
    1c58:	70 e0       	ldi	r23, 0x00	; 0
    1c5a:	ce 01       	movw	r24, r28
    1c5c:	01 96       	adiw	r24, 0x01	; 1
    1c5e:	0e 94 ec 2c 	call	0x59d8	; 0x59d8 <eeprom_update_block>
    1c62:	00 00       	nop
    1c64:	66 96       	adiw	r28, 0x16	; 22
    1c66:	0f b6       	in	r0, 0x3f	; 63
    1c68:	f8 94       	cli
    1c6a:	de bf       	out	0x3e, r29	; 62
    1c6c:	0f be       	out	0x3f, r0	; 63
    1c6e:	cd bf       	out	0x3d, r28	; 61
    1c70:	df 91       	pop	r29
    1c72:	cf 91       	pop	r28
    1c74:	08 95       	ret

00001c76 <__iCliRetVal>:

void appt_clear_callback(uint8_t index)
{
	assert(index < APP_TIMER_MAX_CALLBACKS);
	appt_callbacks[index] = (appt_callback_entry){APPT_CYCLE_ZERO, APPT_CYCLE_ZERO, 0};
}
    1c76:	cf 93       	push	r28
    1c78:	df 93       	push	r29
    1c7a:	cd b7       	in	r28, 0x3d	; 61
    1c7c:	de b7       	in	r29, 0x3e	; 62
    1c7e:	f8 94       	cli
    1c80:	81 e0       	ldi	r24, 0x01	; 1
    1c82:	df 91       	pop	r29
    1c84:	cf 91       	pop	r28
    1c86:	08 95       	ret

00001c88 <__iRestore>:
    1c88:	cf 93       	push	r28
    1c8a:	df 93       	push	r29
    1c8c:	00 d0       	rcall	.+0      	; 0x1c8e <__iRestore+0x6>
    1c8e:	cd b7       	in	r28, 0x3d	; 61
    1c90:	de b7       	in	r29, 0x3e	; 62
    1c92:	9a 83       	std	Y+2, r25	; 0x02
    1c94:	89 83       	std	Y+1, r24	; 0x01
    1c96:	8f e5       	ldi	r24, 0x5F	; 95
    1c98:	90 e0       	ldi	r25, 0x00	; 0
    1c9a:	29 81       	ldd	r18, Y+1	; 0x01
    1c9c:	3a 81       	ldd	r19, Y+2	; 0x02
    1c9e:	f9 01       	movw	r30, r18
    1ca0:	20 81       	ld	r18, Z
    1ca2:	fc 01       	movw	r30, r24
    1ca4:	20 83       	st	Z, r18
    1ca6:	00 00       	nop
    1ca8:	0f 90       	pop	r0
    1caa:	0f 90       	pop	r0
    1cac:	df 91       	pop	r29
    1cae:	cf 91       	pop	r28
    1cb0:	08 95       	ret

00001cb2 <appt_seconds_to_cycles>:
    1cb2:	2f 92       	push	r2
    1cb4:	3f 92       	push	r3
    1cb6:	4f 92       	push	r4
    1cb8:	5f 92       	push	r5
    1cba:	6f 92       	push	r6
    1cbc:	7f 92       	push	r7
    1cbe:	8f 92       	push	r8
    1cc0:	9f 92       	push	r9
    1cc2:	af 92       	push	r10
    1cc4:	bf 92       	push	r11
    1cc6:	cf 92       	push	r12
    1cc8:	df 92       	push	r13
    1cca:	ef 92       	push	r14
    1ccc:	ff 92       	push	r15
    1cce:	0f 93       	push	r16
    1cd0:	1f 93       	push	r17
    1cd2:	cf 93       	push	r28
    1cd4:	df 93       	push	r29
    1cd6:	00 d0       	rcall	.+0      	; 0x1cd8 <appt_seconds_to_cycles+0x26>
    1cd8:	00 d0       	rcall	.+0      	; 0x1cda <appt_seconds_to_cycles+0x28>
    1cda:	cd b7       	in	r28, 0x3d	; 61
    1cdc:	de b7       	in	r29, 0x3e	; 62
    1cde:	69 83       	std	Y+1, r22	; 0x01
    1ce0:	7a 83       	std	Y+2, r23	; 0x02
    1ce2:	8b 83       	std	Y+3, r24	; 0x03
    1ce4:	9c 83       	std	Y+4, r25	; 0x04
    1ce6:	28 e3       	ldi	r18, 0x38	; 56
    1ce8:	3e e9       	ldi	r19, 0x9E	; 158
    1cea:	4f ec       	ldi	r20, 0xCF	; 207
    1cec:	58 e3       	ldi	r21, 0x38	; 56
    1cee:	69 81       	ldd	r22, Y+1	; 0x01
    1cf0:	7a 81       	ldd	r23, Y+2	; 0x02
    1cf2:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf4:	9c 81       	ldd	r25, Y+4	; 0x04
    1cf6:	0e 94 6b 29 	call	0x52d6	; 0x52d6 <__divsf3>
    1cfa:	dc 01       	movw	r26, r24
    1cfc:	cb 01       	movw	r24, r22
    1cfe:	20 e0       	ldi	r18, 0x00	; 0
    1d00:	30 e0       	ldi	r19, 0x00	; 0
    1d02:	40 e0       	ldi	r20, 0x00	; 0
    1d04:	5f e3       	ldi	r21, 0x3F	; 63
    1d06:	bc 01       	movw	r22, r24
    1d08:	cd 01       	movw	r24, r26
    1d0a:	0e 94 fa 28 	call	0x51f4	; 0x51f4 <__addsf3>
    1d0e:	dc 01       	movw	r26, r24
    1d10:	cb 01       	movw	r24, r22
    1d12:	bc 01       	movw	r22, r24
    1d14:	cd 01       	movw	r24, r26
    1d16:	0e 94 e2 29 	call	0x53c4	; 0x53c4 <__fixunssfdi>
    1d1a:	22 2e       	mov	r2, r18
    1d1c:	33 2e       	mov	r3, r19
    1d1e:	44 2e       	mov	r4, r20
    1d20:	55 2e       	mov	r5, r21
    1d22:	66 2e       	mov	r6, r22
    1d24:	77 2e       	mov	r7, r23
    1d26:	88 2e       	mov	r8, r24
    1d28:	99 2e       	mov	r9, r25
    1d2a:	a2 2c       	mov	r10, r2
    1d2c:	b3 2c       	mov	r11, r3
    1d2e:	c4 2c       	mov	r12, r4
    1d30:	d5 2c       	mov	r13, r5
    1d32:	e6 2c       	mov	r14, r6
    1d34:	f7 2c       	mov	r15, r7
    1d36:	08 2d       	mov	r16, r8
    1d38:	19 2d       	mov	r17, r9
    1d3a:	2a 2d       	mov	r18, r10
    1d3c:	3b 2d       	mov	r19, r11
    1d3e:	4c 2d       	mov	r20, r12
    1d40:	5d 2d       	mov	r21, r13
    1d42:	6e 2d       	mov	r22, r14
    1d44:	7f 2d       	mov	r23, r15
    1d46:	80 2f       	mov	r24, r16
    1d48:	91 2f       	mov	r25, r17
    1d4a:	0f 90       	pop	r0
    1d4c:	0f 90       	pop	r0
    1d4e:	0f 90       	pop	r0
    1d50:	0f 90       	pop	r0
    1d52:	df 91       	pop	r29
    1d54:	cf 91       	pop	r28
    1d56:	1f 91       	pop	r17
    1d58:	0f 91       	pop	r16
    1d5a:	ff 90       	pop	r15
    1d5c:	ef 90       	pop	r14
    1d5e:	df 90       	pop	r13
    1d60:	cf 90       	pop	r12
    1d62:	bf 90       	pop	r11
    1d64:	af 90       	pop	r10
    1d66:	9f 90       	pop	r9
    1d68:	8f 90       	pop	r8
    1d6a:	7f 90       	pop	r7
    1d6c:	6f 90       	pop	r6
    1d6e:	5f 90       	pop	r5
    1d70:	4f 90       	pop	r4
    1d72:	3f 90       	pop	r3
    1d74:	2f 90       	pop	r2
    1d76:	08 95       	ret

00001d78 <appt_cycles_to_seconds>:
    1d78:	cf 93       	push	r28
    1d7a:	df 93       	push	r29
    1d7c:	cd b7       	in	r28, 0x3d	; 61
    1d7e:	de b7       	in	r29, 0x3e	; 62
    1d80:	28 97       	sbiw	r28, 0x08	; 8
    1d82:	0f b6       	in	r0, 0x3f	; 63
    1d84:	f8 94       	cli
    1d86:	de bf       	out	0x3e, r29	; 62
    1d88:	0f be       	out	0x3f, r0	; 63
    1d8a:	cd bf       	out	0x3d, r28	; 61
    1d8c:	29 83       	std	Y+1, r18	; 0x01
    1d8e:	3a 83       	std	Y+2, r19	; 0x02
    1d90:	4b 83       	std	Y+3, r20	; 0x03
    1d92:	5c 83       	std	Y+4, r21	; 0x04
    1d94:	6d 83       	std	Y+5, r22	; 0x05
    1d96:	7e 83       	std	Y+6, r23	; 0x06
    1d98:	8f 83       	std	Y+7, r24	; 0x07
    1d9a:	98 87       	std	Y+8, r25	; 0x08
    1d9c:	29 81       	ldd	r18, Y+1	; 0x01
    1d9e:	3a 81       	ldd	r19, Y+2	; 0x02
    1da0:	4b 81       	ldd	r20, Y+3	; 0x03
    1da2:	5c 81       	ldd	r21, Y+4	; 0x04
    1da4:	6d 81       	ldd	r22, Y+5	; 0x05
    1da6:	7e 81       	ldd	r23, Y+6	; 0x06
    1da8:	8f 81       	ldd	r24, Y+7	; 0x07
    1daa:	98 85       	ldd	r25, Y+8	; 0x08
    1dac:	0e 94 8c 2a 	call	0x5518	; 0x5518 <__floatundisf>
    1db0:	dc 01       	movw	r26, r24
    1db2:	cb 01       	movw	r24, r22
    1db4:	28 e3       	ldi	r18, 0x38	; 56
    1db6:	3e e9       	ldi	r19, 0x9E	; 158
    1db8:	4f ec       	ldi	r20, 0xCF	; 207
    1dba:	58 e3       	ldi	r21, 0x38	; 56
    1dbc:	bc 01       	movw	r22, r24
    1dbe:	cd 01       	movw	r24, r26
    1dc0:	0e 94 a4 2b 	call	0x5748	; 0x5748 <__mulsf3>
    1dc4:	dc 01       	movw	r26, r24
    1dc6:	cb 01       	movw	r24, r22
    1dc8:	bc 01       	movw	r22, r24
    1dca:	cd 01       	movw	r24, r26
    1dcc:	28 96       	adiw	r28, 0x08	; 8
    1dce:	0f b6       	in	r0, 0x3f	; 63
    1dd0:	f8 94       	cli
    1dd2:	de bf       	out	0x3e, r29	; 62
    1dd4:	0f be       	out	0x3f, r0	; 63
    1dd6:	cd bf       	out	0x3d, r28	; 61
    1dd8:	df 91       	pop	r29
    1dda:	cf 91       	pop	r28
    1ddc:	08 95       	ret

00001dde <appt_init>:
    1dde:	cf 93       	push	r28
    1de0:	df 93       	push	r29
    1de2:	1f 92       	push	r1
    1de4:	cd b7       	in	r28, 0x3d	; 61
    1de6:	de b7       	in	r29, 0x3e	; 62
    1de8:	10 92 c9 01 	sts	0x01C9, r1	; 0x8001c9 <appt_cycles>
    1dec:	10 92 ca 01 	sts	0x01CA, r1	; 0x8001ca <appt_cycles+0x1>
    1df0:	10 92 cb 01 	sts	0x01CB, r1	; 0x8001cb <appt_cycles+0x2>
    1df4:	10 92 cc 01 	sts	0x01CC, r1	; 0x8001cc <appt_cycles+0x3>
    1df8:	10 92 cd 01 	sts	0x01CD, r1	; 0x8001cd <appt_cycles+0x4>
    1dfc:	10 92 ce 01 	sts	0x01CE, r1	; 0x8001ce <appt_cycles+0x5>
    1e00:	10 92 cf 01 	sts	0x01CF, r1	; 0x8001cf <appt_cycles+0x6>
    1e04:	10 92 d0 01 	sts	0x01D0, r1	; 0x8001d0 <appt_cycles+0x7>
    1e08:	10 92 c1 01 	sts	0x01C1, r1	; 0x8001c1 <appt_cycles_old>
    1e0c:	10 92 c2 01 	sts	0x01C2, r1	; 0x8001c2 <appt_cycles_old+0x1>
    1e10:	10 92 c3 01 	sts	0x01C3, r1	; 0x8001c3 <appt_cycles_old+0x2>
    1e14:	10 92 c4 01 	sts	0x01C4, r1	; 0x8001c4 <appt_cycles_old+0x3>
    1e18:	10 92 c5 01 	sts	0x01C5, r1	; 0x8001c5 <appt_cycles_old+0x4>
    1e1c:	10 92 c6 01 	sts	0x01C6, r1	; 0x8001c6 <appt_cycles_old+0x5>
    1e20:	10 92 c7 01 	sts	0x01C7, r1	; 0x8001c7 <appt_cycles_old+0x6>
    1e24:	10 92 c8 01 	sts	0x01C8, r1	; 0x8001c8 <appt_cycles_old+0x7>
    1e28:	19 82       	std	Y+1, r1	; 0x01
    1e2a:	53 c0       	rjmp	.+166    	; 0x1ed2 <appt_init+0xf4>
    1e2c:	89 81       	ldd	r24, Y+1	; 0x01
    1e2e:	28 2f       	mov	r18, r24
    1e30:	30 e0       	ldi	r19, 0x00	; 0
    1e32:	c9 01       	movw	r24, r18
    1e34:	88 0f       	add	r24, r24
    1e36:	99 1f       	adc	r25, r25
    1e38:	ac 01       	movw	r20, r24
    1e3a:	44 0f       	add	r20, r20
    1e3c:	55 1f       	adc	r21, r21
    1e3e:	44 0f       	add	r20, r20
    1e40:	55 1f       	adc	r21, r21
    1e42:	44 0f       	add	r20, r20
    1e44:	55 1f       	adc	r21, r21
    1e46:	84 0f       	add	r24, r20
    1e48:	95 1f       	adc	r25, r21
    1e4a:	87 58       	subi	r24, 0x87	; 135
    1e4c:	9e 4f       	sbci	r25, 0xFE	; 254
    1e4e:	fc 01       	movw	r30, r24
    1e50:	10 82       	st	Z, r1
    1e52:	fc 01       	movw	r30, r24
    1e54:	11 82       	std	Z+1, r1	; 0x01
    1e56:	fc 01       	movw	r30, r24
    1e58:	12 82       	std	Z+2, r1	; 0x02
    1e5a:	fc 01       	movw	r30, r24
    1e5c:	13 82       	std	Z+3, r1	; 0x03
    1e5e:	fc 01       	movw	r30, r24
    1e60:	14 82       	std	Z+4, r1	; 0x04
    1e62:	fc 01       	movw	r30, r24
    1e64:	15 82       	std	Z+5, r1	; 0x05
    1e66:	fc 01       	movw	r30, r24
    1e68:	16 82       	std	Z+6, r1	; 0x06
    1e6a:	fc 01       	movw	r30, r24
    1e6c:	17 82       	std	Z+7, r1	; 0x07
    1e6e:	c9 01       	movw	r24, r18
    1e70:	88 0f       	add	r24, r24
    1e72:	99 1f       	adc	r25, r25
    1e74:	ac 01       	movw	r20, r24
    1e76:	44 0f       	add	r20, r20
    1e78:	55 1f       	adc	r21, r21
    1e7a:	44 0f       	add	r20, r20
    1e7c:	55 1f       	adc	r21, r21
    1e7e:	44 0f       	add	r20, r20
    1e80:	55 1f       	adc	r21, r21
    1e82:	84 0f       	add	r24, r20
    1e84:	95 1f       	adc	r25, r21
    1e86:	8f 57       	subi	r24, 0x7F	; 127
    1e88:	9e 4f       	sbci	r25, 0xFE	; 254
    1e8a:	fc 01       	movw	r30, r24
    1e8c:	10 82       	st	Z, r1
    1e8e:	fc 01       	movw	r30, r24
    1e90:	11 82       	std	Z+1, r1	; 0x01
    1e92:	fc 01       	movw	r30, r24
    1e94:	12 82       	std	Z+2, r1	; 0x02
    1e96:	fc 01       	movw	r30, r24
    1e98:	13 82       	std	Z+3, r1	; 0x03
    1e9a:	fc 01       	movw	r30, r24
    1e9c:	14 82       	std	Z+4, r1	; 0x04
    1e9e:	fc 01       	movw	r30, r24
    1ea0:	15 82       	std	Z+5, r1	; 0x05
    1ea2:	fc 01       	movw	r30, r24
    1ea4:	16 82       	std	Z+6, r1	; 0x06
    1ea6:	fc 01       	movw	r30, r24
    1ea8:	17 82       	std	Z+7, r1	; 0x07
    1eaa:	c9 01       	movw	r24, r18
    1eac:	88 0f       	add	r24, r24
    1eae:	99 1f       	adc	r25, r25
    1eb0:	9c 01       	movw	r18, r24
    1eb2:	22 0f       	add	r18, r18
    1eb4:	33 1f       	adc	r19, r19
    1eb6:	22 0f       	add	r18, r18
    1eb8:	33 1f       	adc	r19, r19
    1eba:	22 0f       	add	r18, r18
    1ebc:	33 1f       	adc	r19, r19
    1ebe:	82 0f       	add	r24, r18
    1ec0:	93 1f       	adc	r25, r19
    1ec2:	87 57       	subi	r24, 0x77	; 119
    1ec4:	9e 4f       	sbci	r25, 0xFE	; 254
    1ec6:	fc 01       	movw	r30, r24
    1ec8:	11 82       	std	Z+1, r1	; 0x01
    1eca:	10 82       	st	Z, r1
    1ecc:	89 81       	ldd	r24, Y+1	; 0x01
    1ece:	8f 5f       	subi	r24, 0xFF	; 255
    1ed0:	89 83       	std	Y+1, r24	; 0x01
    1ed2:	89 81       	ldd	r24, Y+1	; 0x01
    1ed4:	84 30       	cpi	r24, 0x04	; 4
    1ed6:	08 f4       	brcc	.+2      	; 0x1eda <appt_init+0xfc>
    1ed8:	a9 cf       	rjmp	.-174    	; 0x1e2c <appt_init+0x4e>
    1eda:	8e e6       	ldi	r24, 0x6E	; 110
    1edc:	90 e0       	ldi	r25, 0x00	; 0
    1ede:	2e e6       	ldi	r18, 0x6E	; 110
    1ee0:	30 e0       	ldi	r19, 0x00	; 0
    1ee2:	f9 01       	movw	r30, r18
    1ee4:	20 81       	ld	r18, Z
    1ee6:	2c 7f       	andi	r18, 0xFC	; 252
    1ee8:	fc 01       	movw	r30, r24
    1eea:	20 83       	st	Z, r18
    1eec:	85 e4       	ldi	r24, 0x45	; 69
    1eee:	90 e0       	ldi	r25, 0x00	; 0
    1ef0:	25 e4       	ldi	r18, 0x45	; 69
    1ef2:	30 e0       	ldi	r19, 0x00	; 0
    1ef4:	f9 01       	movw	r30, r18
    1ef6:	20 81       	ld	r18, Z
    1ef8:	28 7f       	andi	r18, 0xF8	; 248
    1efa:	fc 01       	movw	r30, r24
    1efc:	20 83       	st	Z, r18
    1efe:	84 e4       	ldi	r24, 0x44	; 68
    1f00:	90 e0       	ldi	r25, 0x00	; 0
    1f02:	24 e4       	ldi	r18, 0x44	; 68
    1f04:	30 e0       	ldi	r19, 0x00	; 0
    1f06:	f9 01       	movw	r30, r18
    1f08:	20 81       	ld	r18, Z
    1f0a:	22 60       	ori	r18, 0x02	; 2
    1f0c:	fc 01       	movw	r30, r24
    1f0e:	20 83       	st	Z, r18
    1f10:	87 e4       	ldi	r24, 0x47	; 71
    1f12:	90 e0       	ldi	r25, 0x00	; 0
    1f14:	22 e6       	ldi	r18, 0x62	; 98
    1f16:	fc 01       	movw	r30, r24
    1f18:	20 83       	st	Z, r18
    1f1a:	8e e6       	ldi	r24, 0x6E	; 110
    1f1c:	90 e0       	ldi	r25, 0x00	; 0
    1f1e:	2e e6       	ldi	r18, 0x6E	; 110
    1f20:	30 e0       	ldi	r19, 0x00	; 0
    1f22:	f9 01       	movw	r30, r18
    1f24:	20 81       	ld	r18, Z
    1f26:	22 60       	ori	r18, 0x02	; 2
    1f28:	fc 01       	movw	r30, r24
    1f2a:	20 83       	st	Z, r18
    1f2c:	78 94       	sei
    1f2e:	00 00       	nop
    1f30:	0f 90       	pop	r0
    1f32:	df 91       	pop	r29
    1f34:	cf 91       	pop	r28
    1f36:	08 95       	ret

00001f38 <appt_shutdown>:
    1f38:	cf 93       	push	r28
    1f3a:	df 93       	push	r29
    1f3c:	1f 92       	push	r1
    1f3e:	cd b7       	in	r28, 0x3d	; 61
    1f40:	de b7       	in	r29, 0x3e	; 62
    1f42:	0e 94 70 10 	call	0x20e0	; 0x20e0 <appt_stop>
    1f46:	8e e6       	ldi	r24, 0x6E	; 110
    1f48:	90 e0       	ldi	r25, 0x00	; 0
    1f4a:	2e e6       	ldi	r18, 0x6E	; 110
    1f4c:	30 e0       	ldi	r19, 0x00	; 0
    1f4e:	f9 01       	movw	r30, r18
    1f50:	20 81       	ld	r18, Z
    1f52:	2d 7f       	andi	r18, 0xFD	; 253
    1f54:	fc 01       	movw	r30, r24
    1f56:	20 83       	st	Z, r18
    1f58:	84 e4       	ldi	r24, 0x44	; 68
    1f5a:	90 e0       	ldi	r25, 0x00	; 0
    1f5c:	24 e4       	ldi	r18, 0x44	; 68
    1f5e:	30 e0       	ldi	r19, 0x00	; 0
    1f60:	f9 01       	movw	r30, r18
    1f62:	20 81       	ld	r18, Z
    1f64:	2d 7b       	andi	r18, 0xBD	; 189
    1f66:	fc 01       	movw	r30, r24
    1f68:	20 83       	st	Z, r18
    1f6a:	86 e4       	ldi	r24, 0x46	; 70
    1f6c:	90 e0       	ldi	r25, 0x00	; 0
    1f6e:	fc 01       	movw	r30, r24
    1f70:	10 82       	st	Z, r1
    1f72:	87 e4       	ldi	r24, 0x47	; 71
    1f74:	90 e0       	ldi	r25, 0x00	; 0
    1f76:	fc 01       	movw	r30, r24
    1f78:	10 82       	st	Z, r1
    1f7a:	10 92 c9 01 	sts	0x01C9, r1	; 0x8001c9 <appt_cycles>
    1f7e:	10 92 ca 01 	sts	0x01CA, r1	; 0x8001ca <appt_cycles+0x1>
    1f82:	10 92 cb 01 	sts	0x01CB, r1	; 0x8001cb <appt_cycles+0x2>
    1f86:	10 92 cc 01 	sts	0x01CC, r1	; 0x8001cc <appt_cycles+0x3>
    1f8a:	10 92 cd 01 	sts	0x01CD, r1	; 0x8001cd <appt_cycles+0x4>
    1f8e:	10 92 ce 01 	sts	0x01CE, r1	; 0x8001ce <appt_cycles+0x5>
    1f92:	10 92 cf 01 	sts	0x01CF, r1	; 0x8001cf <appt_cycles+0x6>
    1f96:	10 92 d0 01 	sts	0x01D0, r1	; 0x8001d0 <appt_cycles+0x7>
    1f9a:	10 92 c1 01 	sts	0x01C1, r1	; 0x8001c1 <appt_cycles_old>
    1f9e:	10 92 c2 01 	sts	0x01C2, r1	; 0x8001c2 <appt_cycles_old+0x1>
    1fa2:	10 92 c3 01 	sts	0x01C3, r1	; 0x8001c3 <appt_cycles_old+0x2>
    1fa6:	10 92 c4 01 	sts	0x01C4, r1	; 0x8001c4 <appt_cycles_old+0x3>
    1faa:	10 92 c5 01 	sts	0x01C5, r1	; 0x8001c5 <appt_cycles_old+0x4>
    1fae:	10 92 c6 01 	sts	0x01C6, r1	; 0x8001c6 <appt_cycles_old+0x5>
    1fb2:	10 92 c7 01 	sts	0x01C7, r1	; 0x8001c7 <appt_cycles_old+0x6>
    1fb6:	10 92 c8 01 	sts	0x01C8, r1	; 0x8001c8 <appt_cycles_old+0x7>
    1fba:	19 82       	std	Y+1, r1	; 0x01
    1fbc:	53 c0       	rjmp	.+166    	; 0x2064 <appt_shutdown+0x12c>
    1fbe:	89 81       	ldd	r24, Y+1	; 0x01
    1fc0:	28 2f       	mov	r18, r24
    1fc2:	30 e0       	ldi	r19, 0x00	; 0
    1fc4:	c9 01       	movw	r24, r18
    1fc6:	88 0f       	add	r24, r24
    1fc8:	99 1f       	adc	r25, r25
    1fca:	ac 01       	movw	r20, r24
    1fcc:	44 0f       	add	r20, r20
    1fce:	55 1f       	adc	r21, r21
    1fd0:	44 0f       	add	r20, r20
    1fd2:	55 1f       	adc	r21, r21
    1fd4:	44 0f       	add	r20, r20
    1fd6:	55 1f       	adc	r21, r21
    1fd8:	84 0f       	add	r24, r20
    1fda:	95 1f       	adc	r25, r21
    1fdc:	87 58       	subi	r24, 0x87	; 135
    1fde:	9e 4f       	sbci	r25, 0xFE	; 254
    1fe0:	fc 01       	movw	r30, r24
    1fe2:	10 82       	st	Z, r1
    1fe4:	fc 01       	movw	r30, r24
    1fe6:	11 82       	std	Z+1, r1	; 0x01
    1fe8:	fc 01       	movw	r30, r24
    1fea:	12 82       	std	Z+2, r1	; 0x02
    1fec:	fc 01       	movw	r30, r24
    1fee:	13 82       	std	Z+3, r1	; 0x03
    1ff0:	fc 01       	movw	r30, r24
    1ff2:	14 82       	std	Z+4, r1	; 0x04
    1ff4:	fc 01       	movw	r30, r24
    1ff6:	15 82       	std	Z+5, r1	; 0x05
    1ff8:	fc 01       	movw	r30, r24
    1ffa:	16 82       	std	Z+6, r1	; 0x06
    1ffc:	fc 01       	movw	r30, r24
    1ffe:	17 82       	std	Z+7, r1	; 0x07
    2000:	c9 01       	movw	r24, r18
    2002:	88 0f       	add	r24, r24
    2004:	99 1f       	adc	r25, r25
    2006:	ac 01       	movw	r20, r24
    2008:	44 0f       	add	r20, r20
    200a:	55 1f       	adc	r21, r21
    200c:	44 0f       	add	r20, r20
    200e:	55 1f       	adc	r21, r21
    2010:	44 0f       	add	r20, r20
    2012:	55 1f       	adc	r21, r21
    2014:	84 0f       	add	r24, r20
    2016:	95 1f       	adc	r25, r21
    2018:	8f 57       	subi	r24, 0x7F	; 127
    201a:	9e 4f       	sbci	r25, 0xFE	; 254
    201c:	fc 01       	movw	r30, r24
    201e:	10 82       	st	Z, r1
    2020:	fc 01       	movw	r30, r24
    2022:	11 82       	std	Z+1, r1	; 0x01
    2024:	fc 01       	movw	r30, r24
    2026:	12 82       	std	Z+2, r1	; 0x02
    2028:	fc 01       	movw	r30, r24
    202a:	13 82       	std	Z+3, r1	; 0x03
    202c:	fc 01       	movw	r30, r24
    202e:	14 82       	std	Z+4, r1	; 0x04
    2030:	fc 01       	movw	r30, r24
    2032:	15 82       	std	Z+5, r1	; 0x05
    2034:	fc 01       	movw	r30, r24
    2036:	16 82       	std	Z+6, r1	; 0x06
    2038:	fc 01       	movw	r30, r24
    203a:	17 82       	std	Z+7, r1	; 0x07
    203c:	c9 01       	movw	r24, r18
    203e:	88 0f       	add	r24, r24
    2040:	99 1f       	adc	r25, r25
    2042:	9c 01       	movw	r18, r24
    2044:	22 0f       	add	r18, r18
    2046:	33 1f       	adc	r19, r19
    2048:	22 0f       	add	r18, r18
    204a:	33 1f       	adc	r19, r19
    204c:	22 0f       	add	r18, r18
    204e:	33 1f       	adc	r19, r19
    2050:	82 0f       	add	r24, r18
    2052:	93 1f       	adc	r25, r19
    2054:	87 57       	subi	r24, 0x77	; 119
    2056:	9e 4f       	sbci	r25, 0xFE	; 254
    2058:	fc 01       	movw	r30, r24
    205a:	11 82       	std	Z+1, r1	; 0x01
    205c:	10 82       	st	Z, r1
    205e:	89 81       	ldd	r24, Y+1	; 0x01
    2060:	8f 5f       	subi	r24, 0xFF	; 255
    2062:	89 83       	std	Y+1, r24	; 0x01
    2064:	89 81       	ldd	r24, Y+1	; 0x01
    2066:	84 30       	cpi	r24, 0x04	; 4
    2068:	08 f4       	brcc	.+2      	; 0x206c <appt_shutdown+0x134>
    206a:	a9 cf       	rjmp	.-174    	; 0x1fbe <appt_shutdown+0x86>
    206c:	00 00       	nop
    206e:	0f 90       	pop	r0
    2070:	df 91       	pop	r29
    2072:	cf 91       	pop	r28
    2074:	08 95       	ret

00002076 <appt_start>:
    2076:	cf 93       	push	r28
    2078:	df 93       	push	r29
    207a:	cd b7       	in	r28, 0x3d	; 61
    207c:	de b7       	in	r29, 0x3e	; 62
    207e:	10 92 c9 01 	sts	0x01C9, r1	; 0x8001c9 <appt_cycles>
    2082:	10 92 ca 01 	sts	0x01CA, r1	; 0x8001ca <appt_cycles+0x1>
    2086:	10 92 cb 01 	sts	0x01CB, r1	; 0x8001cb <appt_cycles+0x2>
    208a:	10 92 cc 01 	sts	0x01CC, r1	; 0x8001cc <appt_cycles+0x3>
    208e:	10 92 cd 01 	sts	0x01CD, r1	; 0x8001cd <appt_cycles+0x4>
    2092:	10 92 ce 01 	sts	0x01CE, r1	; 0x8001ce <appt_cycles+0x5>
    2096:	10 92 cf 01 	sts	0x01CF, r1	; 0x8001cf <appt_cycles+0x6>
    209a:	10 92 d0 01 	sts	0x01D0, r1	; 0x8001d0 <appt_cycles+0x7>
    209e:	10 92 c1 01 	sts	0x01C1, r1	; 0x8001c1 <appt_cycles_old>
    20a2:	10 92 c2 01 	sts	0x01C2, r1	; 0x8001c2 <appt_cycles_old+0x1>
    20a6:	10 92 c3 01 	sts	0x01C3, r1	; 0x8001c3 <appt_cycles_old+0x2>
    20aa:	10 92 c4 01 	sts	0x01C4, r1	; 0x8001c4 <appt_cycles_old+0x3>
    20ae:	10 92 c5 01 	sts	0x01C5, r1	; 0x8001c5 <appt_cycles_old+0x4>
    20b2:	10 92 c6 01 	sts	0x01C6, r1	; 0x8001c6 <appt_cycles_old+0x5>
    20b6:	10 92 c7 01 	sts	0x01C7, r1	; 0x8001c7 <appt_cycles_old+0x6>
    20ba:	10 92 c8 01 	sts	0x01C8, r1	; 0x8001c8 <appt_cycles_old+0x7>
    20be:	86 e4       	ldi	r24, 0x46	; 70
    20c0:	90 e0       	ldi	r25, 0x00	; 0
    20c2:	fc 01       	movw	r30, r24
    20c4:	10 82       	st	Z, r1
    20c6:	85 e4       	ldi	r24, 0x45	; 69
    20c8:	90 e0       	ldi	r25, 0x00	; 0
    20ca:	25 e4       	ldi	r18, 0x45	; 69
    20cc:	30 e0       	ldi	r19, 0x00	; 0
    20ce:	f9 01       	movw	r30, r18
    20d0:	20 81       	ld	r18, Z
    20d2:	22 60       	ori	r18, 0x02	; 2
    20d4:	fc 01       	movw	r30, r24
    20d6:	20 83       	st	Z, r18
    20d8:	00 00       	nop
    20da:	df 91       	pop	r29
    20dc:	cf 91       	pop	r28
    20de:	08 95       	ret

000020e0 <appt_stop>:
    20e0:	cf 93       	push	r28
    20e2:	df 93       	push	r29
    20e4:	cd b7       	in	r28, 0x3d	; 61
    20e6:	de b7       	in	r29, 0x3e	; 62
    20e8:	85 e4       	ldi	r24, 0x45	; 69
    20ea:	90 e0       	ldi	r25, 0x00	; 0
    20ec:	25 e4       	ldi	r18, 0x45	; 69
    20ee:	30 e0       	ldi	r19, 0x00	; 0
    20f0:	f9 01       	movw	r30, r18
    20f2:	20 81       	ld	r18, Z
    20f4:	28 7f       	andi	r18, 0xF8	; 248
    20f6:	fc 01       	movw	r30, r24
    20f8:	20 83       	st	Z, r18
    20fa:	00 00       	nop
    20fc:	df 91       	pop	r29
    20fe:	cf 91       	pop	r28
    2100:	08 95       	ret

00002102 <appt_update>:
    2102:	2f 92       	push	r2
    2104:	3f 92       	push	r3
    2106:	4f 92       	push	r4
    2108:	5f 92       	push	r5
    210a:	6f 92       	push	r6
    210c:	7f 92       	push	r7
    210e:	8f 92       	push	r8
    2110:	9f 92       	push	r9
    2112:	af 92       	push	r10
    2114:	bf 92       	push	r11
    2116:	cf 92       	push	r12
    2118:	df 92       	push	r13
    211a:	ef 92       	push	r14
    211c:	ff 92       	push	r15
    211e:	0f 93       	push	r16
    2120:	1f 93       	push	r17
    2122:	cf 93       	push	r28
    2124:	df 93       	push	r29
    2126:	cd b7       	in	r28, 0x3d	; 61
    2128:	de b7       	in	r29, 0x3e	; 62
    212a:	2c 97       	sbiw	r28, 0x0c	; 12
    212c:	0f b6       	in	r0, 0x3f	; 63
    212e:	f8 94       	cli
    2130:	de bf       	out	0x3e, r29	; 62
    2132:	0f be       	out	0x3f, r0	; 63
    2134:	cd bf       	out	0x3d, r28	; 61
    2136:	8f e5       	ldi	r24, 0x5F	; 95
    2138:	90 e0       	ldi	r25, 0x00	; 0
    213a:	dc 01       	movw	r26, r24
    213c:	8c 91       	ld	r24, X
    213e:	8c 87       	std	Y+12, r24	; 0x0c
    2140:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <__iCliRetVal>
    2144:	89 87       	std	Y+9, r24	; 0x09
    2146:	5b c0       	rjmp	.+182    	; 0x21fe <appt_update+0xfc>
    2148:	a0 90 c9 01 	lds	r10, 0x01C9	; 0x8001c9 <appt_cycles>
    214c:	b0 90 ca 01 	lds	r11, 0x01CA	; 0x8001ca <appt_cycles+0x1>
    2150:	c0 90 cb 01 	lds	r12, 0x01CB	; 0x8001cb <appt_cycles+0x2>
    2154:	d0 90 cc 01 	lds	r13, 0x01CC	; 0x8001cc <appt_cycles+0x3>
    2158:	e0 90 cd 01 	lds	r14, 0x01CD	; 0x8001cd <appt_cycles+0x4>
    215c:	f0 90 ce 01 	lds	r15, 0x01CE	; 0x8001ce <appt_cycles+0x5>
    2160:	00 91 cf 01 	lds	r16, 0x01CF	; 0x8001cf <appt_cycles+0x6>
    2164:	10 91 d0 01 	lds	r17, 0x01D0	; 0x8001d0 <appt_cycles+0x7>
    2168:	20 90 c1 01 	lds	r2, 0x01C1	; 0x8001c1 <appt_cycles_old>
    216c:	30 90 c2 01 	lds	r3, 0x01C2	; 0x8001c2 <appt_cycles_old+0x1>
    2170:	40 90 c3 01 	lds	r4, 0x01C3	; 0x8001c3 <appt_cycles_old+0x2>
    2174:	50 90 c4 01 	lds	r5, 0x01C4	; 0x8001c4 <appt_cycles_old+0x3>
    2178:	60 90 c5 01 	lds	r6, 0x01C5	; 0x8001c5 <appt_cycles_old+0x4>
    217c:	70 90 c6 01 	lds	r7, 0x01C6	; 0x8001c6 <appt_cycles_old+0x5>
    2180:	80 90 c7 01 	lds	r8, 0x01C7	; 0x8001c7 <appt_cycles_old+0x6>
    2184:	90 90 c8 01 	lds	r9, 0x01C8	; 0x8001c8 <appt_cycles_old+0x7>
    2188:	2a 2d       	mov	r18, r10
    218a:	3b 2d       	mov	r19, r11
    218c:	4c 2d       	mov	r20, r12
    218e:	5d 2d       	mov	r21, r13
    2190:	6e 2d       	mov	r22, r14
    2192:	7f 2d       	mov	r23, r15
    2194:	80 2f       	mov	r24, r16
    2196:	91 2f       	mov	r25, r17
    2198:	a2 2c       	mov	r10, r2
    219a:	b3 2c       	mov	r11, r3
    219c:	c4 2c       	mov	r12, r4
    219e:	d5 2c       	mov	r13, r5
    21a0:	e6 2c       	mov	r14, r6
    21a2:	f7 2c       	mov	r15, r7
    21a4:	08 2d       	mov	r16, r8
    21a6:	19 2d       	mov	r17, r9
    21a8:	0e 94 b1 2c 	call	0x5962	; 0x5962 <__subdi3>
    21ac:	29 83       	std	Y+1, r18	; 0x01
    21ae:	3a 83       	std	Y+2, r19	; 0x02
    21b0:	4b 83       	std	Y+3, r20	; 0x03
    21b2:	5c 83       	std	Y+4, r21	; 0x04
    21b4:	6d 83       	std	Y+5, r22	; 0x05
    21b6:	7e 83       	std	Y+6, r23	; 0x06
    21b8:	8f 83       	std	Y+7, r24	; 0x07
    21ba:	98 87       	std	Y+8, r25	; 0x08
    21bc:	20 91 c9 01 	lds	r18, 0x01C9	; 0x8001c9 <appt_cycles>
    21c0:	30 91 ca 01 	lds	r19, 0x01CA	; 0x8001ca <appt_cycles+0x1>
    21c4:	40 91 cb 01 	lds	r20, 0x01CB	; 0x8001cb <appt_cycles+0x2>
    21c8:	50 91 cc 01 	lds	r21, 0x01CC	; 0x8001cc <appt_cycles+0x3>
    21cc:	60 91 cd 01 	lds	r22, 0x01CD	; 0x8001cd <appt_cycles+0x4>
    21d0:	70 91 ce 01 	lds	r23, 0x01CE	; 0x8001ce <appt_cycles+0x5>
    21d4:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <appt_cycles+0x6>
    21d8:	90 91 d0 01 	lds	r25, 0x01D0	; 0x8001d0 <appt_cycles+0x7>
    21dc:	20 93 c1 01 	sts	0x01C1, r18	; 0x8001c1 <appt_cycles_old>
    21e0:	30 93 c2 01 	sts	0x01C2, r19	; 0x8001c2 <appt_cycles_old+0x1>
    21e4:	40 93 c3 01 	sts	0x01C3, r20	; 0x8001c3 <appt_cycles_old+0x2>
    21e8:	50 93 c4 01 	sts	0x01C4, r21	; 0x8001c4 <appt_cycles_old+0x3>
    21ec:	60 93 c5 01 	sts	0x01C5, r22	; 0x8001c5 <appt_cycles_old+0x4>
    21f0:	70 93 c6 01 	sts	0x01C6, r23	; 0x8001c6 <appt_cycles_old+0x5>
    21f4:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <appt_cycles_old+0x6>
    21f8:	90 93 c8 01 	sts	0x01C8, r25	; 0x8001c8 <appt_cycles_old+0x7>
    21fc:	19 86       	std	Y+9, r1	; 0x09
    21fe:	89 85       	ldd	r24, Y+9	; 0x09
    2200:	88 23       	and	r24, r24
    2202:	09 f0       	breq	.+2      	; 0x2206 <appt_update+0x104>
    2204:	a1 cf       	rjmp	.-190    	; 0x2148 <appt_update+0x46>
    2206:	ce 01       	movw	r24, r28
    2208:	0c 96       	adiw	r24, 0x0c	; 12
    220a:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <__iRestore>
    220e:	1a 86       	std	Y+10, r1	; 0x0a
    2210:	02 c2       	rjmp	.+1028   	; 0x2616 <appt_update+0x514>
    2212:	8a 85       	ldd	r24, Y+10	; 0x0a
    2214:	88 2f       	mov	r24, r24
    2216:	90 e0       	ldi	r25, 0x00	; 0
    2218:	88 0f       	add	r24, r24
    221a:	99 1f       	adc	r25, r25
    221c:	9c 01       	movw	r18, r24
    221e:	22 0f       	add	r18, r18
    2220:	33 1f       	adc	r19, r19
    2222:	22 0f       	add	r18, r18
    2224:	33 1f       	adc	r19, r19
    2226:	22 0f       	add	r18, r18
    2228:	33 1f       	adc	r19, r19
    222a:	82 0f       	add	r24, r18
    222c:	93 1f       	adc	r25, r19
    222e:	87 57       	subi	r24, 0x77	; 119
    2230:	9e 4f       	sbci	r25, 0xFE	; 254
    2232:	fc 01       	movw	r30, r24
    2234:	80 81       	ld	r24, Z
    2236:	91 81       	ldd	r25, Z+1	; 0x01
    2238:	89 2b       	or	r24, r25
    223a:	09 f4       	brne	.+2      	; 0x223e <appt_update+0x13c>
    223c:	e9 c1       	rjmp	.+978    	; 0x2610 <appt_update+0x50e>
    223e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2240:	e8 2f       	mov	r30, r24
    2242:	f0 e0       	ldi	r31, 0x00	; 0
    2244:	8a 85       	ldd	r24, Y+10	; 0x0a
    2246:	88 2f       	mov	r24, r24
    2248:	90 e0       	ldi	r25, 0x00	; 0
    224a:	88 0f       	add	r24, r24
    224c:	99 1f       	adc	r25, r25
    224e:	9c 01       	movw	r18, r24
    2250:	22 0f       	add	r18, r18
    2252:	33 1f       	adc	r19, r19
    2254:	22 0f       	add	r18, r18
    2256:	33 1f       	adc	r19, r19
    2258:	22 0f       	add	r18, r18
    225a:	33 1f       	adc	r19, r19
    225c:	82 0f       	add	r24, r18
    225e:	93 1f       	adc	r25, r19
    2260:	8f 57       	subi	r24, 0x7F	; 127
    2262:	9e 4f       	sbci	r25, 0xFE	; 254
    2264:	dc 01       	movw	r26, r24
    2266:	ac 90       	ld	r10, X
    2268:	dc 01       	movw	r26, r24
    226a:	11 96       	adiw	r26, 0x01	; 1
    226c:	bc 90       	ld	r11, X
    226e:	dc 01       	movw	r26, r24
    2270:	12 96       	adiw	r26, 0x02	; 2
    2272:	cc 90       	ld	r12, X
    2274:	dc 01       	movw	r26, r24
    2276:	13 96       	adiw	r26, 0x03	; 3
    2278:	dc 90       	ld	r13, X
    227a:	dc 01       	movw	r26, r24
    227c:	14 96       	adiw	r26, 0x04	; 4
    227e:	ec 90       	ld	r14, X
    2280:	dc 01       	movw	r26, r24
    2282:	15 96       	adiw	r26, 0x05	; 5
    2284:	fc 90       	ld	r15, X
    2286:	dc 01       	movw	r26, r24
    2288:	16 96       	adiw	r26, 0x06	; 6
    228a:	0c 91       	ld	r16, X
    228c:	dc 01       	movw	r26, r24
    228e:	17 96       	adiw	r26, 0x07	; 7
    2290:	1c 91       	ld	r17, X
    2292:	2a 2d       	mov	r18, r10
    2294:	3b 2d       	mov	r19, r11
    2296:	4c 2d       	mov	r20, r12
    2298:	5d 2d       	mov	r21, r13
    229a:	6e 2d       	mov	r22, r14
    229c:	7f 2d       	mov	r23, r15
    229e:	80 2f       	mov	r24, r16
    22a0:	91 2f       	mov	r25, r17
    22a2:	a9 80       	ldd	r10, Y+1	; 0x01
    22a4:	ba 80       	ldd	r11, Y+2	; 0x02
    22a6:	cb 80       	ldd	r12, Y+3	; 0x03
    22a8:	dc 80       	ldd	r13, Y+4	; 0x04
    22aa:	ed 80       	ldd	r14, Y+5	; 0x05
    22ac:	fe 80       	ldd	r15, Y+6	; 0x06
    22ae:	0f 81       	ldd	r16, Y+7	; 0x07
    22b0:	18 85       	ldd	r17, Y+8	; 0x08
    22b2:	0e 94 9c 2c 	call	0x5938	; 0x5938 <__adddi3>
    22b6:	a2 2e       	mov	r10, r18
    22b8:	b3 2e       	mov	r11, r19
    22ba:	c4 2e       	mov	r12, r20
    22bc:	d5 2e       	mov	r13, r21
    22be:	e6 2e       	mov	r14, r22
    22c0:	f7 2e       	mov	r15, r23
    22c2:	08 2f       	mov	r16, r24
    22c4:	19 2f       	mov	r17, r25
    22c6:	cf 01       	movw	r24, r30
    22c8:	88 0f       	add	r24, r24
    22ca:	99 1f       	adc	r25, r25
    22cc:	9c 01       	movw	r18, r24
    22ce:	22 0f       	add	r18, r18
    22d0:	33 1f       	adc	r19, r19
    22d2:	22 0f       	add	r18, r18
    22d4:	33 1f       	adc	r19, r19
    22d6:	22 0f       	add	r18, r18
    22d8:	33 1f       	adc	r19, r19
    22da:	82 0f       	add	r24, r18
    22dc:	93 1f       	adc	r25, r19
    22de:	8f 57       	subi	r24, 0x7F	; 127
    22e0:	9e 4f       	sbci	r25, 0xFE	; 254
    22e2:	fc 01       	movw	r30, r24
    22e4:	a0 82       	st	Z, r10
    22e6:	dc 01       	movw	r26, r24
    22e8:	11 96       	adiw	r26, 0x01	; 1
    22ea:	bc 92       	st	X, r11
    22ec:	fc 01       	movw	r30, r24
    22ee:	c2 82       	std	Z+2, r12	; 0x02
    22f0:	dc 01       	movw	r26, r24
    22f2:	13 96       	adiw	r26, 0x03	; 3
    22f4:	dc 92       	st	X, r13
    22f6:	fc 01       	movw	r30, r24
    22f8:	e4 82       	std	Z+4, r14	; 0x04
    22fa:	dc 01       	movw	r26, r24
    22fc:	15 96       	adiw	r26, 0x05	; 5
    22fe:	fc 92       	st	X, r15
    2300:	fc 01       	movw	r30, r24
    2302:	06 83       	std	Z+6, r16	; 0x06
    2304:	dc 01       	movw	r26, r24
    2306:	17 96       	adiw	r26, 0x07	; 7
    2308:	1c 93       	st	X, r17
    230a:	8a 85       	ldd	r24, Y+10	; 0x0a
    230c:	88 2f       	mov	r24, r24
    230e:	90 e0       	ldi	r25, 0x00	; 0
    2310:	88 0f       	add	r24, r24
    2312:	99 1f       	adc	r25, r25
    2314:	9c 01       	movw	r18, r24
    2316:	22 0f       	add	r18, r18
    2318:	33 1f       	adc	r19, r19
    231a:	22 0f       	add	r18, r18
    231c:	33 1f       	adc	r19, r19
    231e:	22 0f       	add	r18, r18
    2320:	33 1f       	adc	r19, r19
    2322:	82 0f       	add	r24, r18
    2324:	93 1f       	adc	r25, r19
    2326:	8f 57       	subi	r24, 0x7F	; 127
    2328:	9e 4f       	sbci	r25, 0xFE	; 254
    232a:	fc 01       	movw	r30, r24
    232c:	a0 80       	ld	r10, Z
    232e:	dc 01       	movw	r26, r24
    2330:	11 96       	adiw	r26, 0x01	; 1
    2332:	bc 90       	ld	r11, X
    2334:	fc 01       	movw	r30, r24
    2336:	c2 80       	ldd	r12, Z+2	; 0x02
    2338:	dc 01       	movw	r26, r24
    233a:	13 96       	adiw	r26, 0x03	; 3
    233c:	dc 90       	ld	r13, X
    233e:	fc 01       	movw	r30, r24
    2340:	e4 80       	ldd	r14, Z+4	; 0x04
    2342:	dc 01       	movw	r26, r24
    2344:	15 96       	adiw	r26, 0x05	; 5
    2346:	fc 90       	ld	r15, X
    2348:	fc 01       	movw	r30, r24
    234a:	06 81       	ldd	r16, Z+6	; 0x06
    234c:	dc 01       	movw	r26, r24
    234e:	17 96       	adiw	r26, 0x07	; 7
    2350:	1c 91       	ld	r17, X
    2352:	8a 85       	ldd	r24, Y+10	; 0x0a
    2354:	88 2f       	mov	r24, r24
    2356:	90 e0       	ldi	r25, 0x00	; 0
    2358:	88 0f       	add	r24, r24
    235a:	99 1f       	adc	r25, r25
    235c:	9c 01       	movw	r18, r24
    235e:	22 0f       	add	r18, r18
    2360:	33 1f       	adc	r19, r19
    2362:	22 0f       	add	r18, r18
    2364:	33 1f       	adc	r19, r19
    2366:	22 0f       	add	r18, r18
    2368:	33 1f       	adc	r19, r19
    236a:	82 0f       	add	r24, r18
    236c:	93 1f       	adc	r25, r19
    236e:	87 58       	subi	r24, 0x87	; 135
    2370:	9e 4f       	sbci	r25, 0xFE	; 254
    2372:	fc 01       	movw	r30, r24
    2374:	20 80       	ld	r2, Z
    2376:	dc 01       	movw	r26, r24
    2378:	11 96       	adiw	r26, 0x01	; 1
    237a:	3c 90       	ld	r3, X
    237c:	fc 01       	movw	r30, r24
    237e:	42 80       	ldd	r4, Z+2	; 0x02
    2380:	dc 01       	movw	r26, r24
    2382:	13 96       	adiw	r26, 0x03	; 3
    2384:	5c 90       	ld	r5, X
    2386:	fc 01       	movw	r30, r24
    2388:	64 80       	ldd	r6, Z+4	; 0x04
    238a:	dc 01       	movw	r26, r24
    238c:	15 96       	adiw	r26, 0x05	; 5
    238e:	7c 90       	ld	r7, X
    2390:	fc 01       	movw	r30, r24
    2392:	86 80       	ldd	r8, Z+6	; 0x06
    2394:	dc 01       	movw	r26, r24
    2396:	17 96       	adiw	r26, 0x07	; 7
    2398:	9c 90       	ld	r9, X
    239a:	2a 2d       	mov	r18, r10
    239c:	3b 2d       	mov	r19, r11
    239e:	4c 2d       	mov	r20, r12
    23a0:	5d 2d       	mov	r21, r13
    23a2:	6e 2d       	mov	r22, r14
    23a4:	7f 2d       	mov	r23, r15
    23a6:	80 2f       	mov	r24, r16
    23a8:	91 2f       	mov	r25, r17
    23aa:	a2 2c       	mov	r10, r2
    23ac:	b3 2c       	mov	r11, r3
    23ae:	c4 2c       	mov	r12, r4
    23b0:	d5 2c       	mov	r13, r5
    23b2:	e6 2c       	mov	r14, r6
    23b4:	f7 2c       	mov	r15, r7
    23b6:	08 2d       	mov	r16, r8
    23b8:	19 2d       	mov	r17, r9
    23ba:	0e 94 ba 2c 	call	0x5974	; 0x5974 <__cmpdi2>
    23be:	08 f4       	brcc	.+2      	; 0x23c2 <appt_update+0x2c0>
    23c0:	27 c1       	rjmp	.+590    	; 0x2610 <appt_update+0x50e>
    23c2:	8a 85       	ldd	r24, Y+10	; 0x0a
    23c4:	e8 2f       	mov	r30, r24
    23c6:	f0 e0       	ldi	r31, 0x00	; 0
    23c8:	8a 85       	ldd	r24, Y+10	; 0x0a
    23ca:	88 2f       	mov	r24, r24
    23cc:	90 e0       	ldi	r25, 0x00	; 0
    23ce:	88 0f       	add	r24, r24
    23d0:	99 1f       	adc	r25, r25
    23d2:	9c 01       	movw	r18, r24
    23d4:	22 0f       	add	r18, r18
    23d6:	33 1f       	adc	r19, r19
    23d8:	22 0f       	add	r18, r18
    23da:	33 1f       	adc	r19, r19
    23dc:	22 0f       	add	r18, r18
    23de:	33 1f       	adc	r19, r19
    23e0:	82 0f       	add	r24, r18
    23e2:	93 1f       	adc	r25, r19
    23e4:	8f 57       	subi	r24, 0x7F	; 127
    23e6:	9e 4f       	sbci	r25, 0xFE	; 254
    23e8:	dc 01       	movw	r26, r24
    23ea:	ac 90       	ld	r10, X
    23ec:	dc 01       	movw	r26, r24
    23ee:	11 96       	adiw	r26, 0x01	; 1
    23f0:	bc 90       	ld	r11, X
    23f2:	dc 01       	movw	r26, r24
    23f4:	12 96       	adiw	r26, 0x02	; 2
    23f6:	cc 90       	ld	r12, X
    23f8:	dc 01       	movw	r26, r24
    23fa:	13 96       	adiw	r26, 0x03	; 3
    23fc:	dc 90       	ld	r13, X
    23fe:	dc 01       	movw	r26, r24
    2400:	14 96       	adiw	r26, 0x04	; 4
    2402:	ec 90       	ld	r14, X
    2404:	dc 01       	movw	r26, r24
    2406:	15 96       	adiw	r26, 0x05	; 5
    2408:	fc 90       	ld	r15, X
    240a:	dc 01       	movw	r26, r24
    240c:	16 96       	adiw	r26, 0x06	; 6
    240e:	0c 91       	ld	r16, X
    2410:	dc 01       	movw	r26, r24
    2412:	17 96       	adiw	r26, 0x07	; 7
    2414:	1c 91       	ld	r17, X
    2416:	8a 85       	ldd	r24, Y+10	; 0x0a
    2418:	88 2f       	mov	r24, r24
    241a:	90 e0       	ldi	r25, 0x00	; 0
    241c:	88 0f       	add	r24, r24
    241e:	99 1f       	adc	r25, r25
    2420:	9c 01       	movw	r18, r24
    2422:	22 0f       	add	r18, r18
    2424:	33 1f       	adc	r19, r19
    2426:	22 0f       	add	r18, r18
    2428:	33 1f       	adc	r19, r19
    242a:	22 0f       	add	r18, r18
    242c:	33 1f       	adc	r19, r19
    242e:	82 0f       	add	r24, r18
    2430:	93 1f       	adc	r25, r19
    2432:	87 58       	subi	r24, 0x87	; 135
    2434:	9e 4f       	sbci	r25, 0xFE	; 254
    2436:	dc 01       	movw	r26, r24
    2438:	2c 90       	ld	r2, X
    243a:	dc 01       	movw	r26, r24
    243c:	11 96       	adiw	r26, 0x01	; 1
    243e:	3c 90       	ld	r3, X
    2440:	dc 01       	movw	r26, r24
    2442:	12 96       	adiw	r26, 0x02	; 2
    2444:	4c 90       	ld	r4, X
    2446:	dc 01       	movw	r26, r24
    2448:	13 96       	adiw	r26, 0x03	; 3
    244a:	5c 90       	ld	r5, X
    244c:	dc 01       	movw	r26, r24
    244e:	14 96       	adiw	r26, 0x04	; 4
    2450:	6c 90       	ld	r6, X
    2452:	dc 01       	movw	r26, r24
    2454:	15 96       	adiw	r26, 0x05	; 5
    2456:	7c 90       	ld	r7, X
    2458:	dc 01       	movw	r26, r24
    245a:	16 96       	adiw	r26, 0x06	; 6
    245c:	8c 90       	ld	r8, X
    245e:	dc 01       	movw	r26, r24
    2460:	17 96       	adiw	r26, 0x07	; 7
    2462:	9c 90       	ld	r9, X
    2464:	2a 2d       	mov	r18, r10
    2466:	3b 2d       	mov	r19, r11
    2468:	4c 2d       	mov	r20, r12
    246a:	5d 2d       	mov	r21, r13
    246c:	6e 2d       	mov	r22, r14
    246e:	7f 2d       	mov	r23, r15
    2470:	80 2f       	mov	r24, r16
    2472:	91 2f       	mov	r25, r17
    2474:	a2 2c       	mov	r10, r2
    2476:	b3 2c       	mov	r11, r3
    2478:	c4 2c       	mov	r12, r4
    247a:	d5 2c       	mov	r13, r5
    247c:	e6 2c       	mov	r14, r6
    247e:	f7 2c       	mov	r15, r7
    2480:	08 2d       	mov	r16, r8
    2482:	19 2d       	mov	r17, r9
    2484:	0e 94 b1 2c 	call	0x5962	; 0x5962 <__subdi3>
    2488:	a2 2e       	mov	r10, r18
    248a:	b3 2e       	mov	r11, r19
    248c:	c4 2e       	mov	r12, r20
    248e:	d5 2e       	mov	r13, r21
    2490:	e6 2e       	mov	r14, r22
    2492:	f7 2e       	mov	r15, r23
    2494:	08 2f       	mov	r16, r24
    2496:	19 2f       	mov	r17, r25
    2498:	cf 01       	movw	r24, r30
    249a:	88 0f       	add	r24, r24
    249c:	99 1f       	adc	r25, r25
    249e:	9c 01       	movw	r18, r24
    24a0:	22 0f       	add	r18, r18
    24a2:	33 1f       	adc	r19, r19
    24a4:	22 0f       	add	r18, r18
    24a6:	33 1f       	adc	r19, r19
    24a8:	22 0f       	add	r18, r18
    24aa:	33 1f       	adc	r19, r19
    24ac:	82 0f       	add	r24, r18
    24ae:	93 1f       	adc	r25, r19
    24b0:	8f 57       	subi	r24, 0x7F	; 127
    24b2:	9e 4f       	sbci	r25, 0xFE	; 254
    24b4:	fc 01       	movw	r30, r24
    24b6:	a0 82       	st	Z, r10
    24b8:	dc 01       	movw	r26, r24
    24ba:	11 96       	adiw	r26, 0x01	; 1
    24bc:	bc 92       	st	X, r11
    24be:	fc 01       	movw	r30, r24
    24c0:	c2 82       	std	Z+2, r12	; 0x02
    24c2:	dc 01       	movw	r26, r24
    24c4:	13 96       	adiw	r26, 0x03	; 3
    24c6:	dc 92       	st	X, r13
    24c8:	fc 01       	movw	r30, r24
    24ca:	e4 82       	std	Z+4, r14	; 0x04
    24cc:	dc 01       	movw	r26, r24
    24ce:	15 96       	adiw	r26, 0x05	; 5
    24d0:	fc 92       	st	X, r15
    24d2:	fc 01       	movw	r30, r24
    24d4:	06 83       	std	Z+6, r16	; 0x06
    24d6:	dc 01       	movw	r26, r24
    24d8:	17 96       	adiw	r26, 0x07	; 7
    24da:	1c 93       	st	X, r17
    24dc:	8a 85       	ldd	r24, Y+10	; 0x0a
    24de:	88 2f       	mov	r24, r24
    24e0:	90 e0       	ldi	r25, 0x00	; 0
    24e2:	88 0f       	add	r24, r24
    24e4:	99 1f       	adc	r25, r25
    24e6:	9c 01       	movw	r18, r24
    24e8:	22 0f       	add	r18, r18
    24ea:	33 1f       	adc	r19, r19
    24ec:	22 0f       	add	r18, r18
    24ee:	33 1f       	adc	r19, r19
    24f0:	22 0f       	add	r18, r18
    24f2:	33 1f       	adc	r19, r19
    24f4:	82 0f       	add	r24, r18
    24f6:	93 1f       	adc	r25, r19
    24f8:	8f 57       	subi	r24, 0x7F	; 127
    24fa:	9e 4f       	sbci	r25, 0xFE	; 254
    24fc:	fc 01       	movw	r30, r24
    24fe:	a0 80       	ld	r10, Z
    2500:	dc 01       	movw	r26, r24
    2502:	11 96       	adiw	r26, 0x01	; 1
    2504:	bc 90       	ld	r11, X
    2506:	fc 01       	movw	r30, r24
    2508:	c2 80       	ldd	r12, Z+2	; 0x02
    250a:	dc 01       	movw	r26, r24
    250c:	13 96       	adiw	r26, 0x03	; 3
    250e:	dc 90       	ld	r13, X
    2510:	fc 01       	movw	r30, r24
    2512:	e4 80       	ldd	r14, Z+4	; 0x04
    2514:	dc 01       	movw	r26, r24
    2516:	15 96       	adiw	r26, 0x05	; 5
    2518:	fc 90       	ld	r15, X
    251a:	fc 01       	movw	r30, r24
    251c:	06 81       	ldd	r16, Z+6	; 0x06
    251e:	dc 01       	movw	r26, r24
    2520:	17 96       	adiw	r26, 0x07	; 7
    2522:	1c 91       	ld	r17, X
    2524:	8a 85       	ldd	r24, Y+10	; 0x0a
    2526:	88 2f       	mov	r24, r24
    2528:	90 e0       	ldi	r25, 0x00	; 0
    252a:	88 0f       	add	r24, r24
    252c:	99 1f       	adc	r25, r25
    252e:	9c 01       	movw	r18, r24
    2530:	22 0f       	add	r18, r18
    2532:	33 1f       	adc	r19, r19
    2534:	22 0f       	add	r18, r18
    2536:	33 1f       	adc	r19, r19
    2538:	22 0f       	add	r18, r18
    253a:	33 1f       	adc	r19, r19
    253c:	82 0f       	add	r24, r18
    253e:	93 1f       	adc	r25, r19
    2540:	87 58       	subi	r24, 0x87	; 135
    2542:	9e 4f       	sbci	r25, 0xFE	; 254
    2544:	fc 01       	movw	r30, r24
    2546:	20 80       	ld	r2, Z
    2548:	dc 01       	movw	r26, r24
    254a:	11 96       	adiw	r26, 0x01	; 1
    254c:	3c 90       	ld	r3, X
    254e:	fc 01       	movw	r30, r24
    2550:	42 80       	ldd	r4, Z+2	; 0x02
    2552:	dc 01       	movw	r26, r24
    2554:	13 96       	adiw	r26, 0x03	; 3
    2556:	5c 90       	ld	r5, X
    2558:	fc 01       	movw	r30, r24
    255a:	64 80       	ldd	r6, Z+4	; 0x04
    255c:	dc 01       	movw	r26, r24
    255e:	15 96       	adiw	r26, 0x05	; 5
    2560:	7c 90       	ld	r7, X
    2562:	fc 01       	movw	r30, r24
    2564:	86 80       	ldd	r8, Z+6	; 0x06
    2566:	dc 01       	movw	r26, r24
    2568:	17 96       	adiw	r26, 0x07	; 7
    256a:	9c 90       	ld	r9, X
    256c:	2a 2d       	mov	r18, r10
    256e:	3b 2d       	mov	r19, r11
    2570:	4c 2d       	mov	r20, r12
    2572:	5d 2d       	mov	r21, r13
    2574:	6e 2d       	mov	r22, r14
    2576:	7f 2d       	mov	r23, r15
    2578:	80 2f       	mov	r24, r16
    257a:	91 2f       	mov	r25, r17
    257c:	a2 2c       	mov	r10, r2
    257e:	b3 2c       	mov	r11, r3
    2580:	c4 2c       	mov	r12, r4
    2582:	d5 2c       	mov	r13, r5
    2584:	e6 2c       	mov	r14, r6
    2586:	f7 2c       	mov	r15, r7
    2588:	08 2d       	mov	r16, r8
    258a:	19 2d       	mov	r17, r9
    258c:	0e 94 ba 2c 	call	0x5974	; 0x5974 <__cmpdi2>
    2590:	20 f1       	brcs	.+72     	; 0x25da <appt_update+0x4d8>
    2592:	8a 85       	ldd	r24, Y+10	; 0x0a
    2594:	88 2f       	mov	r24, r24
    2596:	90 e0       	ldi	r25, 0x00	; 0
    2598:	88 0f       	add	r24, r24
    259a:	99 1f       	adc	r25, r25
    259c:	9c 01       	movw	r18, r24
    259e:	22 0f       	add	r18, r18
    25a0:	33 1f       	adc	r19, r19
    25a2:	22 0f       	add	r18, r18
    25a4:	33 1f       	adc	r19, r19
    25a6:	22 0f       	add	r18, r18
    25a8:	33 1f       	adc	r19, r19
    25aa:	82 0f       	add	r24, r18
    25ac:	93 1f       	adc	r25, r19
    25ae:	8f 57       	subi	r24, 0x7F	; 127
    25b0:	9e 4f       	sbci	r25, 0xFE	; 254
    25b2:	fc 01       	movw	r30, r24
    25b4:	10 82       	st	Z, r1
    25b6:	dc 01       	movw	r26, r24
    25b8:	11 96       	adiw	r26, 0x01	; 1
    25ba:	1c 92       	st	X, r1
    25bc:	fc 01       	movw	r30, r24
    25be:	12 82       	std	Z+2, r1	; 0x02
    25c0:	dc 01       	movw	r26, r24
    25c2:	13 96       	adiw	r26, 0x03	; 3
    25c4:	1c 92       	st	X, r1
    25c6:	fc 01       	movw	r30, r24
    25c8:	14 82       	std	Z+4, r1	; 0x04
    25ca:	dc 01       	movw	r26, r24
    25cc:	15 96       	adiw	r26, 0x05	; 5
    25ce:	1c 92       	st	X, r1
    25d0:	fc 01       	movw	r30, r24
    25d2:	16 82       	std	Z+6, r1	; 0x06
    25d4:	dc 01       	movw	r26, r24
    25d6:	17 96       	adiw	r26, 0x07	; 7
    25d8:	1c 92       	st	X, r1
    25da:	8a 85       	ldd	r24, Y+10	; 0x0a
    25dc:	88 2f       	mov	r24, r24
    25de:	90 e0       	ldi	r25, 0x00	; 0
    25e0:	88 0f       	add	r24, r24
    25e2:	99 1f       	adc	r25, r25
    25e4:	9c 01       	movw	r18, r24
    25e6:	22 0f       	add	r18, r18
    25e8:	33 1f       	adc	r19, r19
    25ea:	22 0f       	add	r18, r18
    25ec:	33 1f       	adc	r19, r19
    25ee:	22 0f       	add	r18, r18
    25f0:	33 1f       	adc	r19, r19
    25f2:	82 0f       	add	r24, r18
    25f4:	93 1f       	adc	r25, r19
    25f6:	87 57       	subi	r24, 0x77	; 119
    25f8:	9e 4f       	sbci	r25, 0xFE	; 254
    25fa:	fc 01       	movw	r30, r24
    25fc:	80 81       	ld	r24, Z
    25fe:	91 81       	ldd	r25, Z+1	; 0x01
    2600:	fc 01       	movw	r30, r24
    2602:	09 95       	icall
    2604:	8b 87       	std	Y+11, r24	; 0x0b
    2606:	8b 85       	ldd	r24, Y+11	; 0x0b
    2608:	88 23       	and	r24, r24
    260a:	11 f0       	breq	.+4      	; 0x2610 <appt_update+0x50e>
    260c:	8b 85       	ldd	r24, Y+11	; 0x0b
    260e:	08 c0       	rjmp	.+16     	; 0x2620 <appt_update+0x51e>
    2610:	8a 85       	ldd	r24, Y+10	; 0x0a
    2612:	8f 5f       	subi	r24, 0xFF	; 255
    2614:	8a 87       	std	Y+10, r24	; 0x0a
    2616:	8a 85       	ldd	r24, Y+10	; 0x0a
    2618:	84 30       	cpi	r24, 0x04	; 4
    261a:	08 f4       	brcc	.+2      	; 0x261e <appt_update+0x51c>
    261c:	fa cd       	rjmp	.-1036   	; 0x2212 <appt_update+0x110>
    261e:	80 e0       	ldi	r24, 0x00	; 0
    2620:	2c 96       	adiw	r28, 0x0c	; 12
    2622:	0f b6       	in	r0, 0x3f	; 63
    2624:	f8 94       	cli
    2626:	de bf       	out	0x3e, r29	; 62
    2628:	0f be       	out	0x3f, r0	; 63
    262a:	cd bf       	out	0x3d, r28	; 61
    262c:	df 91       	pop	r29
    262e:	cf 91       	pop	r28
    2630:	1f 91       	pop	r17
    2632:	0f 91       	pop	r16
    2634:	ff 90       	pop	r15
    2636:	ef 90       	pop	r14
    2638:	df 90       	pop	r13
    263a:	cf 90       	pop	r12
    263c:	bf 90       	pop	r11
    263e:	af 90       	pop	r10
    2640:	9f 90       	pop	r9
    2642:	8f 90       	pop	r8
    2644:	7f 90       	pop	r7
    2646:	6f 90       	pop	r6
    2648:	5f 90       	pop	r5
    264a:	4f 90       	pop	r4
    264c:	3f 90       	pop	r3
    264e:	2f 90       	pop	r2
    2650:	08 95       	ret

00002652 <appt_get_cycles_since_startup>:
    2652:	af 92       	push	r10
    2654:	bf 92       	push	r11
    2656:	cf 92       	push	r12
    2658:	df 92       	push	r13
    265a:	ef 92       	push	r14
    265c:	ff 92       	push	r15
    265e:	0f 93       	push	r16
    2660:	1f 93       	push	r17
    2662:	cf 93       	push	r28
    2664:	df 93       	push	r29
    2666:	cd b7       	in	r28, 0x3d	; 61
    2668:	de b7       	in	r29, 0x3e	; 62
    266a:	20 91 c1 01 	lds	r18, 0x01C1	; 0x8001c1 <appt_cycles_old>
    266e:	30 91 c2 01 	lds	r19, 0x01C2	; 0x8001c2 <appt_cycles_old+0x1>
    2672:	40 91 c3 01 	lds	r20, 0x01C3	; 0x8001c3 <appt_cycles_old+0x2>
    2676:	50 91 c4 01 	lds	r21, 0x01C4	; 0x8001c4 <appt_cycles_old+0x3>
    267a:	60 91 c5 01 	lds	r22, 0x01C5	; 0x8001c5 <appt_cycles_old+0x4>
    267e:	70 91 c6 01 	lds	r23, 0x01C6	; 0x8001c6 <appt_cycles_old+0x5>
    2682:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <appt_cycles_old+0x6>
    2686:	90 91 c8 01 	lds	r25, 0x01C8	; 0x8001c8 <appt_cycles_old+0x7>
    268a:	a2 2e       	mov	r10, r18
    268c:	b3 2e       	mov	r11, r19
    268e:	c4 2e       	mov	r12, r20
    2690:	d5 2e       	mov	r13, r21
    2692:	e6 2e       	mov	r14, r22
    2694:	f7 2e       	mov	r15, r23
    2696:	08 2f       	mov	r16, r24
    2698:	19 2f       	mov	r17, r25
    269a:	2a 2d       	mov	r18, r10
    269c:	3b 2d       	mov	r19, r11
    269e:	4c 2d       	mov	r20, r12
    26a0:	5d 2d       	mov	r21, r13
    26a2:	6e 2d       	mov	r22, r14
    26a4:	7f 2d       	mov	r23, r15
    26a6:	80 2f       	mov	r24, r16
    26a8:	91 2f       	mov	r25, r17
    26aa:	df 91       	pop	r29
    26ac:	cf 91       	pop	r28
    26ae:	1f 91       	pop	r17
    26b0:	0f 91       	pop	r16
    26b2:	ff 90       	pop	r15
    26b4:	ef 90       	pop	r14
    26b6:	df 90       	pop	r13
    26b8:	cf 90       	pop	r12
    26ba:	bf 90       	pop	r11
    26bc:	af 90       	pop	r10
    26be:	08 95       	ret

000026c0 <appt_set_callback>:
    26c0:	8f 92       	push	r8
    26c2:	9f 92       	push	r9
    26c4:	af 92       	push	r10
    26c6:	bf 92       	push	r11
    26c8:	cf 92       	push	r12
    26ca:	df 92       	push	r13
    26cc:	ef 92       	push	r14
    26ce:	ff 92       	push	r15
    26d0:	0f 93       	push	r16
    26d2:	1f 93       	push	r17
    26d4:	cf 93       	push	r28
    26d6:	df 93       	push	r29
    26d8:	cd b7       	in	r28, 0x3d	; 61
    26da:	de b7       	in	r29, 0x3e	; 62
    26dc:	27 97       	sbiw	r28, 0x07	; 7
    26de:	0f b6       	in	r0, 0x3f	; 63
    26e0:	f8 94       	cli
    26e2:	de bf       	out	0x3e, r29	; 62
    26e4:	0f be       	out	0x3f, r0	; 63
    26e6:	cd bf       	out	0x3d, r28	; 61
    26e8:	69 83       	std	Y+1, r22	; 0x01
    26ea:	7a 83       	std	Y+2, r23	; 0x02
    26ec:	8b 83       	std	Y+3, r24	; 0x03
    26ee:	9c 83       	std	Y+4, r25	; 0x04
    26f0:	5e 83       	std	Y+6, r21	; 0x06
    26f2:	4d 83       	std	Y+5, r20	; 0x05
    26f4:	2f 83       	std	Y+7, r18	; 0x07
    26f6:	8f 81       	ldd	r24, Y+7	; 0x07
    26f8:	84 30       	cpi	r24, 0x04	; 4
    26fa:	10 f0       	brcs	.+4      	; 0x2700 <appt_set_callback+0x40>
    26fc:	0e 94 d7 2c 	call	0x59ae	; 0x59ae <abort>
    2700:	8f 81       	ldd	r24, Y+7	; 0x07
    2702:	88 2e       	mov	r8, r24
    2704:	91 2c       	mov	r9, r1
    2706:	89 81       	ldd	r24, Y+1	; 0x01
    2708:	9a 81       	ldd	r25, Y+2	; 0x02
    270a:	ab 81       	ldd	r26, Y+3	; 0x03
    270c:	bc 81       	ldd	r27, Y+4	; 0x04
    270e:	bc 01       	movw	r22, r24
    2710:	cd 01       	movw	r24, r26
    2712:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <appt_seconds_to_cycles>
    2716:	a2 2e       	mov	r10, r18
    2718:	b3 2e       	mov	r11, r19
    271a:	c4 2e       	mov	r12, r20
    271c:	d5 2e       	mov	r13, r21
    271e:	e6 2e       	mov	r14, r22
    2720:	f7 2e       	mov	r15, r23
    2722:	08 2f       	mov	r16, r24
    2724:	19 2f       	mov	r17, r25
    2726:	c4 01       	movw	r24, r8
    2728:	88 0f       	add	r24, r24
    272a:	99 1f       	adc	r25, r25
    272c:	9c 01       	movw	r18, r24
    272e:	22 0f       	add	r18, r18
    2730:	33 1f       	adc	r19, r19
    2732:	22 0f       	add	r18, r18
    2734:	33 1f       	adc	r19, r19
    2736:	22 0f       	add	r18, r18
    2738:	33 1f       	adc	r19, r19
    273a:	82 0f       	add	r24, r18
    273c:	93 1f       	adc	r25, r19
    273e:	87 58       	subi	r24, 0x87	; 135
    2740:	9e 4f       	sbci	r25, 0xFE	; 254
    2742:	fc 01       	movw	r30, r24
    2744:	a0 82       	st	Z, r10
    2746:	fc 01       	movw	r30, r24
    2748:	b1 82       	std	Z+1, r11	; 0x01
    274a:	fc 01       	movw	r30, r24
    274c:	c2 82       	std	Z+2, r12	; 0x02
    274e:	fc 01       	movw	r30, r24
    2750:	d3 82       	std	Z+3, r13	; 0x03
    2752:	fc 01       	movw	r30, r24
    2754:	e4 82       	std	Z+4, r14	; 0x04
    2756:	fc 01       	movw	r30, r24
    2758:	f5 82       	std	Z+5, r15	; 0x05
    275a:	fc 01       	movw	r30, r24
    275c:	06 83       	std	Z+6, r16	; 0x06
    275e:	fc 01       	movw	r30, r24
    2760:	17 83       	std	Z+7, r17	; 0x07
    2762:	c4 01       	movw	r24, r8
    2764:	88 0f       	add	r24, r24
    2766:	99 1f       	adc	r25, r25
    2768:	9c 01       	movw	r18, r24
    276a:	22 0f       	add	r18, r18
    276c:	33 1f       	adc	r19, r19
    276e:	22 0f       	add	r18, r18
    2770:	33 1f       	adc	r19, r19
    2772:	22 0f       	add	r18, r18
    2774:	33 1f       	adc	r19, r19
    2776:	82 0f       	add	r24, r18
    2778:	93 1f       	adc	r25, r19
    277a:	8f 57       	subi	r24, 0x7F	; 127
    277c:	9e 4f       	sbci	r25, 0xFE	; 254
    277e:	fc 01       	movw	r30, r24
    2780:	10 82       	st	Z, r1
    2782:	fc 01       	movw	r30, r24
    2784:	11 82       	std	Z+1, r1	; 0x01
    2786:	fc 01       	movw	r30, r24
    2788:	12 82       	std	Z+2, r1	; 0x02
    278a:	fc 01       	movw	r30, r24
    278c:	13 82       	std	Z+3, r1	; 0x03
    278e:	fc 01       	movw	r30, r24
    2790:	14 82       	std	Z+4, r1	; 0x04
    2792:	fc 01       	movw	r30, r24
    2794:	15 82       	std	Z+5, r1	; 0x05
    2796:	fc 01       	movw	r30, r24
    2798:	16 82       	std	Z+6, r1	; 0x06
    279a:	fc 01       	movw	r30, r24
    279c:	17 82       	std	Z+7, r1	; 0x07
    279e:	c4 01       	movw	r24, r8
    27a0:	88 0f       	add	r24, r24
    27a2:	99 1f       	adc	r25, r25
    27a4:	9c 01       	movw	r18, r24
    27a6:	22 0f       	add	r18, r18
    27a8:	33 1f       	adc	r19, r19
    27aa:	22 0f       	add	r18, r18
    27ac:	33 1f       	adc	r19, r19
    27ae:	22 0f       	add	r18, r18
    27b0:	33 1f       	adc	r19, r19
    27b2:	82 0f       	add	r24, r18
    27b4:	93 1f       	adc	r25, r19
    27b6:	87 57       	subi	r24, 0x77	; 119
    27b8:	9e 4f       	sbci	r25, 0xFE	; 254
    27ba:	2d 81       	ldd	r18, Y+5	; 0x05
    27bc:	3e 81       	ldd	r19, Y+6	; 0x06
    27be:	fc 01       	movw	r30, r24
    27c0:	31 83       	std	Z+1, r19	; 0x01
    27c2:	20 83       	st	Z, r18
    27c4:	00 00       	nop
    27c6:	27 96       	adiw	r28, 0x07	; 7
    27c8:	0f b6       	in	r0, 0x3f	; 63
    27ca:	f8 94       	cli
    27cc:	de bf       	out	0x3e, r29	; 62
    27ce:	0f be       	out	0x3f, r0	; 63
    27d0:	cd bf       	out	0x3d, r28	; 61
    27d2:	df 91       	pop	r29
    27d4:	cf 91       	pop	r28
    27d6:	1f 91       	pop	r17
    27d8:	0f 91       	pop	r16
    27da:	ff 90       	pop	r15
    27dc:	ef 90       	pop	r14
    27de:	df 90       	pop	r13
    27e0:	cf 90       	pop	r12
    27e2:	bf 90       	pop	r11
    27e4:	af 90       	pop	r10
    27e6:	9f 90       	pop	r9
    27e8:	8f 90       	pop	r8
    27ea:	08 95       	ret

000027ec <__vector_16>:


// ------------------------------ ISR ------------------------------------
ISR(TIMER0_COMPA_vect)
{
    27ec:	1f 92       	push	r1
    27ee:	0f 92       	push	r0
    27f0:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    27f4:	0f 92       	push	r0
    27f6:	11 24       	eor	r1, r1
    27f8:	af 92       	push	r10
    27fa:	bf 92       	push	r11
    27fc:	cf 92       	push	r12
    27fe:	df 92       	push	r13
    2800:	ef 92       	push	r14
    2802:	ff 92       	push	r15
    2804:	0f 93       	push	r16
    2806:	1f 93       	push	r17
    2808:	2f 93       	push	r18
    280a:	3f 93       	push	r19
    280c:	4f 93       	push	r20
    280e:	5f 93       	push	r21
    2810:	6f 93       	push	r22
    2812:	7f 93       	push	r23
    2814:	8f 93       	push	r24
    2816:	9f 93       	push	r25
    2818:	af 93       	push	r26
    281a:	cf 93       	push	r28
    281c:	df 93       	push	r29
    281e:	cd b7       	in	r28, 0x3d	; 61
    2820:	de b7       	in	r29, 0x3e	; 62
	++appt_cycles;
    2822:	a0 90 c9 01 	lds	r10, 0x01C9	; 0x8001c9 <appt_cycles>
    2826:	b0 90 ca 01 	lds	r11, 0x01CA	; 0x8001ca <appt_cycles+0x1>
    282a:	c0 90 cb 01 	lds	r12, 0x01CB	; 0x8001cb <appt_cycles+0x2>
    282e:	d0 90 cc 01 	lds	r13, 0x01CC	; 0x8001cc <appt_cycles+0x3>
    2832:	e0 90 cd 01 	lds	r14, 0x01CD	; 0x8001cd <appt_cycles+0x4>
    2836:	f0 90 ce 01 	lds	r15, 0x01CE	; 0x8001ce <appt_cycles+0x5>
    283a:	00 91 cf 01 	lds	r16, 0x01CF	; 0x8001cf <appt_cycles+0x6>
    283e:	10 91 d0 01 	lds	r17, 0x01D0	; 0x8001d0 <appt_cycles+0x7>
    2842:	2a 2d       	mov	r18, r10
    2844:	3b 2d       	mov	r19, r11
    2846:	4c 2d       	mov	r20, r12
    2848:	5d 2d       	mov	r21, r13
    284a:	6e 2d       	mov	r22, r14
    284c:	7f 2d       	mov	r23, r15
    284e:	80 2f       	mov	r24, r16
    2850:	91 2f       	mov	r25, r17
    2852:	a1 e0       	ldi	r26, 0x01	; 1
    2854:	0e 94 a5 2c 	call	0x594a	; 0x594a <__adddi3_s8>
    2858:	a2 2e       	mov	r10, r18
    285a:	b3 2e       	mov	r11, r19
    285c:	c4 2e       	mov	r12, r20
    285e:	d5 2e       	mov	r13, r21
    2860:	e6 2e       	mov	r14, r22
    2862:	f7 2e       	mov	r15, r23
    2864:	08 2f       	mov	r16, r24
    2866:	19 2f       	mov	r17, r25
    2868:	a0 92 c9 01 	sts	0x01C9, r10	; 0x8001c9 <appt_cycles>
    286c:	b0 92 ca 01 	sts	0x01CA, r11	; 0x8001ca <appt_cycles+0x1>
    2870:	c0 92 cb 01 	sts	0x01CB, r12	; 0x8001cb <appt_cycles+0x2>
    2874:	d0 92 cc 01 	sts	0x01CC, r13	; 0x8001cc <appt_cycles+0x3>
    2878:	e0 92 cd 01 	sts	0x01CD, r14	; 0x8001cd <appt_cycles+0x4>
    287c:	f0 92 ce 01 	sts	0x01CE, r15	; 0x8001ce <appt_cycles+0x5>
    2880:	00 93 cf 01 	sts	0x01CF, r16	; 0x8001cf <appt_cycles+0x6>
    2884:	10 93 d0 01 	sts	0x01D0, r17	; 0x8001d0 <appt_cycles+0x7>
}
    2888:	00 00       	nop
    288a:	df 91       	pop	r29
    288c:	cf 91       	pop	r28
    288e:	af 91       	pop	r26
    2890:	9f 91       	pop	r25
    2892:	8f 91       	pop	r24
    2894:	7f 91       	pop	r23
    2896:	6f 91       	pop	r22
    2898:	5f 91       	pop	r21
    289a:	4f 91       	pop	r20
    289c:	3f 91       	pop	r19
    289e:	2f 91       	pop	r18
    28a0:	1f 91       	pop	r17
    28a2:	0f 91       	pop	r16
    28a4:	ff 90       	pop	r15
    28a6:	ef 90       	pop	r14
    28a8:	df 90       	pop	r13
    28aa:	cf 90       	pop	r12
    28ac:	bf 90       	pop	r11
    28ae:	af 90       	pop	r10
    28b0:	0f 90       	pop	r0
    28b2:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    28b6:	0f 90       	pop	r0
    28b8:	1f 90       	pop	r1
    28ba:	18 95       	reti

000028bc <heater_init>:
#endif

#define HEATER_PWM_WGM_BITS_A (1 << WGM20) // phase correct pwm

void heater_init()
{
    28bc:	cf 93       	push	r28
    28be:	df 93       	push	r29
    28c0:	cd b7       	in	r28, 0x3d	; 61
    28c2:	de b7       	in	r29, 0x3e	; 62
	TIMSK2 = 0x00;
    28c4:	80 e7       	ldi	r24, 0x70	; 112
    28c6:	90 e0       	ldi	r25, 0x00	; 0
    28c8:	fc 01       	movw	r30, r24
    28ca:	10 82       	st	Z, r1
	// stop timer clock
	TCCR2B &= ~HEATER_PWM_PRESCALE_BITS;
    28cc:	81 eb       	ldi	r24, 0xB1	; 177
    28ce:	90 e0       	ldi	r25, 0x00	; 0
    28d0:	21 eb       	ldi	r18, 0xB1	; 177
    28d2:	30 e0       	ldi	r19, 0x00	; 0
    28d4:	f9 01       	movw	r30, r18
    28d6:	20 81       	ld	r18, Z
    28d8:	29 7f       	andi	r18, 0xF9	; 249
    28da:	fc 01       	movw	r30, r24
    28dc:	20 83       	st	Z, r18
	// enable phase correct, frequency correct pwm mode
	TCCR2A |= HEATER_PWM_WGM_BITS_A;
    28de:	80 eb       	ldi	r24, 0xB0	; 176
    28e0:	90 e0       	ldi	r25, 0x00	; 0
    28e2:	20 eb       	ldi	r18, 0xB0	; 176
    28e4:	30 e0       	ldi	r19, 0x00	; 0
    28e6:	f9 01       	movw	r30, r18
    28e8:	20 81       	ld	r18, Z
    28ea:	21 60       	ori	r18, 0x01	; 1
    28ec:	fc 01       	movw	r30, r24
    28ee:	20 83       	st	Z, r18
	// reset duty cycle val
	#ifdef HEATER_PWM_INVERSE
		OCR2A = 0xFF;
	#else
		OCR2A = 0x00;
    28f0:	83 eb       	ldi	r24, 0xB3	; 179
    28f2:	90 e0       	ldi	r25, 0x00	; 0
    28f4:	fc 01       	movw	r30, r24
    28f6:	10 82       	st	Z, r1
	#endif
	// reset timer
	TCNT2 = 0x00;
    28f8:	82 eb       	ldi	r24, 0xB2	; 178
    28fa:	90 e0       	ldi	r25, 0x00	; 0
    28fc:	fc 01       	movw	r30, r24
    28fe:	10 82       	st	Z, r1
	
	// enable output pin
	OC2A_DDR |= (1 << OC2A_BIT);
    2900:	8a e2       	ldi	r24, 0x2A	; 42
    2902:	90 e0       	ldi	r25, 0x00	; 0
    2904:	2a e2       	ldi	r18, 0x2A	; 42
    2906:	30 e0       	ldi	r19, 0x00	; 0
    2908:	f9 01       	movw	r30, r18
    290a:	20 81       	ld	r18, Z
    290c:	20 68       	ori	r18, 0x80	; 128
    290e:	fc 01       	movw	r30, r24
    2910:	20 83       	st	Z, r18
	// set pin state when pwm is off (becomes active when COMA bits are cleared)
	#ifdef HEATER_PWM_INVERSE
		OC2A_PORT |= (1 << OC2A_BIT);
	#else
		OC2A_PORT &= ~(1 << OC2A_BIT);
    2912:	8b e2       	ldi	r24, 0x2B	; 43
    2914:	90 e0       	ldi	r25, 0x00	; 0
    2916:	2b e2       	ldi	r18, 0x2B	; 43
    2918:	30 e0       	ldi	r19, 0x00	; 0
    291a:	f9 01       	movw	r30, r18
    291c:	20 81       	ld	r18, Z
    291e:	2f 77       	andi	r18, 0x7F	; 127
    2920:	fc 01       	movw	r30, r24
    2922:	20 83       	st	Z, r18
	#endif
}
    2924:	00 00       	nop
    2926:	df 91       	pop	r29
    2928:	cf 91       	pop	r28
    292a:	08 95       	ret

0000292c <heater_shutdown>:

void heater_shutdown()
{
    292c:	cf 93       	push	r28
    292e:	df 93       	push	r29
    2930:	cd b7       	in	r28, 0x3d	; 61
    2932:	de b7       	in	r29, 0x3e	; 62
	// stop timer clock
	TCCR2B &= ~HEATER_PWM_PRESCALE_BITS;
    2934:	81 eb       	ldi	r24, 0xB1	; 177
    2936:	90 e0       	ldi	r25, 0x00	; 0
    2938:	21 eb       	ldi	r18, 0xB1	; 177
    293a:	30 e0       	ldi	r19, 0x00	; 0
    293c:	f9 01       	movw	r30, r18
    293e:	20 81       	ld	r18, Z
    2940:	29 7f       	andi	r18, 0xF9	; 249
    2942:	fc 01       	movw	r30, r24
    2944:	20 83       	st	Z, r18
	// reset duty cycle val
	TCNT2 = 0x00;
    2946:	82 eb       	ldi	r24, 0xB2	; 178
    2948:	90 e0       	ldi	r25, 0x00	; 0
    294a:	fc 01       	movw	r30, r24
    294c:	10 82       	st	Z, r1
	OCR2A = 0x00;
    294e:	83 eb       	ldi	r24, 0xB3	; 179
    2950:	90 e0       	ldi	r25, 0x00	; 0
    2952:	fc 01       	movw	r30, r24
    2954:	10 82       	st	Z, r1
	// back to normal mode
	TCCR2A &= ~(HEATER_PWM_COMA_BITS | HEATER_PWM_WGM_BITS_A);
    2956:	80 eb       	ldi	r24, 0xB0	; 176
    2958:	90 e0       	ldi	r25, 0x00	; 0
    295a:	20 eb       	ldi	r18, 0xB0	; 176
    295c:	30 e0       	ldi	r19, 0x00	; 0
    295e:	f9 01       	movw	r30, r18
    2960:	20 81       	ld	r18, Z
    2962:	2e 77       	andi	r18, 0x7E	; 126
    2964:	fc 01       	movw	r30, r24
    2966:	20 83       	st	Z, r18
	// disable output pin
	OC2A_DDR &= ~(1 << OC2A_BIT);
    2968:	8a e2       	ldi	r24, 0x2A	; 42
    296a:	90 e0       	ldi	r25, 0x00	; 0
    296c:	2a e2       	ldi	r18, 0x2A	; 42
    296e:	30 e0       	ldi	r19, 0x00	; 0
    2970:	f9 01       	movw	r30, r18
    2972:	20 81       	ld	r18, Z
    2974:	2f 77       	andi	r18, 0x7F	; 127
    2976:	fc 01       	movw	r30, r24
    2978:	20 83       	st	Z, r18
	OC2A_PORT &= ~(1 << OC2A_BIT);
    297a:	8b e2       	ldi	r24, 0x2B	; 43
    297c:	90 e0       	ldi	r25, 0x00	; 0
    297e:	2b e2       	ldi	r18, 0x2B	; 43
    2980:	30 e0       	ldi	r19, 0x00	; 0
    2982:	f9 01       	movw	r30, r18
    2984:	20 81       	ld	r18, Z
    2986:	2f 77       	andi	r18, 0x7F	; 127
    2988:	fc 01       	movw	r30, r24
    298a:	20 83       	st	Z, r18
}
    298c:	00 00       	nop
    298e:	df 91       	pop	r29
    2990:	cf 91       	pop	r28
    2992:	08 95       	ret

00002994 <heater_set_duty_cycle>:

void heater_set_duty_cycle(uint8_t dc)
{
    2994:	cf 93       	push	r28
    2996:	df 93       	push	r29
    2998:	00 d0       	rcall	.+0      	; 0x299a <heater_set_duty_cycle+0x6>
    299a:	1f 92       	push	r1
    299c:	cd b7       	in	r28, 0x3d	; 61
    299e:	de b7       	in	r29, 0x3e	; 62
    29a0:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t compval = ((uint16_t)umax8(umin8(dc, 100), 0) * 0xFF) / 100;
    29a2:	64 e6       	ldi	r22, 0x64	; 100
    29a4:	8b 81       	ldd	r24, Y+3	; 0x03
    29a6:	0e 94 56 1a 	call	0x34ac	; 0x34ac <umin8>
    29aa:	60 e0       	ldi	r22, 0x00	; 0
    29ac:	0e 94 45 1a 	call	0x348a	; 0x348a <umax8>
    29b0:	28 2f       	mov	r18, r24
    29b2:	30 e0       	ldi	r19, 0x00	; 0
    29b4:	4f ef       	ldi	r20, 0xFF	; 255
    29b6:	42 9f       	mul	r20, r18
    29b8:	c0 01       	movw	r24, r0
    29ba:	43 9f       	mul	r20, r19
    29bc:	90 0d       	add	r25, r0
    29be:	11 24       	eor	r1, r1
    29c0:	96 95       	lsr	r25
    29c2:	87 95       	ror	r24
    29c4:	96 95       	lsr	r25
    29c6:	87 95       	ror	r24
    29c8:	9c 01       	movw	r18, r24
    29ca:	ab e7       	ldi	r26, 0x7B	; 123
    29cc:	b4 e1       	ldi	r27, 0x14	; 20
    29ce:	0e 94 82 2c 	call	0x5904	; 0x5904 <__umulhisi3>
    29d2:	96 95       	lsr	r25
    29d4:	87 95       	ror	r24
    29d6:	9a 83       	std	Y+2, r25	; 0x02
    29d8:	89 83       	std	Y+1, r24	; 0x01
	OCR2A = (uint8_t)compval;
    29da:	83 eb       	ldi	r24, 0xB3	; 179
    29dc:	90 e0       	ldi	r25, 0x00	; 0
    29de:	29 81       	ldd	r18, Y+1	; 0x01
    29e0:	fc 01       	movw	r30, r24
    29e2:	20 83       	st	Z, r18
}
    29e4:	00 00       	nop
    29e6:	0f 90       	pop	r0
    29e8:	0f 90       	pop	r0
    29ea:	0f 90       	pop	r0
    29ec:	df 91       	pop	r29
    29ee:	cf 91       	pop	r28
    29f0:	08 95       	ret

000029f2 <heater_on>:

void heater_on()
{
    29f2:	cf 93       	push	r28
    29f4:	df 93       	push	r29
    29f6:	cd b7       	in	r28, 0x3d	; 61
    29f8:	de b7       	in	r29, 0x3e	; 62
	TCNT2 = 0x00;
    29fa:	82 eb       	ldi	r24, 0xB2	; 178
    29fc:	90 e0       	ldi	r25, 0x00	; 0
    29fe:	fc 01       	movw	r30, r24
    2a00:	10 82       	st	Z, r1
	#ifdef HEATER_PWM_INVERSE
		OCR2A = 0xFF;
	#else
		OCR2A = 0x00;
    2a02:	83 eb       	ldi	r24, 0xB3	; 179
    2a04:	90 e0       	ldi	r25, 0x00	; 0
    2a06:	fc 01       	movw	r30, r24
    2a08:	10 82       	st	Z, r1
	#endif
	TCCR2A |= HEATER_PWM_COMA_BITS;
    2a0a:	80 eb       	ldi	r24, 0xB0	; 176
    2a0c:	90 e0       	ldi	r25, 0x00	; 0
    2a0e:	20 eb       	ldi	r18, 0xB0	; 176
    2a10:	30 e0       	ldi	r19, 0x00	; 0
    2a12:	f9 01       	movw	r30, r18
    2a14:	20 81       	ld	r18, Z
    2a16:	20 68       	ori	r18, 0x80	; 128
    2a18:	fc 01       	movw	r30, r24
    2a1a:	20 83       	st	Z, r18
	TCCR2B |= HEATER_PWM_PRESCALE_BITS;
    2a1c:	81 eb       	ldi	r24, 0xB1	; 177
    2a1e:	90 e0       	ldi	r25, 0x00	; 0
    2a20:	21 eb       	ldi	r18, 0xB1	; 177
    2a22:	30 e0       	ldi	r19, 0x00	; 0
    2a24:	f9 01       	movw	r30, r18
    2a26:	20 81       	ld	r18, Z
    2a28:	26 60       	ori	r18, 0x06	; 6
    2a2a:	fc 01       	movw	r30, r24
    2a2c:	20 83       	st	Z, r18
}
    2a2e:	00 00       	nop
    2a30:	df 91       	pop	r29
    2a32:	cf 91       	pop	r28
    2a34:	08 95       	ret

00002a36 <heater_off>:

void heater_off()
{	
    2a36:	cf 93       	push	r28
    2a38:	df 93       	push	r29
    2a3a:	cd b7       	in	r28, 0x3d	; 61
    2a3c:	de b7       	in	r29, 0x3e	; 62
	TCCR2A &= ~HEATER_PWM_COMA_BITS;
    2a3e:	80 eb       	ldi	r24, 0xB0	; 176
    2a40:	90 e0       	ldi	r25, 0x00	; 0
    2a42:	20 eb       	ldi	r18, 0xB0	; 176
    2a44:	30 e0       	ldi	r19, 0x00	; 0
    2a46:	f9 01       	movw	r30, r18
    2a48:	20 81       	ld	r18, Z
    2a4a:	2f 77       	andi	r18, 0x7F	; 127
    2a4c:	fc 01       	movw	r30, r24
    2a4e:	20 83       	st	Z, r18
	TCCR2B &= ~HEATER_PWM_PRESCALE_BITS;	
    2a50:	81 eb       	ldi	r24, 0xB1	; 177
    2a52:	90 e0       	ldi	r25, 0x00	; 0
    2a54:	21 eb       	ldi	r18, 0xB1	; 177
    2a56:	30 e0       	ldi	r19, 0x00	; 0
    2a58:	f9 01       	movw	r30, r18
    2a5a:	20 81       	ld	r18, Z
    2a5c:	29 7f       	andi	r18, 0xF9	; 249
    2a5e:	fc 01       	movw	r30, r24
    2a60:	20 83       	st	Z, r18
	TCNT2 = 0x00;
    2a62:	82 eb       	ldi	r24, 0xB2	; 178
    2a64:	90 e0       	ldi	r25, 0x00	; 0
    2a66:	fc 01       	movw	r30, r24
    2a68:	10 82       	st	Z, r1
}
    2a6a:	00 00       	nop
    2a6c:	df 91       	pop	r29
    2a6e:	cf 91       	pop	r28
    2a70:	08 95       	ret

00002a72 <main>:
 * Author : fabia
 */ 
#include "application.h"

int main(void)
{
    2a72:	cf 93       	push	r28
    2a74:	df 93       	push	r29
    2a76:	1f 92       	push	r1
    2a78:	cd b7       	in	r28, 0x3d	; 61
    2a7a:	de b7       	in	r29, 0x3e	; 62
	ErrorCode res = app_run();
    2a7c:	0e 94 99 00 	call	0x132	; 0x132 <app_run>
    2a80:	89 83       	std	Y+1, r24	; 0x01
	if(res) // if error occured, block forever, keeping the error message on the display
    2a82:	89 81       	ldd	r24, Y+1	; 0x01
    2a84:	88 23       	and	r24, r24
    2a86:	09 f0       	breq	.+2      	; 0x2a8a <main+0x18>
	{
		while(TRUE) {};
    2a88:	ff cf       	rjmp	.-2      	; 0x2a88 <main+0x16>
    2a8a:	80 e0       	ldi	r24, 0x00	; 0
    2a8c:	90 e0       	ldi	r25, 0x00	; 0
	}
    2a8e:	0f 90       	pop	r0
    2a90:	df 91       	pop	r29
    2a92:	cf 91       	pop	r28
    2a94:	08 95       	ret

00002a96 <mr_main>:
//static const uint8_t pg_menu_patterns[] PROGMEM = {
	//SRD_CB, SRD_CA, SRD_CC, SRD_CT							// "BACK", 4
//};

void mr_main(float current_temp, uint8_t tprobe_index)
{
    2a96:	0f 93       	push	r16
    2a98:	cf 93       	push	r28
    2a9a:	df 93       	push	r29
    2a9c:	00 d0       	rcall	.+0      	; 0x2a9e <mr_main+0x8>
    2a9e:	00 d0       	rcall	.+0      	; 0x2aa0 <mr_main+0xa>
    2aa0:	1f 92       	push	r1
    2aa2:	cd b7       	in	r28, 0x3d	; 61
    2aa4:	de b7       	in	r29, 0x3e	; 62
    2aa6:	69 83       	std	Y+1, r22	; 0x01
    2aa8:	7a 83       	std	Y+2, r23	; 0x02
    2aaa:	8b 83       	std	Y+3, r24	; 0x03
    2aac:	9c 83       	std	Y+4, r25	; 0x04
    2aae:	4d 83       	std	Y+5, r20	; 0x05
	switch(tprobe_index)
    2ab0:	8d 81       	ldd	r24, Y+5	; 0x05
    2ab2:	88 2f       	mov	r24, r24
    2ab4:	90 e0       	ldi	r25, 0x00	; 0
    2ab6:	81 30       	cpi	r24, 0x01	; 1
    2ab8:	91 05       	cpc	r25, r1
    2aba:	89 f0       	breq	.+34     	; 0x2ade <mr_main+0x48>
    2abc:	82 30       	cpi	r24, 0x02	; 2
    2abe:	91 05       	cpc	r25, r1
    2ac0:	1c f4       	brge	.+6      	; 0x2ac8 <mr_main+0x32>
    2ac2:	89 2b       	or	r24, r25
    2ac4:	39 f0       	breq	.+14     	; 0x2ad4 <mr_main+0x3e>
    2ac6:	1a c0       	rjmp	.+52     	; 0x2afc <mr_main+0x66>
    2ac8:	82 30       	cpi	r24, 0x02	; 2
    2aca:	91 05       	cpc	r25, r1
    2acc:	69 f0       	breq	.+26     	; 0x2ae8 <mr_main+0x52>
    2ace:	03 97       	sbiw	r24, 0x03	; 3
    2ad0:	81 f0       	breq	.+32     	; 0x2af2 <mr_main+0x5c>
    2ad2:	14 c0       	rjmp	.+40     	; 0x2afc <mr_main+0x66>
	{
		case 0:
			srd_set(0, SRD_D0 | SRD_DOT);
    2ad4:	6f eb       	ldi	r22, 0xBF	; 191
    2ad6:	80 e0       	ldi	r24, 0x00	; 0
    2ad8:	0e 94 1a 22 	call	0x4434	; 0x4434 <srd_set>
			break;
    2adc:	0f c0       	rjmp	.+30     	; 0x2afc <mr_main+0x66>
		case 1:
			srd_set(0, SRD_D1 | SRD_DOT);
    2ade:	66 e8       	ldi	r22, 0x86	; 134
    2ae0:	80 e0       	ldi	r24, 0x00	; 0
    2ae2:	0e 94 1a 22 	call	0x4434	; 0x4434 <srd_set>
			break;
    2ae6:	0a c0       	rjmp	.+20     	; 0x2afc <mr_main+0x66>
		case 2:
			srd_set(0, SRD_D2 | SRD_DOT);
    2ae8:	6b ed       	ldi	r22, 0xDB	; 219
    2aea:	80 e0       	ldi	r24, 0x00	; 0
    2aec:	0e 94 1a 22 	call	0x4434	; 0x4434 <srd_set>
			break;
    2af0:	05 c0       	rjmp	.+10     	; 0x2afc <mr_main+0x66>
		case 3:
			srd_set(0, SRD_D3 | SRD_DOT);
    2af2:	6f ec       	ldi	r22, 0xCF	; 207
    2af4:	80 e0       	ldi	r24, 0x00	; 0
    2af6:	0e 94 1a 22 	call	0x4434	; 0x4434 <srd_set>
			break;
    2afa:	00 00       	nop
	}
	srd_setfloat(current_temp, 1, 1, 5);
    2afc:	89 81       	ldd	r24, Y+1	; 0x01
    2afe:	9a 81       	ldd	r25, Y+2	; 0x02
    2b00:	ab 81       	ldd	r26, Y+3	; 0x03
    2b02:	bc 81       	ldd	r27, Y+4	; 0x04
    2b04:	05 e0       	ldi	r16, 0x05	; 5
    2b06:	21 e0       	ldi	r18, 0x01	; 1
    2b08:	41 e0       	ldi	r20, 0x01	; 1
    2b0a:	bc 01       	movw	r22, r24
    2b0c:	cd 01       	movw	r24, r26
    2b0e:	0e 94 34 22 	call	0x4468	; 0x4468 <srd_setfloat>
}
    2b12:	00 00       	nop
    2b14:	0f 90       	pop	r0
    2b16:	0f 90       	pop	r0
    2b18:	0f 90       	pop	r0
    2b1a:	0f 90       	pop	r0
    2b1c:	0f 90       	pop	r0
    2b1e:	df 91       	pop	r29
    2b20:	cf 91       	pop	r28
    2b22:	0f 91       	pop	r16
    2b24:	08 95       	ret

00002b26 <mr_main_menu>:

void mr_main_menu(uint8_t item_index)
{
    2b26:	cf 93       	push	r28
    2b28:	df 93       	push	r29
    2b2a:	1f 92       	push	r1
    2b2c:	cd b7       	in	r28, 0x3d	; 61
    2b2e:	de b7       	in	r29, 0x3e	; 62
    2b30:	89 83       	std	Y+1, r24	; 0x01
	switch (item_index)
    2b32:	89 81       	ldd	r24, Y+1	; 0x01
    2b34:	88 2f       	mov	r24, r24
    2b36:	90 e0       	ldi	r25, 0x00	; 0
    2b38:	82 30       	cpi	r24, 0x02	; 2
    2b3a:	91 05       	cpc	r25, r1
    2b3c:	49 f1       	breq	.+82     	; 0x2b90 <mr_main_menu+0x6a>
    2b3e:	83 30       	cpi	r24, 0x03	; 3
    2b40:	91 05       	cpc	r25, r1
    2b42:	2c f4       	brge	.+10     	; 0x2b4e <mr_main_menu+0x28>
    2b44:	00 97       	sbiw	r24, 0x00	; 0
    2b46:	71 f0       	breq	.+28     	; 0x2b64 <mr_main_menu+0x3e>
    2b48:	01 97       	sbiw	r24, 0x01	; 1
    2b4a:	89 f0       	breq	.+34     	; 0x2b6e <mr_main_menu+0x48>
			break;
		case 5: // "STORE.S."
			srd_set(0, SRD_CS); srd_set(1, SRD_CT); srd_set(2, SRD_CO); srd_set(3, SRD_CR); srd_set(4, SRD_CE | SRD_DOT); srd_set(5, SRD_CS | SRD_DOT);
			break;
	}
}
    2b4c:	79 c0       	rjmp	.+242    	; 0x2c40 <mr_main_menu+0x11a>
	srd_setfloat(current_temp, 1, 1, 5);
}

void mr_main_menu(uint8_t item_index)
{
	switch (item_index)
    2b4e:	84 30       	cpi	r24, 0x04	; 4
    2b50:	91 05       	cpc	r25, r1
    2b52:	09 f4       	brne	.+2      	; 0x2b56 <mr_main_menu+0x30>
    2b54:	47 c0       	rjmp	.+142    	; 0x2be4 <mr_main_menu+0xbe>
    2b56:	84 30       	cpi	r24, 0x04	; 4
    2b58:	91 05       	cpc	r25, r1
    2b5a:	5c f1       	brlt	.+86     	; 0x2bb2 <mr_main_menu+0x8c>
    2b5c:	05 97       	sbiw	r24, 0x05	; 5
    2b5e:	09 f4       	brne	.+2      	; 0x2b62 <mr_main_menu+0x3c>
    2b60:	56 c0       	rjmp	.+172    	; 0x2c0e <mr_main_menu+0xe8>
			break;
		case 5: // "STORE.S."
			srd_set(0, SRD_CS); srd_set(1, SRD_CT); srd_set(2, SRD_CO); srd_set(3, SRD_CR); srd_set(4, SRD_CE | SRD_DOT); srd_set(5, SRD_CS | SRD_DOT);
			break;
	}
}
    2b62:	6e c0       	rjmp	.+220    	; 0x2c40 <mr_main_menu+0x11a>
void mr_main_menu(uint8_t item_index)
{
	switch (item_index)
	{
		case 0: // "-"
			srd_set(0, SRD_MINUS);
    2b64:	60 e4       	ldi	r22, 0x40	; 64
    2b66:	80 e0       	ldi	r24, 0x00	; 0
    2b68:	0e 94 1a 22 	call	0x4434	; 0x4434 <srd_set>
			break;
    2b6c:	69 c0       	rjmp	.+210    	; 0x2c40 <mr_main_menu+0x11a>
		case 1: // "HEAT"
			srd_set(0, SRD_CH); srd_set(1, SRD_CE); srd_set(2, SRD_CA); srd_set(3, SRD_CT);
    2b6e:	64 e7       	ldi	r22, 0x74	; 116
    2b70:	80 e0       	ldi	r24, 0x00	; 0
    2b72:	0e 94 1a 22 	call	0x4434	; 0x4434 <srd_set>
    2b76:	69 e7       	ldi	r22, 0x79	; 121
    2b78:	81 e0       	ldi	r24, 0x01	; 1
    2b7a:	0e 94 1a 22 	call	0x4434	; 0x4434 <srd_set>
    2b7e:	67 e7       	ldi	r22, 0x77	; 119
    2b80:	82 e0       	ldi	r24, 0x02	; 2
    2b82:	0e 94 1a 22 	call	0x4434	; 0x4434 <srd_set>
    2b86:	68 e7       	ldi	r22, 0x78	; 120
    2b88:	83 e0       	ldi	r24, 0x03	; 3
    2b8a:	0e 94 1a 22 	call	0x4434	; 0x4434 <srd_set>
			break;
    2b8e:	58 c0       	rjmp	.+176    	; 0x2c40 <mr_main_menu+0x11a>
		case 2: // "STIR"
			srd_set(0, SRD_CS); srd_set(1, SRD_CT); srd_set(2, SRD_CI); srd_set(3, SRD_CR);
    2b90:	6d e6       	ldi	r22, 0x6D	; 109
    2b92:	80 e0       	ldi	r24, 0x00	; 0
    2b94:	0e 94 1a 22 	call	0x4434	; 0x4434 <srd_set>
    2b98:	68 e7       	ldi	r22, 0x78	; 120
    2b9a:	81 e0       	ldi	r24, 0x01	; 1
    2b9c:	0e 94 1a 22 	call	0x4434	; 0x4434 <srd_set>
    2ba0:	66 e0       	ldi	r22, 0x06	; 6
    2ba2:	82 e0       	ldi	r24, 0x02	; 2
    2ba4:	0e 94 1a 22 	call	0x4434	; 0x4434 <srd_set>
    2ba8:	60 e5       	ldi	r22, 0x50	; 80
    2baa:	83 e0       	ldi	r24, 0x03	; 3
    2bac:	0e 94 1a 22 	call	0x4434	; 0x4434 <srd_set>
			break;
    2bb0:	47 c0       	rjmp	.+142    	; 0x2c40 <mr_main_menu+0x11a>
		case 3: // "T.CALIB"
			srd_set(0, SRD_CT | SRD_DOT); srd_set(1, SRD_CC); srd_set(2, SRD_CA); srd_set(3, SRD_CL); srd_set(4, SRD_CI); srd_set(5, SRD_CB);
    2bb2:	68 ef       	ldi	r22, 0xF8	; 248
    2bb4:	80 e0       	ldi	r24, 0x00	; 0
    2bb6:	0e 94 1a 22 	call	0x4434	; 0x4434 <srd_set>
    2bba:	69 e3       	ldi	r22, 0x39	; 57
    2bbc:	81 e0       	ldi	r24, 0x01	; 1
    2bbe:	0e 94 1a 22 	call	0x4434	; 0x4434 <srd_set>
    2bc2:	67 e7       	ldi	r22, 0x77	; 119
    2bc4:	82 e0       	ldi	r24, 0x02	; 2
    2bc6:	0e 94 1a 22 	call	0x4434	; 0x4434 <srd_set>
    2bca:	68 e3       	ldi	r22, 0x38	; 56
    2bcc:	83 e0       	ldi	r24, 0x03	; 3
    2bce:	0e 94 1a 22 	call	0x4434	; 0x4434 <srd_set>
    2bd2:	66 e0       	ldi	r22, 0x06	; 6
    2bd4:	84 e0       	ldi	r24, 0x04	; 4
    2bd6:	0e 94 1a 22 	call	0x4434	; 0x4434 <srd_set>
    2bda:	6c e7       	ldi	r22, 0x7C	; 124
    2bdc:	85 e0       	ldi	r24, 0x05	; 5
    2bde:	0e 94 1a 22 	call	0x4434	; 0x4434 <srd_set>
			break;
    2be2:	2e c0       	rjmp	.+92     	; 0x2c40 <mr_main_menu+0x11a>
		case 4: // "LOAD.S."
			srd_set(0, SRD_CL); srd_set(1, SRD_CO); srd_set(2, SRD_CA); srd_set(3, SRD_CD | SRD_DOT); srd_set(4, SRD_CS | SRD_DOT);
    2be4:	68 e3       	ldi	r22, 0x38	; 56
    2be6:	80 e0       	ldi	r24, 0x00	; 0
    2be8:	0e 94 1a 22 	call	0x4434	; 0x4434 <srd_set>
    2bec:	6c e5       	ldi	r22, 0x5C	; 92
    2bee:	81 e0       	ldi	r24, 0x01	; 1
    2bf0:	0e 94 1a 22 	call	0x4434	; 0x4434 <srd_set>
    2bf4:	67 e7       	ldi	r22, 0x77	; 119
    2bf6:	82 e0       	ldi	r24, 0x02	; 2
    2bf8:	0e 94 1a 22 	call	0x4434	; 0x4434 <srd_set>
    2bfc:	6e ed       	ldi	r22, 0xDE	; 222
    2bfe:	83 e0       	ldi	r24, 0x03	; 3
    2c00:	0e 94 1a 22 	call	0x4434	; 0x4434 <srd_set>
    2c04:	6d ee       	ldi	r22, 0xED	; 237
    2c06:	84 e0       	ldi	r24, 0x04	; 4
    2c08:	0e 94 1a 22 	call	0x4434	; 0x4434 <srd_set>
			break;
    2c0c:	19 c0       	rjmp	.+50     	; 0x2c40 <mr_main_menu+0x11a>
		case 5: // "STORE.S."
			srd_set(0, SRD_CS); srd_set(1, SRD_CT); srd_set(2, SRD_CO); srd_set(3, SRD_CR); srd_set(4, SRD_CE | SRD_DOT); srd_set(5, SRD_CS | SRD_DOT);
    2c0e:	6d e6       	ldi	r22, 0x6D	; 109
    2c10:	80 e0       	ldi	r24, 0x00	; 0
    2c12:	0e 94 1a 22 	call	0x4434	; 0x4434 <srd_set>
    2c16:	68 e7       	ldi	r22, 0x78	; 120
    2c18:	81 e0       	ldi	r24, 0x01	; 1
    2c1a:	0e 94 1a 22 	call	0x4434	; 0x4434 <srd_set>
    2c1e:	6c e5       	ldi	r22, 0x5C	; 92
    2c20:	82 e0       	ldi	r24, 0x02	; 2
    2c22:	0e 94 1a 22 	call	0x4434	; 0x4434 <srd_set>
    2c26:	60 e5       	ldi	r22, 0x50	; 80
    2c28:	83 e0       	ldi	r24, 0x03	; 3
    2c2a:	0e 94 1a 22 	call	0x4434	; 0x4434 <srd_set>
    2c2e:	69 ef       	ldi	r22, 0xF9	; 249
    2c30:	84 e0       	ldi	r24, 0x04	; 4
    2c32:	0e 94 1a 22 	call	0x4434	; 0x4434 <srd_set>
    2c36:	6d ee       	ldi	r22, 0xED	; 237
    2c38:	85 e0       	ldi	r24, 0x05	; 5
    2c3a:	0e 94 1a 22 	call	0x4434	; 0x4434 <srd_set>
			break;
    2c3e:	00 00       	nop
	}
}
    2c40:	00 00       	nop
    2c42:	0f 90       	pop	r0
    2c44:	df 91       	pop	r29
    2c46:	cf 91       	pop	r28
    2c48:	08 95       	ret

00002c4a <mr_heater_menu>:

void mr_heater_menu(uint8_t item_index)
{
    2c4a:	cf 93       	push	r28
    2c4c:	df 93       	push	r29
    2c4e:	1f 92       	push	r1
    2c50:	cd b7       	in	r28, 0x3d	; 61
    2c52:	de b7       	in	r29, 0x3e	; 62
    2c54:	89 83       	std	Y+1, r24	; 0x01
	switch (item_index)
    2c56:	89 81       	ldd	r24, Y+1	; 0x01
    2c58:	88 2f       	mov	r24, r24
    2c5a:	90 e0       	ldi	r25, 0x00	; 0
    2c5c:	82 30       	cpi	r24, 0x02	; 2
    2c5e:	91 05       	cpc	r25, r1
    2c60:	89 f1       	breq	.+98     	; 0x2cc4 <mr_heater_menu+0x7a>
    2c62:	83 30       	cpi	r24, 0x03	; 3
    2c64:	91 05       	cpc	r25, r1
    2c66:	2c f4       	brge	.+10     	; 0x2c72 <mr_heater_menu+0x28>
    2c68:	00 97       	sbiw	r24, 0x00	; 0
    2c6a:	71 f0       	breq	.+28     	; 0x2c88 <mr_heater_menu+0x3e>
    2c6c:	01 97       	sbiw	r24, 0x01	; 1
    2c6e:	a9 f0       	breq	.+42     	; 0x2c9a <mr_heater_menu+0x50>
			break;
		case 5: // "OFFSET"
			srd_set(0, SRD_CO); srd_set(1, SRD_CF); srd_set(2, SRD_CF); srd_set(3, SRD_CS);
			break;
	}
}
    2c70:	69 c0       	rjmp	.+210    	; 0x2d44 <mr_heater_menu+0xfa>
	}
}

void mr_heater_menu(uint8_t item_index)
{
	switch (item_index)
    2c72:	84 30       	cpi	r24, 0x04	; 4
    2c74:	91 05       	cpc	r25, r1
    2c76:	09 f4       	brne	.+2      	; 0x2c7a <mr_heater_menu+0x30>
    2c78:	47 c0       	rjmp	.+142    	; 0x2d08 <mr_heater_menu+0xbe>
    2c7a:	84 30       	cpi	r24, 0x04	; 4
    2c7c:	91 05       	cpc	r25, r1
    2c7e:	9c f1       	brlt	.+102    	; 0x2ce6 <mr_heater_menu+0x9c>
    2c80:	05 97       	sbiw	r24, 0x05	; 5
    2c82:	09 f4       	brne	.+2      	; 0x2c86 <mr_heater_menu+0x3c>
    2c84:	4e c0       	rjmp	.+156    	; 0x2d22 <mr_heater_menu+0xd8>
			break;
		case 5: // "OFFSET"
			srd_set(0, SRD_CO); srd_set(1, SRD_CF); srd_set(2, SRD_CF); srd_set(3, SRD_CS);
			break;
	}
}
    2c86:	5e c0       	rjmp	.+188    	; 0x2d44 <mr_heater_menu+0xfa>
void mr_heater_menu(uint8_t item_index)
{
	switch (item_index)
	{
		case 0: // "--"
			srd_set(0, SRD_MINUS); srd_set(1, SRD_MINUS);
    2c88:	60 e4       	ldi	r22, 0x40	; 64
    2c8a:	80 e0       	ldi	r24, 0x00	; 0
    2c8c:	0e 94 1a 22 	call	0x4434	; 0x4434 <srd_set>
    2c90:	60 e4       	ldi	r22, 0x40	; 64
    2c92:	81 e0       	ldi	r24, 0x01	; 1
    2c94:	0e 94 1a 22 	call	0x4434	; 0x4434 <srd_set>
			break;
    2c98:	55 c0       	rjmp	.+170    	; 0x2d44 <mr_heater_menu+0xfa>
		case 1: // "ONOFF"
			srd_set(0, SRD_CO); srd_set(1, SRD_CN); srd_set(2, SRD_CO); srd_set(3, SRD_CF); srd_set(4, SRD_CF);
    2c9a:	6c e5       	ldi	r22, 0x5C	; 92
    2c9c:	80 e0       	ldi	r24, 0x00	; 0
    2c9e:	0e 94 1a 22 	call	0x4434	; 0x4434 <srd_set>
    2ca2:	64 e5       	ldi	r22, 0x54	; 84
    2ca4:	81 e0       	ldi	r24, 0x01	; 1
    2ca6:	0e 94 1a 22 	call	0x4434	; 0x4434 <srd_set>
    2caa:	6c e5       	ldi	r22, 0x5C	; 92
    2cac:	82 e0       	ldi	r24, 0x02	; 2
    2cae:	0e 94 1a 22 	call	0x4434	; 0x4434 <srd_set>
    2cb2:	61 e7       	ldi	r22, 0x71	; 113
    2cb4:	83 e0       	ldi	r24, 0x03	; 3
    2cb6:	0e 94 1a 22 	call	0x4434	; 0x4434 <srd_set>
    2cba:	61 e7       	ldi	r22, 0x71	; 113
    2cbc:	84 e0       	ldi	r24, 0x04	; 4
    2cbe:	0e 94 1a 22 	call	0x4434	; 0x4434 <srd_set>
			break;
    2cc2:	40 c0       	rjmp	.+128    	; 0x2d44 <mr_heater_menu+0xfa>
		case 2: // "TG.TPTR"
			srd_set(0, SRD_CT); srd_set(1, SRD_CG | SRD_DOT); srd_set(2, SRD_CT); srd_set(3, SRD_CP);
    2cc4:	68 e7       	ldi	r22, 0x78	; 120
    2cc6:	80 e0       	ldi	r24, 0x00	; 0
    2cc8:	0e 94 1a 22 	call	0x4434	; 0x4434 <srd_set>
    2ccc:	6f ee       	ldi	r22, 0xEF	; 239
    2cce:	81 e0       	ldi	r24, 0x01	; 1
    2cd0:	0e 94 1a 22 	call	0x4434	; 0x4434 <srd_set>
    2cd4:	68 e7       	ldi	r22, 0x78	; 120
    2cd6:	82 e0       	ldi	r24, 0x02	; 2
    2cd8:	0e 94 1a 22 	call	0x4434	; 0x4434 <srd_set>
    2cdc:	63 e7       	ldi	r22, 0x73	; 115
    2cde:	83 e0       	ldi	r24, 0x03	; 3
    2ce0:	0e 94 1a 22 	call	0x4434	; 0x4434 <srd_set>
			break;
    2ce4:	2f c0       	rjmp	.+94     	; 0x2d44 <mr_heater_menu+0xfa>
		case 3: // "TSEL"
			srd_set(0, SRD_CT | SRD_DOT); srd_set(1, SRD_CS); srd_set(2, SRD_CE); srd_set(3, SRD_CL);
    2ce6:	68 ef       	ldi	r22, 0xF8	; 248
    2ce8:	80 e0       	ldi	r24, 0x00	; 0
    2cea:	0e 94 1a 22 	call	0x4434	; 0x4434 <srd_set>
    2cee:	6d e6       	ldi	r22, 0x6D	; 109
    2cf0:	81 e0       	ldi	r24, 0x01	; 1
    2cf2:	0e 94 1a 22 	call	0x4434	; 0x4434 <srd_set>
    2cf6:	69 e7       	ldi	r22, 0x79	; 121
    2cf8:	82 e0       	ldi	r24, 0x02	; 2
    2cfa:	0e 94 1a 22 	call	0x4434	; 0x4434 <srd_set>
    2cfe:	68 e3       	ldi	r22, 0x38	; 56
    2d00:	83 e0       	ldi	r24, 0x03	; 3
    2d02:	0e 94 1a 22 	call	0x4434	; 0x4434 <srd_set>
			break;
    2d06:	1e c0       	rjmp	.+60     	; 0x2d44 <mr_heater_menu+0xfa>
		case 4: // "PID"
			srd_set(0, SRD_CP); srd_set(1, SRD_CI); srd_set(2, SRD_CD);
    2d08:	63 e7       	ldi	r22, 0x73	; 115
    2d0a:	80 e0       	ldi	r24, 0x00	; 0
    2d0c:	0e 94 1a 22 	call	0x4434	; 0x4434 <srd_set>
    2d10:	66 e0       	ldi	r22, 0x06	; 6
    2d12:	81 e0       	ldi	r24, 0x01	; 1
    2d14:	0e 94 1a 22 	call	0x4434	; 0x4434 <srd_set>
    2d18:	6e e5       	ldi	r22, 0x5E	; 94
    2d1a:	82 e0       	ldi	r24, 0x02	; 2
    2d1c:	0e 94 1a 22 	call	0x4434	; 0x4434 <srd_set>
			break;
    2d20:	11 c0       	rjmp	.+34     	; 0x2d44 <mr_heater_menu+0xfa>
		case 5: // "OFFSET"
			srd_set(0, SRD_CO); srd_set(1, SRD_CF); srd_set(2, SRD_CF); srd_set(3, SRD_CS);
    2d22:	6c e5       	ldi	r22, 0x5C	; 92
    2d24:	80 e0       	ldi	r24, 0x00	; 0
    2d26:	0e 94 1a 22 	call	0x4434	; 0x4434 <srd_set>
    2d2a:	61 e7       	ldi	r22, 0x71	; 113
    2d2c:	81 e0       	ldi	r24, 0x01	; 1
    2d2e:	0e 94 1a 22 	call	0x4434	; 0x4434 <srd_set>
    2d32:	61 e7       	ldi	r22, 0x71	; 113
    2d34:	82 e0       	ldi	r24, 0x02	; 2
    2d36:	0e 94 1a 22 	call	0x4434	; 0x4434 <srd_set>
    2d3a:	6d e6       	ldi	r22, 0x6D	; 109
    2d3c:	83 e0       	ldi	r24, 0x03	; 3
    2d3e:	0e 94 1a 22 	call	0x4434	; 0x4434 <srd_set>
			break;
    2d42:	00 00       	nop
	}
}
    2d44:	00 00       	nop
    2d46:	0f 90       	pop	r0
    2d48:	df 91       	pop	r29
    2d4a:	cf 91       	pop	r28
    2d4c:	08 95       	ret

00002d4e <mr_stirrer_menu>:

void mr_stirrer_menu(uint8_t item_index)
{
    2d4e:	cf 93       	push	r28
    2d50:	df 93       	push	r29
    2d52:	1f 92       	push	r1
    2d54:	cd b7       	in	r28, 0x3d	; 61
    2d56:	de b7       	in	r29, 0x3e	; 62
    2d58:	89 83       	std	Y+1, r24	; 0x01
	switch (item_index)
    2d5a:	89 81       	ldd	r24, Y+1	; 0x01
    2d5c:	88 2f       	mov	r24, r24
    2d5e:	90 e0       	ldi	r25, 0x00	; 0
    2d60:	00 97       	sbiw	r24, 0x00	; 0
    2d62:	19 f0       	breq	.+6      	; 0x2d6a <mr_stirrer_menu+0x1c>
    2d64:	01 97       	sbiw	r24, 0x01	; 1
    2d66:	51 f0       	breq	.+20     	; 0x2d7c <mr_stirrer_menu+0x2e>
			break;
		case 1: // "SPEED"
			srd_set(0, SRD_CS); srd_set(1, SRD_CP); srd_set(2, SRD_CE); srd_set(3, SRD_CE); srd_set(4, SRD_CD);
			break;
	}
}
    2d68:	1e c0       	rjmp	.+60     	; 0x2da6 <mr_stirrer_menu+0x58>
void mr_stirrer_menu(uint8_t item_index)
{
	switch (item_index)
	{
		case 0: // "--"
			srd_set(0, SRD_MINUS); srd_set(1, SRD_MINUS);
    2d6a:	60 e4       	ldi	r22, 0x40	; 64
    2d6c:	80 e0       	ldi	r24, 0x00	; 0
    2d6e:	0e 94 1a 22 	call	0x4434	; 0x4434 <srd_set>
    2d72:	60 e4       	ldi	r22, 0x40	; 64
    2d74:	81 e0       	ldi	r24, 0x01	; 1
    2d76:	0e 94 1a 22 	call	0x4434	; 0x4434 <srd_set>
			break;
    2d7a:	15 c0       	rjmp	.+42     	; 0x2da6 <mr_stirrer_menu+0x58>
		case 1: // "SPEED"
			srd_set(0, SRD_CS); srd_set(1, SRD_CP); srd_set(2, SRD_CE); srd_set(3, SRD_CE); srd_set(4, SRD_CD);
    2d7c:	6d e6       	ldi	r22, 0x6D	; 109
    2d7e:	80 e0       	ldi	r24, 0x00	; 0
    2d80:	0e 94 1a 22 	call	0x4434	; 0x4434 <srd_set>
    2d84:	63 e7       	ldi	r22, 0x73	; 115
    2d86:	81 e0       	ldi	r24, 0x01	; 1
    2d88:	0e 94 1a 22 	call	0x4434	; 0x4434 <srd_set>
    2d8c:	69 e7       	ldi	r22, 0x79	; 121
    2d8e:	82 e0       	ldi	r24, 0x02	; 2
    2d90:	0e 94 1a 22 	call	0x4434	; 0x4434 <srd_set>
    2d94:	69 e7       	ldi	r22, 0x79	; 121
    2d96:	83 e0       	ldi	r24, 0x03	; 3
    2d98:	0e 94 1a 22 	call	0x4434	; 0x4434 <srd_set>
    2d9c:	6e e5       	ldi	r22, 0x5E	; 94
    2d9e:	84 e0       	ldi	r24, 0x04	; 4
    2da0:	0e 94 1a 22 	call	0x4434	; 0x4434 <srd_set>
			break;
    2da4:	00 00       	nop
	}
}
    2da6:	00 00       	nop
    2da8:	0f 90       	pop	r0
    2daa:	df 91       	pop	r29
    2dac:	cf 91       	pop	r28
    2dae:	08 95       	ret

00002db0 <mr_heater_menu_controlling_probe_select>:

void mr_heater_menu_controlling_probe_select(uint8_t tprobe_index, uint8_t selection_valid)
{
    2db0:	cf 93       	push	r28
    2db2:	df 93       	push	r29
    2db4:	00 d0       	rcall	.+0      	; 0x2db6 <mr_heater_menu_controlling_probe_select+0x6>
    2db6:	cd b7       	in	r28, 0x3d	; 61
    2db8:	de b7       	in	r29, 0x3e	; 62
    2dba:	89 83       	std	Y+1, r24	; 0x01
    2dbc:	6a 83       	std	Y+2, r22	; 0x02
	if(selection_valid)
    2dbe:	8a 81       	ldd	r24, Y+2	; 0x02
    2dc0:	88 23       	and	r24, r24
    2dc2:	09 f4       	brne	.+2      	; 0x2dc6 <mr_heater_menu_controlling_probe_select+0x16>
    2dc4:	3f c0       	rjmp	.+126    	; 0x2e44 <mr_heater_menu_controlling_probe_select+0x94>
	{
		switch (tprobe_index)
    2dc6:	89 81       	ldd	r24, Y+1	; 0x01
    2dc8:	88 2f       	mov	r24, r24
    2dca:	90 e0       	ldi	r25, 0x00	; 0
    2dcc:	81 30       	cpi	r24, 0x01	; 1
    2dce:	91 05       	cpc	r25, r1
    2dd0:	a9 f0       	breq	.+42     	; 0x2dfc <mr_heater_menu_controlling_probe_select+0x4c>
    2dd2:	82 30       	cpi	r24, 0x02	; 2
    2dd4:	91 05       	cpc	r25, r1
    2dd6:	1c f4       	brge	.+6      	; 0x2dde <mr_heater_menu_controlling_probe_select+0x2e>
    2dd8:	89 2b       	or	r24, r25
    2dda:	39 f0       	breq	.+14     	; 0x2dea <mr_heater_menu_controlling_probe_select+0x3a>
    2ddc:	2a c0       	rjmp	.+84     	; 0x2e32 <mr_heater_menu_controlling_probe_select+0x82>
    2dde:	82 30       	cpi	r24, 0x02	; 2
    2de0:	91 05       	cpc	r25, r1
    2de2:	a9 f0       	breq	.+42     	; 0x2e0e <mr_heater_menu_controlling_probe_select+0x5e>
    2de4:	03 97       	sbiw	r24, 0x03	; 3
    2de6:	e1 f0       	breq	.+56     	; 0x2e20 <mr_heater_menu_controlling_probe_select+0x70>
    2de8:	24 c0       	rjmp	.+72     	; 0x2e32 <mr_heater_menu_controlling_probe_select+0x82>
		{
			case 0:
				srd_set(4, SRD_CT); srd_set(5, SRD_D0);
    2dea:	68 e7       	ldi	r22, 0x78	; 120
    2dec:	84 e0       	ldi	r24, 0x04	; 4
    2dee:	0e 94 1a 22 	call	0x4434	; 0x4434 <srd_set>
    2df2:	6f e3       	ldi	r22, 0x3F	; 63
    2df4:	85 e0       	ldi	r24, 0x05	; 5
    2df6:	0e 94 1a 22 	call	0x4434	; 0x4434 <srd_set>
				break;
    2dfa:	2d c0       	rjmp	.+90     	; 0x2e56 <mr_heater_menu_controlling_probe_select+0xa6>
			case 1:
				srd_set(4, SRD_CT); srd_set(5, SRD_D1);
    2dfc:	68 e7       	ldi	r22, 0x78	; 120
    2dfe:	84 e0       	ldi	r24, 0x04	; 4
    2e00:	0e 94 1a 22 	call	0x4434	; 0x4434 <srd_set>
    2e04:	66 e0       	ldi	r22, 0x06	; 6
    2e06:	85 e0       	ldi	r24, 0x05	; 5
    2e08:	0e 94 1a 22 	call	0x4434	; 0x4434 <srd_set>
				break;
    2e0c:	24 c0       	rjmp	.+72     	; 0x2e56 <mr_heater_menu_controlling_probe_select+0xa6>
			case 2:
				srd_set(4, SRD_CT); srd_set(5, SRD_D2);
    2e0e:	68 e7       	ldi	r22, 0x78	; 120
    2e10:	84 e0       	ldi	r24, 0x04	; 4
    2e12:	0e 94 1a 22 	call	0x4434	; 0x4434 <srd_set>
    2e16:	6b e5       	ldi	r22, 0x5B	; 91
    2e18:	85 e0       	ldi	r24, 0x05	; 5
    2e1a:	0e 94 1a 22 	call	0x4434	; 0x4434 <srd_set>
				break;
    2e1e:	1b c0       	rjmp	.+54     	; 0x2e56 <mr_heater_menu_controlling_probe_select+0xa6>
			case 3:
				srd_set(4, SRD_CT); srd_set(5, SRD_D3);
    2e20:	68 e7       	ldi	r22, 0x78	; 120
    2e22:	84 e0       	ldi	r24, 0x04	; 4
    2e24:	0e 94 1a 22 	call	0x4434	; 0x4434 <srd_set>
    2e28:	6f e4       	ldi	r22, 0x4F	; 79
    2e2a:	85 e0       	ldi	r24, 0x05	; 5
    2e2c:	0e 94 1a 22 	call	0x4434	; 0x4434 <srd_set>
				break;
    2e30:	12 c0       	rjmp	.+36     	; 0x2e56 <mr_heater_menu_controlling_probe_select+0xa6>
			default:
				srd_set(0,SRD_CN); srd_set(1,SRD_CC);
    2e32:	64 e5       	ldi	r22, 0x54	; 84
    2e34:	80 e0       	ldi	r24, 0x00	; 0
    2e36:	0e 94 1a 22 	call	0x4434	; 0x4434 <srd_set>
    2e3a:	69 e3       	ldi	r22, 0x39	; 57
    2e3c:	81 e0       	ldi	r24, 0x01	; 1
    2e3e:	0e 94 1a 22 	call	0x4434	; 0x4434 <srd_set>
	}
	else
	{
		srd_set(0,SRD_CN); srd_set(1,SRD_CC);
	}	
}
    2e42:	09 c0       	rjmp	.+18     	; 0x2e56 <mr_heater_menu_controlling_probe_select+0xa6>
				srd_set(0,SRD_CN); srd_set(1,SRD_CC);
		}
	}
	else
	{
		srd_set(0,SRD_CN); srd_set(1,SRD_CC);
    2e44:	64 e5       	ldi	r22, 0x54	; 84
    2e46:	80 e0       	ldi	r24, 0x00	; 0
    2e48:	0e 94 1a 22 	call	0x4434	; 0x4434 <srd_set>
    2e4c:	69 e3       	ldi	r22, 0x39	; 57
    2e4e:	81 e0       	ldi	r24, 0x01	; 1
    2e50:	0e 94 1a 22 	call	0x4434	; 0x4434 <srd_set>
	}	
}
    2e54:	00 c0       	rjmp	.+0      	; 0x2e56 <mr_heater_menu_controlling_probe_select+0xa6>
    2e56:	00 00       	nop
    2e58:	0f 90       	pop	r0
    2e5a:	0f 90       	pop	r0
    2e5c:	df 91       	pop	r29
    2e5e:	cf 91       	pop	r28
    2e60:	08 95       	ret

00002e62 <mr_heater_menu_pid>:

void mr_heater_menu_pid(uint8_t item_index)
{
    2e62:	cf 93       	push	r28
    2e64:	df 93       	push	r29
    2e66:	1f 92       	push	r1
    2e68:	cd b7       	in	r28, 0x3d	; 61
    2e6a:	de b7       	in	r29, 0x3e	; 62
    2e6c:	89 83       	std	Y+1, r24	; 0x01
	switch (item_index)
    2e6e:	89 81       	ldd	r24, Y+1	; 0x01
    2e70:	88 2f       	mov	r24, r24
    2e72:	90 e0       	ldi	r25, 0x00	; 0
    2e74:	81 30       	cpi	r24, 0x01	; 1
    2e76:	91 05       	cpc	r25, r1
    2e78:	c9 f0       	breq	.+50     	; 0x2eac <mr_heater_menu_pid+0x4a>
    2e7a:	82 30       	cpi	r24, 0x02	; 2
    2e7c:	91 05       	cpc	r25, r1
    2e7e:	1c f4       	brge	.+6      	; 0x2e86 <mr_heater_menu_pid+0x24>
    2e80:	89 2b       	or	r24, r25
    2e82:	39 f0       	breq	.+14     	; 0x2e92 <mr_heater_menu_pid+0x30>
			break;
		case 3: // "D"
			srd_set(0, SRD_CD);
			break;
	}
}
    2e84:	22 c0       	rjmp	.+68     	; 0x2eca <mr_heater_menu_pid+0x68>
	}	
}

void mr_heater_menu_pid(uint8_t item_index)
{
	switch (item_index)
    2e86:	82 30       	cpi	r24, 0x02	; 2
    2e88:	91 05       	cpc	r25, r1
    2e8a:	a9 f0       	breq	.+42     	; 0x2eb6 <mr_heater_menu_pid+0x54>
    2e8c:	03 97       	sbiw	r24, 0x03	; 3
    2e8e:	c1 f0       	breq	.+48     	; 0x2ec0 <mr_heater_menu_pid+0x5e>
			break;
		case 3: // "D"
			srd_set(0, SRD_CD);
			break;
	}
}
    2e90:	1c c0       	rjmp	.+56     	; 0x2eca <mr_heater_menu_pid+0x68>
void mr_heater_menu_pid(uint8_t item_index)
{
	switch (item_index)
	{
		case 0: // "---"
			srd_set(0, SRD_MINUS); srd_set(1, SRD_MINUS); srd_set(2, SRD_MINUS);
    2e92:	60 e4       	ldi	r22, 0x40	; 64
    2e94:	80 e0       	ldi	r24, 0x00	; 0
    2e96:	0e 94 1a 22 	call	0x4434	; 0x4434 <srd_set>
    2e9a:	60 e4       	ldi	r22, 0x40	; 64
    2e9c:	81 e0       	ldi	r24, 0x01	; 1
    2e9e:	0e 94 1a 22 	call	0x4434	; 0x4434 <srd_set>
    2ea2:	60 e4       	ldi	r22, 0x40	; 64
    2ea4:	82 e0       	ldi	r24, 0x02	; 2
    2ea6:	0e 94 1a 22 	call	0x4434	; 0x4434 <srd_set>
			break;
    2eaa:	0f c0       	rjmp	.+30     	; 0x2eca <mr_heater_menu_pid+0x68>
		case 1: // "P"
			srd_set(0, SRD_CP);
    2eac:	63 e7       	ldi	r22, 0x73	; 115
    2eae:	80 e0       	ldi	r24, 0x00	; 0
    2eb0:	0e 94 1a 22 	call	0x4434	; 0x4434 <srd_set>
			break;
    2eb4:	0a c0       	rjmp	.+20     	; 0x2eca <mr_heater_menu_pid+0x68>
		case 2: // "I"
			srd_set(0, SRD_CI);
    2eb6:	66 e0       	ldi	r22, 0x06	; 6
    2eb8:	80 e0       	ldi	r24, 0x00	; 0
    2eba:	0e 94 1a 22 	call	0x4434	; 0x4434 <srd_set>
			break;
    2ebe:	05 c0       	rjmp	.+10     	; 0x2eca <mr_heater_menu_pid+0x68>
		case 3: // "D"
			srd_set(0, SRD_CD);
    2ec0:	6e e5       	ldi	r22, 0x5E	; 94
    2ec2:	80 e0       	ldi	r24, 0x00	; 0
    2ec4:	0e 94 1a 22 	call	0x4434	; 0x4434 <srd_set>
			break;
    2ec8:	00 00       	nop
	}
}
    2eca:	00 00       	nop
    2ecc:	0f 90       	pop	r0
    2ece:	df 91       	pop	r29
    2ed0:	cf 91       	pop	r28
    2ed2:	08 95       	ret

00002ed4 <mr_heater_menu_onoff>:

void mr_heater_menu_onoff(uint8_t onoff)
{
    2ed4:	cf 93       	push	r28
    2ed6:	df 93       	push	r29
    2ed8:	1f 92       	push	r1
    2eda:	cd b7       	in	r28, 0x3d	; 61
    2edc:	de b7       	in	r29, 0x3e	; 62
    2ede:	89 83       	std	Y+1, r24	; 0x01
	if(onoff)
    2ee0:	89 81       	ldd	r24, Y+1	; 0x01
    2ee2:	88 23       	and	r24, r24
    2ee4:	69 f0       	breq	.+26     	; 0x2f00 <mr_heater_menu_onoff+0x2c>
	{
		srd_set(0, SRD_E | SRD_F); srd_set(1, SRD_CO); srd_set(2, SRD_CN);
    2ee6:	60 e3       	ldi	r22, 0x30	; 48
    2ee8:	80 e0       	ldi	r24, 0x00	; 0
    2eea:	0e 94 1a 22 	call	0x4434	; 0x4434 <srd_set>
    2eee:	6c e5       	ldi	r22, 0x5C	; 92
    2ef0:	81 e0       	ldi	r24, 0x01	; 1
    2ef2:	0e 94 1a 22 	call	0x4434	; 0x4434 <srd_set>
    2ef6:	64 e5       	ldi	r22, 0x54	; 84
    2ef8:	82 e0       	ldi	r24, 0x02	; 2
    2efa:	0e 94 1a 22 	call	0x4434	; 0x4434 <srd_set>
	}
	else
	{
		srd_set(0, SRD_E | SRD_F); srd_set(1, SRD_CO); srd_set(2, SRD_CF); srd_set(3, SRD_CF);
	}
}
    2efe:	10 c0       	rjmp	.+32     	; 0x2f20 <mr_heater_menu_onoff+0x4c>
	{
		srd_set(0, SRD_E | SRD_F); srd_set(1, SRD_CO); srd_set(2, SRD_CN);
	}
	else
	{
		srd_set(0, SRD_E | SRD_F); srd_set(1, SRD_CO); srd_set(2, SRD_CF); srd_set(3, SRD_CF);
    2f00:	60 e3       	ldi	r22, 0x30	; 48
    2f02:	80 e0       	ldi	r24, 0x00	; 0
    2f04:	0e 94 1a 22 	call	0x4434	; 0x4434 <srd_set>
    2f08:	6c e5       	ldi	r22, 0x5C	; 92
    2f0a:	81 e0       	ldi	r24, 0x01	; 1
    2f0c:	0e 94 1a 22 	call	0x4434	; 0x4434 <srd_set>
    2f10:	61 e7       	ldi	r22, 0x71	; 113
    2f12:	82 e0       	ldi	r24, 0x02	; 2
    2f14:	0e 94 1a 22 	call	0x4434	; 0x4434 <srd_set>
    2f18:	61 e7       	ldi	r22, 0x71	; 113
    2f1a:	83 e0       	ldi	r24, 0x03	; 3
    2f1c:	0e 94 1a 22 	call	0x4434	; 0x4434 <srd_set>
	}
}
    2f20:	00 00       	nop
    2f22:	0f 90       	pop	r0
    2f24:	df 91       	pop	r29
    2f26:	cf 91       	pop	r28
    2f28:	08 95       	ret

00002f2a <mr_heater_menu_target_temp>:

void mr_heater_menu_target_temp(float temp)
{
    2f2a:	0f 93       	push	r16
    2f2c:	cf 93       	push	r28
    2f2e:	df 93       	push	r29
    2f30:	00 d0       	rcall	.+0      	; 0x2f32 <mr_heater_menu_target_temp+0x8>
    2f32:	00 d0       	rcall	.+0      	; 0x2f34 <mr_heater_menu_target_temp+0xa>
    2f34:	cd b7       	in	r28, 0x3d	; 61
    2f36:	de b7       	in	r29, 0x3e	; 62
    2f38:	69 83       	std	Y+1, r22	; 0x01
    2f3a:	7a 83       	std	Y+2, r23	; 0x02
    2f3c:	8b 83       	std	Y+3, r24	; 0x03
    2f3e:	9c 83       	std	Y+4, r25	; 0x04
	srd_set(0, SRD_E | SRD_F);
    2f40:	60 e3       	ldi	r22, 0x30	; 48
    2f42:	80 e0       	ldi	r24, 0x00	; 0
    2f44:	0e 94 1a 22 	call	0x4434	; 0x4434 <srd_set>
	srd_setfloat(temp, 1, 1, 5);
    2f48:	89 81       	ldd	r24, Y+1	; 0x01
    2f4a:	9a 81       	ldd	r25, Y+2	; 0x02
    2f4c:	ab 81       	ldd	r26, Y+3	; 0x03
    2f4e:	bc 81       	ldd	r27, Y+4	; 0x04
    2f50:	05 e0       	ldi	r16, 0x05	; 5
    2f52:	21 e0       	ldi	r18, 0x01	; 1
    2f54:	41 e0       	ldi	r20, 0x01	; 1
    2f56:	bc 01       	movw	r22, r24
    2f58:	cd 01       	movw	r24, r26
    2f5a:	0e 94 34 22 	call	0x4468	; 0x4468 <srd_setfloat>
}
    2f5e:	00 00       	nop
    2f60:	0f 90       	pop	r0
    2f62:	0f 90       	pop	r0
    2f64:	0f 90       	pop	r0
    2f66:	0f 90       	pop	r0
    2f68:	df 91       	pop	r29
    2f6a:	cf 91       	pop	r28
    2f6c:	0f 91       	pop	r16
    2f6e:	08 95       	ret

00002f70 <mr_heater_menu_pid_p>:

void mr_heater_menu_pid_p(float pid_p)
{
    2f70:	0f 93       	push	r16
    2f72:	cf 93       	push	r28
    2f74:	df 93       	push	r29
    2f76:	00 d0       	rcall	.+0      	; 0x2f78 <mr_heater_menu_pid_p+0x8>
    2f78:	00 d0       	rcall	.+0      	; 0x2f7a <mr_heater_menu_pid_p+0xa>
    2f7a:	cd b7       	in	r28, 0x3d	; 61
    2f7c:	de b7       	in	r29, 0x3e	; 62
    2f7e:	69 83       	std	Y+1, r22	; 0x01
    2f80:	7a 83       	std	Y+2, r23	; 0x02
    2f82:	8b 83       	std	Y+3, r24	; 0x03
    2f84:	9c 83       	std	Y+4, r25	; 0x04
	srd_set(0, SRD_CP);
    2f86:	63 e7       	ldi	r22, 0x73	; 115
    2f88:	80 e0       	ldi	r24, 0x00	; 0
    2f8a:	0e 94 1a 22 	call	0x4434	; 0x4434 <srd_set>
	srd_setfloat(pid_p, 1, 2, 5);
    2f8e:	89 81       	ldd	r24, Y+1	; 0x01
    2f90:	9a 81       	ldd	r25, Y+2	; 0x02
    2f92:	ab 81       	ldd	r26, Y+3	; 0x03
    2f94:	bc 81       	ldd	r27, Y+4	; 0x04
    2f96:	05 e0       	ldi	r16, 0x05	; 5
    2f98:	22 e0       	ldi	r18, 0x02	; 2
    2f9a:	41 e0       	ldi	r20, 0x01	; 1
    2f9c:	bc 01       	movw	r22, r24
    2f9e:	cd 01       	movw	r24, r26
    2fa0:	0e 94 34 22 	call	0x4468	; 0x4468 <srd_setfloat>
}
    2fa4:	00 00       	nop
    2fa6:	0f 90       	pop	r0
    2fa8:	0f 90       	pop	r0
    2faa:	0f 90       	pop	r0
    2fac:	0f 90       	pop	r0
    2fae:	df 91       	pop	r29
    2fb0:	cf 91       	pop	r28
    2fb2:	0f 91       	pop	r16
    2fb4:	08 95       	ret

00002fb6 <mr_heater_menu_pid_i>:

void mr_heater_menu_pid_i(float pid_i)
{
    2fb6:	0f 93       	push	r16
    2fb8:	cf 93       	push	r28
    2fba:	df 93       	push	r29
    2fbc:	00 d0       	rcall	.+0      	; 0x2fbe <mr_heater_menu_pid_i+0x8>
    2fbe:	00 d0       	rcall	.+0      	; 0x2fc0 <mr_heater_menu_pid_i+0xa>
    2fc0:	cd b7       	in	r28, 0x3d	; 61
    2fc2:	de b7       	in	r29, 0x3e	; 62
    2fc4:	69 83       	std	Y+1, r22	; 0x01
    2fc6:	7a 83       	std	Y+2, r23	; 0x02
    2fc8:	8b 83       	std	Y+3, r24	; 0x03
    2fca:	9c 83       	std	Y+4, r25	; 0x04
	srd_set(0, SRD_CI);
    2fcc:	66 e0       	ldi	r22, 0x06	; 6
    2fce:	80 e0       	ldi	r24, 0x00	; 0
    2fd0:	0e 94 1a 22 	call	0x4434	; 0x4434 <srd_set>
	srd_setfloat(pid_i, 1, 2, 5);
    2fd4:	89 81       	ldd	r24, Y+1	; 0x01
    2fd6:	9a 81       	ldd	r25, Y+2	; 0x02
    2fd8:	ab 81       	ldd	r26, Y+3	; 0x03
    2fda:	bc 81       	ldd	r27, Y+4	; 0x04
    2fdc:	05 e0       	ldi	r16, 0x05	; 5
    2fde:	22 e0       	ldi	r18, 0x02	; 2
    2fe0:	41 e0       	ldi	r20, 0x01	; 1
    2fe2:	bc 01       	movw	r22, r24
    2fe4:	cd 01       	movw	r24, r26
    2fe6:	0e 94 34 22 	call	0x4468	; 0x4468 <srd_setfloat>
}
    2fea:	00 00       	nop
    2fec:	0f 90       	pop	r0
    2fee:	0f 90       	pop	r0
    2ff0:	0f 90       	pop	r0
    2ff2:	0f 90       	pop	r0
    2ff4:	df 91       	pop	r29
    2ff6:	cf 91       	pop	r28
    2ff8:	0f 91       	pop	r16
    2ffa:	08 95       	ret

00002ffc <mr_heater_menu_pid_d>:

void mr_heater_menu_pid_d(float pid_d)
{
    2ffc:	0f 93       	push	r16
    2ffe:	cf 93       	push	r28
    3000:	df 93       	push	r29
    3002:	00 d0       	rcall	.+0      	; 0x3004 <mr_heater_menu_pid_d+0x8>
    3004:	00 d0       	rcall	.+0      	; 0x3006 <mr_heater_menu_pid_d+0xa>
    3006:	cd b7       	in	r28, 0x3d	; 61
    3008:	de b7       	in	r29, 0x3e	; 62
    300a:	69 83       	std	Y+1, r22	; 0x01
    300c:	7a 83       	std	Y+2, r23	; 0x02
    300e:	8b 83       	std	Y+3, r24	; 0x03
    3010:	9c 83       	std	Y+4, r25	; 0x04
	srd_set(0, SRD_CD);
    3012:	6e e5       	ldi	r22, 0x5E	; 94
    3014:	80 e0       	ldi	r24, 0x00	; 0
    3016:	0e 94 1a 22 	call	0x4434	; 0x4434 <srd_set>
	srd_setfloat(pid_d, 1, 2, 5);
    301a:	89 81       	ldd	r24, Y+1	; 0x01
    301c:	9a 81       	ldd	r25, Y+2	; 0x02
    301e:	ab 81       	ldd	r26, Y+3	; 0x03
    3020:	bc 81       	ldd	r27, Y+4	; 0x04
    3022:	05 e0       	ldi	r16, 0x05	; 5
    3024:	22 e0       	ldi	r18, 0x02	; 2
    3026:	41 e0       	ldi	r20, 0x01	; 1
    3028:	bc 01       	movw	r22, r24
    302a:	cd 01       	movw	r24, r26
    302c:	0e 94 34 22 	call	0x4468	; 0x4468 <srd_setfloat>
}
    3030:	00 00       	nop
    3032:	0f 90       	pop	r0
    3034:	0f 90       	pop	r0
    3036:	0f 90       	pop	r0
    3038:	0f 90       	pop	r0
    303a:	df 91       	pop	r29
    303c:	cf 91       	pop	r28
    303e:	0f 91       	pop	r16
    3040:	08 95       	ret

00003042 <mr_heater_menu_offset>:

void mr_heater_menu_offset(float offset)
{
    3042:	0f 93       	push	r16
    3044:	cf 93       	push	r28
    3046:	df 93       	push	r29
    3048:	00 d0       	rcall	.+0      	; 0x304a <mr_heater_menu_offset+0x8>
    304a:	00 d0       	rcall	.+0      	; 0x304c <mr_heater_menu_offset+0xa>
    304c:	cd b7       	in	r28, 0x3d	; 61
    304e:	de b7       	in	r29, 0x3e	; 62
    3050:	69 83       	std	Y+1, r22	; 0x01
    3052:	7a 83       	std	Y+2, r23	; 0x02
    3054:	8b 83       	std	Y+3, r24	; 0x03
    3056:	9c 83       	std	Y+4, r25	; 0x04
	srd_set(0, SRD_E | SRD_F);
    3058:	60 e3       	ldi	r22, 0x30	; 48
    305a:	80 e0       	ldi	r24, 0x00	; 0
    305c:	0e 94 1a 22 	call	0x4434	; 0x4434 <srd_set>
	srd_setfloat(offset, 1, 1, 5);
    3060:	89 81       	ldd	r24, Y+1	; 0x01
    3062:	9a 81       	ldd	r25, Y+2	; 0x02
    3064:	ab 81       	ldd	r26, Y+3	; 0x03
    3066:	bc 81       	ldd	r27, Y+4	; 0x04
    3068:	05 e0       	ldi	r16, 0x05	; 5
    306a:	21 e0       	ldi	r18, 0x01	; 1
    306c:	41 e0       	ldi	r20, 0x01	; 1
    306e:	bc 01       	movw	r22, r24
    3070:	cd 01       	movw	r24, r26
    3072:	0e 94 34 22 	call	0x4468	; 0x4468 <srd_setfloat>
}
    3076:	00 00       	nop
    3078:	0f 90       	pop	r0
    307a:	0f 90       	pop	r0
    307c:	0f 90       	pop	r0
    307e:	0f 90       	pop	r0
    3080:	df 91       	pop	r29
    3082:	cf 91       	pop	r28
    3084:	0f 91       	pop	r16
    3086:	08 95       	ret

00003088 <mr_stirrer_menu_dc>:

void mr_stirrer_menu_dc(uint8_t dutycycle)
{
    3088:	cf 93       	push	r28
    308a:	df 93       	push	r29
    308c:	1f 92       	push	r1
    308e:	cd b7       	in	r28, 0x3d	; 61
    3090:	de b7       	in	r29, 0x3e	; 62
    3092:	89 83       	std	Y+1, r24	; 0x01
	srd_set(0, SRD_E | SRD_F);
    3094:	60 e3       	ldi	r22, 0x30	; 48
    3096:	80 e0       	ldi	r24, 0x00	; 0
    3098:	0e 94 1a 22 	call	0x4434	; 0x4434 <srd_set>
	if(dutycycle > 0)
    309c:	89 81       	ldd	r24, Y+1	; 0x01
    309e:	88 23       	and	r24, r24
    30a0:	41 f0       	breq	.+16     	; 0x30b2 <mr_stirrer_menu_dc+0x2a>
	{		
		srd_setint16((int16_t)dutycycle, 1, 5);
    30a2:	89 81       	ldd	r24, Y+1	; 0x01
    30a4:	88 2f       	mov	r24, r24
    30a6:	90 e0       	ldi	r25, 0x00	; 0
    30a8:	45 e0       	ldi	r20, 0x05	; 5
    30aa:	61 e0       	ldi	r22, 0x01	; 1
    30ac:	0e 94 6c 22 	call	0x44d8	; 0x44d8 <srd_setint16>
	}
	else
	{
		srd_set(1, SRD_CO); srd_set(2, SRD_CF); srd_set(3, SRD_CF); 
	}	
}
    30b0:	0c c0       	rjmp	.+24     	; 0x30ca <mr_stirrer_menu_dc+0x42>
	{		
		srd_setint16((int16_t)dutycycle, 1, 5);
	}
	else
	{
		srd_set(1, SRD_CO); srd_set(2, SRD_CF); srd_set(3, SRD_CF); 
    30b2:	6c e5       	ldi	r22, 0x5C	; 92
    30b4:	81 e0       	ldi	r24, 0x01	; 1
    30b6:	0e 94 1a 22 	call	0x4434	; 0x4434 <srd_set>
    30ba:	61 e7       	ldi	r22, 0x71	; 113
    30bc:	82 e0       	ldi	r24, 0x02	; 2
    30be:	0e 94 1a 22 	call	0x4434	; 0x4434 <srd_set>
    30c2:	61 e7       	ldi	r22, 0x71	; 113
    30c4:	83 e0       	ldi	r24, 0x03	; 3
    30c6:	0e 94 1a 22 	call	0x4434	; 0x4434 <srd_set>
	}	
}
    30ca:	00 00       	nop
    30cc:	0f 90       	pop	r0
    30ce:	df 91       	pop	r29
    30d0:	cf 91       	pop	r28
    30d2:	08 95       	ret

000030d4 <mr_tprobe_menu>:

void mr_tprobe_menu(uint8_t menu_index)
{
    30d4:	cf 93       	push	r28
    30d6:	df 93       	push	r29
    30d8:	1f 92       	push	r1
    30da:	cd b7       	in	r28, 0x3d	; 61
    30dc:	de b7       	in	r29, 0x3e	; 62
    30de:	89 83       	std	Y+1, r24	; 0x01
	switch(menu_index)
    30e0:	89 81       	ldd	r24, Y+1	; 0x01
    30e2:	88 2f       	mov	r24, r24
    30e4:	90 e0       	ldi	r25, 0x00	; 0
    30e6:	82 30       	cpi	r24, 0x02	; 2
    30e8:	91 05       	cpc	r25, r1
    30ea:	01 f1       	breq	.+64     	; 0x312c <mr_tprobe_menu+0x58>
    30ec:	83 30       	cpi	r24, 0x03	; 3
    30ee:	91 05       	cpc	r25, r1
    30f0:	2c f4       	brge	.+10     	; 0x30fc <mr_tprobe_menu+0x28>
    30f2:	00 97       	sbiw	r24, 0x00	; 0
    30f4:	49 f0       	breq	.+18     	; 0x3108 <mr_tprobe_menu+0x34>
    30f6:	01 97       	sbiw	r24, 0x01	; 1
    30f8:	81 f0       	breq	.+32     	; 0x311a <mr_tprobe_menu+0x46>
			break;
		case 4: // thermistor 3
			srd_set(0, SRD_CT); srd_set(1, SRD_D3);
			break;
	}
}
    30fa:	33 c0       	rjmp	.+102    	; 0x3162 <mr_tprobe_menu+0x8e>
	}	
}

void mr_tprobe_menu(uint8_t menu_index)
{
	switch(menu_index)
    30fc:	83 30       	cpi	r24, 0x03	; 3
    30fe:	91 05       	cpc	r25, r1
    3100:	f1 f0       	breq	.+60     	; 0x313e <mr_tprobe_menu+0x6a>
    3102:	04 97       	sbiw	r24, 0x04	; 4
    3104:	29 f1       	breq	.+74     	; 0x3150 <mr_tprobe_menu+0x7c>
			break;
		case 4: // thermistor 3
			srd_set(0, SRD_CT); srd_set(1, SRD_D3);
			break;
	}
}
    3106:	2d c0       	rjmp	.+90     	; 0x3162 <mr_tprobe_menu+0x8e>
void mr_tprobe_menu(uint8_t menu_index)
{
	switch(menu_index)
	{
		case 0: // "--"
			srd_set(0, SRD_MINUS); srd_set(1, SRD_MINUS);
    3108:	60 e4       	ldi	r22, 0x40	; 64
    310a:	80 e0       	ldi	r24, 0x00	; 0
    310c:	0e 94 1a 22 	call	0x4434	; 0x4434 <srd_set>
    3110:	60 e4       	ldi	r22, 0x40	; 64
    3112:	81 e0       	ldi	r24, 0x01	; 1
    3114:	0e 94 1a 22 	call	0x4434	; 0x4434 <srd_set>
			break;
    3118:	24 c0       	rjmp	.+72     	; 0x3162 <mr_tprobe_menu+0x8e>
		case 1: // thermistor 0
			srd_set(0, SRD_CT); srd_set(1, SRD_D0);
    311a:	68 e7       	ldi	r22, 0x78	; 120
    311c:	80 e0       	ldi	r24, 0x00	; 0
    311e:	0e 94 1a 22 	call	0x4434	; 0x4434 <srd_set>
    3122:	6f e3       	ldi	r22, 0x3F	; 63
    3124:	81 e0       	ldi	r24, 0x01	; 1
    3126:	0e 94 1a 22 	call	0x4434	; 0x4434 <srd_set>
			break;
    312a:	1b c0       	rjmp	.+54     	; 0x3162 <mr_tprobe_menu+0x8e>
		case 2: // thermistor 1
			srd_set(0, SRD_CT); srd_set(1, SRD_D1);
    312c:	68 e7       	ldi	r22, 0x78	; 120
    312e:	80 e0       	ldi	r24, 0x00	; 0
    3130:	0e 94 1a 22 	call	0x4434	; 0x4434 <srd_set>
    3134:	66 e0       	ldi	r22, 0x06	; 6
    3136:	81 e0       	ldi	r24, 0x01	; 1
    3138:	0e 94 1a 22 	call	0x4434	; 0x4434 <srd_set>
			break;
    313c:	12 c0       	rjmp	.+36     	; 0x3162 <mr_tprobe_menu+0x8e>
		case 3: // thermistor 2
			srd_set(0, SRD_CT); srd_set(1, SRD_D2);
    313e:	68 e7       	ldi	r22, 0x78	; 120
    3140:	80 e0       	ldi	r24, 0x00	; 0
    3142:	0e 94 1a 22 	call	0x4434	; 0x4434 <srd_set>
    3146:	6b e5       	ldi	r22, 0x5B	; 91
    3148:	81 e0       	ldi	r24, 0x01	; 1
    314a:	0e 94 1a 22 	call	0x4434	; 0x4434 <srd_set>
			break;
    314e:	09 c0       	rjmp	.+18     	; 0x3162 <mr_tprobe_menu+0x8e>
		case 4: // thermistor 3
			srd_set(0, SRD_CT); srd_set(1, SRD_D3);
    3150:	68 e7       	ldi	r22, 0x78	; 120
    3152:	80 e0       	ldi	r24, 0x00	; 0
    3154:	0e 94 1a 22 	call	0x4434	; 0x4434 <srd_set>
    3158:	6f e4       	ldi	r22, 0x4F	; 79
    315a:	81 e0       	ldi	r24, 0x01	; 1
    315c:	0e 94 1a 22 	call	0x4434	; 0x4434 <srd_set>
			break;
    3160:	00 00       	nop
	}
}
    3162:	00 00       	nop
    3164:	0f 90       	pop	r0
    3166:	df 91       	pop	r29
    3168:	cf 91       	pop	r28
    316a:	08 95       	ret

0000316c <mr_tprobe_calib_menu>:

void mr_tprobe_calib_menu(float resistance)
{
    316c:	0f 93       	push	r16
    316e:	cf 93       	push	r28
    3170:	df 93       	push	r29
    3172:	00 d0       	rcall	.+0      	; 0x3174 <mr_tprobe_calib_menu+0x8>
    3174:	00 d0       	rcall	.+0      	; 0x3176 <mr_tprobe_calib_menu+0xa>
    3176:	cd b7       	in	r28, 0x3d	; 61
    3178:	de b7       	in	r29, 0x3e	; 62
    317a:	69 83       	std	Y+1, r22	; 0x01
    317c:	7a 83       	std	Y+2, r23	; 0x02
    317e:	8b 83       	std	Y+3, r24	; 0x03
    3180:	9c 83       	std	Y+4, r25	; 0x04
	srd_setfloat(fabs(resistance) / 1000, 0, 3, 6);
    3182:	89 81       	ldd	r24, Y+1	; 0x01
    3184:	9a 81       	ldd	r25, Y+2	; 0x02
    3186:	ab 81       	ldd	r26, Y+3	; 0x03
    3188:	bc 81       	ldd	r27, Y+4	; 0x04
    318a:	bf 77       	andi	r27, 0x7F	; 127
    318c:	20 e0       	ldi	r18, 0x00	; 0
    318e:	30 e0       	ldi	r19, 0x00	; 0
    3190:	4a e7       	ldi	r20, 0x7A	; 122
    3192:	54 e4       	ldi	r21, 0x44	; 68
    3194:	bc 01       	movw	r22, r24
    3196:	cd 01       	movw	r24, r26
    3198:	0e 94 6b 29 	call	0x52d6	; 0x52d6 <__divsf3>
    319c:	dc 01       	movw	r26, r24
    319e:	cb 01       	movw	r24, r22
    31a0:	06 e0       	ldi	r16, 0x06	; 6
    31a2:	23 e0       	ldi	r18, 0x03	; 3
    31a4:	40 e0       	ldi	r20, 0x00	; 0
    31a6:	bc 01       	movw	r22, r24
    31a8:	cd 01       	movw	r24, r26
    31aa:	0e 94 34 22 	call	0x4468	; 0x4468 <srd_setfloat>
}
    31ae:	00 00       	nop
    31b0:	0f 90       	pop	r0
    31b2:	0f 90       	pop	r0
    31b4:	0f 90       	pop	r0
    31b6:	0f 90       	pop	r0
    31b8:	df 91       	pop	r29
    31ba:	cf 91       	pop	r28
    31bc:	0f 91       	pop	r16
    31be:	08 95       	ret

000031c0 <mr_tprobe_calib_menu_nc>:

void mr_tprobe_calib_menu_nc()
{
    31c0:	cf 93       	push	r28
    31c2:	df 93       	push	r29
    31c4:	cd b7       	in	r28, 0x3d	; 61
    31c6:	de b7       	in	r29, 0x3e	; 62
	srd_set(0,SRD_CN); srd_set(1,SRD_CC);
    31c8:	64 e5       	ldi	r22, 0x54	; 84
    31ca:	80 e0       	ldi	r24, 0x00	; 0
    31cc:	0e 94 1a 22 	call	0x4434	; 0x4434 <srd_set>
    31d0:	69 e3       	ldi	r22, 0x39	; 57
    31d2:	81 e0       	ldi	r24, 0x01	; 1
    31d4:	0e 94 1a 22 	call	0x4434	; 0x4434 <srd_set>
}
    31d8:	00 00       	nop
    31da:	df 91       	pop	r29
    31dc:	cf 91       	pop	r28
    31de:	08 95       	ret

000031e0 <mr_thermistor_error>:

void mr_thermistor_error(ErrorCode error)
{
    31e0:	cf 93       	push	r28
    31e2:	df 93       	push	r29
    31e4:	1f 92       	push	r1
    31e6:	cd b7       	in	r28, 0x3d	; 61
    31e8:	de b7       	in	r29, 0x3e	; 62
    31ea:	89 83       	std	Y+1, r24	; 0x01
	
	switch(error)
    31ec:	89 81       	ldd	r24, Y+1	; 0x01
    31ee:	88 2f       	mov	r24, r24
    31f0:	90 e0       	ldi	r25, 0x00	; 0
    31f2:	83 30       	cpi	r24, 0x03	; 3
    31f4:	91 05       	cpc	r25, r1
    31f6:	09 f4       	brne	.+2      	; 0x31fa <mr_thermistor_error+0x1a>
    31f8:	47 c0       	rjmp	.+142    	; 0x3288 <mr_thermistor_error+0xa8>
    31fa:	84 30       	cpi	r24, 0x04	; 4
    31fc:	91 05       	cpc	r25, r1
    31fe:	34 f4       	brge	.+12     	; 0x320c <mr_thermistor_error+0x2c>
    3200:	81 30       	cpi	r24, 0x01	; 1
    3202:	91 05       	cpc	r25, r1
    3204:	41 f1       	breq	.+80     	; 0x3256 <mr_thermistor_error+0x76>
    3206:	02 97       	sbiw	r24, 0x02	; 2
    3208:	69 f0       	breq	.+26     	; 0x3224 <mr_thermistor_error+0x44>
    320a:	9a c0       	rjmp	.+308    	; 0x3340 <mr_thermistor_error+0x160>
    320c:	85 30       	cpi	r24, 0x05	; 5
    320e:	91 05       	cpc	r25, r1
    3210:	09 f4       	brne	.+2      	; 0x3214 <mr_thermistor_error+0x34>
    3212:	81 c0       	rjmp	.+258    	; 0x3316 <mr_thermistor_error+0x136>
    3214:	85 30       	cpi	r24, 0x05	; 5
    3216:	91 05       	cpc	r25, r1
    3218:	0c f4       	brge	.+2      	; 0x321c <mr_thermistor_error+0x3c>
    321a:	4f c0       	rjmp	.+158    	; 0x32ba <mr_thermistor_error+0xda>
    321c:	06 97       	sbiw	r24, 0x06	; 6
    321e:	09 f4       	brne	.+2      	; 0x3222 <mr_thermistor_error+0x42>
    3220:	65 c0       	rjmp	.+202    	; 0x32ec <mr_thermistor_error+0x10c>
    3222:	8e c0       	rjmp	.+284    	; 0x3340 <mr_thermistor_error+0x160>
	{
		case EC_THERMISTOR_SHORT_CIRCUIT:
			srd_set(0, SRD_CT); srd_set(1, SRD_CH | SRD_DOT); srd_set(2, SRD_CS); srd_set(3, SRD_CH); srd_set(4, SRD_CR); srd_set(5, SRD_CT);
    3224:	68 e7       	ldi	r22, 0x78	; 120
    3226:	80 e0       	ldi	r24, 0x00	; 0
    3228:	0e 94 1a 22 	call	0x4434	; 0x4434 <srd_set>
    322c:	64 ef       	ldi	r22, 0xF4	; 244
    322e:	81 e0       	ldi	r24, 0x01	; 1
    3230:	0e 94 1a 22 	call	0x4434	; 0x4434 <srd_set>
    3234:	6d e6       	ldi	r22, 0x6D	; 109
    3236:	82 e0       	ldi	r24, 0x02	; 2
    3238:	0e 94 1a 22 	call	0x4434	; 0x4434 <srd_set>
    323c:	64 e7       	ldi	r22, 0x74	; 116
    323e:	83 e0       	ldi	r24, 0x03	; 3
    3240:	0e 94 1a 22 	call	0x4434	; 0x4434 <srd_set>
    3244:	60 e5       	ldi	r22, 0x50	; 80
    3246:	84 e0       	ldi	r24, 0x04	; 4
    3248:	0e 94 1a 22 	call	0x4434	; 0x4434 <srd_set>
    324c:	68 e7       	ldi	r22, 0x78	; 120
    324e:	85 e0       	ldi	r24, 0x05	; 5
    3250:	0e 94 1a 22 	call	0x4434	; 0x4434 <srd_set>
			break;
    3254:	8a c0       	rjmp	.+276    	; 0x336a <mr_thermistor_error+0x18a>
		case EC_THERMISTOR_OPEN_CIRCUIT:
			srd_set(0, SRD_CT); srd_set(1, SRD_CH | SRD_DOT); srd_set(2, SRD_CO); srd_set(3, SRD_CP); srd_set(4, SRD_CE); srd_set(5, SRD_CN);
    3256:	68 e7       	ldi	r22, 0x78	; 120
    3258:	80 e0       	ldi	r24, 0x00	; 0
    325a:	0e 94 1a 22 	call	0x4434	; 0x4434 <srd_set>
    325e:	64 ef       	ldi	r22, 0xF4	; 244
    3260:	81 e0       	ldi	r24, 0x01	; 1
    3262:	0e 94 1a 22 	call	0x4434	; 0x4434 <srd_set>
    3266:	6c e5       	ldi	r22, 0x5C	; 92
    3268:	82 e0       	ldi	r24, 0x02	; 2
    326a:	0e 94 1a 22 	call	0x4434	; 0x4434 <srd_set>
    326e:	63 e7       	ldi	r22, 0x73	; 115
    3270:	83 e0       	ldi	r24, 0x03	; 3
    3272:	0e 94 1a 22 	call	0x4434	; 0x4434 <srd_set>
    3276:	69 e7       	ldi	r22, 0x79	; 121
    3278:	84 e0       	ldi	r24, 0x04	; 4
    327a:	0e 94 1a 22 	call	0x4434	; 0x4434 <srd_set>
    327e:	64 e5       	ldi	r22, 0x54	; 84
    3280:	85 e0       	ldi	r24, 0x05	; 5
    3282:	0e 94 1a 22 	call	0x4434	; 0x4434 <srd_set>
			break;
    3286:	71 c0       	rjmp	.+226    	; 0x336a <mr_thermistor_error+0x18a>
		case EC_THERMISTOR_NOT_RESPONDING:
			srd_set(0, SRD_CT); srd_set(1, SRD_CH | SRD_DOT); srd_set(2, SRD_CN); srd_set(3, SRD_CR); srd_set(4, SRD_CE); srd_set(5, SRD_CS);
    3288:	68 e7       	ldi	r22, 0x78	; 120
    328a:	80 e0       	ldi	r24, 0x00	; 0
    328c:	0e 94 1a 22 	call	0x4434	; 0x4434 <srd_set>
    3290:	64 ef       	ldi	r22, 0xF4	; 244
    3292:	81 e0       	ldi	r24, 0x01	; 1
    3294:	0e 94 1a 22 	call	0x4434	; 0x4434 <srd_set>
    3298:	64 e5       	ldi	r22, 0x54	; 84
    329a:	82 e0       	ldi	r24, 0x02	; 2
    329c:	0e 94 1a 22 	call	0x4434	; 0x4434 <srd_set>
    32a0:	60 e5       	ldi	r22, 0x50	; 80
    32a2:	83 e0       	ldi	r24, 0x03	; 3
    32a4:	0e 94 1a 22 	call	0x4434	; 0x4434 <srd_set>
    32a8:	69 e7       	ldi	r22, 0x79	; 121
    32aa:	84 e0       	ldi	r24, 0x04	; 4
    32ac:	0e 94 1a 22 	call	0x4434	; 0x4434 <srd_set>
    32b0:	6d e6       	ldi	r22, 0x6D	; 109
    32b2:	85 e0       	ldi	r24, 0x05	; 5
    32b4:	0e 94 1a 22 	call	0x4434	; 0x4434 <srd_set>
			break;
    32b8:	58 c0       	rjmp	.+176    	; 0x336a <mr_thermistor_error+0x18a>
		case EC_NO_CONTROLLING_TPROBE:
			srd_set(0, SRD_CT); srd_set(1, SRD_CH | SRD_DOT); srd_set(2, SRD_CN); srd_set(3, SRD_CO); srd_set(4, SRD_CP); srd_set(5, SRD_CE);
    32ba:	68 e7       	ldi	r22, 0x78	; 120
    32bc:	80 e0       	ldi	r24, 0x00	; 0
    32be:	0e 94 1a 22 	call	0x4434	; 0x4434 <srd_set>
    32c2:	64 ef       	ldi	r22, 0xF4	; 244
    32c4:	81 e0       	ldi	r24, 0x01	; 1
    32c6:	0e 94 1a 22 	call	0x4434	; 0x4434 <srd_set>
    32ca:	64 e5       	ldi	r22, 0x54	; 84
    32cc:	82 e0       	ldi	r24, 0x02	; 2
    32ce:	0e 94 1a 22 	call	0x4434	; 0x4434 <srd_set>
    32d2:	6c e5       	ldi	r22, 0x5C	; 92
    32d4:	83 e0       	ldi	r24, 0x03	; 3
    32d6:	0e 94 1a 22 	call	0x4434	; 0x4434 <srd_set>
    32da:	63 e7       	ldi	r22, 0x73	; 115
    32dc:	84 e0       	ldi	r24, 0x04	; 4
    32de:	0e 94 1a 22 	call	0x4434	; 0x4434 <srd_set>
    32e2:	69 e7       	ldi	r22, 0x79	; 121
    32e4:	85 e0       	ldi	r24, 0x05	; 5
    32e6:	0e 94 1a 22 	call	0x4434	; 0x4434 <srd_set>
			break;
    32ea:	3f c0       	rjmp	.+126    	; 0x336a <mr_thermistor_error+0x18a>
		case EC_THERMISTOR_MIN_TEMP:
			srd_set(0, SRD_CT); srd_set(1, SRD_CH | SRD_DOT); srd_set(2, SRD_CL); srd_set(3, SRD_CT); srd_set(4, SRD_CP);
    32ec:	68 e7       	ldi	r22, 0x78	; 120
    32ee:	80 e0       	ldi	r24, 0x00	; 0
    32f0:	0e 94 1a 22 	call	0x4434	; 0x4434 <srd_set>
    32f4:	64 ef       	ldi	r22, 0xF4	; 244
    32f6:	81 e0       	ldi	r24, 0x01	; 1
    32f8:	0e 94 1a 22 	call	0x4434	; 0x4434 <srd_set>
    32fc:	68 e3       	ldi	r22, 0x38	; 56
    32fe:	82 e0       	ldi	r24, 0x02	; 2
    3300:	0e 94 1a 22 	call	0x4434	; 0x4434 <srd_set>
    3304:	68 e7       	ldi	r22, 0x78	; 120
    3306:	83 e0       	ldi	r24, 0x03	; 3
    3308:	0e 94 1a 22 	call	0x4434	; 0x4434 <srd_set>
    330c:	63 e7       	ldi	r22, 0x73	; 115
    330e:	84 e0       	ldi	r24, 0x04	; 4
    3310:	0e 94 1a 22 	call	0x4434	; 0x4434 <srd_set>
			break;
    3314:	2a c0       	rjmp	.+84     	; 0x336a <mr_thermistor_error+0x18a>
		case EC_THERMISTOR_MAX_TEMP:
			srd_set(0, SRD_CT); srd_set(1, SRD_CH | SRD_DOT); srd_set(2, SRD_CH); srd_set(3, SRD_CT); srd_set(4, SRD_CP);
    3316:	68 e7       	ldi	r22, 0x78	; 120
    3318:	80 e0       	ldi	r24, 0x00	; 0
    331a:	0e 94 1a 22 	call	0x4434	; 0x4434 <srd_set>
    331e:	64 ef       	ldi	r22, 0xF4	; 244
    3320:	81 e0       	ldi	r24, 0x01	; 1
    3322:	0e 94 1a 22 	call	0x4434	; 0x4434 <srd_set>
    3326:	64 e7       	ldi	r22, 0x74	; 116
    3328:	82 e0       	ldi	r24, 0x02	; 2
    332a:	0e 94 1a 22 	call	0x4434	; 0x4434 <srd_set>
    332e:	68 e7       	ldi	r22, 0x78	; 120
    3330:	83 e0       	ldi	r24, 0x03	; 3
    3332:	0e 94 1a 22 	call	0x4434	; 0x4434 <srd_set>
    3336:	63 e7       	ldi	r22, 0x73	; 115
    3338:	84 e0       	ldi	r24, 0x04	; 4
    333a:	0e 94 1a 22 	call	0x4434	; 0x4434 <srd_set>
			break;
    333e:	15 c0       	rjmp	.+42     	; 0x336a <mr_thermistor_error+0x18a>
		default:
			srd_set(0, SRD_CE); srd_set(1, SRD_CR); srd_set(2, SRD_CR); srd_set(3, SRD_CO); srd_set(4, SRD_CR);
    3340:	69 e7       	ldi	r22, 0x79	; 121
    3342:	80 e0       	ldi	r24, 0x00	; 0
    3344:	0e 94 1a 22 	call	0x4434	; 0x4434 <srd_set>
    3348:	60 e5       	ldi	r22, 0x50	; 80
    334a:	81 e0       	ldi	r24, 0x01	; 1
    334c:	0e 94 1a 22 	call	0x4434	; 0x4434 <srd_set>
    3350:	60 e5       	ldi	r22, 0x50	; 80
    3352:	82 e0       	ldi	r24, 0x02	; 2
    3354:	0e 94 1a 22 	call	0x4434	; 0x4434 <srd_set>
    3358:	6c e5       	ldi	r22, 0x5C	; 92
    335a:	83 e0       	ldi	r24, 0x03	; 3
    335c:	0e 94 1a 22 	call	0x4434	; 0x4434 <srd_set>
    3360:	60 e5       	ldi	r22, 0x50	; 80
    3362:	84 e0       	ldi	r24, 0x04	; 4
    3364:	0e 94 1a 22 	call	0x4434	; 0x4434 <srd_set>
			break;
    3368:	00 00       	nop
	}
    336a:	00 00       	nop
    336c:	0f 90       	pop	r0
    336e:	df 91       	pop	r29
    3370:	cf 91       	pop	r28
    3372:	08 95       	ret

00003374 <decpowi16>:
	return num1 < num2 ? num1 : num2;
}
uint64_t umin64(uint64_t num1, uint64_t num2)
{
	return num1 < num2 ? num1 : num2;
}
    3374:	cf 93       	push	r28
    3376:	df 93       	push	r29
    3378:	00 d0       	rcall	.+0      	; 0x337a <decpowi16+0x6>
    337a:	00 d0       	rcall	.+0      	; 0x337c <decpowi16+0x8>
    337c:	1f 92       	push	r1
    337e:	cd b7       	in	r28, 0x3d	; 61
    3380:	de b7       	in	r29, 0x3e	; 62
    3382:	9d 83       	std	Y+5, r25	; 0x05
    3384:	8c 83       	std	Y+4, r24	; 0x04
    3386:	8c 81       	ldd	r24, Y+4	; 0x04
    3388:	9d 81       	ldd	r25, Y+5	; 0x05
    338a:	99 23       	and	r25, r25
    338c:	14 f4       	brge	.+4      	; 0x3392 <decpowi16+0x1e>
    338e:	0e 94 d7 2c 	call	0x59ae	; 0x59ae <abort>
    3392:	81 e0       	ldi	r24, 0x01	; 1
    3394:	90 e0       	ldi	r25, 0x00	; 0
    3396:	9a 83       	std	Y+2, r25	; 0x02
    3398:	89 83       	std	Y+1, r24	; 0x01
    339a:	1b 82       	std	Y+3, r1	; 0x03
    339c:	10 c0       	rjmp	.+32     	; 0x33be <decpowi16+0x4a>
    339e:	89 81       	ldd	r24, Y+1	; 0x01
    33a0:	9a 81       	ldd	r25, Y+2	; 0x02
    33a2:	88 0f       	add	r24, r24
    33a4:	99 1f       	adc	r25, r25
    33a6:	9c 01       	movw	r18, r24
    33a8:	22 0f       	add	r18, r18
    33aa:	33 1f       	adc	r19, r19
    33ac:	22 0f       	add	r18, r18
    33ae:	33 1f       	adc	r19, r19
    33b0:	82 0f       	add	r24, r18
    33b2:	93 1f       	adc	r25, r19
    33b4:	9a 83       	std	Y+2, r25	; 0x02
    33b6:	89 83       	std	Y+1, r24	; 0x01
    33b8:	8b 81       	ldd	r24, Y+3	; 0x03
    33ba:	8f 5f       	subi	r24, 0xFF	; 255
    33bc:	8b 83       	std	Y+3, r24	; 0x03
    33be:	8b 81       	ldd	r24, Y+3	; 0x03
    33c0:	28 2f       	mov	r18, r24
    33c2:	30 e0       	ldi	r19, 0x00	; 0
    33c4:	8c 81       	ldd	r24, Y+4	; 0x04
    33c6:	9d 81       	ldd	r25, Y+5	; 0x05
    33c8:	28 17       	cp	r18, r24
    33ca:	39 07       	cpc	r19, r25
    33cc:	44 f3       	brlt	.-48     	; 0x339e <decpowi16+0x2a>
    33ce:	89 81       	ldd	r24, Y+1	; 0x01
    33d0:	9a 81       	ldd	r25, Y+2	; 0x02
    33d2:	0f 90       	pop	r0
    33d4:	0f 90       	pop	r0
    33d6:	0f 90       	pop	r0
    33d8:	0f 90       	pop	r0
    33da:	0f 90       	pop	r0
    33dc:	df 91       	pop	r29
    33de:	cf 91       	pop	r28
    33e0:	08 95       	ret

000033e2 <imax8>:
    33e2:	cf 93       	push	r28
    33e4:	df 93       	push	r29
    33e6:	00 d0       	rcall	.+0      	; 0x33e8 <imax8+0x6>
    33e8:	cd b7       	in	r28, 0x3d	; 61
    33ea:	de b7       	in	r29, 0x3e	; 62
    33ec:	89 83       	std	Y+1, r24	; 0x01
    33ee:	6a 83       	std	Y+2, r22	; 0x02
    33f0:	99 81       	ldd	r25, Y+1	; 0x01
    33f2:	8a 81       	ldd	r24, Y+2	; 0x02
    33f4:	89 17       	cp	r24, r25
    33f6:	0c f4       	brge	.+2      	; 0x33fa <imax8+0x18>
    33f8:	89 2f       	mov	r24, r25
    33fa:	0f 90       	pop	r0
    33fc:	0f 90       	pop	r0
    33fe:	df 91       	pop	r29
    3400:	cf 91       	pop	r28
    3402:	08 95       	ret

00003404 <imax16>:
    3404:	cf 93       	push	r28
    3406:	df 93       	push	r29
    3408:	00 d0       	rcall	.+0      	; 0x340a <imax16+0x6>
    340a:	00 d0       	rcall	.+0      	; 0x340c <imax16+0x8>
    340c:	cd b7       	in	r28, 0x3d	; 61
    340e:	de b7       	in	r29, 0x3e	; 62
    3410:	9a 83       	std	Y+2, r25	; 0x02
    3412:	89 83       	std	Y+1, r24	; 0x01
    3414:	7c 83       	std	Y+4, r23	; 0x04
    3416:	6b 83       	std	Y+3, r22	; 0x03
    3418:	29 81       	ldd	r18, Y+1	; 0x01
    341a:	3a 81       	ldd	r19, Y+2	; 0x02
    341c:	8b 81       	ldd	r24, Y+3	; 0x03
    341e:	9c 81       	ldd	r25, Y+4	; 0x04
    3420:	82 17       	cp	r24, r18
    3422:	93 07       	cpc	r25, r19
    3424:	0c f4       	brge	.+2      	; 0x3428 <imax16+0x24>
    3426:	c9 01       	movw	r24, r18
    3428:	0f 90       	pop	r0
    342a:	0f 90       	pop	r0
    342c:	0f 90       	pop	r0
    342e:	0f 90       	pop	r0
    3430:	df 91       	pop	r29
    3432:	cf 91       	pop	r28
    3434:	08 95       	ret

00003436 <imin8>:
    3436:	cf 93       	push	r28
    3438:	df 93       	push	r29
    343a:	00 d0       	rcall	.+0      	; 0x343c <imin8+0x6>
    343c:	cd b7       	in	r28, 0x3d	; 61
    343e:	de b7       	in	r29, 0x3e	; 62
    3440:	89 83       	std	Y+1, r24	; 0x01
    3442:	6a 83       	std	Y+2, r22	; 0x02
    3444:	99 81       	ldd	r25, Y+1	; 0x01
    3446:	8a 81       	ldd	r24, Y+2	; 0x02
    3448:	98 17       	cp	r25, r24
    344a:	0c f4       	brge	.+2      	; 0x344e <imin8+0x18>
    344c:	89 2f       	mov	r24, r25
    344e:	0f 90       	pop	r0
    3450:	0f 90       	pop	r0
    3452:	df 91       	pop	r29
    3454:	cf 91       	pop	r28
    3456:	08 95       	ret

00003458 <imin16>:
    3458:	cf 93       	push	r28
    345a:	df 93       	push	r29
    345c:	00 d0       	rcall	.+0      	; 0x345e <imin16+0x6>
    345e:	00 d0       	rcall	.+0      	; 0x3460 <imin16+0x8>
    3460:	cd b7       	in	r28, 0x3d	; 61
    3462:	de b7       	in	r29, 0x3e	; 62
    3464:	9a 83       	std	Y+2, r25	; 0x02
    3466:	89 83       	std	Y+1, r24	; 0x01
    3468:	7c 83       	std	Y+4, r23	; 0x04
    346a:	6b 83       	std	Y+3, r22	; 0x03
    346c:	29 81       	ldd	r18, Y+1	; 0x01
    346e:	3a 81       	ldd	r19, Y+2	; 0x02
    3470:	8b 81       	ldd	r24, Y+3	; 0x03
    3472:	9c 81       	ldd	r25, Y+4	; 0x04
    3474:	28 17       	cp	r18, r24
    3476:	39 07       	cpc	r19, r25
    3478:	0c f4       	brge	.+2      	; 0x347c <imin16+0x24>
    347a:	c9 01       	movw	r24, r18
    347c:	0f 90       	pop	r0
    347e:	0f 90       	pop	r0
    3480:	0f 90       	pop	r0
    3482:	0f 90       	pop	r0
    3484:	df 91       	pop	r29
    3486:	cf 91       	pop	r28
    3488:	08 95       	ret

0000348a <umax8>:
    348a:	cf 93       	push	r28
    348c:	df 93       	push	r29
    348e:	00 d0       	rcall	.+0      	; 0x3490 <umax8+0x6>
    3490:	cd b7       	in	r28, 0x3d	; 61
    3492:	de b7       	in	r29, 0x3e	; 62
    3494:	89 83       	std	Y+1, r24	; 0x01
    3496:	6a 83       	std	Y+2, r22	; 0x02
    3498:	99 81       	ldd	r25, Y+1	; 0x01
    349a:	8a 81       	ldd	r24, Y+2	; 0x02
    349c:	89 17       	cp	r24, r25
    349e:	08 f4       	brcc	.+2      	; 0x34a2 <umax8+0x18>
    34a0:	89 2f       	mov	r24, r25
    34a2:	0f 90       	pop	r0
    34a4:	0f 90       	pop	r0
    34a6:	df 91       	pop	r29
    34a8:	cf 91       	pop	r28
    34aa:	08 95       	ret

000034ac <umin8>:
    34ac:	cf 93       	push	r28
    34ae:	df 93       	push	r29
    34b0:	00 d0       	rcall	.+0      	; 0x34b2 <umin8+0x6>
    34b2:	cd b7       	in	r28, 0x3d	; 61
    34b4:	de b7       	in	r29, 0x3e	; 62
    34b6:	89 83       	std	Y+1, r24	; 0x01
    34b8:	6a 83       	std	Y+2, r22	; 0x02
    34ba:	99 81       	ldd	r25, Y+1	; 0x01
    34bc:	8a 81       	ldd	r24, Y+2	; 0x02
    34be:	98 17       	cp	r25, r24
    34c0:	08 f4       	brcc	.+2      	; 0x34c4 <umin8+0x18>
    34c2:	89 2f       	mov	r24, r25
    34c4:	0f 90       	pop	r0
    34c6:	0f 90       	pop	r0
    34c8:	df 91       	pop	r29
    34ca:	cf 91       	pop	r28
    34cc:	08 95       	ret

000034ce <fmax>:
float fmax(float num1, float num2)
{
    34ce:	cf 93       	push	r28
    34d0:	df 93       	push	r29
    34d2:	cd b7       	in	r28, 0x3d	; 61
    34d4:	de b7       	in	r29, 0x3e	; 62
    34d6:	28 97       	sbiw	r28, 0x08	; 8
    34d8:	0f b6       	in	r0, 0x3f	; 63
    34da:	f8 94       	cli
    34dc:	de bf       	out	0x3e, r29	; 62
    34de:	0f be       	out	0x3f, r0	; 63
    34e0:	cd bf       	out	0x3d, r28	; 61
    34e2:	69 83       	std	Y+1, r22	; 0x01
    34e4:	7a 83       	std	Y+2, r23	; 0x02
    34e6:	8b 83       	std	Y+3, r24	; 0x03
    34e8:	9c 83       	std	Y+4, r25	; 0x04
    34ea:	2d 83       	std	Y+5, r18	; 0x05
    34ec:	3e 83       	std	Y+6, r19	; 0x06
    34ee:	4f 83       	std	Y+7, r20	; 0x07
    34f0:	58 87       	std	Y+8, r21	; 0x08
	return num1 > num2 ? num1 : num2;
    34f2:	2d 81       	ldd	r18, Y+5	; 0x05
    34f4:	3e 81       	ldd	r19, Y+6	; 0x06
    34f6:	4f 81       	ldd	r20, Y+7	; 0x07
    34f8:	58 85       	ldd	r21, Y+8	; 0x08
    34fa:	69 81       	ldd	r22, Y+1	; 0x01
    34fc:	7a 81       	ldd	r23, Y+2	; 0x02
    34fe:	8b 81       	ldd	r24, Y+3	; 0x03
    3500:	9c 81       	ldd	r25, Y+4	; 0x04
    3502:	0e 94 4f 2b 	call	0x569e	; 0x569e <__gesf2>
    3506:	18 16       	cp	r1, r24
    3508:	2c f4       	brge	.+10     	; 0x3514 <fmax+0x46>
    350a:	89 81       	ldd	r24, Y+1	; 0x01
    350c:	9a 81       	ldd	r25, Y+2	; 0x02
    350e:	ab 81       	ldd	r26, Y+3	; 0x03
    3510:	bc 81       	ldd	r27, Y+4	; 0x04
    3512:	04 c0       	rjmp	.+8      	; 0x351c <fmax+0x4e>
    3514:	8d 81       	ldd	r24, Y+5	; 0x05
    3516:	9e 81       	ldd	r25, Y+6	; 0x06
    3518:	af 81       	ldd	r26, Y+7	; 0x07
    351a:	b8 85       	ldd	r27, Y+8	; 0x08
}
    351c:	bc 01       	movw	r22, r24
    351e:	cd 01       	movw	r24, r26
    3520:	28 96       	adiw	r28, 0x08	; 8
    3522:	0f b6       	in	r0, 0x3f	; 63
    3524:	f8 94       	cli
    3526:	de bf       	out	0x3e, r29	; 62
    3528:	0f be       	out	0x3f, r0	; 63
    352a:	cd bf       	out	0x3d, r28	; 61
    352c:	df 91       	pop	r29
    352e:	cf 91       	pop	r28
    3530:	08 95       	ret

00003532 <fmin>:
float fmin(float num1, float num2)
{
    3532:	cf 93       	push	r28
    3534:	df 93       	push	r29
    3536:	cd b7       	in	r28, 0x3d	; 61
    3538:	de b7       	in	r29, 0x3e	; 62
    353a:	28 97       	sbiw	r28, 0x08	; 8
    353c:	0f b6       	in	r0, 0x3f	; 63
    353e:	f8 94       	cli
    3540:	de bf       	out	0x3e, r29	; 62
    3542:	0f be       	out	0x3f, r0	; 63
    3544:	cd bf       	out	0x3d, r28	; 61
    3546:	69 83       	std	Y+1, r22	; 0x01
    3548:	7a 83       	std	Y+2, r23	; 0x02
    354a:	8b 83       	std	Y+3, r24	; 0x03
    354c:	9c 83       	std	Y+4, r25	; 0x04
    354e:	2d 83       	std	Y+5, r18	; 0x05
    3550:	3e 83       	std	Y+6, r19	; 0x06
    3552:	4f 83       	std	Y+7, r20	; 0x07
    3554:	58 87       	std	Y+8, r21	; 0x08
	return num1 < num2 ? num1 : num2;
    3556:	2d 81       	ldd	r18, Y+5	; 0x05
    3558:	3e 81       	ldd	r19, Y+6	; 0x06
    355a:	4f 81       	ldd	r20, Y+7	; 0x07
    355c:	58 85       	ldd	r21, Y+8	; 0x08
    355e:	69 81       	ldd	r22, Y+1	; 0x01
    3560:	7a 81       	ldd	r23, Y+2	; 0x02
    3562:	8b 81       	ldd	r24, Y+3	; 0x03
    3564:	9c 81       	ldd	r25, Y+4	; 0x04
    3566:	0e 94 66 29 	call	0x52cc	; 0x52cc <__cmpsf2>
    356a:	88 23       	and	r24, r24
    356c:	2c f4       	brge	.+10     	; 0x3578 <fmin+0x46>
    356e:	89 81       	ldd	r24, Y+1	; 0x01
    3570:	9a 81       	ldd	r25, Y+2	; 0x02
    3572:	ab 81       	ldd	r26, Y+3	; 0x03
    3574:	bc 81       	ldd	r27, Y+4	; 0x04
    3576:	04 c0       	rjmp	.+8      	; 0x3580 <fmin+0x4e>
    3578:	8d 81       	ldd	r24, Y+5	; 0x05
    357a:	9e 81       	ldd	r25, Y+6	; 0x06
    357c:	af 81       	ldd	r26, Y+7	; 0x07
    357e:	b8 85       	ldd	r27, Y+8	; 0x08
}
    3580:	bc 01       	movw	r22, r24
    3582:	cd 01       	movw	r24, r26
    3584:	28 96       	adiw	r28, 0x08	; 8
    3586:	0f b6       	in	r0, 0x3f	; 63
    3588:	f8 94       	cli
    358a:	de bf       	out	0x3e, r29	; 62
    358c:	0f be       	out	0x3f, r0	; 63
    358e:	cd bf       	out	0x3d, r28	; 61
    3590:	df 91       	pop	r29
    3592:	cf 91       	pop	r28
    3594:	08 95       	ret

00003596 <pid_init>:

#include "PID.h"
#include "my_util.h"

void pid_init(pid_state_t* state, float pid_p, float pid_i, float pid_d, float control_min, float control_max)
{
    3596:	8f 92       	push	r8
    3598:	9f 92       	push	r9
    359a:	af 92       	push	r10
    359c:	bf 92       	push	r11
    359e:	cf 92       	push	r12
    35a0:	df 92       	push	r13
    35a2:	ef 92       	push	r14
    35a4:	ff 92       	push	r15
    35a6:	0f 93       	push	r16
    35a8:	1f 93       	push	r17
    35aa:	cf 93       	push	r28
    35ac:	df 93       	push	r29
    35ae:	cd b7       	in	r28, 0x3d	; 61
    35b0:	de b7       	in	r29, 0x3e	; 62
    35b2:	62 97       	sbiw	r28, 0x12	; 18
    35b4:	0f b6       	in	r0, 0x3f	; 63
    35b6:	f8 94       	cli
    35b8:	de bf       	out	0x3e, r29	; 62
    35ba:	0f be       	out	0x3f, r0	; 63
    35bc:	cd bf       	out	0x3d, r28	; 61
    35be:	9a 83       	std	Y+2, r25	; 0x02
    35c0:	89 83       	std	Y+1, r24	; 0x01
    35c2:	4b 83       	std	Y+3, r20	; 0x03
    35c4:	5c 83       	std	Y+4, r21	; 0x04
    35c6:	6d 83       	std	Y+5, r22	; 0x05
    35c8:	7e 83       	std	Y+6, r23	; 0x06
    35ca:	0f 83       	std	Y+7, r16	; 0x07
    35cc:	18 87       	std	Y+8, r17	; 0x08
    35ce:	29 87       	std	Y+9, r18	; 0x09
    35d0:	3a 87       	std	Y+10, r19	; 0x0a
    35d2:	cb 86       	std	Y+11, r12	; 0x0b
    35d4:	dc 86       	std	Y+12, r13	; 0x0c
    35d6:	ed 86       	std	Y+13, r14	; 0x0d
    35d8:	fe 86       	std	Y+14, r15	; 0x0e
    35da:	8f 86       	std	Y+15, r8	; 0x0f
    35dc:	98 8a       	std	Y+16, r9	; 0x10
    35de:	a9 8a       	std	Y+17, r10	; 0x11
    35e0:	ba 8a       	std	Y+18, r11	; 0x12
	state->kp = pid_p;
    35e2:	29 81       	ldd	r18, Y+1	; 0x01
    35e4:	3a 81       	ldd	r19, Y+2	; 0x02
    35e6:	8b 81       	ldd	r24, Y+3	; 0x03
    35e8:	9c 81       	ldd	r25, Y+4	; 0x04
    35ea:	ad 81       	ldd	r26, Y+5	; 0x05
    35ec:	be 81       	ldd	r27, Y+6	; 0x06
    35ee:	f9 01       	movw	r30, r18
    35f0:	80 87       	std	Z+8, r24	; 0x08
    35f2:	91 87       	std	Z+9, r25	; 0x09
    35f4:	a2 87       	std	Z+10, r26	; 0x0a
    35f6:	b3 87       	std	Z+11, r27	; 0x0b
	state->ki = pid_i;
    35f8:	29 81       	ldd	r18, Y+1	; 0x01
    35fa:	3a 81       	ldd	r19, Y+2	; 0x02
    35fc:	8f 81       	ldd	r24, Y+7	; 0x07
    35fe:	98 85       	ldd	r25, Y+8	; 0x08
    3600:	a9 85       	ldd	r26, Y+9	; 0x09
    3602:	ba 85       	ldd	r27, Y+10	; 0x0a
    3604:	f9 01       	movw	r30, r18
    3606:	84 87       	std	Z+12, r24	; 0x0c
    3608:	95 87       	std	Z+13, r25	; 0x0d
    360a:	a6 87       	std	Z+14, r26	; 0x0e
    360c:	b7 87       	std	Z+15, r27	; 0x0f
	state->kd = pid_d;
    360e:	29 81       	ldd	r18, Y+1	; 0x01
    3610:	3a 81       	ldd	r19, Y+2	; 0x02
    3612:	8b 85       	ldd	r24, Y+11	; 0x0b
    3614:	9c 85       	ldd	r25, Y+12	; 0x0c
    3616:	ad 85       	ldd	r26, Y+13	; 0x0d
    3618:	be 85       	ldd	r27, Y+14	; 0x0e
    361a:	f9 01       	movw	r30, r18
    361c:	80 8b       	std	Z+16, r24	; 0x10
    361e:	91 8b       	std	Z+17, r25	; 0x11
    3620:	a2 8b       	std	Z+18, r26	; 0x12
    3622:	b3 8b       	std	Z+19, r27	; 0x13
	state->control_max = control_max;
    3624:	29 81       	ldd	r18, Y+1	; 0x01
    3626:	3a 81       	ldd	r19, Y+2	; 0x02
    3628:	89 a1       	ldd	r24, Y+33	; 0x21
    362a:	9a a1       	ldd	r25, Y+34	; 0x22
    362c:	ab a1       	ldd	r26, Y+35	; 0x23
    362e:	bc a1       	ldd	r27, Y+36	; 0x24
    3630:	f9 01       	movw	r30, r18
    3632:	80 8f       	std	Z+24, r24	; 0x18
    3634:	91 8f       	std	Z+25, r25	; 0x19
    3636:	a2 8f       	std	Z+26, r26	; 0x1a
    3638:	b3 8f       	std	Z+27, r27	; 0x1b
	state->control_min = control_min;
    363a:	29 81       	ldd	r18, Y+1	; 0x01
    363c:	3a 81       	ldd	r19, Y+2	; 0x02
    363e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3640:	98 89       	ldd	r25, Y+16	; 0x10
    3642:	a9 89       	ldd	r26, Y+17	; 0x11
    3644:	ba 89       	ldd	r27, Y+18	; 0x12
    3646:	f9 01       	movw	r30, r18
    3648:	84 8b       	std	Z+20, r24	; 0x14
    364a:	95 8b       	std	Z+21, r25	; 0x15
    364c:	a6 8b       	std	Z+22, r26	; 0x16
    364e:	b7 8b       	std	Z+23, r27	; 0x17
	
	state->old_process_value = 0.0;
    3650:	89 81       	ldd	r24, Y+1	; 0x01
    3652:	9a 81       	ldd	r25, Y+2	; 0x02
    3654:	fc 01       	movw	r30, r24
    3656:	10 82       	st	Z, r1
    3658:	11 82       	std	Z+1, r1	; 0x01
    365a:	12 82       	std	Z+2, r1	; 0x02
    365c:	13 82       	std	Z+3, r1	; 0x03
	state->sum_error = 0.0;
    365e:	89 81       	ldd	r24, Y+1	; 0x01
    3660:	9a 81       	ldd	r25, Y+2	; 0x02
    3662:	fc 01       	movw	r30, r24
    3664:	14 82       	std	Z+4, r1	; 0x04
    3666:	15 82       	std	Z+5, r1	; 0x05
    3668:	16 82       	std	Z+6, r1	; 0x06
    366a:	17 82       	std	Z+7, r1	; 0x07
}
    366c:	00 00       	nop
    366e:	62 96       	adiw	r28, 0x12	; 18
    3670:	0f b6       	in	r0, 0x3f	; 63
    3672:	f8 94       	cli
    3674:	de bf       	out	0x3e, r29	; 62
    3676:	0f be       	out	0x3f, r0	; 63
    3678:	cd bf       	out	0x3d, r28	; 61
    367a:	df 91       	pop	r29
    367c:	cf 91       	pop	r28
    367e:	1f 91       	pop	r17
    3680:	0f 91       	pop	r16
    3682:	ff 90       	pop	r15
    3684:	ef 90       	pop	r14
    3686:	df 90       	pop	r13
    3688:	cf 90       	pop	r12
    368a:	bf 90       	pop	r11
    368c:	af 90       	pop	r10
    368e:	9f 90       	pop	r9
    3690:	8f 90       	pop	r8
    3692:	08 95       	ret

00003694 <pid_set_params>:

void pid_set_params(pid_state_t* state, float pid_p, float pid_i, float pid_d, float control_min, float control_max)
{
    3694:	8f 92       	push	r8
    3696:	9f 92       	push	r9
    3698:	af 92       	push	r10
    369a:	bf 92       	push	r11
    369c:	cf 92       	push	r12
    369e:	df 92       	push	r13
    36a0:	ef 92       	push	r14
    36a2:	ff 92       	push	r15
    36a4:	0f 93       	push	r16
    36a6:	1f 93       	push	r17
    36a8:	cf 93       	push	r28
    36aa:	df 93       	push	r29
    36ac:	cd b7       	in	r28, 0x3d	; 61
    36ae:	de b7       	in	r29, 0x3e	; 62
    36b0:	62 97       	sbiw	r28, 0x12	; 18
    36b2:	0f b6       	in	r0, 0x3f	; 63
    36b4:	f8 94       	cli
    36b6:	de bf       	out	0x3e, r29	; 62
    36b8:	0f be       	out	0x3f, r0	; 63
    36ba:	cd bf       	out	0x3d, r28	; 61
    36bc:	9a 83       	std	Y+2, r25	; 0x02
    36be:	89 83       	std	Y+1, r24	; 0x01
    36c0:	4b 83       	std	Y+3, r20	; 0x03
    36c2:	5c 83       	std	Y+4, r21	; 0x04
    36c4:	6d 83       	std	Y+5, r22	; 0x05
    36c6:	7e 83       	std	Y+6, r23	; 0x06
    36c8:	0f 83       	std	Y+7, r16	; 0x07
    36ca:	18 87       	std	Y+8, r17	; 0x08
    36cc:	29 87       	std	Y+9, r18	; 0x09
    36ce:	3a 87       	std	Y+10, r19	; 0x0a
    36d0:	cb 86       	std	Y+11, r12	; 0x0b
    36d2:	dc 86       	std	Y+12, r13	; 0x0c
    36d4:	ed 86       	std	Y+13, r14	; 0x0d
    36d6:	fe 86       	std	Y+14, r15	; 0x0e
    36d8:	8f 86       	std	Y+15, r8	; 0x0f
    36da:	98 8a       	std	Y+16, r9	; 0x10
    36dc:	a9 8a       	std	Y+17, r10	; 0x11
    36de:	ba 8a       	std	Y+18, r11	; 0x12
	state->kp = pid_p;
    36e0:	29 81       	ldd	r18, Y+1	; 0x01
    36e2:	3a 81       	ldd	r19, Y+2	; 0x02
    36e4:	8b 81       	ldd	r24, Y+3	; 0x03
    36e6:	9c 81       	ldd	r25, Y+4	; 0x04
    36e8:	ad 81       	ldd	r26, Y+5	; 0x05
    36ea:	be 81       	ldd	r27, Y+6	; 0x06
    36ec:	f9 01       	movw	r30, r18
    36ee:	80 87       	std	Z+8, r24	; 0x08
    36f0:	91 87       	std	Z+9, r25	; 0x09
    36f2:	a2 87       	std	Z+10, r26	; 0x0a
    36f4:	b3 87       	std	Z+11, r27	; 0x0b
	state->ki = pid_i;
    36f6:	29 81       	ldd	r18, Y+1	; 0x01
    36f8:	3a 81       	ldd	r19, Y+2	; 0x02
    36fa:	8f 81       	ldd	r24, Y+7	; 0x07
    36fc:	98 85       	ldd	r25, Y+8	; 0x08
    36fe:	a9 85       	ldd	r26, Y+9	; 0x09
    3700:	ba 85       	ldd	r27, Y+10	; 0x0a
    3702:	f9 01       	movw	r30, r18
    3704:	84 87       	std	Z+12, r24	; 0x0c
    3706:	95 87       	std	Z+13, r25	; 0x0d
    3708:	a6 87       	std	Z+14, r26	; 0x0e
    370a:	b7 87       	std	Z+15, r27	; 0x0f
	state->kd = pid_d;
    370c:	29 81       	ldd	r18, Y+1	; 0x01
    370e:	3a 81       	ldd	r19, Y+2	; 0x02
    3710:	8b 85       	ldd	r24, Y+11	; 0x0b
    3712:	9c 85       	ldd	r25, Y+12	; 0x0c
    3714:	ad 85       	ldd	r26, Y+13	; 0x0d
    3716:	be 85       	ldd	r27, Y+14	; 0x0e
    3718:	f9 01       	movw	r30, r18
    371a:	80 8b       	std	Z+16, r24	; 0x10
    371c:	91 8b       	std	Z+17, r25	; 0x11
    371e:	a2 8b       	std	Z+18, r26	; 0x12
    3720:	b3 8b       	std	Z+19, r27	; 0x13
	state->control_max = control_max;
    3722:	29 81       	ldd	r18, Y+1	; 0x01
    3724:	3a 81       	ldd	r19, Y+2	; 0x02
    3726:	89 a1       	ldd	r24, Y+33	; 0x21
    3728:	9a a1       	ldd	r25, Y+34	; 0x22
    372a:	ab a1       	ldd	r26, Y+35	; 0x23
    372c:	bc a1       	ldd	r27, Y+36	; 0x24
    372e:	f9 01       	movw	r30, r18
    3730:	80 8f       	std	Z+24, r24	; 0x18
    3732:	91 8f       	std	Z+25, r25	; 0x19
    3734:	a2 8f       	std	Z+26, r26	; 0x1a
    3736:	b3 8f       	std	Z+27, r27	; 0x1b
	state->control_min = control_min;
    3738:	29 81       	ldd	r18, Y+1	; 0x01
    373a:	3a 81       	ldd	r19, Y+2	; 0x02
    373c:	8f 85       	ldd	r24, Y+15	; 0x0f
    373e:	98 89       	ldd	r25, Y+16	; 0x10
    3740:	a9 89       	ldd	r26, Y+17	; 0x11
    3742:	ba 89       	ldd	r27, Y+18	; 0x12
    3744:	f9 01       	movw	r30, r18
    3746:	84 8b       	std	Z+20, r24	; 0x14
    3748:	95 8b       	std	Z+21, r25	; 0x15
    374a:	a6 8b       	std	Z+22, r26	; 0x16
    374c:	b7 8b       	std	Z+23, r27	; 0x17
	
	state->old_process_value = 0.0;
    374e:	89 81       	ldd	r24, Y+1	; 0x01
    3750:	9a 81       	ldd	r25, Y+2	; 0x02
    3752:	fc 01       	movw	r30, r24
    3754:	10 82       	st	Z, r1
    3756:	11 82       	std	Z+1, r1	; 0x01
    3758:	12 82       	std	Z+2, r1	; 0x02
    375a:	13 82       	std	Z+3, r1	; 0x03
	state->sum_error = 0.0;
    375c:	89 81       	ldd	r24, Y+1	; 0x01
    375e:	9a 81       	ldd	r25, Y+2	; 0x02
    3760:	fc 01       	movw	r30, r24
    3762:	14 82       	std	Z+4, r1	; 0x04
    3764:	15 82       	std	Z+5, r1	; 0x05
    3766:	16 82       	std	Z+6, r1	; 0x06
    3768:	17 82       	std	Z+7, r1	; 0x07
}
    376a:	00 00       	nop
    376c:	62 96       	adiw	r28, 0x12	; 18
    376e:	0f b6       	in	r0, 0x3f	; 63
    3770:	f8 94       	cli
    3772:	de bf       	out	0x3e, r29	; 62
    3774:	0f be       	out	0x3f, r0	; 63
    3776:	cd bf       	out	0x3d, r28	; 61
    3778:	df 91       	pop	r29
    377a:	cf 91       	pop	r28
    377c:	1f 91       	pop	r17
    377e:	0f 91       	pop	r16
    3780:	ff 90       	pop	r15
    3782:	ef 90       	pop	r14
    3784:	df 90       	pop	r13
    3786:	cf 90       	pop	r12
    3788:	bf 90       	pop	r11
    378a:	af 90       	pop	r10
    378c:	9f 90       	pop	r9
    378e:	8f 90       	pop	r8
    3790:	08 95       	ret

00003792 <pid_step>:

float pid_step(pid_state_t* state, float process_value, float set_value)
{
    3792:	8f 92       	push	r8
    3794:	9f 92       	push	r9
    3796:	af 92       	push	r10
    3798:	bf 92       	push	r11
    379a:	cf 92       	push	r12
    379c:	df 92       	push	r13
    379e:	ef 92       	push	r14
    37a0:	ff 92       	push	r15
    37a2:	0f 93       	push	r16
    37a4:	1f 93       	push	r17
    37a6:	cf 93       	push	r28
    37a8:	df 93       	push	r29
    37aa:	cd b7       	in	r28, 0x3d	; 61
    37ac:	de b7       	in	r29, 0x3e	; 62
    37ae:	6e 97       	sbiw	r28, 0x1e	; 30
    37b0:	0f b6       	in	r0, 0x3f	; 63
    37b2:	f8 94       	cli
    37b4:	de bf       	out	0x3e, r29	; 62
    37b6:	0f be       	out	0x3f, r0	; 63
    37b8:	cd bf       	out	0x3d, r28	; 61
    37ba:	9e 8b       	std	Y+22, r25	; 0x16
    37bc:	8d 8b       	std	Y+21, r24	; 0x15
    37be:	4f 8b       	std	Y+23, r20	; 0x17
    37c0:	58 8f       	std	Y+24, r21	; 0x18
    37c2:	69 8f       	std	Y+25, r22	; 0x19
    37c4:	7a 8f       	std	Y+26, r23	; 0x1a
    37c6:	0b 8f       	std	Y+27, r16	; 0x1b
    37c8:	1c 8f       	std	Y+28, r17	; 0x1c
    37ca:	2d 8f       	std	Y+29, r18	; 0x1d
    37cc:	3e 8f       	std	Y+30, r19	; 0x1e
	// error
	float error = set_value - process_value;
    37ce:	2f 89       	ldd	r18, Y+23	; 0x17
    37d0:	38 8d       	ldd	r19, Y+24	; 0x18
    37d2:	49 8d       	ldd	r20, Y+25	; 0x19
    37d4:	5a 8d       	ldd	r21, Y+26	; 0x1a
    37d6:	6b 8d       	ldd	r22, Y+27	; 0x1b
    37d8:	7c 8d       	ldd	r23, Y+28	; 0x1c
    37da:	8d 8d       	ldd	r24, Y+29	; 0x1d
    37dc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    37de:	0e 94 f9 28 	call	0x51f2	; 0x51f2 <__subsf3>
    37e2:	dc 01       	movw	r26, r24
    37e4:	cb 01       	movw	r24, r22
    37e6:	89 83       	std	Y+1, r24	; 0x01
    37e8:	9a 83       	std	Y+2, r25	; 0x02
    37ea:	ab 83       	std	Y+3, r26	; 0x03
    37ec:	bc 83       	std	Y+4, r27	; 0x04
	// proportional term
	float p_term = state->kp * error;
    37ee:	8d 89       	ldd	r24, Y+21	; 0x15
    37f0:	9e 89       	ldd	r25, Y+22	; 0x16
    37f2:	fc 01       	movw	r30, r24
    37f4:	80 85       	ldd	r24, Z+8	; 0x08
    37f6:	91 85       	ldd	r25, Z+9	; 0x09
    37f8:	a2 85       	ldd	r26, Z+10	; 0x0a
    37fa:	b3 85       	ldd	r27, Z+11	; 0x0b
    37fc:	29 81       	ldd	r18, Y+1	; 0x01
    37fe:	3a 81       	ldd	r19, Y+2	; 0x02
    3800:	4b 81       	ldd	r20, Y+3	; 0x03
    3802:	5c 81       	ldd	r21, Y+4	; 0x04
    3804:	bc 01       	movw	r22, r24
    3806:	cd 01       	movw	r24, r26
    3808:	0e 94 a4 2b 	call	0x5748	; 0x5748 <__mulsf3>
    380c:	dc 01       	movw	r26, r24
    380e:	cb 01       	movw	r24, r22
    3810:	8d 83       	std	Y+5, r24	; 0x05
    3812:	9e 83       	std	Y+6, r25	; 0x06
    3814:	af 83       	std	Y+7, r26	; 0x07
    3816:	b8 87       	std	Y+8, r27	; 0x08
	// integral term
	float i_term = state->ki * (state->sum_error + error);
    3818:	8d 89       	ldd	r24, Y+21	; 0x15
    381a:	9e 89       	ldd	r25, Y+22	; 0x16
    381c:	fc 01       	movw	r30, r24
    381e:	c4 84       	ldd	r12, Z+12	; 0x0c
    3820:	d5 84       	ldd	r13, Z+13	; 0x0d
    3822:	e6 84       	ldd	r14, Z+14	; 0x0e
    3824:	f7 84       	ldd	r15, Z+15	; 0x0f
    3826:	8d 89       	ldd	r24, Y+21	; 0x15
    3828:	9e 89       	ldd	r25, Y+22	; 0x16
    382a:	fc 01       	movw	r30, r24
    382c:	84 81       	ldd	r24, Z+4	; 0x04
    382e:	95 81       	ldd	r25, Z+5	; 0x05
    3830:	a6 81       	ldd	r26, Z+6	; 0x06
    3832:	b7 81       	ldd	r27, Z+7	; 0x07
    3834:	29 81       	ldd	r18, Y+1	; 0x01
    3836:	3a 81       	ldd	r19, Y+2	; 0x02
    3838:	4b 81       	ldd	r20, Y+3	; 0x03
    383a:	5c 81       	ldd	r21, Y+4	; 0x04
    383c:	bc 01       	movw	r22, r24
    383e:	cd 01       	movw	r24, r26
    3840:	0e 94 fa 28 	call	0x51f4	; 0x51f4 <__addsf3>
    3844:	dc 01       	movw	r26, r24
    3846:	cb 01       	movw	r24, r22
    3848:	9c 01       	movw	r18, r24
    384a:	ad 01       	movw	r20, r26
    384c:	c7 01       	movw	r24, r14
    384e:	b6 01       	movw	r22, r12
    3850:	0e 94 a4 2b 	call	0x5748	; 0x5748 <__mulsf3>
    3854:	dc 01       	movw	r26, r24
    3856:	cb 01       	movw	r24, r22
    3858:	89 87       	std	Y+9, r24	; 0x09
    385a:	9a 87       	std	Y+10, r25	; 0x0a
    385c:	ab 87       	std	Y+11, r26	; 0x0b
    385e:	bc 87       	std	Y+12, r27	; 0x0c
	// derivative term
	float d_term = state->kd * (process_value - state->old_process_value);
    3860:	8d 89       	ldd	r24, Y+21	; 0x15
    3862:	9e 89       	ldd	r25, Y+22	; 0x16
    3864:	fc 01       	movw	r30, r24
    3866:	c0 88       	ldd	r12, Z+16	; 0x10
    3868:	d1 88       	ldd	r13, Z+17	; 0x11
    386a:	e2 88       	ldd	r14, Z+18	; 0x12
    386c:	f3 88       	ldd	r15, Z+19	; 0x13
    386e:	8d 89       	ldd	r24, Y+21	; 0x15
    3870:	9e 89       	ldd	r25, Y+22	; 0x16
    3872:	fc 01       	movw	r30, r24
    3874:	80 81       	ld	r24, Z
    3876:	91 81       	ldd	r25, Z+1	; 0x01
    3878:	a2 81       	ldd	r26, Z+2	; 0x02
    387a:	b3 81       	ldd	r27, Z+3	; 0x03
    387c:	9c 01       	movw	r18, r24
    387e:	ad 01       	movw	r20, r26
    3880:	6f 89       	ldd	r22, Y+23	; 0x17
    3882:	78 8d       	ldd	r23, Y+24	; 0x18
    3884:	89 8d       	ldd	r24, Y+25	; 0x19
    3886:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3888:	0e 94 f9 28 	call	0x51f2	; 0x51f2 <__subsf3>
    388c:	dc 01       	movw	r26, r24
    388e:	cb 01       	movw	r24, r22
    3890:	9c 01       	movw	r18, r24
    3892:	ad 01       	movw	r20, r26
    3894:	c7 01       	movw	r24, r14
    3896:	b6 01       	movw	r22, r12
    3898:	0e 94 a4 2b 	call	0x5748	; 0x5748 <__mulsf3>
    389c:	dc 01       	movw	r26, r24
    389e:	cb 01       	movw	r24, r22
    38a0:	8d 87       	std	Y+13, r24	; 0x0d
    38a2:	9e 87       	std	Y+14, r25	; 0x0e
    38a4:	af 87       	std	Y+15, r26	; 0x0f
    38a6:	b8 8b       	std	Y+16, r27	; 0x10
	state->old_process_value = process_value;
    38a8:	2d 89       	ldd	r18, Y+21	; 0x15
    38aa:	3e 89       	ldd	r19, Y+22	; 0x16
    38ac:	8f 89       	ldd	r24, Y+23	; 0x17
    38ae:	98 8d       	ldd	r25, Y+24	; 0x18
    38b0:	a9 8d       	ldd	r26, Y+25	; 0x19
    38b2:	ba 8d       	ldd	r27, Y+26	; 0x1a
    38b4:	f9 01       	movw	r30, r18
    38b6:	80 83       	st	Z, r24
    38b8:	91 83       	std	Z+1, r25	; 0x01
    38ba:	a2 83       	std	Z+2, r26	; 0x02
    38bc:	b3 83       	std	Z+3, r27	; 0x03
	
	// clamping the integrator
	float control = p_term + i_term + d_term;
    38be:	29 85       	ldd	r18, Y+9	; 0x09
    38c0:	3a 85       	ldd	r19, Y+10	; 0x0a
    38c2:	4b 85       	ldd	r20, Y+11	; 0x0b
    38c4:	5c 85       	ldd	r21, Y+12	; 0x0c
    38c6:	6d 81       	ldd	r22, Y+5	; 0x05
    38c8:	7e 81       	ldd	r23, Y+6	; 0x06
    38ca:	8f 81       	ldd	r24, Y+7	; 0x07
    38cc:	98 85       	ldd	r25, Y+8	; 0x08
    38ce:	0e 94 fa 28 	call	0x51f4	; 0x51f4 <__addsf3>
    38d2:	dc 01       	movw	r26, r24
    38d4:	cb 01       	movw	r24, r22
    38d6:	2d 85       	ldd	r18, Y+13	; 0x0d
    38d8:	3e 85       	ldd	r19, Y+14	; 0x0e
    38da:	4f 85       	ldd	r20, Y+15	; 0x0f
    38dc:	58 89       	ldd	r21, Y+16	; 0x10
    38de:	bc 01       	movw	r22, r24
    38e0:	cd 01       	movw	r24, r26
    38e2:	0e 94 fa 28 	call	0x51f4	; 0x51f4 <__addsf3>
    38e6:	dc 01       	movw	r26, r24
    38e8:	cb 01       	movw	r24, r22
    38ea:	89 8b       	std	Y+17, r24	; 0x11
    38ec:	9a 8b       	std	Y+18, r25	; 0x12
    38ee:	ab 8b       	std	Y+19, r26	; 0x13
    38f0:	bc 8b       	std	Y+20, r27	; 0x14
	if(control >= state->control_min && control <= state->control_max)
    38f2:	8d 89       	ldd	r24, Y+21	; 0x15
    38f4:	9e 89       	ldd	r25, Y+22	; 0x16
    38f6:	fc 01       	movw	r30, r24
    38f8:	84 89       	ldd	r24, Z+20	; 0x14
    38fa:	95 89       	ldd	r25, Z+21	; 0x15
    38fc:	a6 89       	ldd	r26, Z+22	; 0x16
    38fe:	b7 89       	ldd	r27, Z+23	; 0x17
    3900:	29 89       	ldd	r18, Y+17	; 0x11
    3902:	3a 89       	ldd	r19, Y+18	; 0x12
    3904:	4b 89       	ldd	r20, Y+19	; 0x13
    3906:	5c 89       	ldd	r21, Y+20	; 0x14
    3908:	bc 01       	movw	r22, r24
    390a:	cd 01       	movw	r24, r26
    390c:	0e 94 66 29 	call	0x52cc	; 0x52cc <__cmpsf2>
    3910:	18 16       	cp	r1, r24
    3912:	74 f1       	brlt	.+92     	; 0x3970 <pid_step+0x1de>
    3914:	8d 89       	ldd	r24, Y+21	; 0x15
    3916:	9e 89       	ldd	r25, Y+22	; 0x16
    3918:	fc 01       	movw	r30, r24
    391a:	80 8d       	ldd	r24, Z+24	; 0x18
    391c:	91 8d       	ldd	r25, Z+25	; 0x19
    391e:	a2 8d       	ldd	r26, Z+26	; 0x1a
    3920:	b3 8d       	ldd	r27, Z+27	; 0x1b
    3922:	29 89       	ldd	r18, Y+17	; 0x11
    3924:	3a 89       	ldd	r19, Y+18	; 0x12
    3926:	4b 89       	ldd	r20, Y+19	; 0x13
    3928:	5c 89       	ldd	r21, Y+20	; 0x14
    392a:	bc 01       	movw	r22, r24
    392c:	cd 01       	movw	r24, r26
    392e:	0e 94 4f 2b 	call	0x569e	; 0x569e <__gesf2>
    3932:	88 23       	and	r24, r24
    3934:	ec f0       	brlt	.+58     	; 0x3970 <pid_step+0x1de>
	{
		state->sum_error += error;
    3936:	8d 89       	ldd	r24, Y+21	; 0x15
    3938:	9e 89       	ldd	r25, Y+22	; 0x16
    393a:	fc 01       	movw	r30, r24
    393c:	84 81       	ldd	r24, Z+4	; 0x04
    393e:	95 81       	ldd	r25, Z+5	; 0x05
    3940:	a6 81       	ldd	r26, Z+6	; 0x06
    3942:	b7 81       	ldd	r27, Z+7	; 0x07
    3944:	29 81       	ldd	r18, Y+1	; 0x01
    3946:	3a 81       	ldd	r19, Y+2	; 0x02
    3948:	4b 81       	ldd	r20, Y+3	; 0x03
    394a:	5c 81       	ldd	r21, Y+4	; 0x04
    394c:	bc 01       	movw	r22, r24
    394e:	cd 01       	movw	r24, r26
    3950:	0e 94 fa 28 	call	0x51f4	; 0x51f4 <__addsf3>
    3954:	dc 01       	movw	r26, r24
    3956:	cb 01       	movw	r24, r22
    3958:	2d 89       	ldd	r18, Y+21	; 0x15
    395a:	3e 89       	ldd	r19, Y+22	; 0x16
    395c:	f9 01       	movw	r30, r18
    395e:	84 83       	std	Z+4, r24	; 0x04
    3960:	95 83       	std	Z+5, r25	; 0x05
    3962:	a6 83       	std	Z+6, r26	; 0x06
    3964:	b7 83       	std	Z+7, r27	; 0x07
		return control;
    3966:	89 89       	ldd	r24, Y+17	; 0x11
    3968:	9a 89       	ldd	r25, Y+18	; 0x12
    396a:	ab 89       	ldd	r26, Y+19	; 0x13
    396c:	bc 89       	ldd	r27, Y+20	; 0x14
    396e:	46 c0       	rjmp	.+140    	; 0x39fc <pid_step+0x26a>
	}
	else
	{
		return fmax(fmin(p_term + state->ki * state->sum_error + d_term, state->control_max), state->control_min);
    3970:	8d 89       	ldd	r24, Y+21	; 0x15
    3972:	9e 89       	ldd	r25, Y+22	; 0x16
    3974:	fc 01       	movw	r30, r24
    3976:	c4 88       	ldd	r12, Z+20	; 0x14
    3978:	d5 88       	ldd	r13, Z+21	; 0x15
    397a:	e6 88       	ldd	r14, Z+22	; 0x16
    397c:	f7 88       	ldd	r15, Z+23	; 0x17
    397e:	8d 89       	ldd	r24, Y+21	; 0x15
    3980:	9e 89       	ldd	r25, Y+22	; 0x16
    3982:	fc 01       	movw	r30, r24
    3984:	80 8c       	ldd	r8, Z+24	; 0x18
    3986:	91 8c       	ldd	r9, Z+25	; 0x19
    3988:	a2 8c       	ldd	r10, Z+26	; 0x1a
    398a:	b3 8c       	ldd	r11, Z+27	; 0x1b
    398c:	8d 89       	ldd	r24, Y+21	; 0x15
    398e:	9e 89       	ldd	r25, Y+22	; 0x16
    3990:	fc 01       	movw	r30, r24
    3992:	84 85       	ldd	r24, Z+12	; 0x0c
    3994:	95 85       	ldd	r25, Z+13	; 0x0d
    3996:	a6 85       	ldd	r26, Z+14	; 0x0e
    3998:	b7 85       	ldd	r27, Z+15	; 0x0f
    399a:	2d 89       	ldd	r18, Y+21	; 0x15
    399c:	3e 89       	ldd	r19, Y+22	; 0x16
    399e:	f9 01       	movw	r30, r18
    39a0:	24 81       	ldd	r18, Z+4	; 0x04
    39a2:	35 81       	ldd	r19, Z+5	; 0x05
    39a4:	46 81       	ldd	r20, Z+6	; 0x06
    39a6:	57 81       	ldd	r21, Z+7	; 0x07
    39a8:	bc 01       	movw	r22, r24
    39aa:	cd 01       	movw	r24, r26
    39ac:	0e 94 a4 2b 	call	0x5748	; 0x5748 <__mulsf3>
    39b0:	dc 01       	movw	r26, r24
    39b2:	cb 01       	movw	r24, r22
    39b4:	2d 81       	ldd	r18, Y+5	; 0x05
    39b6:	3e 81       	ldd	r19, Y+6	; 0x06
    39b8:	4f 81       	ldd	r20, Y+7	; 0x07
    39ba:	58 85       	ldd	r21, Y+8	; 0x08
    39bc:	bc 01       	movw	r22, r24
    39be:	cd 01       	movw	r24, r26
    39c0:	0e 94 fa 28 	call	0x51f4	; 0x51f4 <__addsf3>
    39c4:	dc 01       	movw	r26, r24
    39c6:	cb 01       	movw	r24, r22
    39c8:	2d 85       	ldd	r18, Y+13	; 0x0d
    39ca:	3e 85       	ldd	r19, Y+14	; 0x0e
    39cc:	4f 85       	ldd	r20, Y+15	; 0x0f
    39ce:	58 89       	ldd	r21, Y+16	; 0x10
    39d0:	bc 01       	movw	r22, r24
    39d2:	cd 01       	movw	r24, r26
    39d4:	0e 94 fa 28 	call	0x51f4	; 0x51f4 <__addsf3>
    39d8:	dc 01       	movw	r26, r24
    39da:	cb 01       	movw	r24, r22
    39dc:	a5 01       	movw	r20, r10
    39de:	94 01       	movw	r18, r8
    39e0:	bc 01       	movw	r22, r24
    39e2:	cd 01       	movw	r24, r26
    39e4:	0e 94 99 1a 	call	0x3532	; 0x3532 <fmin>
    39e8:	dc 01       	movw	r26, r24
    39ea:	cb 01       	movw	r24, r22
    39ec:	a7 01       	movw	r20, r14
    39ee:	96 01       	movw	r18, r12
    39f0:	bc 01       	movw	r22, r24
    39f2:	cd 01       	movw	r24, r26
    39f4:	0e 94 67 1a 	call	0x34ce	; 0x34ce <fmax>
    39f8:	dc 01       	movw	r26, r24
    39fa:	cb 01       	movw	r24, r22
	}	
}
    39fc:	bc 01       	movw	r22, r24
    39fe:	cd 01       	movw	r24, r26
    3a00:	6e 96       	adiw	r28, 0x1e	; 30
    3a02:	0f b6       	in	r0, 0x3f	; 63
    3a04:	f8 94       	cli
    3a06:	de bf       	out	0x3e, r29	; 62
    3a08:	0f be       	out	0x3f, r0	; 63
    3a0a:	cd bf       	out	0x3d, r28	; 61
    3a0c:	df 91       	pop	r29
    3a0e:	cf 91       	pop	r28
    3a10:	1f 91       	pop	r17
    3a12:	0f 91       	pop	r16
    3a14:	ff 90       	pop	r15
    3a16:	ef 90       	pop	r14
    3a18:	df 90       	pop	r13
    3a1a:	cf 90       	pop	r12
    3a1c:	bf 90       	pop	r11
    3a1e:	af 90       	pop	r10
    3a20:	9f 90       	pop	r9
    3a22:	8f 90       	pop	r8
    3a24:	08 95       	ret

00003a26 <pid_reset>:

void pid_reset(pid_state_t* state)
{
    3a26:	cf 93       	push	r28
    3a28:	df 93       	push	r29
    3a2a:	00 d0       	rcall	.+0      	; 0x3a2c <pid_reset+0x6>
    3a2c:	cd b7       	in	r28, 0x3d	; 61
    3a2e:	de b7       	in	r29, 0x3e	; 62
    3a30:	9a 83       	std	Y+2, r25	; 0x02
    3a32:	89 83       	std	Y+1, r24	; 0x01
	state->old_process_value = 0.0;
    3a34:	89 81       	ldd	r24, Y+1	; 0x01
    3a36:	9a 81       	ldd	r25, Y+2	; 0x02
    3a38:	fc 01       	movw	r30, r24
    3a3a:	10 82       	st	Z, r1
    3a3c:	11 82       	std	Z+1, r1	; 0x01
    3a3e:	12 82       	std	Z+2, r1	; 0x02
    3a40:	13 82       	std	Z+3, r1	; 0x03
	state->sum_error = 0.0;
    3a42:	89 81       	ldd	r24, Y+1	; 0x01
    3a44:	9a 81       	ldd	r25, Y+2	; 0x02
    3a46:	fc 01       	movw	r30, r24
    3a48:	14 82       	std	Z+4, r1	; 0x04
    3a4a:	15 82       	std	Z+5, r1	; 0x05
    3a4c:	16 82       	std	Z+6, r1	; 0x06
    3a4e:	17 82       	std	Z+7, r1	; 0x07
    3a50:	00 00       	nop
    3a52:	0f 90       	pop	r0
    3a54:	0f 90       	pop	r0
    3a56:	df 91       	pop	r29
    3a58:	cf 91       	pop	r28
    3a5a:	08 95       	ret

00003a5c <__iCliRetVal>:
    sei();
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    3a5c:	cf 93       	push	r28
    3a5e:	df 93       	push	r29
    3a60:	cd b7       	in	r28, 0x3d	; 61
    3a62:	de b7       	in	r29, 0x3e	; 62
    cli();
    3a64:	f8 94       	cli
    return 1;
    3a66:	81 e0       	ldi	r24, 0x01	; 1
}
    3a68:	df 91       	pop	r29
    3a6a:	cf 91       	pop	r28
    3a6c:	08 95       	ret

00003a6e <__iRestore>:
    __asm__ volatile ("" ::: "memory");
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    3a6e:	cf 93       	push	r28
    3a70:	df 93       	push	r29
    3a72:	00 d0       	rcall	.+0      	; 0x3a74 <__iRestore+0x6>
    3a74:	cd b7       	in	r28, 0x3d	; 61
    3a76:	de b7       	in	r29, 0x3e	; 62
    3a78:	9a 83       	std	Y+2, r25	; 0x02
    3a7a:	89 83       	std	Y+1, r24	; 0x01
    SREG = *__s;
    3a7c:	8f e5       	ldi	r24, 0x5F	; 95
    3a7e:	90 e0       	ldi	r25, 0x00	; 0
    3a80:	29 81       	ldd	r18, Y+1	; 0x01
    3a82:	3a 81       	ldd	r19, Y+2	; 0x02
    3a84:	f9 01       	movw	r30, r18
    3a86:	20 81       	ld	r18, Z
    3a88:	fc 01       	movw	r30, r24
    3a8a:	20 83       	st	Z, r18
    __asm__ volatile ("" ::: "memory");
}
    3a8c:	00 00       	nop
    3a8e:	0f 90       	pop	r0
    3a90:	0f 90       	pop	r0
    3a92:	df 91       	pop	r29
    3a94:	cf 91       	pop	r28
    3a96:	08 95       	ret

00003a98 <rotenc_init>:
static volatile int16_t rotenc_delta;

// ------------------------------------ PUBLIC -------------------------------------------

void rotenc_init()
{
    3a98:	cf 93       	push	r28
    3a9a:	df 93       	push	r29
    3a9c:	cd b7       	in	r28, 0x3d	; 61
    3a9e:	de b7       	in	r29, 0x3e	; 62
	// set data dir
	ROT_ENC_DDR &= ~ROT_ENC_PIN_MASK;
    3aa0:	84 e2       	ldi	r24, 0x24	; 36
    3aa2:	90 e0       	ldi	r25, 0x00	; 0
    3aa4:	24 e2       	ldi	r18, 0x24	; 36
    3aa6:	30 e0       	ldi	r19, 0x00	; 0
    3aa8:	f9 01       	movw	r30, r18
    3aaa:	20 81       	ld	r18, Z
    3aac:	23 7f       	andi	r18, 0xF3	; 243
    3aae:	fc 01       	movw	r30, r24
    3ab0:	20 83       	st	Z, r18
	// enable internal pullups
	ROT_ENC_PORT |= ROT_ENC_PIN_MASK;
    3ab2:	85 e2       	ldi	r24, 0x25	; 37
    3ab4:	90 e0       	ldi	r25, 0x00	; 0
    3ab6:	25 e2       	ldi	r18, 0x25	; 37
    3ab8:	30 e0       	ldi	r19, 0x00	; 0
    3aba:	f9 01       	movw	r30, r18
    3abc:	20 81       	ld	r18, Z
    3abe:	2c 60       	ori	r18, 0x0C	; 12
    3ac0:	fc 01       	movw	r30, r24
    3ac2:	20 83       	st	Z, r18
	
	rotenc_delta = 0;
    3ac4:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <rotenc_delta+0x1>
    3ac8:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <rotenc_delta>
	if(ROT_ENC_READ_A) rotenc_last = 2;
    3acc:	83 e2       	ldi	r24, 0x23	; 35
    3ace:	90 e0       	ldi	r25, 0x00	; 0
    3ad0:	fc 01       	movw	r30, r24
    3ad2:	80 81       	ld	r24, Z
    3ad4:	88 2f       	mov	r24, r24
    3ad6:	90 e0       	ldi	r25, 0x00	; 0
    3ad8:	84 70       	andi	r24, 0x04	; 4
    3ada:	99 27       	eor	r25, r25
    3adc:	89 2b       	or	r24, r25
    3ade:	19 f4       	brne	.+6      	; 0x3ae6 <rotenc_init+0x4e>
    3ae0:	82 e0       	ldi	r24, 0x02	; 2
    3ae2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	if(ROT_ENC_READ_B) rotenc_last |= 1;
    3ae6:	83 e2       	ldi	r24, 0x23	; 35
    3ae8:	90 e0       	ldi	r25, 0x00	; 0
    3aea:	fc 01       	movw	r30, r24
    3aec:	80 81       	ld	r24, Z
    3aee:	88 2f       	mov	r24, r24
    3af0:	90 e0       	ldi	r25, 0x00	; 0
    3af2:	88 70       	andi	r24, 0x08	; 8
    3af4:	99 27       	eor	r25, r25
    3af6:	89 2b       	or	r24, r25
    3af8:	29 f4       	brne	.+10     	; 0x3b04 <rotenc_init+0x6c>
    3afa:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
    3afe:	81 60       	ori	r24, 0x01	; 1
    3b00:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
}
    3b04:	00 00       	nop
    3b06:	df 91       	pop	r29
    3b08:	cf 91       	pop	r28
    3b0a:	08 95       	ret

00003b0c <rotenc_shutdown>:

void rotenc_shutdown()
{
    3b0c:	cf 93       	push	r28
    3b0e:	df 93       	push	r29
    3b10:	cd b7       	in	r28, 0x3d	; 61
    3b12:	de b7       	in	r29, 0x3e	; 62
	rotenc_delta = 0;
    3b14:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <rotenc_delta+0x1>
    3b18:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <rotenc_delta>
	// disable internal pullups
	ROT_ENC_PORT &= ~ROT_ENC_PIN_MASK;
    3b1c:	85 e2       	ldi	r24, 0x25	; 37
    3b1e:	90 e0       	ldi	r25, 0x00	; 0
    3b20:	25 e2       	ldi	r18, 0x25	; 37
    3b22:	30 e0       	ldi	r19, 0x00	; 0
    3b24:	f9 01       	movw	r30, r18
    3b26:	20 81       	ld	r18, Z
    3b28:	23 7f       	andi	r18, 0xF3	; 243
    3b2a:	fc 01       	movw	r30, r24
    3b2c:	20 83       	st	Z, r18
}
    3b2e:	00 00       	nop
    3b30:	df 91       	pop	r29
    3b32:	cf 91       	pop	r28
    3b34:	08 95       	ret

00003b36 <rotenc_get_inc>:

int16_t rotenc_get_inc()
{
    3b36:	cf 93       	push	r28
    3b38:	df 93       	push	r29
    3b3a:	00 d0       	rcall	.+0      	; 0x3b3c <rotenc_get_inc+0x6>
    3b3c:	00 d0       	rcall	.+0      	; 0x3b3e <rotenc_get_inc+0x8>
    3b3e:	cd b7       	in	r28, 0x3d	; 61
    3b40:	de b7       	in	r29, 0x3e	; 62
	int16_t res;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    3b42:	8f e5       	ldi	r24, 0x5F	; 95
    3b44:	90 e0       	ldi	r25, 0x00	; 0
    3b46:	fc 01       	movw	r30, r24
    3b48:	80 81       	ld	r24, Z
    3b4a:	8c 83       	std	Y+4, r24	; 0x04
    3b4c:	0e 94 2e 1d 	call	0x3a5c	; 0x3a5c <__iCliRetVal>
    3b50:	8b 83       	std	Y+3, r24	; 0x03
    3b52:	0b c0       	rjmp	.+22     	; 0x3b6a <rotenc_get_inc+0x34>
	{
		res = rotenc_delta;
    3b54:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <rotenc_delta>
    3b58:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <rotenc_delta+0x1>
    3b5c:	9a 83       	std	Y+2, r25	; 0x02
    3b5e:	89 83       	std	Y+1, r24	; 0x01
		rotenc_delta = 0;
    3b60:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <rotenc_delta+0x1>
    3b64:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <rotenc_delta>
}

int16_t rotenc_get_inc()
{
	int16_t res;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    3b68:	1b 82       	std	Y+3, r1	; 0x03
    3b6a:	8b 81       	ldd	r24, Y+3	; 0x03
    3b6c:	88 23       	and	r24, r24
    3b6e:	91 f7       	brne	.-28     	; 0x3b54 <rotenc_get_inc+0x1e>
    3b70:	ce 01       	movw	r24, r28
    3b72:	04 96       	adiw	r24, 0x04	; 4
    3b74:	0e 94 37 1d 	call	0x3a6e	; 0x3a6e <__iRestore>
	{
		res = rotenc_delta;
		rotenc_delta = 0;
	}
	return res;
    3b78:	89 81       	ldd	r24, Y+1	; 0x01
    3b7a:	9a 81       	ldd	r25, Y+2	; 0x02
}
    3b7c:	0f 90       	pop	r0
    3b7e:	0f 90       	pop	r0
    3b80:	0f 90       	pop	r0
    3b82:	0f 90       	pop	r0
    3b84:	df 91       	pop	r29
    3b86:	cf 91       	pop	r28
    3b88:	08 95       	ret

00003b8a <rotenc_update>:

void rotenc_update()
{
    3b8a:	cf 93       	push	r28
    3b8c:	df 93       	push	r29
    3b8e:	00 d0       	rcall	.+0      	; 0x3b90 <rotenc_update+0x6>
    3b90:	00 d0       	rcall	.+0      	; 0x3b92 <rotenc_update+0x8>
    3b92:	cd b7       	in	r28, 0x3d	; 61
    3b94:	de b7       	in	r29, 0x3e	; 62
	// combine old and new state into one byte and use as address for the LUT.
	// shift old state
	rotenc_last = (rotenc_last << 2) & 0x0F;
    3b96:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
    3b9a:	88 2f       	mov	r24, r24
    3b9c:	90 e0       	ldi	r25, 0x00	; 0
    3b9e:	88 0f       	add	r24, r24
    3ba0:	99 1f       	adc	r25, r25
    3ba2:	88 0f       	add	r24, r24
    3ba4:	99 1f       	adc	r25, r25
    3ba6:	8f 70       	andi	r24, 0x0F	; 15
    3ba8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	// write new state
	if(ROT_ENC_READ_A) rotenc_last |= 2;
    3bac:	83 e2       	ldi	r24, 0x23	; 35
    3bae:	90 e0       	ldi	r25, 0x00	; 0
    3bb0:	fc 01       	movw	r30, r24
    3bb2:	80 81       	ld	r24, Z
    3bb4:	88 2f       	mov	r24, r24
    3bb6:	90 e0       	ldi	r25, 0x00	; 0
    3bb8:	84 70       	andi	r24, 0x04	; 4
    3bba:	99 27       	eor	r25, r25
    3bbc:	89 2b       	or	r24, r25
    3bbe:	29 f4       	brne	.+10     	; 0x3bca <rotenc_update+0x40>
    3bc0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
    3bc4:	82 60       	ori	r24, 0x02	; 2
    3bc6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	if(ROT_ENC_READ_B) rotenc_last |= 1;
    3bca:	83 e2       	ldi	r24, 0x23	; 35
    3bcc:	90 e0       	ldi	r25, 0x00	; 0
    3bce:	fc 01       	movw	r30, r24
    3bd0:	80 81       	ld	r24, Z
    3bd2:	88 2f       	mov	r24, r24
    3bd4:	90 e0       	ldi	r25, 0x00	; 0
    3bd6:	88 70       	andi	r24, 0x08	; 8
    3bd8:	99 27       	eor	r25, r25
    3bda:	89 2b       	or	r24, r25
    3bdc:	29 f4       	brne	.+10     	; 0x3be8 <rotenc_update+0x5e>
    3bde:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
    3be2:	81 60       	ori	r24, 0x01	; 1
    3be4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	
	// retrieve increment value from LUT
	rotenc_delta += (int16_t)pgm_read_word(&rotenc_decoder_lut[rotenc_last]) * ROT_ENC_SIGN_MUL;
    3be8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
    3bec:	88 2f       	mov	r24, r24
    3bee:	90 e0       	ldi	r25, 0x00	; 0
    3bf0:	88 0f       	add	r24, r24
    3bf2:	99 1f       	adc	r25, r25
    3bf4:	86 51       	subi	r24, 0x16	; 22
    3bf6:	9f 4f       	sbci	r25, 0xFF	; 255
    3bf8:	9a 83       	std	Y+2, r25	; 0x02
    3bfa:	89 83       	std	Y+1, r24	; 0x01
    3bfc:	89 81       	ldd	r24, Y+1	; 0x01
    3bfe:	9a 81       	ldd	r25, Y+2	; 0x02
    3c00:	fc 01       	movw	r30, r24
    3c02:	25 91       	lpm	r18, Z+
    3c04:	34 91       	lpm	r19, Z
    3c06:	cf 01       	movw	r24, r30
    3c08:	3c 83       	std	Y+4, r19	; 0x04
    3c0a:	2b 83       	std	Y+3, r18	; 0x03
    3c0c:	9a 83       	std	Y+2, r25	; 0x02
    3c0e:	89 83       	std	Y+1, r24	; 0x01
    3c10:	8b 81       	ldd	r24, Y+3	; 0x03
    3c12:	9c 81       	ldd	r25, Y+4	; 0x04
    3c14:	9c 01       	movw	r18, r24
    3c16:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <rotenc_delta>
    3c1a:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <rotenc_delta+0x1>
    3c1e:	82 0f       	add	r24, r18
    3c20:	93 1f       	adc	r25, r19
    3c22:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <rotenc_delta+0x1>
    3c26:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <rotenc_delta>
	
	// clamp delta to prevent overflows
	rotenc_delta = imax16(ROT_ENC_MIN_DELTA, imin16(ROT_ENC_MAX_DELTA, rotenc_delta));
    3c2a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <rotenc_delta>
    3c2e:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <rotenc_delta+0x1>
    3c32:	bc 01       	movw	r22, r24
    3c34:	88 ee       	ldi	r24, 0xE8	; 232
    3c36:	93 e0       	ldi	r25, 0x03	; 3
    3c38:	0e 94 2c 1a 	call	0x3458	; 0x3458 <imin16>
    3c3c:	bc 01       	movw	r22, r24
    3c3e:	88 e1       	ldi	r24, 0x18	; 24
    3c40:	9c ef       	ldi	r25, 0xFC	; 252
    3c42:	0e 94 02 1a 	call	0x3404	; 0x3404 <imax16>
    3c46:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <rotenc_delta+0x1>
    3c4a:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <rotenc_delta>
}
    3c4e:	00 00       	nop
    3c50:	0f 90       	pop	r0
    3c52:	0f 90       	pop	r0
    3c54:	0f 90       	pop	r0
    3c56:	0f 90       	pop	r0
    3c58:	df 91       	pop	r29
    3c5a:	cf 91       	pop	r28
    3c5c:	08 95       	ret

00003c5e <shreg_init>:
		SH_REG_PORT |= (1 << SH_REG_SCK);
		SH_REG_DELAY
		SH_REG_PORT &= ~(1 << SH_REG_SCK);
		SH_REG_DELAY
	}
}
    3c5e:	cf 93       	push	r28
    3c60:	df 93       	push	r29
    3c62:	cd b7       	in	r28, 0x3d	; 61
    3c64:	de b7       	in	r29, 0x3e	; 62
    3c66:	84 e2       	ldi	r24, 0x24	; 36
    3c68:	90 e0       	ldi	r25, 0x00	; 0
    3c6a:	24 e2       	ldi	r18, 0x24	; 36
    3c6c:	30 e0       	ldi	r19, 0x00	; 0
    3c6e:	f9 01       	movw	r30, r18
    3c70:	20 81       	ld	r18, Z
    3c72:	20 6f       	ori	r18, 0xF0	; 240
    3c74:	fc 01       	movw	r30, r24
    3c76:	20 83       	st	Z, r18
    3c78:	85 e2       	ldi	r24, 0x25	; 37
    3c7a:	90 e0       	ldi	r25, 0x00	; 0
    3c7c:	25 e2       	ldi	r18, 0x25	; 37
    3c7e:	30 e0       	ldi	r19, 0x00	; 0
    3c80:	f9 01       	movw	r30, r18
    3c82:	20 81       	ld	r18, Z
    3c84:	2f 71       	andi	r18, 0x1F	; 31
    3c86:	fc 01       	movw	r30, r24
    3c88:	20 83       	st	Z, r18
    3c8a:	85 e2       	ldi	r24, 0x25	; 37
    3c8c:	90 e0       	ldi	r25, 0x00	; 0
    3c8e:	25 e2       	ldi	r18, 0x25	; 37
    3c90:	30 e0       	ldi	r19, 0x00	; 0
    3c92:	f9 01       	movw	r30, r18
    3c94:	20 81       	ld	r18, Z
    3c96:	20 61       	ori	r18, 0x10	; 16
    3c98:	fc 01       	movw	r30, r24
    3c9a:	20 83       	st	Z, r18
    3c9c:	0e 94 d4 1e 	call	0x3da8	; 0x3da8 <shreg_clear>
    3ca0:	0e 94 08 1f 	call	0x3e10	; 0x3e10 <shreg_out>
    3ca4:	00 00       	nop
    3ca6:	df 91       	pop	r29
    3ca8:	cf 91       	pop	r28
    3caa:	08 95       	ret

00003cac <shreg_shutdown>:
    3cac:	cf 93       	push	r28
    3cae:	df 93       	push	r29
    3cb0:	cd b7       	in	r28, 0x3d	; 61
    3cb2:	de b7       	in	r29, 0x3e	; 62
    3cb4:	0e 94 d4 1e 	call	0x3da8	; 0x3da8 <shreg_clear>
    3cb8:	0e 94 08 1f 	call	0x3e10	; 0x3e10 <shreg_out>
    3cbc:	00 00       	nop
    3cbe:	df 91       	pop	r29
    3cc0:	cf 91       	pop	r28
    3cc2:	08 95       	ret

00003cc4 <shreg_write_bit>:
    3cc4:	cf 93       	push	r28
    3cc6:	df 93       	push	r29
    3cc8:	1f 92       	push	r1
    3cca:	cd b7       	in	r28, 0x3d	; 61
    3ccc:	de b7       	in	r29, 0x3e	; 62
    3cce:	89 83       	std	Y+1, r24	; 0x01
    3cd0:	85 e2       	ldi	r24, 0x25	; 37
    3cd2:	90 e0       	ldi	r25, 0x00	; 0
    3cd4:	25 e2       	ldi	r18, 0x25	; 37
    3cd6:	30 e0       	ldi	r19, 0x00	; 0
    3cd8:	f9 01       	movw	r30, r18
    3cda:	20 81       	ld	r18, Z
    3cdc:	42 2f       	mov	r20, r18
    3cde:	4f 77       	andi	r20, 0x7F	; 127
    3ce0:	29 81       	ldd	r18, Y+1	; 0x01
    3ce2:	22 2f       	mov	r18, r18
    3ce4:	30 e0       	ldi	r19, 0x00	; 0
    3ce6:	36 95       	lsr	r19
    3ce8:	32 2f       	mov	r19, r18
    3cea:	22 27       	eor	r18, r18
    3cec:	37 95       	ror	r19
    3cee:	27 95       	ror	r18
    3cf0:	24 2b       	or	r18, r20
    3cf2:	fc 01       	movw	r30, r24
    3cf4:	20 83       	st	Z, r18
    3cf6:	0e 94 ee 1e 	call	0x3ddc	; 0x3ddc <shreg_shift>
    3cfa:	00 00       	nop
    3cfc:	0f 90       	pop	r0
    3cfe:	df 91       	pop	r29
    3d00:	cf 91       	pop	r28
    3d02:	08 95       	ret

00003d04 <shreg_write_byte>:
    3d04:	cf 93       	push	r28
    3d06:	df 93       	push	r29
    3d08:	00 d0       	rcall	.+0      	; 0x3d0a <shreg_write_byte+0x6>
    3d0a:	cd b7       	in	r28, 0x3d	; 61
    3d0c:	de b7       	in	r29, 0x3e	; 62
    3d0e:	8a 83       	std	Y+2, r24	; 0x02
    3d10:	19 82       	std	Y+1, r1	; 0x01
    3d12:	11 c0       	rjmp	.+34     	; 0x3d36 <shreg_write_byte+0x32>
    3d14:	8a 81       	ldd	r24, Y+2	; 0x02
    3d16:	88 2f       	mov	r24, r24
    3d18:	90 e0       	ldi	r25, 0x00	; 0
    3d1a:	29 81       	ldd	r18, Y+1	; 0x01
    3d1c:	22 2f       	mov	r18, r18
    3d1e:	30 e0       	ldi	r19, 0x00	; 0
    3d20:	02 c0       	rjmp	.+4      	; 0x3d26 <shreg_write_byte+0x22>
    3d22:	95 95       	asr	r25
    3d24:	87 95       	ror	r24
    3d26:	2a 95       	dec	r18
    3d28:	e2 f7       	brpl	.-8      	; 0x3d22 <shreg_write_byte+0x1e>
    3d2a:	81 70       	andi	r24, 0x01	; 1
    3d2c:	0e 94 62 1e 	call	0x3cc4	; 0x3cc4 <shreg_write_bit>
    3d30:	89 81       	ldd	r24, Y+1	; 0x01
    3d32:	8f 5f       	subi	r24, 0xFF	; 255
    3d34:	89 83       	std	Y+1, r24	; 0x01
    3d36:	89 81       	ldd	r24, Y+1	; 0x01
    3d38:	88 30       	cpi	r24, 0x08	; 8
    3d3a:	60 f3       	brcs	.-40     	; 0x3d14 <shreg_write_byte+0x10>
    3d3c:	00 00       	nop
    3d3e:	0f 90       	pop	r0
    3d40:	0f 90       	pop	r0
    3d42:	df 91       	pop	r29
    3d44:	cf 91       	pop	r28
    3d46:	08 95       	ret

00003d48 <shreg_write_bytes>:
    3d48:	cf 93       	push	r28
    3d4a:	df 93       	push	r29
    3d4c:	00 d0       	rcall	.+0      	; 0x3d4e <shreg_write_bytes+0x6>
    3d4e:	00 d0       	rcall	.+0      	; 0x3d50 <shreg_write_bytes+0x8>
    3d50:	cd b7       	in	r28, 0x3d	; 61
    3d52:	de b7       	in	r29, 0x3e	; 62
    3d54:	9b 83       	std	Y+3, r25	; 0x03
    3d56:	8a 83       	std	Y+2, r24	; 0x02
    3d58:	6c 83       	std	Y+4, r22	; 0x04
    3d5a:	19 82       	std	Y+1, r1	; 0x01
    3d5c:	19 c0       	rjmp	.+50     	; 0x3d90 <shreg_write_bytes+0x48>
    3d5e:	8c 81       	ldd	r24, Y+4	; 0x04
    3d60:	88 2f       	mov	r24, r24
    3d62:	90 e0       	ldi	r25, 0x00	; 0
    3d64:	9c 01       	movw	r18, r24
    3d66:	21 50       	subi	r18, 0x01	; 1
    3d68:	31 09       	sbc	r19, r1
    3d6a:	89 81       	ldd	r24, Y+1	; 0x01
    3d6c:	88 2f       	mov	r24, r24
    3d6e:	90 e0       	ldi	r25, 0x00	; 0
    3d70:	a9 01       	movw	r20, r18
    3d72:	48 1b       	sub	r20, r24
    3d74:	59 0b       	sbc	r21, r25
    3d76:	ca 01       	movw	r24, r20
    3d78:	9c 01       	movw	r18, r24
    3d7a:	8a 81       	ldd	r24, Y+2	; 0x02
    3d7c:	9b 81       	ldd	r25, Y+3	; 0x03
    3d7e:	82 0f       	add	r24, r18
    3d80:	93 1f       	adc	r25, r19
    3d82:	fc 01       	movw	r30, r24
    3d84:	80 81       	ld	r24, Z
    3d86:	0e 94 82 1e 	call	0x3d04	; 0x3d04 <shreg_write_byte>
    3d8a:	89 81       	ldd	r24, Y+1	; 0x01
    3d8c:	8f 5f       	subi	r24, 0xFF	; 255
    3d8e:	89 83       	std	Y+1, r24	; 0x01
    3d90:	99 81       	ldd	r25, Y+1	; 0x01
    3d92:	8c 81       	ldd	r24, Y+4	; 0x04
    3d94:	98 17       	cp	r25, r24
    3d96:	18 f3       	brcs	.-58     	; 0x3d5e <shreg_write_bytes+0x16>
    3d98:	00 00       	nop
    3d9a:	0f 90       	pop	r0
    3d9c:	0f 90       	pop	r0
    3d9e:	0f 90       	pop	r0
    3da0:	0f 90       	pop	r0
    3da2:	df 91       	pop	r29
    3da4:	cf 91       	pop	r28
    3da6:	08 95       	ret

00003da8 <shreg_clear>:
    3da8:	cf 93       	push	r28
    3daa:	df 93       	push	r29
    3dac:	cd b7       	in	r28, 0x3d	; 61
    3dae:	de b7       	in	r29, 0x3e	; 62
    3db0:	85 e2       	ldi	r24, 0x25	; 37
    3db2:	90 e0       	ldi	r25, 0x00	; 0
    3db4:	25 e2       	ldi	r18, 0x25	; 37
    3db6:	30 e0       	ldi	r19, 0x00	; 0
    3db8:	f9 01       	movw	r30, r18
    3dba:	20 81       	ld	r18, Z
    3dbc:	2f 7e       	andi	r18, 0xEF	; 239
    3dbe:	fc 01       	movw	r30, r24
    3dc0:	20 83       	st	Z, r18
    3dc2:	85 e2       	ldi	r24, 0x25	; 37
    3dc4:	90 e0       	ldi	r25, 0x00	; 0
    3dc6:	25 e2       	ldi	r18, 0x25	; 37
    3dc8:	30 e0       	ldi	r19, 0x00	; 0
    3dca:	f9 01       	movw	r30, r18
    3dcc:	20 81       	ld	r18, Z
    3dce:	20 61       	ori	r18, 0x10	; 16
    3dd0:	fc 01       	movw	r30, r24
    3dd2:	20 83       	st	Z, r18
    3dd4:	00 00       	nop
    3dd6:	df 91       	pop	r29
    3dd8:	cf 91       	pop	r28
    3dda:	08 95       	ret

00003ddc <shreg_shift>:
    3ddc:	cf 93       	push	r28
    3dde:	df 93       	push	r29
    3de0:	cd b7       	in	r28, 0x3d	; 61
    3de2:	de b7       	in	r29, 0x3e	; 62
    3de4:	85 e2       	ldi	r24, 0x25	; 37
    3de6:	90 e0       	ldi	r25, 0x00	; 0
    3de8:	25 e2       	ldi	r18, 0x25	; 37
    3dea:	30 e0       	ldi	r19, 0x00	; 0
    3dec:	f9 01       	movw	r30, r18
    3dee:	20 81       	ld	r18, Z
    3df0:	20 62       	ori	r18, 0x20	; 32
    3df2:	fc 01       	movw	r30, r24
    3df4:	20 83       	st	Z, r18
    3df6:	85 e2       	ldi	r24, 0x25	; 37
    3df8:	90 e0       	ldi	r25, 0x00	; 0
    3dfa:	25 e2       	ldi	r18, 0x25	; 37
    3dfc:	30 e0       	ldi	r19, 0x00	; 0
    3dfe:	f9 01       	movw	r30, r18
    3e00:	20 81       	ld	r18, Z
    3e02:	2f 7d       	andi	r18, 0xDF	; 223
    3e04:	fc 01       	movw	r30, r24
    3e06:	20 83       	st	Z, r18
    3e08:	00 00       	nop
    3e0a:	df 91       	pop	r29
    3e0c:	cf 91       	pop	r28
    3e0e:	08 95       	ret

00003e10 <shreg_out>:

void shreg_out()
{
    3e10:	cf 93       	push	r28
    3e12:	df 93       	push	r29
    3e14:	cd b7       	in	r28, 0x3d	; 61
    3e16:	de b7       	in	r29, 0x3e	; 62
	SH_REG_PORT |= (1 << SH_REG_RCK);
    3e18:	85 e2       	ldi	r24, 0x25	; 37
    3e1a:	90 e0       	ldi	r25, 0x00	; 0
    3e1c:	25 e2       	ldi	r18, 0x25	; 37
    3e1e:	30 e0       	ldi	r19, 0x00	; 0
    3e20:	f9 01       	movw	r30, r18
    3e22:	20 81       	ld	r18, Z
    3e24:	20 64       	ori	r18, 0x40	; 64
    3e26:	fc 01       	movw	r30, r24
    3e28:	20 83       	st	Z, r18
	SH_REG_DELAY
	SH_REG_PORT &= ~(1 << SH_REG_RCK);
    3e2a:	85 e2       	ldi	r24, 0x25	; 37
    3e2c:	90 e0       	ldi	r25, 0x00	; 0
    3e2e:	25 e2       	ldi	r18, 0x25	; 37
    3e30:	30 e0       	ldi	r19, 0x00	; 0
    3e32:	f9 01       	movw	r30, r18
    3e34:	20 81       	ld	r18, Z
    3e36:	2f 7b       	andi	r18, 0xBF	; 191
    3e38:	fc 01       	movw	r30, r24
    3e3a:	20 83       	st	Z, r18
	SH_REG_DELAY
    3e3c:	00 00       	nop
    3e3e:	df 91       	pop	r29
    3e40:	cf 91       	pop	r28
    3e42:	08 95       	ret

00003e44 <srd_dig_to_pattern>:
	for(uint8_t i = 0; i < length; ++i)
	{
		srd_set(i + index, patterns[i]);
	}
	return TRUE;
}
    3e44:	cf 93       	push	r28
    3e46:	df 93       	push	r29
    3e48:	1f 92       	push	r1
    3e4a:	cd b7       	in	r28, 0x3d	; 61
    3e4c:	de b7       	in	r29, 0x3e	; 62
    3e4e:	89 83       	std	Y+1, r24	; 0x01
    3e50:	89 81       	ldd	r24, Y+1	; 0x01
    3e52:	88 2f       	mov	r24, r24
    3e54:	90 e0       	ldi	r25, 0x00	; 0
    3e56:	09 2e       	mov	r0, r25
    3e58:	00 0c       	add	r0, r0
    3e5a:	aa 0b       	sbc	r26, r26
    3e5c:	bb 0b       	sbc	r27, r27
    3e5e:	40 e0       	ldi	r20, 0x00	; 0
    3e60:	50 e0       	ldi	r21, 0x00	; 0
    3e62:	29 e0       	ldi	r18, 0x09	; 9
    3e64:	30 e0       	ldi	r19, 0x00	; 0
    3e66:	84 1b       	sub	r24, r20
    3e68:	95 0b       	sbc	r25, r21
    3e6a:	28 17       	cp	r18, r24
    3e6c:	39 07       	cpc	r19, r25
    3e6e:	c8 f0       	brcs	.+50     	; 0x3ea2 <srd_dig_to_pattern+0x5e>
    3e70:	82 5c       	subi	r24, 0xC2	; 194
    3e72:	9f 4f       	sbci	r25, 0xFF	; 255
    3e74:	fc 01       	movw	r30, r24
    3e76:	0c 94 7c 2c 	jmp	0x58f8	; 0x58f8 <__tablejump2__>
    3e7a:	8f e3       	ldi	r24, 0x3F	; 63
    3e7c:	13 c0       	rjmp	.+38     	; 0x3ea4 <srd_dig_to_pattern+0x60>
    3e7e:	86 e0       	ldi	r24, 0x06	; 6
    3e80:	11 c0       	rjmp	.+34     	; 0x3ea4 <srd_dig_to_pattern+0x60>
    3e82:	8b e5       	ldi	r24, 0x5B	; 91
    3e84:	0f c0       	rjmp	.+30     	; 0x3ea4 <srd_dig_to_pattern+0x60>
    3e86:	8f e4       	ldi	r24, 0x4F	; 79
    3e88:	0d c0       	rjmp	.+26     	; 0x3ea4 <srd_dig_to_pattern+0x60>
    3e8a:	86 e6       	ldi	r24, 0x66	; 102
    3e8c:	0b c0       	rjmp	.+22     	; 0x3ea4 <srd_dig_to_pattern+0x60>
    3e8e:	8d e6       	ldi	r24, 0x6D	; 109
    3e90:	09 c0       	rjmp	.+18     	; 0x3ea4 <srd_dig_to_pattern+0x60>
    3e92:	8d e7       	ldi	r24, 0x7D	; 125
    3e94:	07 c0       	rjmp	.+14     	; 0x3ea4 <srd_dig_to_pattern+0x60>
    3e96:	87 e0       	ldi	r24, 0x07	; 7
    3e98:	05 c0       	rjmp	.+10     	; 0x3ea4 <srd_dig_to_pattern+0x60>
    3e9a:	8f e7       	ldi	r24, 0x7F	; 127
    3e9c:	03 c0       	rjmp	.+6      	; 0x3ea4 <srd_dig_to_pattern+0x60>
    3e9e:	8f e6       	ldi	r24, 0x6F	; 111
    3ea0:	01 c0       	rjmp	.+2      	; 0x3ea4 <srd_dig_to_pattern+0x60>
    3ea2:	8f e3       	ldi	r24, 0x3F	; 63
    3ea4:	0f 90       	pop	r0
    3ea6:	df 91       	pop	r29
    3ea8:	cf 91       	pop	r28
    3eaa:	08 95       	ret

00003eac <srd_ctd>:
    3eac:	cf 93       	push	r28
    3eae:	df 93       	push	r29
    3eb0:	00 d0       	rcall	.+0      	; 0x3eb2 <srd_ctd+0x6>
    3eb2:	1f 92       	push	r1
    3eb4:	cd b7       	in	r28, 0x3d	; 61
    3eb6:	de b7       	in	r29, 0x3e	; 62
    3eb8:	9b 83       	std	Y+3, r25	; 0x03
    3eba:	8a 83       	std	Y+2, r24	; 0x02
    3ebc:	8a 81       	ldd	r24, Y+2	; 0x02
    3ebe:	9b 81       	ldd	r25, Y+3	; 0x03
    3ec0:	89 2b       	or	r24, r25
    3ec2:	11 f4       	brne	.+4      	; 0x3ec8 <srd_ctd+0x1c>
    3ec4:	81 e0       	ldi	r24, 0x01	; 1
    3ec6:	1b c0       	rjmp	.+54     	; 0x3efe <srd_ctd+0x52>
    3ec8:	19 82       	std	Y+1, r1	; 0x01
    3eca:	8a 81       	ldd	r24, Y+2	; 0x02
    3ecc:	9b 81       	ldd	r25, Y+3	; 0x03
    3ece:	99 23       	and	r25, r25
    3ed0:	8c f4       	brge	.+34     	; 0x3ef4 <srd_ctd+0x48>
    3ed2:	89 81       	ldd	r24, Y+1	; 0x01
    3ed4:	8f 5f       	subi	r24, 0xFF	; 255
    3ed6:	89 83       	std	Y+1, r24	; 0x01
    3ed8:	0d c0       	rjmp	.+26     	; 0x3ef4 <srd_ctd+0x48>
    3eda:	8a 81       	ldd	r24, Y+2	; 0x02
    3edc:	9b 81       	ldd	r25, Y+3	; 0x03
    3ede:	2a e0       	ldi	r18, 0x0A	; 10
    3ee0:	30 e0       	ldi	r19, 0x00	; 0
    3ee2:	b9 01       	movw	r22, r18
    3ee4:	0e 94 46 2c 	call	0x588c	; 0x588c <__divmodhi4>
    3ee8:	cb 01       	movw	r24, r22
    3eea:	9b 83       	std	Y+3, r25	; 0x03
    3eec:	8a 83       	std	Y+2, r24	; 0x02
    3eee:	89 81       	ldd	r24, Y+1	; 0x01
    3ef0:	8f 5f       	subi	r24, 0xFF	; 255
    3ef2:	89 83       	std	Y+1, r24	; 0x01
    3ef4:	8a 81       	ldd	r24, Y+2	; 0x02
    3ef6:	9b 81       	ldd	r25, Y+3	; 0x03
    3ef8:	89 2b       	or	r24, r25
    3efa:	79 f7       	brne	.-34     	; 0x3eda <srd_ctd+0x2e>
    3efc:	89 81       	ldd	r24, Y+1	; 0x01
    3efe:	0f 90       	pop	r0
    3f00:	0f 90       	pop	r0
    3f02:	0f 90       	pop	r0
    3f04:	df 91       	pop	r29
    3f06:	cf 91       	pop	r28
    3f08:	08 95       	ret

00003f0a <srd_signed_ctd>:
    3f0a:	cf 93       	push	r28
    3f0c:	df 93       	push	r29
    3f0e:	00 d0       	rcall	.+0      	; 0x3f10 <srd_signed_ctd+0x6>
    3f10:	00 d0       	rcall	.+0      	; 0x3f12 <srd_signed_ctd+0x8>
    3f12:	cd b7       	in	r28, 0x3d	; 61
    3f14:	de b7       	in	r29, 0x3e	; 62
    3f16:	9b 83       	std	Y+3, r25	; 0x03
    3f18:	8a 83       	std	Y+2, r24	; 0x02
    3f1a:	6c 83       	std	Y+4, r22	; 0x04
    3f1c:	8a 81       	ldd	r24, Y+2	; 0x02
    3f1e:	9b 81       	ldd	r25, Y+3	; 0x03
    3f20:	89 2b       	or	r24, r25
    3f22:	39 f4       	brne	.+14     	; 0x3f32 <srd_signed_ctd+0x28>
    3f24:	8c 81       	ldd	r24, Y+4	; 0x04
    3f26:	88 23       	and	r24, r24
    3f28:	11 f0       	breq	.+4      	; 0x3f2e <srd_signed_ctd+0x24>
    3f2a:	82 e0       	ldi	r24, 0x02	; 2
    3f2c:	1c c0       	rjmp	.+56     	; 0x3f66 <srd_signed_ctd+0x5c>
    3f2e:	81 e0       	ldi	r24, 0x01	; 1
    3f30:	1a c0       	rjmp	.+52     	; 0x3f66 <srd_signed_ctd+0x5c>
    3f32:	19 82       	std	Y+1, r1	; 0x01
    3f34:	8c 81       	ldd	r24, Y+4	; 0x04
    3f36:	88 23       	and	r24, r24
    3f38:	89 f0       	breq	.+34     	; 0x3f5c <srd_signed_ctd+0x52>
    3f3a:	89 81       	ldd	r24, Y+1	; 0x01
    3f3c:	8f 5f       	subi	r24, 0xFF	; 255
    3f3e:	89 83       	std	Y+1, r24	; 0x01
    3f40:	0d c0       	rjmp	.+26     	; 0x3f5c <srd_signed_ctd+0x52>
    3f42:	8a 81       	ldd	r24, Y+2	; 0x02
    3f44:	9b 81       	ldd	r25, Y+3	; 0x03
    3f46:	2a e0       	ldi	r18, 0x0A	; 10
    3f48:	30 e0       	ldi	r19, 0x00	; 0
    3f4a:	b9 01       	movw	r22, r18
    3f4c:	0e 94 46 2c 	call	0x588c	; 0x588c <__divmodhi4>
    3f50:	cb 01       	movw	r24, r22
    3f52:	9b 83       	std	Y+3, r25	; 0x03
    3f54:	8a 83       	std	Y+2, r24	; 0x02
    3f56:	89 81       	ldd	r24, Y+1	; 0x01
    3f58:	8f 5f       	subi	r24, 0xFF	; 255
    3f5a:	89 83       	std	Y+1, r24	; 0x01
    3f5c:	8a 81       	ldd	r24, Y+2	; 0x02
    3f5e:	9b 81       	ldd	r25, Y+3	; 0x03
    3f60:	89 2b       	or	r24, r25
    3f62:	79 f7       	brne	.-34     	; 0x3f42 <srd_signed_ctd+0x38>
    3f64:	89 81       	ldd	r24, Y+1	; 0x01
    3f66:	0f 90       	pop	r0
    3f68:	0f 90       	pop	r0
    3f6a:	0f 90       	pop	r0
    3f6c:	0f 90       	pop	r0
    3f6e:	df 91       	pop	r29
    3f70:	cf 91       	pop	r28
    3f72:	08 95       	ret

00003f74 <srd_int16_to_patterns>:
    3f74:	0f 93       	push	r16
    3f76:	1f 93       	push	r17
    3f78:	cf 93       	push	r28
    3f7a:	df 93       	push	r29
    3f7c:	cd b7       	in	r28, 0x3d	; 61
    3f7e:	de b7       	in	r29, 0x3e	; 62
    3f80:	27 97       	sbiw	r28, 0x07	; 7
    3f82:	0f b6       	in	r0, 0x3f	; 63
    3f84:	f8 94       	cli
    3f86:	de bf       	out	0x3e, r29	; 62
    3f88:	0f be       	out	0x3f, r0	; 63
    3f8a:	cd bf       	out	0x3d, r28	; 61
    3f8c:	9c 83       	std	Y+4, r25	; 0x04
    3f8e:	8b 83       	std	Y+3, r24	; 0x03
    3f90:	7e 83       	std	Y+6, r23	; 0x06
    3f92:	6d 83       	std	Y+5, r22	; 0x05
    3f94:	4f 83       	std	Y+7, r20	; 0x07
    3f96:	19 82       	std	Y+1, r1	; 0x01
    3f98:	8c 81       	ldd	r24, Y+4	; 0x04
    3f9a:	88 1f       	adc	r24, r24
    3f9c:	88 27       	eor	r24, r24
    3f9e:	88 1f       	adc	r24, r24
    3fa0:	8a 83       	std	Y+2, r24	; 0x02
    3fa2:	8a 81       	ldd	r24, Y+2	; 0x02
    3fa4:	88 23       	and	r24, r24
    3fa6:	39 f0       	breq	.+14     	; 0x3fb6 <srd_int16_to_patterns+0x42>
    3fa8:	8b 81       	ldd	r24, Y+3	; 0x03
    3faa:	9c 81       	ldd	r25, Y+4	; 0x04
    3fac:	91 95       	neg	r25
    3fae:	81 95       	neg	r24
    3fb0:	91 09       	sbc	r25, r1
    3fb2:	9c 83       	std	Y+4, r25	; 0x04
    3fb4:	8b 83       	std	Y+3, r24	; 0x03
    3fb6:	8b 81       	ldd	r24, Y+3	; 0x03
    3fb8:	9c 81       	ldd	r25, Y+4	; 0x04
    3fba:	89 2b       	or	r24, r25
    3fbc:	d1 f5       	brne	.+116    	; 0x4032 <srd_int16_to_patterns+0xbe>
    3fbe:	8f 81       	ldd	r24, Y+7	; 0x07
    3fc0:	88 2f       	mov	r24, r24
    3fc2:	90 e0       	ldi	r25, 0x00	; 0
    3fc4:	01 97       	sbiw	r24, 0x01	; 1
    3fc6:	2d 81       	ldd	r18, Y+5	; 0x05
    3fc8:	3e 81       	ldd	r19, Y+6	; 0x06
    3fca:	82 0f       	add	r24, r18
    3fcc:	93 1f       	adc	r25, r19
    3fce:	2f e3       	ldi	r18, 0x3F	; 63
    3fd0:	fc 01       	movw	r30, r24
    3fd2:	20 83       	st	Z, r18
    3fd4:	89 81       	ldd	r24, Y+1	; 0x01
    3fd6:	8f 5f       	subi	r24, 0xFF	; 255
    3fd8:	89 83       	std	Y+1, r24	; 0x01
    3fda:	45 c0       	rjmp	.+138    	; 0x4066 <srd_int16_to_patterns+0xf2>
    3fdc:	8f 81       	ldd	r24, Y+7	; 0x07
    3fde:	88 2f       	mov	r24, r24
    3fe0:	90 e0       	ldi	r25, 0x00	; 0
    3fe2:	9c 01       	movw	r18, r24
    3fe4:	21 50       	subi	r18, 0x01	; 1
    3fe6:	31 09       	sbc	r19, r1
    3fe8:	89 81       	ldd	r24, Y+1	; 0x01
    3fea:	91 e0       	ldi	r25, 0x01	; 1
    3fec:	98 0f       	add	r25, r24
    3fee:	99 83       	std	Y+1, r25	; 0x01
    3ff0:	88 2f       	mov	r24, r24
    3ff2:	90 e0       	ldi	r25, 0x00	; 0
    3ff4:	a9 01       	movw	r20, r18
    3ff6:	48 1b       	sub	r20, r24
    3ff8:	59 0b       	sbc	r21, r25
    3ffa:	ca 01       	movw	r24, r20
    3ffc:	9c 01       	movw	r18, r24
    3ffe:	8d 81       	ldd	r24, Y+5	; 0x05
    4000:	9e 81       	ldd	r25, Y+6	; 0x06
    4002:	8c 01       	movw	r16, r24
    4004:	02 0f       	add	r16, r18
    4006:	13 1f       	adc	r17, r19
    4008:	8b 81       	ldd	r24, Y+3	; 0x03
    400a:	9c 81       	ldd	r25, Y+4	; 0x04
    400c:	2a e0       	ldi	r18, 0x0A	; 10
    400e:	30 e0       	ldi	r19, 0x00	; 0
    4010:	b9 01       	movw	r22, r18
    4012:	0e 94 46 2c 	call	0x588c	; 0x588c <__divmodhi4>
    4016:	0e 94 22 1f 	call	0x3e44	; 0x3e44 <srd_dig_to_pattern>
    401a:	f8 01       	movw	r30, r16
    401c:	80 83       	st	Z, r24
    401e:	8b 81       	ldd	r24, Y+3	; 0x03
    4020:	9c 81       	ldd	r25, Y+4	; 0x04
    4022:	2a e0       	ldi	r18, 0x0A	; 10
    4024:	30 e0       	ldi	r19, 0x00	; 0
    4026:	b9 01       	movw	r22, r18
    4028:	0e 94 46 2c 	call	0x588c	; 0x588c <__divmodhi4>
    402c:	cb 01       	movw	r24, r22
    402e:	9c 83       	std	Y+4, r25	; 0x04
    4030:	8b 83       	std	Y+3, r24	; 0x03
    4032:	8b 81       	ldd	r24, Y+3	; 0x03
    4034:	9c 81       	ldd	r25, Y+4	; 0x04
    4036:	18 16       	cp	r1, r24
    4038:	19 06       	cpc	r1, r25
    403a:	ac f4       	brge	.+42     	; 0x4066 <srd_int16_to_patterns+0xf2>
    403c:	89 81       	ldd	r24, Y+1	; 0x01
    403e:	28 2f       	mov	r18, r24
    4040:	30 e0       	ldi	r19, 0x00	; 0
    4042:	8f 81       	ldd	r24, Y+7	; 0x07
    4044:	48 2f       	mov	r20, r24
    4046:	50 e0       	ldi	r21, 0x00	; 0
    4048:	81 e0       	ldi	r24, 0x01	; 1
    404a:	9a 81       	ldd	r25, Y+2	; 0x02
    404c:	99 23       	and	r25, r25
    404e:	09 f4       	brne	.+2      	; 0x4052 <srd_int16_to_patterns+0xde>
    4050:	80 e0       	ldi	r24, 0x00	; 0
    4052:	88 2f       	mov	r24, r24
    4054:	90 e0       	ldi	r25, 0x00	; 0
    4056:	ba 01       	movw	r22, r20
    4058:	68 1b       	sub	r22, r24
    405a:	79 0b       	sbc	r23, r25
    405c:	cb 01       	movw	r24, r22
    405e:	28 17       	cp	r18, r24
    4060:	39 07       	cpc	r19, r25
    4062:	0c f4       	brge	.+2      	; 0x4066 <srd_int16_to_patterns+0xf2>
    4064:	bb cf       	rjmp	.-138    	; 0x3fdc <srd_int16_to_patterns+0x68>
    4066:	8a 81       	ldd	r24, Y+2	; 0x02
    4068:	88 23       	and	r24, r24
    406a:	a9 f0       	breq	.+42     	; 0x4096 <srd_int16_to_patterns+0x122>
    406c:	8f 81       	ldd	r24, Y+7	; 0x07
    406e:	88 2f       	mov	r24, r24
    4070:	90 e0       	ldi	r25, 0x00	; 0
    4072:	9c 01       	movw	r18, r24
    4074:	21 50       	subi	r18, 0x01	; 1
    4076:	31 09       	sbc	r19, r1
    4078:	89 81       	ldd	r24, Y+1	; 0x01
    407a:	88 2f       	mov	r24, r24
    407c:	90 e0       	ldi	r25, 0x00	; 0
    407e:	f9 01       	movw	r30, r18
    4080:	e8 1b       	sub	r30, r24
    4082:	f9 0b       	sbc	r31, r25
    4084:	cf 01       	movw	r24, r30
    4086:	9c 01       	movw	r18, r24
    4088:	8d 81       	ldd	r24, Y+5	; 0x05
    408a:	9e 81       	ldd	r25, Y+6	; 0x06
    408c:	82 0f       	add	r24, r18
    408e:	93 1f       	adc	r25, r19
    4090:	20 e4       	ldi	r18, 0x40	; 64
    4092:	fc 01       	movw	r30, r24
    4094:	20 83       	st	Z, r18
    4096:	81 e0       	ldi	r24, 0x01	; 1
    4098:	27 96       	adiw	r28, 0x07	; 7
    409a:	0f b6       	in	r0, 0x3f	; 63
    409c:	f8 94       	cli
    409e:	de bf       	out	0x3e, r29	; 62
    40a0:	0f be       	out	0x3f, r0	; 63
    40a2:	cd bf       	out	0x3d, r28	; 61
    40a4:	df 91       	pop	r29
    40a6:	cf 91       	pop	r28
    40a8:	1f 91       	pop	r17
    40aa:	0f 91       	pop	r16
    40ac:	08 95       	ret

000040ae <srd_signed_int16_to_patterns>:
    40ae:	0f 93       	push	r16
    40b0:	1f 93       	push	r17
    40b2:	cf 93       	push	r28
    40b4:	df 93       	push	r29
    40b6:	cd b7       	in	r28, 0x3d	; 61
    40b8:	de b7       	in	r29, 0x3e	; 62
    40ba:	27 97       	sbiw	r28, 0x07	; 7
    40bc:	0f b6       	in	r0, 0x3f	; 63
    40be:	f8 94       	cli
    40c0:	de bf       	out	0x3e, r29	; 62
    40c2:	0f be       	out	0x3f, r0	; 63
    40c4:	cd bf       	out	0x3d, r28	; 61
    40c6:	9b 83       	std	Y+3, r25	; 0x03
    40c8:	8a 83       	std	Y+2, r24	; 0x02
    40ca:	6c 83       	std	Y+4, r22	; 0x04
    40cc:	5e 83       	std	Y+6, r21	; 0x06
    40ce:	4d 83       	std	Y+5, r20	; 0x05
    40d0:	2f 83       	std	Y+7, r18	; 0x07
    40d2:	19 82       	std	Y+1, r1	; 0x01
    40d4:	8c 81       	ldd	r24, Y+4	; 0x04
    40d6:	88 23       	and	r24, r24
    40d8:	39 f0       	breq	.+14     	; 0x40e8 <srd_signed_int16_to_patterns+0x3a>
    40da:	8a 81       	ldd	r24, Y+2	; 0x02
    40dc:	9b 81       	ldd	r25, Y+3	; 0x03
    40de:	91 95       	neg	r25
    40e0:	81 95       	neg	r24
    40e2:	91 09       	sbc	r25, r1
    40e4:	9b 83       	std	Y+3, r25	; 0x03
    40e6:	8a 83       	std	Y+2, r24	; 0x02
    40e8:	8a 81       	ldd	r24, Y+2	; 0x02
    40ea:	9b 81       	ldd	r25, Y+3	; 0x03
    40ec:	89 2b       	or	r24, r25
    40ee:	d1 f5       	brne	.+116    	; 0x4164 <srd_signed_int16_to_patterns+0xb6>
    40f0:	8f 81       	ldd	r24, Y+7	; 0x07
    40f2:	88 2f       	mov	r24, r24
    40f4:	90 e0       	ldi	r25, 0x00	; 0
    40f6:	01 97       	sbiw	r24, 0x01	; 1
    40f8:	2d 81       	ldd	r18, Y+5	; 0x05
    40fa:	3e 81       	ldd	r19, Y+6	; 0x06
    40fc:	82 0f       	add	r24, r18
    40fe:	93 1f       	adc	r25, r19
    4100:	2f e3       	ldi	r18, 0x3F	; 63
    4102:	fc 01       	movw	r30, r24
    4104:	20 83       	st	Z, r18
    4106:	89 81       	ldd	r24, Y+1	; 0x01
    4108:	8f 5f       	subi	r24, 0xFF	; 255
    410a:	89 83       	std	Y+1, r24	; 0x01
    410c:	45 c0       	rjmp	.+138    	; 0x4198 <srd_signed_int16_to_patterns+0xea>
    410e:	8f 81       	ldd	r24, Y+7	; 0x07
    4110:	88 2f       	mov	r24, r24
    4112:	90 e0       	ldi	r25, 0x00	; 0
    4114:	9c 01       	movw	r18, r24
    4116:	21 50       	subi	r18, 0x01	; 1
    4118:	31 09       	sbc	r19, r1
    411a:	89 81       	ldd	r24, Y+1	; 0x01
    411c:	91 e0       	ldi	r25, 0x01	; 1
    411e:	98 0f       	add	r25, r24
    4120:	99 83       	std	Y+1, r25	; 0x01
    4122:	88 2f       	mov	r24, r24
    4124:	90 e0       	ldi	r25, 0x00	; 0
    4126:	a9 01       	movw	r20, r18
    4128:	48 1b       	sub	r20, r24
    412a:	59 0b       	sbc	r21, r25
    412c:	ca 01       	movw	r24, r20
    412e:	9c 01       	movw	r18, r24
    4130:	8d 81       	ldd	r24, Y+5	; 0x05
    4132:	9e 81       	ldd	r25, Y+6	; 0x06
    4134:	8c 01       	movw	r16, r24
    4136:	02 0f       	add	r16, r18
    4138:	13 1f       	adc	r17, r19
    413a:	8a 81       	ldd	r24, Y+2	; 0x02
    413c:	9b 81       	ldd	r25, Y+3	; 0x03
    413e:	2a e0       	ldi	r18, 0x0A	; 10
    4140:	30 e0       	ldi	r19, 0x00	; 0
    4142:	b9 01       	movw	r22, r18
    4144:	0e 94 46 2c 	call	0x588c	; 0x588c <__divmodhi4>
    4148:	0e 94 22 1f 	call	0x3e44	; 0x3e44 <srd_dig_to_pattern>
    414c:	f8 01       	movw	r30, r16
    414e:	80 83       	st	Z, r24
    4150:	8a 81       	ldd	r24, Y+2	; 0x02
    4152:	9b 81       	ldd	r25, Y+3	; 0x03
    4154:	2a e0       	ldi	r18, 0x0A	; 10
    4156:	30 e0       	ldi	r19, 0x00	; 0
    4158:	b9 01       	movw	r22, r18
    415a:	0e 94 46 2c 	call	0x588c	; 0x588c <__divmodhi4>
    415e:	cb 01       	movw	r24, r22
    4160:	9b 83       	std	Y+3, r25	; 0x03
    4162:	8a 83       	std	Y+2, r24	; 0x02
    4164:	8a 81       	ldd	r24, Y+2	; 0x02
    4166:	9b 81       	ldd	r25, Y+3	; 0x03
    4168:	18 16       	cp	r1, r24
    416a:	19 06       	cpc	r1, r25
    416c:	ac f4       	brge	.+42     	; 0x4198 <srd_signed_int16_to_patterns+0xea>
    416e:	89 81       	ldd	r24, Y+1	; 0x01
    4170:	28 2f       	mov	r18, r24
    4172:	30 e0       	ldi	r19, 0x00	; 0
    4174:	8f 81       	ldd	r24, Y+7	; 0x07
    4176:	48 2f       	mov	r20, r24
    4178:	50 e0       	ldi	r21, 0x00	; 0
    417a:	81 e0       	ldi	r24, 0x01	; 1
    417c:	9c 81       	ldd	r25, Y+4	; 0x04
    417e:	99 23       	and	r25, r25
    4180:	09 f4       	brne	.+2      	; 0x4184 <srd_signed_int16_to_patterns+0xd6>
    4182:	80 e0       	ldi	r24, 0x00	; 0
    4184:	88 2f       	mov	r24, r24
    4186:	90 e0       	ldi	r25, 0x00	; 0
    4188:	ba 01       	movw	r22, r20
    418a:	68 1b       	sub	r22, r24
    418c:	79 0b       	sbc	r23, r25
    418e:	cb 01       	movw	r24, r22
    4190:	28 17       	cp	r18, r24
    4192:	39 07       	cpc	r19, r25
    4194:	0c f4       	brge	.+2      	; 0x4198 <srd_signed_int16_to_patterns+0xea>
    4196:	bb cf       	rjmp	.-138    	; 0x410e <srd_signed_int16_to_patterns+0x60>
    4198:	8c 81       	ldd	r24, Y+4	; 0x04
    419a:	88 23       	and	r24, r24
    419c:	a9 f0       	breq	.+42     	; 0x41c8 <srd_signed_int16_to_patterns+0x11a>
    419e:	8f 81       	ldd	r24, Y+7	; 0x07
    41a0:	88 2f       	mov	r24, r24
    41a2:	90 e0       	ldi	r25, 0x00	; 0
    41a4:	9c 01       	movw	r18, r24
    41a6:	21 50       	subi	r18, 0x01	; 1
    41a8:	31 09       	sbc	r19, r1
    41aa:	89 81       	ldd	r24, Y+1	; 0x01
    41ac:	88 2f       	mov	r24, r24
    41ae:	90 e0       	ldi	r25, 0x00	; 0
    41b0:	f9 01       	movw	r30, r18
    41b2:	e8 1b       	sub	r30, r24
    41b4:	f9 0b       	sbc	r31, r25
    41b6:	cf 01       	movw	r24, r30
    41b8:	9c 01       	movw	r18, r24
    41ba:	8d 81       	ldd	r24, Y+5	; 0x05
    41bc:	9e 81       	ldd	r25, Y+6	; 0x06
    41be:	82 0f       	add	r24, r18
    41c0:	93 1f       	adc	r25, r19
    41c2:	20 e4       	ldi	r18, 0x40	; 64
    41c4:	fc 01       	movw	r30, r24
    41c6:	20 83       	st	Z, r18
    41c8:	81 e0       	ldi	r24, 0x01	; 1
    41ca:	27 96       	adiw	r28, 0x07	; 7
    41cc:	0f b6       	in	r0, 0x3f	; 63
    41ce:	f8 94       	cli
    41d0:	de bf       	out	0x3e, r29	; 62
    41d2:	0f be       	out	0x3f, r0	; 63
    41d4:	cd bf       	out	0x3d, r28	; 61
    41d6:	df 91       	pop	r29
    41d8:	cf 91       	pop	r28
    41da:	1f 91       	pop	r17
    41dc:	0f 91       	pop	r16
    41de:	08 95       	ret

000041e0 <srd_float_to_patterns>:
    41e0:	cf 92       	push	r12
    41e2:	df 92       	push	r13
    41e4:	ef 92       	push	r14
    41e6:	ff 92       	push	r15
    41e8:	0f 93       	push	r16
    41ea:	1f 93       	push	r17
    41ec:	cf 93       	push	r28
    41ee:	df 93       	push	r29
    41f0:	cd b7       	in	r28, 0x3d	; 61
    41f2:	de b7       	in	r29, 0x3e	; 62
    41f4:	61 97       	sbiw	r28, 0x11	; 17
    41f6:	0f b6       	in	r0, 0x3f	; 63
    41f8:	f8 94       	cli
    41fa:	de bf       	out	0x3e, r29	; 62
    41fc:	0f be       	out	0x3f, r0	; 63
    41fe:	cd bf       	out	0x3d, r28	; 61
    4200:	6a 87       	std	Y+10, r22	; 0x0a
    4202:	7b 87       	std	Y+11, r23	; 0x0b
    4204:	8c 87       	std	Y+12, r24	; 0x0c
    4206:	9d 87       	std	Y+13, r25	; 0x0d
    4208:	4e 87       	std	Y+14, r20	; 0x0e
    420a:	38 8b       	std	Y+16, r19	; 0x10
    420c:	2f 87       	std	Y+15, r18	; 0x0f
    420e:	09 8b       	std	Y+17, r16	; 0x11
    4210:	11 e0       	ldi	r17, 0x01	; 1
    4212:	20 e0       	ldi	r18, 0x00	; 0
    4214:	30 e0       	ldi	r19, 0x00	; 0
    4216:	a9 01       	movw	r20, r18
    4218:	6a 85       	ldd	r22, Y+10	; 0x0a
    421a:	7b 85       	ldd	r23, Y+11	; 0x0b
    421c:	8c 85       	ldd	r24, Y+12	; 0x0c
    421e:	9d 85       	ldd	r25, Y+13	; 0x0d
    4220:	0e 94 66 29 	call	0x52cc	; 0x52cc <__cmpsf2>
    4224:	88 23       	and	r24, r24
    4226:	0c f0       	brlt	.+2      	; 0x422a <srd_float_to_patterns+0x4a>
    4228:	10 e0       	ldi	r17, 0x00	; 0
    422a:	1b 83       	std	Y+3, r17	; 0x03
    422c:	6a 85       	ldd	r22, Y+10	; 0x0a
    422e:	7b 85       	ldd	r23, Y+11	; 0x0b
    4230:	8c 85       	ldd	r24, Y+12	; 0x0c
    4232:	9d 85       	ldd	r25, Y+13	; 0x0d
    4234:	0e 94 19 2a 	call	0x5432	; 0x5432 <__fixsfsi>
    4238:	dc 01       	movw	r26, r24
    423a:	cb 01       	movw	r24, r22
    423c:	9d 83       	std	Y+5, r25	; 0x05
    423e:	8c 83       	std	Y+4, r24	; 0x04
    4240:	8c 81       	ldd	r24, Y+4	; 0x04
    4242:	9d 81       	ldd	r25, Y+5	; 0x05
    4244:	09 2e       	mov	r0, r25
    4246:	00 0c       	add	r0, r0
    4248:	aa 0b       	sbc	r26, r26
    424a:	bb 0b       	sbc	r27, r27
    424c:	bc 01       	movw	r22, r24
    424e:	cd 01       	movw	r24, r26
    4250:	0e 94 51 2a 	call	0x54a2	; 0x54a2 <__floatsisf>
    4254:	dc 01       	movw	r26, r24
    4256:	cb 01       	movw	r24, r22
    4258:	9c 01       	movw	r18, r24
    425a:	ad 01       	movw	r20, r26
    425c:	6a 85       	ldd	r22, Y+10	; 0x0a
    425e:	7b 85       	ldd	r23, Y+11	; 0x0b
    4260:	8c 85       	ldd	r24, Y+12	; 0x0c
    4262:	9d 85       	ldd	r25, Y+13	; 0x0d
    4264:	0e 94 f9 28 	call	0x51f2	; 0x51f2 <__subsf3>
    4268:	dc 01       	movw	r26, r24
    426a:	cb 01       	movw	r24, r22
    426c:	6c 01       	movw	r12, r24
    426e:	7d 01       	movw	r14, r26
    4270:	e8 94       	clt
    4272:	f7 f8       	bld	r15, 7
    4274:	8e 85       	ldd	r24, Y+14	; 0x0e
    4276:	88 2f       	mov	r24, r24
    4278:	90 e0       	ldi	r25, 0x00	; 0
    427a:	0e 94 ba 19 	call	0x3374	; 0x3374 <decpowi16>
    427e:	09 2e       	mov	r0, r25
    4280:	00 0c       	add	r0, r0
    4282:	aa 0b       	sbc	r26, r26
    4284:	bb 0b       	sbc	r27, r27
    4286:	bc 01       	movw	r22, r24
    4288:	cd 01       	movw	r24, r26
    428a:	0e 94 51 2a 	call	0x54a2	; 0x54a2 <__floatsisf>
    428e:	dc 01       	movw	r26, r24
    4290:	cb 01       	movw	r24, r22
    4292:	9c 01       	movw	r18, r24
    4294:	ad 01       	movw	r20, r26
    4296:	c7 01       	movw	r24, r14
    4298:	b6 01       	movw	r22, r12
    429a:	0e 94 a4 2b 	call	0x5748	; 0x5748 <__mulsf3>
    429e:	dc 01       	movw	r26, r24
    42a0:	cb 01       	movw	r24, r22
    42a2:	bc 01       	movw	r22, r24
    42a4:	cd 01       	movw	r24, r26
    42a6:	0e 94 19 2a 	call	0x5432	; 0x5432 <__fixsfsi>
    42aa:	dc 01       	movw	r26, r24
    42ac:	cb 01       	movw	r24, r22
    42ae:	9f 83       	std	Y+7, r25	; 0x07
    42b0:	8e 83       	std	Y+6, r24	; 0x06
    42b2:	8c 81       	ldd	r24, Y+4	; 0x04
    42b4:	9d 81       	ldd	r25, Y+5	; 0x05
    42b6:	6b 81       	ldd	r22, Y+3	; 0x03
    42b8:	0e 94 85 1f 	call	0x3f0a	; 0x3f0a <srd_signed_ctd>
    42bc:	88 87       	std	Y+8, r24	; 0x08
    42be:	8e 81       	ldd	r24, Y+6	; 0x06
    42c0:	9f 81       	ldd	r25, Y+7	; 0x07
    42c2:	0e 94 56 1f 	call	0x3eac	; 0x3eac <srd_ctd>
    42c6:	89 87       	std	Y+9, r24	; 0x09
    42c8:	88 85       	ldd	r24, Y+8	; 0x08
    42ca:	28 2f       	mov	r18, r24
    42cc:	30 e0       	ldi	r19, 0x00	; 0
    42ce:	8e 85       	ldd	r24, Y+14	; 0x0e
    42d0:	88 2f       	mov	r24, r24
    42d2:	90 e0       	ldi	r25, 0x00	; 0
    42d4:	28 0f       	add	r18, r24
    42d6:	39 1f       	adc	r19, r25
    42d8:	89 89       	ldd	r24, Y+17	; 0x11
    42da:	88 2f       	mov	r24, r24
    42dc:	90 e0       	ldi	r25, 0x00	; 0
    42de:	82 17       	cp	r24, r18
    42e0:	93 07       	cpc	r25, r19
    42e2:	14 f4       	brge	.+4      	; 0x42e8 <srd_float_to_patterns+0x108>
    42e4:	80 e0       	ldi	r24, 0x00	; 0
    42e6:	7f c0       	rjmp	.+254    	; 0x43e6 <srd_float_to_patterns+0x206>
    42e8:	89 89       	ldd	r24, Y+17	; 0x11
    42ea:	28 2f       	mov	r18, r24
    42ec:	30 e0       	ldi	r19, 0x00	; 0
    42ee:	8e 85       	ldd	r24, Y+14	; 0x0e
    42f0:	88 2f       	mov	r24, r24
    42f2:	90 e0       	ldi	r25, 0x00	; 0
    42f4:	a9 01       	movw	r20, r18
    42f6:	48 1b       	sub	r20, r24
    42f8:	59 0b       	sbc	r21, r25
    42fa:	ca 01       	movw	r24, r20
    42fc:	9c 01       	movw	r18, r24
    42fe:	8f 85       	ldd	r24, Y+15	; 0x0f
    4300:	98 89       	ldd	r25, Y+16	; 0x10
    4302:	ac 01       	movw	r20, r24
    4304:	42 0f       	add	r20, r18
    4306:	53 1f       	adc	r21, r19
    4308:	8e 81       	ldd	r24, Y+6	; 0x06
    430a:	9f 81       	ldd	r25, Y+7	; 0x07
    430c:	2e 85       	ldd	r18, Y+14	; 0x0e
    430e:	60 e0       	ldi	r22, 0x00	; 0
    4310:	0e 94 57 20 	call	0x40ae	; 0x40ae <srd_signed_int16_to_patterns>
    4314:	1a 82       	std	Y+2, r1	; 0x02
    4316:	19 82       	std	Y+1, r1	; 0x01
    4318:	19 c0       	rjmp	.+50     	; 0x434c <srd_float_to_patterns+0x16c>
    431a:	89 89       	ldd	r24, Y+17	; 0x11
    431c:	28 2f       	mov	r18, r24
    431e:	30 e0       	ldi	r19, 0x00	; 0
    4320:	8e 85       	ldd	r24, Y+14	; 0x0e
    4322:	88 2f       	mov	r24, r24
    4324:	90 e0       	ldi	r25, 0x00	; 0
    4326:	28 1b       	sub	r18, r24
    4328:	39 0b       	sbc	r19, r25
    432a:	89 81       	ldd	r24, Y+1	; 0x01
    432c:	9a 81       	ldd	r25, Y+2	; 0x02
    432e:	82 0f       	add	r24, r18
    4330:	93 1f       	adc	r25, r19
    4332:	9c 01       	movw	r18, r24
    4334:	8f 85       	ldd	r24, Y+15	; 0x0f
    4336:	98 89       	ldd	r25, Y+16	; 0x10
    4338:	82 0f       	add	r24, r18
    433a:	93 1f       	adc	r25, r19
    433c:	2f e3       	ldi	r18, 0x3F	; 63
    433e:	fc 01       	movw	r30, r24
    4340:	20 83       	st	Z, r18
    4342:	89 81       	ldd	r24, Y+1	; 0x01
    4344:	9a 81       	ldd	r25, Y+2	; 0x02
    4346:	01 96       	adiw	r24, 0x01	; 1
    4348:	9a 83       	std	Y+2, r25	; 0x02
    434a:	89 83       	std	Y+1, r24	; 0x01
    434c:	8e 85       	ldd	r24, Y+14	; 0x0e
    434e:	28 2f       	mov	r18, r24
    4350:	30 e0       	ldi	r19, 0x00	; 0
    4352:	89 85       	ldd	r24, Y+9	; 0x09
    4354:	88 2f       	mov	r24, r24
    4356:	90 e0       	ldi	r25, 0x00	; 0
    4358:	28 1b       	sub	r18, r24
    435a:	39 0b       	sbc	r19, r25
    435c:	89 81       	ldd	r24, Y+1	; 0x01
    435e:	9a 81       	ldd	r25, Y+2	; 0x02
    4360:	82 17       	cp	r24, r18
    4362:	93 07       	cpc	r25, r19
    4364:	d4 f2       	brlt	.-76     	; 0x431a <srd_float_to_patterns+0x13a>
    4366:	89 89       	ldd	r24, Y+17	; 0x11
    4368:	28 2f       	mov	r18, r24
    436a:	30 e0       	ldi	r19, 0x00	; 0
    436c:	8e 85       	ldd	r24, Y+14	; 0x0e
    436e:	88 2f       	mov	r24, r24
    4370:	90 e0       	ldi	r25, 0x00	; 0
    4372:	28 1b       	sub	r18, r24
    4374:	39 0b       	sbc	r19, r25
    4376:	88 85       	ldd	r24, Y+8	; 0x08
    4378:	88 2f       	mov	r24, r24
    437a:	90 e0       	ldi	r25, 0x00	; 0
    437c:	a9 01       	movw	r20, r18
    437e:	48 1b       	sub	r20, r24
    4380:	59 0b       	sbc	r21, r25
    4382:	ca 01       	movw	r24, r20
    4384:	9c 01       	movw	r18, r24
    4386:	8f 85       	ldd	r24, Y+15	; 0x0f
    4388:	98 89       	ldd	r25, Y+16	; 0x10
    438a:	ac 01       	movw	r20, r24
    438c:	42 0f       	add	r20, r18
    438e:	53 1f       	adc	r21, r19
    4390:	8c 81       	ldd	r24, Y+4	; 0x04
    4392:	9d 81       	ldd	r25, Y+5	; 0x05
    4394:	28 85       	ldd	r18, Y+8	; 0x08
    4396:	6b 81       	ldd	r22, Y+3	; 0x03
    4398:	0e 94 57 20 	call	0x40ae	; 0x40ae <srd_signed_int16_to_patterns>
    439c:	89 89       	ldd	r24, Y+17	; 0x11
    439e:	28 2f       	mov	r18, r24
    43a0:	30 e0       	ldi	r19, 0x00	; 0
    43a2:	8e 85       	ldd	r24, Y+14	; 0x0e
    43a4:	88 2f       	mov	r24, r24
    43a6:	90 e0       	ldi	r25, 0x00	; 0
    43a8:	b9 01       	movw	r22, r18
    43aa:	68 1b       	sub	r22, r24
    43ac:	79 0b       	sbc	r23, r25
    43ae:	cb 01       	movw	r24, r22
    43b0:	01 97       	sbiw	r24, 0x01	; 1
    43b2:	2f 85       	ldd	r18, Y+15	; 0x0f
    43b4:	38 89       	ldd	r19, Y+16	; 0x10
    43b6:	82 0f       	add	r24, r18
    43b8:	93 1f       	adc	r25, r19
    43ba:	29 89       	ldd	r18, Y+17	; 0x11
    43bc:	42 2f       	mov	r20, r18
    43be:	50 e0       	ldi	r21, 0x00	; 0
    43c0:	2e 85       	ldd	r18, Y+14	; 0x0e
    43c2:	22 2f       	mov	r18, r18
    43c4:	30 e0       	ldi	r19, 0x00	; 0
    43c6:	fa 01       	movw	r30, r20
    43c8:	e2 1b       	sub	r30, r18
    43ca:	f3 0b       	sbc	r31, r19
    43cc:	9f 01       	movw	r18, r30
    43ce:	21 50       	subi	r18, 0x01	; 1
    43d0:	31 09       	sbc	r19, r1
    43d2:	4f 85       	ldd	r20, Y+15	; 0x0f
    43d4:	58 89       	ldd	r21, Y+16	; 0x10
    43d6:	24 0f       	add	r18, r20
    43d8:	35 1f       	adc	r19, r21
    43da:	f9 01       	movw	r30, r18
    43dc:	20 81       	ld	r18, Z
    43de:	20 68       	ori	r18, 0x80	; 128
    43e0:	fc 01       	movw	r30, r24
    43e2:	20 83       	st	Z, r18
    43e4:	81 e0       	ldi	r24, 0x01	; 1
    43e6:	61 96       	adiw	r28, 0x11	; 17
    43e8:	0f b6       	in	r0, 0x3f	; 63
    43ea:	f8 94       	cli
    43ec:	de bf       	out	0x3e, r29	; 62
    43ee:	0f be       	out	0x3f, r0	; 63
    43f0:	cd bf       	out	0x3d, r28	; 61
    43f2:	df 91       	pop	r29
    43f4:	cf 91       	pop	r28
    43f6:	1f 91       	pop	r17
    43f8:	0f 91       	pop	r16
    43fa:	ff 90       	pop	r15
    43fc:	ef 90       	pop	r14
    43fe:	df 90       	pop	r13
    4400:	cf 90       	pop	r12
    4402:	08 95       	ret

00004404 <srd_init>:
    4404:	cf 93       	push	r28
    4406:	df 93       	push	r29
    4408:	cd b7       	in	r28, 0x3d	; 61
    440a:	de b7       	in	r29, 0x3e	; 62
    440c:	0e 94 2f 1e 	call	0x3c5e	; 0x3c5e <shreg_init>
    4410:	0e 94 a6 22 	call	0x454c	; 0x454c <srd_clear>
    4414:	0e 94 95 22 	call	0x452a	; 0x452a <srd_display>
    4418:	00 00       	nop
    441a:	df 91       	pop	r29
    441c:	cf 91       	pop	r28
    441e:	08 95       	ret

00004420 <srd_shutdown>:
    4420:	cf 93       	push	r28
    4422:	df 93       	push	r29
    4424:	cd b7       	in	r28, 0x3d	; 61
    4426:	de b7       	in	r29, 0x3e	; 62
    4428:	0e 94 56 1e 	call	0x3cac	; 0x3cac <shreg_shutdown>
    442c:	00 00       	nop
    442e:	df 91       	pop	r29
    4430:	cf 91       	pop	r28
    4432:	08 95       	ret

00004434 <srd_set>:
    4434:	cf 93       	push	r28
    4436:	df 93       	push	r29
    4438:	00 d0       	rcall	.+0      	; 0x443a <srd_set+0x6>
    443a:	cd b7       	in	r28, 0x3d	; 61
    443c:	de b7       	in	r29, 0x3e	; 62
    443e:	89 83       	std	Y+1, r24	; 0x01
    4440:	6a 83       	std	Y+2, r22	; 0x02
    4442:	89 81       	ldd	r24, Y+1	; 0x01
    4444:	86 30       	cpi	r24, 0x06	; 6
    4446:	10 f0       	brcs	.+4      	; 0x444c <srd_set+0x18>
    4448:	80 e0       	ldi	r24, 0x00	; 0
    444a:	09 c0       	rjmp	.+18     	; 0x445e <srd_set+0x2a>
    444c:	89 81       	ldd	r24, Y+1	; 0x01
    444e:	88 2f       	mov	r24, r24
    4450:	90 e0       	ldi	r25, 0x00	; 0
    4452:	8d 5f       	subi	r24, 0xFD	; 253
    4454:	9e 4f       	sbci	r25, 0xFE	; 254
    4456:	2a 81       	ldd	r18, Y+2	; 0x02
    4458:	fc 01       	movw	r30, r24
    445a:	20 83       	st	Z, r18
    445c:	81 e0       	ldi	r24, 0x01	; 1
    445e:	0f 90       	pop	r0
    4460:	0f 90       	pop	r0
    4462:	df 91       	pop	r29
    4464:	cf 91       	pop	r28
    4466:	08 95       	ret

00004468 <srd_setfloat>:

uint8_t srd_setfloat(float num, uint8_t index, uint8_t decimal_places, uint8_t length)
{
    4468:	0f 93       	push	r16
    446a:	cf 93       	push	r28
    446c:	df 93       	push	r29
    446e:	cd b7       	in	r28, 0x3d	; 61
    4470:	de b7       	in	r29, 0x3e	; 62
    4472:	27 97       	sbiw	r28, 0x07	; 7
    4474:	0f b6       	in	r0, 0x3f	; 63
    4476:	f8 94       	cli
    4478:	de bf       	out	0x3e, r29	; 62
    447a:	0f be       	out	0x3f, r0	; 63
    447c:	cd bf       	out	0x3d, r28	; 61
    447e:	69 83       	std	Y+1, r22	; 0x01
    4480:	7a 83       	std	Y+2, r23	; 0x02
    4482:	8b 83       	std	Y+3, r24	; 0x03
    4484:	9c 83       	std	Y+4, r25	; 0x04
    4486:	4d 83       	std	Y+5, r20	; 0x05
    4488:	2e 83       	std	Y+6, r18	; 0x06
    448a:	0f 83       	std	Y+7, r16	; 0x07
	if(index + length > SRD_DIGITS) return FALSE;
    448c:	8d 81       	ldd	r24, Y+5	; 0x05
    448e:	28 2f       	mov	r18, r24
    4490:	30 e0       	ldi	r19, 0x00	; 0
    4492:	8f 81       	ldd	r24, Y+7	; 0x07
    4494:	88 2f       	mov	r24, r24
    4496:	90 e0       	ldi	r25, 0x00	; 0
    4498:	82 0f       	add	r24, r18
    449a:	93 1f       	adc	r25, r19
    449c:	07 97       	sbiw	r24, 0x07	; 7
    449e:	14 f0       	brlt	.+4      	; 0x44a4 <srd_setfloat+0x3c>
    44a0:	80 e0       	ldi	r24, 0x00	; 0
    44a2:	10 c0       	rjmp	.+32     	; 0x44c4 <srd_setfloat+0x5c>
	return srd_float_to_patterns(num, decimal_places, &srd_buffer[index], length);
    44a4:	8d 81       	ldd	r24, Y+5	; 0x05
    44a6:	88 2f       	mov	r24, r24
    44a8:	90 e0       	ldi	r25, 0x00	; 0
    44aa:	9c 01       	movw	r18, r24
    44ac:	2d 5f       	subi	r18, 0xFD	; 253
    44ae:	3e 4f       	sbci	r19, 0xFE	; 254
    44b0:	89 81       	ldd	r24, Y+1	; 0x01
    44b2:	9a 81       	ldd	r25, Y+2	; 0x02
    44b4:	ab 81       	ldd	r26, Y+3	; 0x03
    44b6:	bc 81       	ldd	r27, Y+4	; 0x04
    44b8:	0f 81       	ldd	r16, Y+7	; 0x07
    44ba:	4e 81       	ldd	r20, Y+6	; 0x06
    44bc:	bc 01       	movw	r22, r24
    44be:	cd 01       	movw	r24, r26
    44c0:	0e 94 f0 20 	call	0x41e0	; 0x41e0 <srd_float_to_patterns>
}
    44c4:	27 96       	adiw	r28, 0x07	; 7
    44c6:	0f b6       	in	r0, 0x3f	; 63
    44c8:	f8 94       	cli
    44ca:	de bf       	out	0x3e, r29	; 62
    44cc:	0f be       	out	0x3f, r0	; 63
    44ce:	cd bf       	out	0x3d, r28	; 61
    44d0:	df 91       	pop	r29
    44d2:	cf 91       	pop	r28
    44d4:	0f 91       	pop	r16
    44d6:	08 95       	ret

000044d8 <srd_setint16>:

uint8_t srd_setint16(int16_t num, uint8_t index, uint8_t length)
{
    44d8:	cf 93       	push	r28
    44da:	df 93       	push	r29
    44dc:	00 d0       	rcall	.+0      	; 0x44de <srd_setint16+0x6>
    44de:	00 d0       	rcall	.+0      	; 0x44e0 <srd_setint16+0x8>
    44e0:	cd b7       	in	r28, 0x3d	; 61
    44e2:	de b7       	in	r29, 0x3e	; 62
    44e4:	9a 83       	std	Y+2, r25	; 0x02
    44e6:	89 83       	std	Y+1, r24	; 0x01
    44e8:	6b 83       	std	Y+3, r22	; 0x03
    44ea:	4c 83       	std	Y+4, r20	; 0x04
	if(index + length > SRD_DIGITS) return FALSE;
    44ec:	8b 81       	ldd	r24, Y+3	; 0x03
    44ee:	28 2f       	mov	r18, r24
    44f0:	30 e0       	ldi	r19, 0x00	; 0
    44f2:	8c 81       	ldd	r24, Y+4	; 0x04
    44f4:	88 2f       	mov	r24, r24
    44f6:	90 e0       	ldi	r25, 0x00	; 0
    44f8:	82 0f       	add	r24, r18
    44fa:	93 1f       	adc	r25, r19
    44fc:	07 97       	sbiw	r24, 0x07	; 7
    44fe:	14 f0       	brlt	.+4      	; 0x4504 <srd_setint16+0x2c>
    4500:	80 e0       	ldi	r24, 0x00	; 0
    4502:	0c c0       	rjmp	.+24     	; 0x451c <srd_setint16+0x44>
	return srd_int16_to_patterns(num, &srd_buffer[index], length);
    4504:	8b 81       	ldd	r24, Y+3	; 0x03
    4506:	88 2f       	mov	r24, r24
    4508:	90 e0       	ldi	r25, 0x00	; 0
    450a:	9c 01       	movw	r18, r24
    450c:	2d 5f       	subi	r18, 0xFD	; 253
    450e:	3e 4f       	sbci	r19, 0xFE	; 254
    4510:	89 81       	ldd	r24, Y+1	; 0x01
    4512:	9a 81       	ldd	r25, Y+2	; 0x02
    4514:	4c 81       	ldd	r20, Y+4	; 0x04
    4516:	b9 01       	movw	r22, r18
    4518:	0e 94 ba 1f 	call	0x3f74	; 0x3f74 <srd_int16_to_patterns>
}
    451c:	0f 90       	pop	r0
    451e:	0f 90       	pop	r0
    4520:	0f 90       	pop	r0
    4522:	0f 90       	pop	r0
    4524:	df 91       	pop	r29
    4526:	cf 91       	pop	r28
    4528:	08 95       	ret

0000452a <srd_display>:

void srd_display()
{
    452a:	cf 93       	push	r28
    452c:	df 93       	push	r29
    452e:	cd b7       	in	r28, 0x3d	; 61
    4530:	de b7       	in	r29, 0x3e	; 62
	shreg_clear();
    4532:	0e 94 d4 1e 	call	0x3da8	; 0x3da8 <shreg_clear>
	shreg_write_bytes(srd_buffer, SRD_DIGITS);
    4536:	66 e0       	ldi	r22, 0x06	; 6
    4538:	83 e0       	ldi	r24, 0x03	; 3
    453a:	91 e0       	ldi	r25, 0x01	; 1
    453c:	0e 94 a4 1e 	call	0x3d48	; 0x3d48 <shreg_write_bytes>
	shreg_out();
    4540:	0e 94 08 1f 	call	0x3e10	; 0x3e10 <shreg_out>
}
    4544:	00 00       	nop
    4546:	df 91       	pop	r29
    4548:	cf 91       	pop	r28
    454a:	08 95       	ret

0000454c <srd_clear>:

void srd_clear()
{
    454c:	cf 93       	push	r28
    454e:	df 93       	push	r29
    4550:	1f 92       	push	r1
    4552:	cd b7       	in	r28, 0x3d	; 61
    4554:	de b7       	in	r29, 0x3e	; 62
	for(uint8_t i = 0; i < SRD_DIGITS; ++i)
    4556:	19 82       	std	Y+1, r1	; 0x01
    4558:	0a c0       	rjmp	.+20     	; 0x456e <srd_clear+0x22>
	{
		srd_buffer[i] = SRD_EMPTY;
    455a:	89 81       	ldd	r24, Y+1	; 0x01
    455c:	88 2f       	mov	r24, r24
    455e:	90 e0       	ldi	r25, 0x00	; 0
    4560:	8d 5f       	subi	r24, 0xFD	; 253
    4562:	9e 4f       	sbci	r25, 0xFE	; 254
    4564:	fc 01       	movw	r30, r24
    4566:	10 82       	st	Z, r1
	shreg_out();
}

void srd_clear()
{
	for(uint8_t i = 0; i < SRD_DIGITS; ++i)
    4568:	89 81       	ldd	r24, Y+1	; 0x01
    456a:	8f 5f       	subi	r24, 0xFF	; 255
    456c:	89 83       	std	Y+1, r24	; 0x01
    456e:	89 81       	ldd	r24, Y+1	; 0x01
    4570:	86 30       	cpi	r24, 0x06	; 6
    4572:	98 f3       	brcs	.-26     	; 0x455a <srd_clear+0xe>
	{
		srd_buffer[i] = SRD_EMPTY;
	}
}
    4574:	00 00       	nop
    4576:	0f 90       	pop	r0
    4578:	df 91       	pop	r29
    457a:	cf 91       	pop	r28
    457c:	08 95       	ret

0000457e <stirrer_init>:

#define STIRRER_PWM_WGM_BITS_A 0x00
#define STIRRER_PWM_WGM_BITS_B (1 << WGM13) // phase and frequency correct pwm mode. top set by ICR1

void stirrer_init()
{
    457e:	cf 93       	push	r28
    4580:	df 93       	push	r29
    4582:	cd b7       	in	r28, 0x3d	; 61
    4584:	de b7       	in	r29, 0x3e	; 62
	TIMSK1 = 0x00;
    4586:	8f e6       	ldi	r24, 0x6F	; 111
    4588:	90 e0       	ldi	r25, 0x00	; 0
    458a:	fc 01       	movw	r30, r24
    458c:	10 82       	st	Z, r1
	// stop timer clock
	TCCR1B &= ~STIRRER_PWM_PRESCALE_BITS;
    458e:	81 e8       	ldi	r24, 0x81	; 129
    4590:	90 e0       	ldi	r25, 0x00	; 0
    4592:	21 e8       	ldi	r18, 0x81	; 129
    4594:	30 e0       	ldi	r19, 0x00	; 0
    4596:	f9 01       	movw	r30, r18
    4598:	20 81       	ld	r18, Z
    459a:	2e 7f       	andi	r18, 0xFE	; 254
    459c:	fc 01       	movw	r30, r24
    459e:	20 83       	st	Z, r18
	// enable phase correct, frequency correct pwm mode
	TCCR1A |= STIRRER_PWM_WGM_BITS_A;
    45a0:	80 e8       	ldi	r24, 0x80	; 128
    45a2:	90 e0       	ldi	r25, 0x00	; 0
    45a4:	20 e8       	ldi	r18, 0x80	; 128
    45a6:	30 e0       	ldi	r19, 0x00	; 0
    45a8:	f9 01       	movw	r30, r18
    45aa:	20 81       	ld	r18, Z
    45ac:	fc 01       	movw	r30, r24
    45ae:	20 83       	st	Z, r18
	TCCR1B |= STIRRER_PWM_WGM_BITS_B;
    45b0:	81 e8       	ldi	r24, 0x81	; 129
    45b2:	90 e0       	ldi	r25, 0x00	; 0
    45b4:	21 e8       	ldi	r18, 0x81	; 129
    45b6:	30 e0       	ldi	r19, 0x00	; 0
    45b8:	f9 01       	movw	r30, r18
    45ba:	20 81       	ld	r18, Z
    45bc:	20 61       	ori	r18, 0x10	; 16
    45be:	fc 01       	movw	r30, r24
    45c0:	20 83       	st	Z, r18
	// set top value
	ICR1 = STIRRER_PWM_TOP;
    45c2:	86 e8       	ldi	r24, 0x86	; 134
    45c4:	90 e0       	ldi	r25, 0x00	; 0
    45c6:	20 ea       	ldi	r18, 0xA0	; 160
    45c8:	30 e0       	ldi	r19, 0x00	; 0
    45ca:	fc 01       	movw	r30, r24
    45cc:	31 83       	std	Z+1, r19	; 0x01
    45ce:	20 83       	st	Z, r18
	// reset duty cycle val
	#ifdef STIRRER_PWM_INVERSE
		OCR1A = STIRRER_PWM_TOP;
	#else
		OCR1A = 0x0000;
    45d0:	88 e8       	ldi	r24, 0x88	; 136
    45d2:	90 e0       	ldi	r25, 0x00	; 0
    45d4:	fc 01       	movw	r30, r24
    45d6:	11 82       	std	Z+1, r1	; 0x01
    45d8:	10 82       	st	Z, r1
	#endif
	// reset timer
	TCNT1 = 0x0000;
    45da:	84 e8       	ldi	r24, 0x84	; 132
    45dc:	90 e0       	ldi	r25, 0x00	; 0
    45de:	fc 01       	movw	r30, r24
    45e0:	11 82       	std	Z+1, r1	; 0x01
    45e2:	10 82       	st	Z, r1
	
	// enable output pin
	OC1A_DDR |= (1 << OC1A_BIT);
    45e4:	8a e2       	ldi	r24, 0x2A	; 42
    45e6:	90 e0       	ldi	r25, 0x00	; 0
    45e8:	2a e2       	ldi	r18, 0x2A	; 42
    45ea:	30 e0       	ldi	r19, 0x00	; 0
    45ec:	f9 01       	movw	r30, r18
    45ee:	20 81       	ld	r18, Z
    45f0:	20 62       	ori	r18, 0x20	; 32
    45f2:	fc 01       	movw	r30, r24
    45f4:	20 83       	st	Z, r18
	// set pin state when pwm is off (becomes active when COMA bits are cleared)
	#ifdef STIRRER_PWM_INVERSE
		OC1A_PORT |= (1 << OC1A_BIT);
	#else
		OC1A_PORT &= ~(1 << OC1A_BIT);
    45f6:	8b e2       	ldi	r24, 0x2B	; 43
    45f8:	90 e0       	ldi	r25, 0x00	; 0
    45fa:	2b e2       	ldi	r18, 0x2B	; 43
    45fc:	30 e0       	ldi	r19, 0x00	; 0
    45fe:	f9 01       	movw	r30, r18
    4600:	20 81       	ld	r18, Z
    4602:	2f 7d       	andi	r18, 0xDF	; 223
    4604:	fc 01       	movw	r30, r24
    4606:	20 83       	st	Z, r18
	#endif
}
    4608:	00 00       	nop
    460a:	df 91       	pop	r29
    460c:	cf 91       	pop	r28
    460e:	08 95       	ret

00004610 <stirrer_shutdown>:

void stirrer_shutdown()
{
    4610:	cf 93       	push	r28
    4612:	df 93       	push	r29
    4614:	cd b7       	in	r28, 0x3d	; 61
    4616:	de b7       	in	r29, 0x3e	; 62
	// stop timer clock
	TCCR1B &= ~STIRRER_PWM_PRESCALE_BITS;
    4618:	81 e8       	ldi	r24, 0x81	; 129
    461a:	90 e0       	ldi	r25, 0x00	; 0
    461c:	21 e8       	ldi	r18, 0x81	; 129
    461e:	30 e0       	ldi	r19, 0x00	; 0
    4620:	f9 01       	movw	r30, r18
    4622:	20 81       	ld	r18, Z
    4624:	2e 7f       	andi	r18, 0xFE	; 254
    4626:	fc 01       	movw	r30, r24
    4628:	20 83       	st	Z, r18
	// reset top value
	ICR1 = 0x0000;
    462a:	86 e8       	ldi	r24, 0x86	; 134
    462c:	90 e0       	ldi	r25, 0x00	; 0
    462e:	fc 01       	movw	r30, r24
    4630:	11 82       	std	Z+1, r1	; 0x01
    4632:	10 82       	st	Z, r1
	// reset duty cycle val
	TCNT1 = 0x0000;
    4634:	84 e8       	ldi	r24, 0x84	; 132
    4636:	90 e0       	ldi	r25, 0x00	; 0
    4638:	fc 01       	movw	r30, r24
    463a:	11 82       	std	Z+1, r1	; 0x01
    463c:	10 82       	st	Z, r1
	OCR1A = 0x0000;
    463e:	88 e8       	ldi	r24, 0x88	; 136
    4640:	90 e0       	ldi	r25, 0x00	; 0
    4642:	fc 01       	movw	r30, r24
    4644:	11 82       	std	Z+1, r1	; 0x01
    4646:	10 82       	st	Z, r1
	// back to normal mode
	TCCR1A &= ~(STIRRER_PWM_COMA_BITS | STIRRER_PWM_WGM_BITS_A);
    4648:	80 e8       	ldi	r24, 0x80	; 128
    464a:	90 e0       	ldi	r25, 0x00	; 0
    464c:	20 e8       	ldi	r18, 0x80	; 128
    464e:	30 e0       	ldi	r19, 0x00	; 0
    4650:	f9 01       	movw	r30, r18
    4652:	20 81       	ld	r18, Z
    4654:	2f 77       	andi	r18, 0x7F	; 127
    4656:	fc 01       	movw	r30, r24
    4658:	20 83       	st	Z, r18
	TCCR1B &= ~STIRRER_PWM_WGM_BITS_B;
    465a:	81 e8       	ldi	r24, 0x81	; 129
    465c:	90 e0       	ldi	r25, 0x00	; 0
    465e:	21 e8       	ldi	r18, 0x81	; 129
    4660:	30 e0       	ldi	r19, 0x00	; 0
    4662:	f9 01       	movw	r30, r18
    4664:	20 81       	ld	r18, Z
    4666:	2f 7e       	andi	r18, 0xEF	; 239
    4668:	fc 01       	movw	r30, r24
    466a:	20 83       	st	Z, r18
	// disable output pin
	OC1A_DDR &= ~(1 << OC1A_BIT);
    466c:	8a e2       	ldi	r24, 0x2A	; 42
    466e:	90 e0       	ldi	r25, 0x00	; 0
    4670:	2a e2       	ldi	r18, 0x2A	; 42
    4672:	30 e0       	ldi	r19, 0x00	; 0
    4674:	f9 01       	movw	r30, r18
    4676:	20 81       	ld	r18, Z
    4678:	2f 7d       	andi	r18, 0xDF	; 223
    467a:	fc 01       	movw	r30, r24
    467c:	20 83       	st	Z, r18
	OC1A_PORT &= ~(1 << OC1A_BIT);
    467e:	8b e2       	ldi	r24, 0x2B	; 43
    4680:	90 e0       	ldi	r25, 0x00	; 0
    4682:	2b e2       	ldi	r18, 0x2B	; 43
    4684:	30 e0       	ldi	r19, 0x00	; 0
    4686:	f9 01       	movw	r30, r18
    4688:	20 81       	ld	r18, Z
    468a:	2f 7d       	andi	r18, 0xDF	; 223
    468c:	fc 01       	movw	r30, r24
    468e:	20 83       	st	Z, r18
}
    4690:	00 00       	nop
    4692:	df 91       	pop	r29
    4694:	cf 91       	pop	r28
    4696:	08 95       	ret

00004698 <stirrer_set_duty_cycle>:

void stirrer_set_duty_cycle(uint8_t dc)
{
    4698:	cf 93       	push	r28
    469a:	df 93       	push	r29
    469c:	00 d0       	rcall	.+0      	; 0x469e <stirrer_set_duty_cycle+0x6>
    469e:	00 d0       	rcall	.+0      	; 0x46a0 <stirrer_set_duty_cycle+0x8>
    46a0:	1f 92       	push	r1
    46a2:	cd b7       	in	r28, 0x3d	; 61
    46a4:	de b7       	in	r29, 0x3e	; 62
    46a6:	8d 83       	std	Y+5, r24	; 0x05
	uint32_t compval = ((uint32_t)umax8(umin8(dc, 100), 0) * STIRRER_PWM_TOP) / 100;
    46a8:	64 e6       	ldi	r22, 0x64	; 100
    46aa:	8d 81       	ldd	r24, Y+5	; 0x05
    46ac:	0e 94 56 1a 	call	0x34ac	; 0x34ac <umin8>
    46b0:	60 e0       	ldi	r22, 0x00	; 0
    46b2:	0e 94 45 1a 	call	0x348a	; 0x348a <umax8>
    46b6:	28 2f       	mov	r18, r24
    46b8:	30 e0       	ldi	r19, 0x00	; 0
    46ba:	40 e0       	ldi	r20, 0x00	; 0
    46bc:	50 e0       	ldi	r21, 0x00	; 0
    46be:	80 ea       	ldi	r24, 0xA0	; 160
    46c0:	90 e0       	ldi	r25, 0x00	; 0
    46c2:	dc 01       	movw	r26, r24
    46c4:	0e 94 91 2c 	call	0x5922	; 0x5922 <__muluhisi3>
    46c8:	dc 01       	movw	r26, r24
    46ca:	cb 01       	movw	r24, r22
    46cc:	24 e6       	ldi	r18, 0x64	; 100
    46ce:	30 e0       	ldi	r19, 0x00	; 0
    46d0:	40 e0       	ldi	r20, 0x00	; 0
    46d2:	50 e0       	ldi	r21, 0x00	; 0
    46d4:	bc 01       	movw	r22, r24
    46d6:	cd 01       	movw	r24, r26
    46d8:	0e 94 5a 2c 	call	0x58b4	; 0x58b4 <__udivmodsi4>
    46dc:	da 01       	movw	r26, r20
    46de:	c9 01       	movw	r24, r18
    46e0:	89 83       	std	Y+1, r24	; 0x01
    46e2:	9a 83       	std	Y+2, r25	; 0x02
    46e4:	ab 83       	std	Y+3, r26	; 0x03
    46e6:	bc 83       	std	Y+4, r27	; 0x04
	OCR1A = (uint16_t)compval;
    46e8:	88 e8       	ldi	r24, 0x88	; 136
    46ea:	90 e0       	ldi	r25, 0x00	; 0
    46ec:	29 81       	ldd	r18, Y+1	; 0x01
    46ee:	3a 81       	ldd	r19, Y+2	; 0x02
    46f0:	fc 01       	movw	r30, r24
    46f2:	31 83       	std	Z+1, r19	; 0x01
    46f4:	20 83       	st	Z, r18
}
    46f6:	00 00       	nop
    46f8:	0f 90       	pop	r0
    46fa:	0f 90       	pop	r0
    46fc:	0f 90       	pop	r0
    46fe:	0f 90       	pop	r0
    4700:	0f 90       	pop	r0
    4702:	df 91       	pop	r29
    4704:	cf 91       	pop	r28
    4706:	08 95       	ret

00004708 <stirrer_on>:

void stirrer_on()
{
    4708:	cf 93       	push	r28
    470a:	df 93       	push	r29
    470c:	cd b7       	in	r28, 0x3d	; 61
    470e:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 0x0000;
    4710:	84 e8       	ldi	r24, 0x84	; 132
    4712:	90 e0       	ldi	r25, 0x00	; 0
    4714:	fc 01       	movw	r30, r24
    4716:	11 82       	std	Z+1, r1	; 0x01
    4718:	10 82       	st	Z, r1
	#ifdef STIRRER_PWM_INVERSE
		OCR1A = STIRRER_PWM_TOP;
	#else
		OCR1A = 0x0000;
    471a:	88 e8       	ldi	r24, 0x88	; 136
    471c:	90 e0       	ldi	r25, 0x00	; 0
    471e:	fc 01       	movw	r30, r24
    4720:	11 82       	std	Z+1, r1	; 0x01
    4722:	10 82       	st	Z, r1
	#endif
	TCCR1A |= STIRRER_PWM_COMA_BITS;
    4724:	80 e8       	ldi	r24, 0x80	; 128
    4726:	90 e0       	ldi	r25, 0x00	; 0
    4728:	20 e8       	ldi	r18, 0x80	; 128
    472a:	30 e0       	ldi	r19, 0x00	; 0
    472c:	f9 01       	movw	r30, r18
    472e:	20 81       	ld	r18, Z
    4730:	20 68       	ori	r18, 0x80	; 128
    4732:	fc 01       	movw	r30, r24
    4734:	20 83       	st	Z, r18
	TCCR1B |= STIRRER_PWM_PRESCALE_BITS;
    4736:	81 e8       	ldi	r24, 0x81	; 129
    4738:	90 e0       	ldi	r25, 0x00	; 0
    473a:	21 e8       	ldi	r18, 0x81	; 129
    473c:	30 e0       	ldi	r19, 0x00	; 0
    473e:	f9 01       	movw	r30, r18
    4740:	20 81       	ld	r18, Z
    4742:	21 60       	ori	r18, 0x01	; 1
    4744:	fc 01       	movw	r30, r24
    4746:	20 83       	st	Z, r18
}
    4748:	00 00       	nop
    474a:	df 91       	pop	r29
    474c:	cf 91       	pop	r28
    474e:	08 95       	ret

00004750 <stirrer_off>:

void stirrer_off()
{	
    4750:	cf 93       	push	r28
    4752:	df 93       	push	r29
    4754:	cd b7       	in	r28, 0x3d	; 61
    4756:	de b7       	in	r29, 0x3e	; 62
	TCCR1A &= ~STIRRER_PWM_COMA_BITS;
    4758:	80 e8       	ldi	r24, 0x80	; 128
    475a:	90 e0       	ldi	r25, 0x00	; 0
    475c:	20 e8       	ldi	r18, 0x80	; 128
    475e:	30 e0       	ldi	r19, 0x00	; 0
    4760:	f9 01       	movw	r30, r18
    4762:	20 81       	ld	r18, Z
    4764:	2f 77       	andi	r18, 0x7F	; 127
    4766:	fc 01       	movw	r30, r24
    4768:	20 83       	st	Z, r18
	TCCR1B &= ~STIRRER_PWM_PRESCALE_BITS;	
    476a:	81 e8       	ldi	r24, 0x81	; 129
    476c:	90 e0       	ldi	r25, 0x00	; 0
    476e:	21 e8       	ldi	r18, 0x81	; 129
    4770:	30 e0       	ldi	r19, 0x00	; 0
    4772:	f9 01       	movw	r30, r18
    4774:	20 81       	ld	r18, Z
    4776:	2e 7f       	andi	r18, 0xFE	; 254
    4778:	fc 01       	movw	r30, r24
    477a:	20 83       	st	Z, r18
	TCNT1 = 0x0000;
    477c:	84 e8       	ldi	r24, 0x84	; 132
    477e:	90 e0       	ldi	r25, 0x00	; 0
    4780:	fc 01       	movw	r30, r24
    4782:	11 82       	std	Z+1, r1	; 0x01
    4784:	10 82       	st	Z, r1
    4786:	00 00       	nop
    4788:	df 91       	pop	r29
    478a:	cf 91       	pop	r28
    478c:	08 95       	ret

0000478e <switch_init>:
static volatile uint8_t switch_debounce_ct1;

// ---------------------------- PUBLIC ------------------------------------------

void switch_init()
{
    478e:	cf 93       	push	r28
    4790:	df 93       	push	r29
    4792:	1f 92       	push	r1
    4794:	cd b7       	in	r28, 0x3d	; 61
    4796:	de b7       	in	r29, 0x3e	; 62
	// set data dir
	SWITCH_DDR &= ~SWITCH_PIN_MASK;
    4798:	84 e2       	ldi	r24, 0x24	; 36
    479a:	90 e0       	ldi	r25, 0x00	; 0
    479c:	24 e2       	ldi	r18, 0x24	; 36
    479e:	30 e0       	ldi	r19, 0x00	; 0
    47a0:	f9 01       	movw	r30, r18
    47a2:	20 81       	ld	r18, Z
    47a4:	2c 7f       	andi	r18, 0xFC	; 252
    47a6:	fc 01       	movw	r30, r24
    47a8:	20 83       	st	Z, r18
	// enable internal pullups
	SWITCH_PORT |= SWITCH_PIN_MASK;
    47aa:	85 e2       	ldi	r24, 0x25	; 37
    47ac:	90 e0       	ldi	r25, 0x00	; 0
    47ae:	25 e2       	ldi	r18, 0x25	; 37
    47b0:	30 e0       	ldi	r19, 0x00	; 0
    47b2:	f9 01       	movw	r30, r18
    47b4:	20 81       	ld	r18, Z
    47b6:	23 60       	ori	r18, 0x03	; 3
    47b8:	fc 01       	movw	r30, r24
    47ba:	20 83       	st	Z, r18
	
	// clear all state variables
	switch_state_press = 0x00;
    47bc:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <switch_state_press>
	switch_state_release = 0x00;
    47c0:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <switch_state_release>
	switch_state_longpress = 0x00;
    47c4:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <switch_state_longpress>
	switch_state = 0x00;
    47c8:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <switch_state>
	
	for (uint8_t i = 0; i < SWITCH_NUMBER; ++i)
    47cc:	19 82       	std	Y+1, r1	; 0x01
    47ce:	0a c0       	rjmp	.+20     	; 0x47e4 <switch_init+0x56>
		switch_press_counter[i] = 0;
    47d0:	89 81       	ldd	r24, Y+1	; 0x01
    47d2:	88 2f       	mov	r24, r24
    47d4:	90 e0       	ldi	r25, 0x00	; 0
    47d6:	84 5f       	subi	r24, 0xF4	; 244
    47d8:	9e 4f       	sbci	r25, 0xFE	; 254
    47da:	fc 01       	movw	r30, r24
    47dc:	10 82       	st	Z, r1
	switch_state_press = 0x00;
	switch_state_release = 0x00;
	switch_state_longpress = 0x00;
	switch_state = 0x00;
	
	for (uint8_t i = 0; i < SWITCH_NUMBER; ++i)
    47de:	89 81       	ldd	r24, Y+1	; 0x01
    47e0:	8f 5f       	subi	r24, 0xFF	; 255
    47e2:	89 83       	std	Y+1, r24	; 0x01
    47e4:	89 81       	ldd	r24, Y+1	; 0x01
    47e6:	82 30       	cpi	r24, 0x02	; 2
    47e8:	98 f3       	brcs	.-26     	; 0x47d0 <switch_init+0x42>
		switch_press_counter[i] = 0;
	
	switch_debounce_ct0 = 0xFF & SWITCH_PIN_MASK;	
    47ea:	83 e0       	ldi	r24, 0x03	; 3
    47ec:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <switch_debounce_ct0>
	switch_debounce_ct1 = 0xFF & SWITCH_PIN_MASK;	
    47f0:	83 e0       	ldi	r24, 0x03	; 3
    47f2:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <switch_debounce_ct1>
}
    47f6:	00 00       	nop
    47f8:	0f 90       	pop	r0
    47fa:	df 91       	pop	r29
    47fc:	cf 91       	pop	r28
    47fe:	08 95       	ret

00004800 <switch_shutdown>:

void switch_shutdown()
{
    4800:	cf 93       	push	r28
    4802:	df 93       	push	r29
    4804:	1f 92       	push	r1
    4806:	cd b7       	in	r28, 0x3d	; 61
    4808:	de b7       	in	r29, 0x3e	; 62
	// disable internal pullups
	SWITCH_PORT &= ~SWITCH_PIN_MASK;
    480a:	85 e2       	ldi	r24, 0x25	; 37
    480c:	90 e0       	ldi	r25, 0x00	; 0
    480e:	25 e2       	ldi	r18, 0x25	; 37
    4810:	30 e0       	ldi	r19, 0x00	; 0
    4812:	f9 01       	movw	r30, r18
    4814:	20 81       	ld	r18, Z
    4816:	2c 7f       	andi	r18, 0xFC	; 252
    4818:	fc 01       	movw	r30, r24
    481a:	20 83       	st	Z, r18
	
	// clear all state variables
	switch_state_press = 0x00;
    481c:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <switch_state_press>
	switch_state_release = 0x00;
    4820:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <switch_state_release>
	switch_state_longpress = 0x00;
    4824:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <switch_state_longpress>
	switch_state = 0x00;
    4828:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <switch_state>

	for (uint8_t i = 0; i < SWITCH_NUMBER; ++i)
    482c:	19 82       	std	Y+1, r1	; 0x01
    482e:	0a c0       	rjmp	.+20     	; 0x4844 <switch_shutdown+0x44>
		switch_press_counter[i] = 0;
    4830:	89 81       	ldd	r24, Y+1	; 0x01
    4832:	88 2f       	mov	r24, r24
    4834:	90 e0       	ldi	r25, 0x00	; 0
    4836:	84 5f       	subi	r24, 0xF4	; 244
    4838:	9e 4f       	sbci	r25, 0xFE	; 254
    483a:	fc 01       	movw	r30, r24
    483c:	10 82       	st	Z, r1
	switch_state_press = 0x00;
	switch_state_release = 0x00;
	switch_state_longpress = 0x00;
	switch_state = 0x00;

	for (uint8_t i = 0; i < SWITCH_NUMBER; ++i)
    483e:	89 81       	ldd	r24, Y+1	; 0x01
    4840:	8f 5f       	subi	r24, 0xFF	; 255
    4842:	89 83       	std	Y+1, r24	; 0x01
    4844:	89 81       	ldd	r24, Y+1	; 0x01
    4846:	82 30       	cpi	r24, 0x02	; 2
    4848:	98 f3       	brcs	.-26     	; 0x4830 <switch_shutdown+0x30>
		switch_press_counter[i] = 0;
	
	switch_debounce_ct0 = 0xFF & SWITCH_PIN_MASK;
    484a:	83 e0       	ldi	r24, 0x03	; 3
    484c:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <switch_debounce_ct0>
	switch_debounce_ct1 = 0xFF & SWITCH_PIN_MASK;
    4850:	83 e0       	ldi	r24, 0x03	; 3
    4852:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <switch_debounce_ct1>
}
    4856:	00 00       	nop
    4858:	0f 90       	pop	r0
    485a:	df 91       	pop	r29
    485c:	cf 91       	pop	r28
    485e:	08 95       	ret

00004860 <switch_press>:

uint8_t switch_press(uint8_t index)
{
    4860:	cf 93       	push	r28
    4862:	df 93       	push	r29
    4864:	1f 92       	push	r1
    4866:	cd b7       	in	r28, 0x3d	; 61
    4868:	de b7       	in	r29, 0x3e	; 62
    486a:	89 83       	std	Y+1, r24	; 0x01
	if(switch_state_press & (1 << index))
    486c:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <switch_state_press>
    4870:	88 2f       	mov	r24, r24
    4872:	90 e0       	ldi	r25, 0x00	; 0
    4874:	29 81       	ldd	r18, Y+1	; 0x01
    4876:	22 2f       	mov	r18, r18
    4878:	30 e0       	ldi	r19, 0x00	; 0
    487a:	02 c0       	rjmp	.+4      	; 0x4880 <switch_press+0x20>
    487c:	95 95       	asr	r25
    487e:	87 95       	ror	r24
    4880:	2a 95       	dec	r18
    4882:	e2 f7       	brpl	.-8      	; 0x487c <switch_press+0x1c>
    4884:	81 70       	andi	r24, 0x01	; 1
    4886:	99 27       	eor	r25, r25
    4888:	89 2b       	or	r24, r25
    488a:	91 f0       	breq	.+36     	; 0x48b0 <switch_press+0x50>
	{
		switch_state_press &= ~(1 << index);
    488c:	89 81       	ldd	r24, Y+1	; 0x01
    488e:	28 2f       	mov	r18, r24
    4890:	30 e0       	ldi	r19, 0x00	; 0
    4892:	81 e0       	ldi	r24, 0x01	; 1
    4894:	90 e0       	ldi	r25, 0x00	; 0
    4896:	02 c0       	rjmp	.+4      	; 0x489c <switch_press+0x3c>
    4898:	88 0f       	add	r24, r24
    489a:	99 1f       	adc	r25, r25
    489c:	2a 95       	dec	r18
    489e:	e2 f7       	brpl	.-8      	; 0x4898 <switch_press+0x38>
    48a0:	80 95       	com	r24
    48a2:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <switch_state_press>
    48a6:	89 23       	and	r24, r25
    48a8:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <switch_state_press>
		return 1;
    48ac:	81 e0       	ldi	r24, 0x01	; 1
    48ae:	01 c0       	rjmp	.+2      	; 0x48b2 <switch_press+0x52>
	}
	else
	{
		return 0;
    48b0:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    48b2:	0f 90       	pop	r0
    48b4:	df 91       	pop	r29
    48b6:	cf 91       	pop	r28
    48b8:	08 95       	ret

000048ba <switch_release>:

uint8_t switch_release(uint8_t index)
{
    48ba:	cf 93       	push	r28
    48bc:	df 93       	push	r29
    48be:	1f 92       	push	r1
    48c0:	cd b7       	in	r28, 0x3d	; 61
    48c2:	de b7       	in	r29, 0x3e	; 62
    48c4:	89 83       	std	Y+1, r24	; 0x01
	if(switch_state_release & (1 << index))
    48c6:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <switch_state_release>
    48ca:	88 2f       	mov	r24, r24
    48cc:	90 e0       	ldi	r25, 0x00	; 0
    48ce:	29 81       	ldd	r18, Y+1	; 0x01
    48d0:	22 2f       	mov	r18, r18
    48d2:	30 e0       	ldi	r19, 0x00	; 0
    48d4:	02 c0       	rjmp	.+4      	; 0x48da <switch_release+0x20>
    48d6:	95 95       	asr	r25
    48d8:	87 95       	ror	r24
    48da:	2a 95       	dec	r18
    48dc:	e2 f7       	brpl	.-8      	; 0x48d6 <switch_release+0x1c>
    48de:	81 70       	andi	r24, 0x01	; 1
    48e0:	99 27       	eor	r25, r25
    48e2:	89 2b       	or	r24, r25
    48e4:	91 f0       	breq	.+36     	; 0x490a <switch_release+0x50>
	{
		switch_state_release &= ~(1 << index);
    48e6:	89 81       	ldd	r24, Y+1	; 0x01
    48e8:	28 2f       	mov	r18, r24
    48ea:	30 e0       	ldi	r19, 0x00	; 0
    48ec:	81 e0       	ldi	r24, 0x01	; 1
    48ee:	90 e0       	ldi	r25, 0x00	; 0
    48f0:	02 c0       	rjmp	.+4      	; 0x48f6 <switch_release+0x3c>
    48f2:	88 0f       	add	r24, r24
    48f4:	99 1f       	adc	r25, r25
    48f6:	2a 95       	dec	r18
    48f8:	e2 f7       	brpl	.-8      	; 0x48f2 <switch_release+0x38>
    48fa:	80 95       	com	r24
    48fc:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <switch_state_release>
    4900:	89 23       	and	r24, r25
    4902:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <switch_state_release>
		return 1;
    4906:	81 e0       	ldi	r24, 0x01	; 1
    4908:	01 c0       	rjmp	.+2      	; 0x490c <switch_release+0x52>
	}
	else
	{
		return 0;
    490a:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    490c:	0f 90       	pop	r0
    490e:	df 91       	pop	r29
    4910:	cf 91       	pop	r28
    4912:	08 95       	ret

00004914 <switch_longpress>:

uint8_t switch_longpress(uint8_t index)
{
    4914:	cf 93       	push	r28
    4916:	df 93       	push	r29
    4918:	1f 92       	push	r1
    491a:	cd b7       	in	r28, 0x3d	; 61
    491c:	de b7       	in	r29, 0x3e	; 62
    491e:	89 83       	std	Y+1, r24	; 0x01
	if(switch_state_longpress & (1 << index))
    4920:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <switch_state_longpress>
    4924:	88 2f       	mov	r24, r24
    4926:	90 e0       	ldi	r25, 0x00	; 0
    4928:	29 81       	ldd	r18, Y+1	; 0x01
    492a:	22 2f       	mov	r18, r18
    492c:	30 e0       	ldi	r19, 0x00	; 0
    492e:	02 c0       	rjmp	.+4      	; 0x4934 <switch_longpress+0x20>
    4930:	95 95       	asr	r25
    4932:	87 95       	ror	r24
    4934:	2a 95       	dec	r18
    4936:	e2 f7       	brpl	.-8      	; 0x4930 <switch_longpress+0x1c>
    4938:	81 70       	andi	r24, 0x01	; 1
    493a:	99 27       	eor	r25, r25
    493c:	89 2b       	or	r24, r25
    493e:	91 f0       	breq	.+36     	; 0x4964 <switch_longpress+0x50>
	{
		switch_state_longpress &= ~(1 << index);
    4940:	89 81       	ldd	r24, Y+1	; 0x01
    4942:	28 2f       	mov	r18, r24
    4944:	30 e0       	ldi	r19, 0x00	; 0
    4946:	81 e0       	ldi	r24, 0x01	; 1
    4948:	90 e0       	ldi	r25, 0x00	; 0
    494a:	02 c0       	rjmp	.+4      	; 0x4950 <switch_longpress+0x3c>
    494c:	88 0f       	add	r24, r24
    494e:	99 1f       	adc	r25, r25
    4950:	2a 95       	dec	r18
    4952:	e2 f7       	brpl	.-8      	; 0x494c <switch_longpress+0x38>
    4954:	80 95       	com	r24
    4956:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <switch_state_longpress>
    495a:	89 23       	and	r24, r25
    495c:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <switch_state_longpress>
		return 1;
    4960:	81 e0       	ldi	r24, 0x01	; 1
    4962:	01 c0       	rjmp	.+2      	; 0x4966 <switch_longpress+0x52>
	}
	else
	{
		return 0;
    4964:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    4966:	0f 90       	pop	r0
    4968:	df 91       	pop	r29
    496a:	cf 91       	pop	r28
    496c:	08 95       	ret

0000496e <switch_get_state>:

uint8_t switch_get_state(uint8_t index)
{
    496e:	cf 93       	push	r28
    4970:	df 93       	push	r29
    4972:	1f 92       	push	r1
    4974:	cd b7       	in	r28, 0x3d	; 61
    4976:	de b7       	in	r29, 0x3e	; 62
    4978:	89 83       	std	Y+1, r24	; 0x01
	if(switch_state & (1 << index))
    497a:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <switch_state>
    497e:	88 2f       	mov	r24, r24
    4980:	90 e0       	ldi	r25, 0x00	; 0
    4982:	29 81       	ldd	r18, Y+1	; 0x01
    4984:	22 2f       	mov	r18, r18
    4986:	30 e0       	ldi	r19, 0x00	; 0
    4988:	02 c0       	rjmp	.+4      	; 0x498e <switch_get_state+0x20>
    498a:	95 95       	asr	r25
    498c:	87 95       	ror	r24
    498e:	2a 95       	dec	r18
    4990:	e2 f7       	brpl	.-8      	; 0x498a <switch_get_state+0x1c>
    4992:	81 70       	andi	r24, 0x01	; 1
    4994:	99 27       	eor	r25, r25
    4996:	89 2b       	or	r24, r25
    4998:	11 f0       	breq	.+4      	; 0x499e <switch_get_state+0x30>
	{
		return SWITCH_PRESSED;
    499a:	81 e0       	ldi	r24, 0x01	; 1
    499c:	01 c0       	rjmp	.+2      	; 0x49a0 <switch_get_state+0x32>
	}
	else
	{
		return SWITCH_RELEASED;
    499e:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    49a0:	0f 90       	pop	r0
    49a2:	df 91       	pop	r29
    49a4:	cf 91       	pop	r28
    49a6:	08 95       	ret

000049a8 <switch_update>:
0   0   0	1   1		~(0 & 0) => 1
			1   1		1 ^ (0 & 1) => 1
*/

void switch_update()
{
    49a8:	cf 93       	push	r28
    49aa:	df 93       	push	r29
    49ac:	00 d0       	rcall	.+0      	; 0x49ae <switch_update+0x6>
    49ae:	00 d0       	rcall	.+0      	; 0x49b0 <switch_update+0x8>
    49b0:	cd b7       	in	r28, 0x3d	; 61
    49b2:	de b7       	in	r29, 0x3e	; 62
	uint8_t pinchange = (switch_state ^ ~SWITCH_PIN);
    49b4:	83 e2       	ldi	r24, 0x23	; 35
    49b6:	90 e0       	ldi	r25, 0x00	; 0
    49b8:	fc 01       	movw	r30, r24
    49ba:	80 81       	ld	r24, Z
    49bc:	80 95       	com	r24
    49be:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <switch_state>
    49c2:	89 27       	eor	r24, r25
    49c4:	8a 83       	std	Y+2, r24	; 0x02
	// bit 0 of counter. Toggle if change detected, otherwise reset to 1
	switch_debounce_ct0 = ~(switch_debounce_ct0 & pinchange);
    49c6:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <switch_debounce_ct0>
    49ca:	8a 81       	ldd	r24, Y+2	; 0x02
    49cc:	89 23       	and	r24, r25
    49ce:	80 95       	com	r24
    49d0:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <switch_debounce_ct0>
	// bit 1 of counter.
	switch_debounce_ct1 = switch_debounce_ct0 ^ (switch_debounce_ct1 & pinchange);
    49d4:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <switch_debounce_ct1>
    49d8:	8a 81       	ldd	r24, Y+2	; 0x02
    49da:	98 23       	and	r25, r24
    49dc:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <switch_debounce_ct0>
    49e0:	89 27       	eor	r24, r25
    49e2:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <switch_debounce_ct1>
	// if counter rolled back to 3 while change was present, write 1 into pinstate to record a debounced change event
	pinchange &= switch_debounce_ct0 & switch_debounce_ct1 & SWITCH_PIN_MASK;
    49e6:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <switch_debounce_ct0>
    49ea:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <switch_debounce_ct1>
    49ee:	89 23       	and	r24, r25
    49f0:	88 2f       	mov	r24, r24
    49f2:	90 e0       	ldi	r25, 0x00	; 0
    49f4:	83 70       	andi	r24, 0x03	; 3
    49f6:	99 27       	eor	r25, r25
    49f8:	98 2f       	mov	r25, r24
    49fa:	8a 81       	ldd	r24, Y+2	; 0x02
    49fc:	89 23       	and	r24, r25
    49fe:	8a 83       	std	Y+2, r24	; 0x02
	// change key state
	switch_state ^= pinchange;
    4a00:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <switch_state>
    4a04:	8a 81       	ldd	r24, Y+2	; 0x02
    4a06:	89 27       	eor	r24, r25
    4a08:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <switch_state>
	
	// evaluate changes												// 00010100 new state; inverted: 11101011
	uint8_t key_presses = pinchange & switch_state;		// 00011100 pin changes
    4a0c:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <switch_state>
    4a10:	9a 81       	ldd	r25, Y+2	; 0x02
    4a12:	89 23       	and	r24, r25
    4a14:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t key_releases = pinchange & ~switch_state;		// presses => 00010100; releases =>  00001000
    4a16:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <switch_state>
    4a1a:	98 2f       	mov	r25, r24
    4a1c:	90 95       	com	r25
    4a1e:	8a 81       	ldd	r24, Y+2	; 0x02
    4a20:	89 23       	and	r24, r25
    4a22:	8c 83       	std	Y+4, r24	; 0x04
	
	for (uint8_t i = 0; i < SWITCH_NUMBER; ++i)
    4a24:	19 82       	std	Y+1, r1	; 0x01
    4a26:	81 c0       	rjmp	.+258    	; 0x4b2a <switch_update+0x182>
	{
		if (key_presses & (1 << i))
    4a28:	8b 81       	ldd	r24, Y+3	; 0x03
    4a2a:	88 2f       	mov	r24, r24
    4a2c:	90 e0       	ldi	r25, 0x00	; 0
    4a2e:	29 81       	ldd	r18, Y+1	; 0x01
    4a30:	22 2f       	mov	r18, r18
    4a32:	30 e0       	ldi	r19, 0x00	; 0
    4a34:	02 c0       	rjmp	.+4      	; 0x4a3a <switch_update+0x92>
    4a36:	95 95       	asr	r25
    4a38:	87 95       	ror	r24
    4a3a:	2a 95       	dec	r18
    4a3c:	e2 f7       	brpl	.-8      	; 0x4a36 <switch_update+0x8e>
    4a3e:	81 70       	andi	r24, 0x01	; 1
    4a40:	99 27       	eor	r25, r25
    4a42:	89 2b       	or	r24, r25
    4a44:	c1 f0       	breq	.+48     	; 0x4a76 <switch_update+0xce>
		{
			switch_state_press |= (1 << i);
    4a46:	89 81       	ldd	r24, Y+1	; 0x01
    4a48:	28 2f       	mov	r18, r24
    4a4a:	30 e0       	ldi	r19, 0x00	; 0
    4a4c:	81 e0       	ldi	r24, 0x01	; 1
    4a4e:	90 e0       	ldi	r25, 0x00	; 0
    4a50:	02 c0       	rjmp	.+4      	; 0x4a56 <switch_update+0xae>
    4a52:	88 0f       	add	r24, r24
    4a54:	99 1f       	adc	r25, r25
    4a56:	2a 95       	dec	r18
    4a58:	e2 f7       	brpl	.-8      	; 0x4a52 <switch_update+0xaa>
    4a5a:	98 2f       	mov	r25, r24
    4a5c:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <switch_state_press>
    4a60:	89 2b       	or	r24, r25
    4a62:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <switch_state_press>
			switch_press_counter[i] = 0;
    4a66:	89 81       	ldd	r24, Y+1	; 0x01
    4a68:	88 2f       	mov	r24, r24
    4a6a:	90 e0       	ldi	r25, 0x00	; 0
    4a6c:	84 5f       	subi	r24, 0xF4	; 244
    4a6e:	9e 4f       	sbci	r25, 0xFE	; 254
    4a70:	fc 01       	movw	r30, r24
    4a72:	10 82       	st	Z, r1
    4a74:	1f c0       	rjmp	.+62     	; 0x4ab4 <switch_update+0x10c>
		}
		else if (key_releases & (1 << i))
    4a76:	8c 81       	ldd	r24, Y+4	; 0x04
    4a78:	88 2f       	mov	r24, r24
    4a7a:	90 e0       	ldi	r25, 0x00	; 0
    4a7c:	29 81       	ldd	r18, Y+1	; 0x01
    4a7e:	22 2f       	mov	r18, r18
    4a80:	30 e0       	ldi	r19, 0x00	; 0
    4a82:	02 c0       	rjmp	.+4      	; 0x4a88 <switch_update+0xe0>
    4a84:	95 95       	asr	r25
    4a86:	87 95       	ror	r24
    4a88:	2a 95       	dec	r18
    4a8a:	e2 f7       	brpl	.-8      	; 0x4a84 <switch_update+0xdc>
    4a8c:	81 70       	andi	r24, 0x01	; 1
    4a8e:	99 27       	eor	r25, r25
    4a90:	89 2b       	or	r24, r25
    4a92:	81 f0       	breq	.+32     	; 0x4ab4 <switch_update+0x10c>
		{
			switch_state_release |= (1 << i);			
    4a94:	89 81       	ldd	r24, Y+1	; 0x01
    4a96:	28 2f       	mov	r18, r24
    4a98:	30 e0       	ldi	r19, 0x00	; 0
    4a9a:	81 e0       	ldi	r24, 0x01	; 1
    4a9c:	90 e0       	ldi	r25, 0x00	; 0
    4a9e:	02 c0       	rjmp	.+4      	; 0x4aa4 <switch_update+0xfc>
    4aa0:	88 0f       	add	r24, r24
    4aa2:	99 1f       	adc	r25, r25
    4aa4:	2a 95       	dec	r18
    4aa6:	e2 f7       	brpl	.-8      	; 0x4aa0 <switch_update+0xf8>
    4aa8:	98 2f       	mov	r25, r24
    4aaa:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <switch_state_release>
    4aae:	89 2b       	or	r24, r25
    4ab0:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <switch_state_release>
		}
	
		// switch is held down
		if((switch_state & (1 << i)) && switch_press_counter[i] < SWITCH_LONGPRESS_TICKS)
    4ab4:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <switch_state>
    4ab8:	88 2f       	mov	r24, r24
    4aba:	90 e0       	ldi	r25, 0x00	; 0
    4abc:	29 81       	ldd	r18, Y+1	; 0x01
    4abe:	22 2f       	mov	r18, r18
    4ac0:	30 e0       	ldi	r19, 0x00	; 0
    4ac2:	02 c0       	rjmp	.+4      	; 0x4ac8 <switch_update+0x120>
    4ac4:	95 95       	asr	r25
    4ac6:	87 95       	ror	r24
    4ac8:	2a 95       	dec	r18
    4aca:	e2 f7       	brpl	.-8      	; 0x4ac4 <switch_update+0x11c>
    4acc:	81 70       	andi	r24, 0x01	; 1
    4ace:	99 27       	eor	r25, r25
    4ad0:	89 2b       	or	r24, r25
    4ad2:	41 f1       	breq	.+80     	; 0x4b24 <switch_update+0x17c>
    4ad4:	89 81       	ldd	r24, Y+1	; 0x01
    4ad6:	88 2f       	mov	r24, r24
    4ad8:	90 e0       	ldi	r25, 0x00	; 0
    4ada:	84 5f       	subi	r24, 0xF4	; 244
    4adc:	9e 4f       	sbci	r25, 0xFE	; 254
    4ade:	fc 01       	movw	r30, r24
    4ae0:	80 81       	ld	r24, Z
    4ae2:	84 36       	cpi	r24, 0x64	; 100
    4ae4:	f8 f4       	brcc	.+62     	; 0x4b24 <switch_update+0x17c>
		{
			if(++switch_press_counter[i] == SWITCH_LONGPRESS_TICKS)
    4ae6:	89 81       	ldd	r24, Y+1	; 0x01
    4ae8:	88 2f       	mov	r24, r24
    4aea:	90 e0       	ldi	r25, 0x00	; 0
    4aec:	9c 01       	movw	r18, r24
    4aee:	24 5f       	subi	r18, 0xF4	; 244
    4af0:	3e 4f       	sbci	r19, 0xFE	; 254
    4af2:	f9 01       	movw	r30, r18
    4af4:	20 81       	ld	r18, Z
    4af6:	2f 5f       	subi	r18, 0xFF	; 255
    4af8:	84 5f       	subi	r24, 0xF4	; 244
    4afa:	9e 4f       	sbci	r25, 0xFE	; 254
    4afc:	fc 01       	movw	r30, r24
    4afe:	20 83       	st	Z, r18
    4b00:	24 36       	cpi	r18, 0x64	; 100
    4b02:	81 f4       	brne	.+32     	; 0x4b24 <switch_update+0x17c>
			{
				switch_state_longpress |= (1 << i);
    4b04:	89 81       	ldd	r24, Y+1	; 0x01
    4b06:	28 2f       	mov	r18, r24
    4b08:	30 e0       	ldi	r19, 0x00	; 0
    4b0a:	81 e0       	ldi	r24, 0x01	; 1
    4b0c:	90 e0       	ldi	r25, 0x00	; 0
    4b0e:	02 c0       	rjmp	.+4      	; 0x4b14 <switch_update+0x16c>
    4b10:	88 0f       	add	r24, r24
    4b12:	99 1f       	adc	r25, r25
    4b14:	2a 95       	dec	r18
    4b16:	e2 f7       	brpl	.-8      	; 0x4b10 <switch_update+0x168>
    4b18:	98 2f       	mov	r25, r24
    4b1a:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <switch_state_longpress>
    4b1e:	89 2b       	or	r24, r25
    4b20:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <switch_state_longpress>
	
	// evaluate changes												// 00010100 new state; inverted: 11101011
	uint8_t key_presses = pinchange & switch_state;		// 00011100 pin changes
	uint8_t key_releases = pinchange & ~switch_state;		// presses => 00010100; releases =>  00001000
	
	for (uint8_t i = 0; i < SWITCH_NUMBER; ++i)
    4b24:	89 81       	ldd	r24, Y+1	; 0x01
    4b26:	8f 5f       	subi	r24, 0xFF	; 255
    4b28:	89 83       	std	Y+1, r24	; 0x01
    4b2a:	89 81       	ldd	r24, Y+1	; 0x01
    4b2c:	82 30       	cpi	r24, 0x02	; 2
    4b2e:	08 f4       	brcc	.+2      	; 0x4b32 <switch_update+0x18a>
    4b30:	7b cf       	rjmp	.-266    	; 0x4a28 <switch_update+0x80>
			{
				switch_state_longpress |= (1 << i);
			}
		}
	}
}
    4b32:	00 00       	nop
    4b34:	0f 90       	pop	r0
    4b36:	0f 90       	pop	r0
    4b38:	0f 90       	pop	r0
    4b3a:	0f 90       	pop	r0
    4b3c:	df 91       	pop	r29
    4b3e:	cf 91       	pop	r28
    4b40:	08 95       	ret

00004b42 <__iCliRetVal>:
}

void tsens_stop_adc()
{
	ADCSRA &= ~(1 << ADEN);
}
    4b42:	cf 93       	push	r28
    4b44:	df 93       	push	r29
    4b46:	cd b7       	in	r28, 0x3d	; 61
    4b48:	de b7       	in	r29, 0x3e	; 62
    4b4a:	f8 94       	cli
    4b4c:	81 e0       	ldi	r24, 0x01	; 1
    4b4e:	df 91       	pop	r29
    4b50:	cf 91       	pop	r28
    4b52:	08 95       	ret

00004b54 <__iRestore>:
    4b54:	cf 93       	push	r28
    4b56:	df 93       	push	r29
    4b58:	00 d0       	rcall	.+0      	; 0x4b5a <__iRestore+0x6>
    4b5a:	cd b7       	in	r28, 0x3d	; 61
    4b5c:	de b7       	in	r29, 0x3e	; 62
    4b5e:	9a 83       	std	Y+2, r25	; 0x02
    4b60:	89 83       	std	Y+1, r24	; 0x01
    4b62:	8f e5       	ldi	r24, 0x5F	; 95
    4b64:	90 e0       	ldi	r25, 0x00	; 0
    4b66:	29 81       	ldd	r18, Y+1	; 0x01
    4b68:	3a 81       	ldd	r19, Y+2	; 0x02
    4b6a:	f9 01       	movw	r30, r18
    4b6c:	20 81       	ld	r18, Z
    4b6e:	fc 01       	movw	r30, r24
    4b70:	20 83       	st	Z, r18
    4b72:	00 00       	nop
    4b74:	0f 90       	pop	r0
    4b76:	0f 90       	pop	r0
    4b78:	df 91       	pop	r29
    4b7a:	cf 91       	pop	r28
    4b7c:	08 95       	ret

00004b7e <tsens_init>:
    4b7e:	cf 93       	push	r28
    4b80:	df 93       	push	r29
    4b82:	cd b7       	in	r28, 0x3d	; 61
    4b84:	de b7       	in	r29, 0x3e	; 62
    4b86:	8a e7       	ldi	r24, 0x7A	; 122
    4b88:	90 e0       	ldi	r25, 0x00	; 0
    4b8a:	2a e7       	ldi	r18, 0x7A	; 122
    4b8c:	30 e0       	ldi	r19, 0x00	; 0
    4b8e:	f9 01       	movw	r30, r18
    4b90:	20 81       	ld	r18, Z
    4b92:	27 75       	andi	r18, 0x57	; 87
    4b94:	fc 01       	movw	r30, r24
    4b96:	20 83       	st	Z, r18
    4b98:	8c e7       	ldi	r24, 0x7C	; 124
    4b9a:	90 e0       	ldi	r25, 0x00	; 0
    4b9c:	fc 01       	movw	r30, r24
    4b9e:	10 82       	st	Z, r1
    4ba0:	8c e7       	ldi	r24, 0x7C	; 124
    4ba2:	90 e0       	ldi	r25, 0x00	; 0
    4ba4:	2c e7       	ldi	r18, 0x7C	; 124
    4ba6:	30 e0       	ldi	r19, 0x00	; 0
    4ba8:	f9 01       	movw	r30, r18
    4baa:	20 81       	ld	r18, Z
    4bac:	20 64       	ori	r18, 0x40	; 64
    4bae:	fc 01       	movw	r30, r24
    4bb0:	20 83       	st	Z, r18
    4bb2:	8a e7       	ldi	r24, 0x7A	; 122
    4bb4:	90 e0       	ldi	r25, 0x00	; 0
    4bb6:	2a e7       	ldi	r18, 0x7A	; 122
    4bb8:	30 e0       	ldi	r19, 0x00	; 0
    4bba:	f9 01       	movw	r30, r18
    4bbc:	20 81       	ld	r18, Z
    4bbe:	26 60       	ori	r18, 0x06	; 6
    4bc0:	fc 01       	movw	r30, r24
    4bc2:	20 83       	st	Z, r18
    4bc4:	8e e7       	ldi	r24, 0x7E	; 126
    4bc6:	90 e0       	ldi	r25, 0x00	; 0
    4bc8:	20 ef       	ldi	r18, 0xF0	; 240
    4bca:	fc 01       	movw	r30, r24
    4bcc:	20 83       	st	Z, r18
    4bce:	00 00       	nop
    4bd0:	df 91       	pop	r29
    4bd2:	cf 91       	pop	r28
    4bd4:	08 95       	ret

00004bd6 <tsens_shutdown>:
    4bd6:	cf 93       	push	r28
    4bd8:	df 93       	push	r29
    4bda:	00 d0       	rcall	.+0      	; 0x4bdc <tsens_shutdown+0x6>
    4bdc:	cd b7       	in	r28, 0x3d	; 61
    4bde:	de b7       	in	r29, 0x3e	; 62
    4be0:	8f e5       	ldi	r24, 0x5F	; 95
    4be2:	90 e0       	ldi	r25, 0x00	; 0
    4be4:	fc 01       	movw	r30, r24
    4be6:	80 81       	ld	r24, Z
    4be8:	8a 83       	std	Y+2, r24	; 0x02
    4bea:	0e 94 a1 25 	call	0x4b42	; 0x4b42 <__iCliRetVal>
    4bee:	89 83       	std	Y+1, r24	; 0x01
    4bf0:	1c c0       	rjmp	.+56     	; 0x4c2a <tsens_shutdown+0x54>
    4bf2:	8a e7       	ldi	r24, 0x7A	; 122
    4bf4:	90 e0       	ldi	r25, 0x00	; 0
    4bf6:	2a e7       	ldi	r18, 0x7A	; 122
    4bf8:	30 e0       	ldi	r19, 0x00	; 0
    4bfa:	f9 01       	movw	r30, r18
    4bfc:	20 81       	ld	r18, Z
    4bfe:	27 75       	andi	r18, 0x57	; 87
    4c00:	fc 01       	movw	r30, r24
    4c02:	20 83       	st	Z, r18
    4c04:	8c e7       	ldi	r24, 0x7C	; 124
    4c06:	90 e0       	ldi	r25, 0x00	; 0
    4c08:	fc 01       	movw	r30, r24
    4c0a:	10 82       	st	Z, r1
    4c0c:	8a e7       	ldi	r24, 0x7A	; 122
    4c0e:	90 e0       	ldi	r25, 0x00	; 0
    4c10:	2a e7       	ldi	r18, 0x7A	; 122
    4c12:	30 e0       	ldi	r19, 0x00	; 0
    4c14:	f9 01       	movw	r30, r18
    4c16:	20 81       	ld	r18, Z
    4c18:	28 7f       	andi	r18, 0xF8	; 248
    4c1a:	fc 01       	movw	r30, r24
    4c1c:	20 83       	st	Z, r18
    4c1e:	8e e7       	ldi	r24, 0x7E	; 126
    4c20:	90 e0       	ldi	r25, 0x00	; 0
    4c22:	2f ef       	ldi	r18, 0xFF	; 255
    4c24:	fc 01       	movw	r30, r24
    4c26:	20 83       	st	Z, r18
    4c28:	19 82       	std	Y+1, r1	; 0x01
    4c2a:	89 81       	ldd	r24, Y+1	; 0x01
    4c2c:	88 23       	and	r24, r24
    4c2e:	09 f7       	brne	.-62     	; 0x4bf2 <tsens_shutdown+0x1c>
    4c30:	ce 01       	movw	r24, r28
    4c32:	02 96       	adiw	r24, 0x02	; 2
    4c34:	0e 94 aa 25 	call	0x4b54	; 0x4b54 <__iRestore>
    4c38:	00 00       	nop
    4c3a:	0f 90       	pop	r0
    4c3c:	0f 90       	pop	r0
    4c3e:	df 91       	pop	r29
    4c40:	cf 91       	pop	r28
    4c42:	08 95       	ret

00004c44 <tsens_start_adc>:
    4c44:	cf 93       	push	r28
    4c46:	df 93       	push	r29
    4c48:	cd b7       	in	r28, 0x3d	; 61
    4c4a:	de b7       	in	r29, 0x3e	; 62
    4c4c:	8a e7       	ldi	r24, 0x7A	; 122
    4c4e:	90 e0       	ldi	r25, 0x00	; 0
    4c50:	2a e7       	ldi	r18, 0x7A	; 122
    4c52:	30 e0       	ldi	r19, 0x00	; 0
    4c54:	f9 01       	movw	r30, r18
    4c56:	20 81       	ld	r18, Z
    4c58:	20 68       	ori	r18, 0x80	; 128
    4c5a:	fc 01       	movw	r30, r24
    4c5c:	20 83       	st	Z, r18
    4c5e:	8a e7       	ldi	r24, 0x7A	; 122
    4c60:	90 e0       	ldi	r25, 0x00	; 0
    4c62:	2a e7       	ldi	r18, 0x7A	; 122
    4c64:	30 e0       	ldi	r19, 0x00	; 0
    4c66:	f9 01       	movw	r30, r18
    4c68:	20 81       	ld	r18, Z
    4c6a:	20 64       	ori	r18, 0x40	; 64
    4c6c:	fc 01       	movw	r30, r24
    4c6e:	20 83       	st	Z, r18
    4c70:	00 00       	nop
    4c72:	8a e7       	ldi	r24, 0x7A	; 122
    4c74:	90 e0       	ldi	r25, 0x00	; 0
    4c76:	fc 01       	movw	r30, r24
    4c78:	80 81       	ld	r24, Z
    4c7a:	88 2f       	mov	r24, r24
    4c7c:	90 e0       	ldi	r25, 0x00	; 0
    4c7e:	80 74       	andi	r24, 0x40	; 64
    4c80:	99 27       	eor	r25, r25
    4c82:	89 2b       	or	r24, r25
    4c84:	b1 f7       	brne	.-20     	; 0x4c72 <tsens_start_adc+0x2e>
    4c86:	88 e7       	ldi	r24, 0x78	; 120
    4c88:	90 e0       	ldi	r25, 0x00	; 0
    4c8a:	fc 01       	movw	r30, r24
    4c8c:	80 81       	ld	r24, Z
    4c8e:	91 81       	ldd	r25, Z+1	; 0x01
    4c90:	00 00       	nop
    4c92:	df 91       	pop	r29
    4c94:	cf 91       	pop	r28
    4c96:	08 95       	ret

00004c98 <tsens_measure0_raw>:

#ifdef TSENS_PROBE_0
uint16_t tsens_measure0_raw(ErrorCode* ec)
{
    4c98:	cf 93       	push	r28
    4c9a:	df 93       	push	r29
    4c9c:	00 d0       	rcall	.+0      	; 0x4c9e <tsens_measure0_raw+0x6>
    4c9e:	00 d0       	rcall	.+0      	; 0x4ca0 <tsens_measure0_raw+0x8>
    4ca0:	cd b7       	in	r28, 0x3d	; 61
    4ca2:	de b7       	in	r29, 0x3e	; 62
    4ca4:	9c 83       	std	Y+4, r25	; 0x04
    4ca6:	8b 83       	std	Y+3, r24	; 0x03
	// set channel
	ADMUX &= ~TSENS_ADC_MUX_MASK;
    4ca8:	8c e7       	ldi	r24, 0x7C	; 124
    4caa:	90 e0       	ldi	r25, 0x00	; 0
    4cac:	2c e7       	ldi	r18, 0x7C	; 124
    4cae:	30 e0       	ldi	r19, 0x00	; 0
    4cb0:	f9 01       	movw	r30, r18
    4cb2:	20 81       	ld	r18, Z
    4cb4:	20 7e       	andi	r18, 0xE0	; 224
    4cb6:	fc 01       	movw	r30, r24
    4cb8:	20 83       	st	Z, r18
	ADMUX |= TSENS_ADC_PROBE0_MUX_BITS;
    4cba:	8c e7       	ldi	r24, 0x7C	; 124
    4cbc:	90 e0       	ldi	r25, 0x00	; 0
    4cbe:	2c e7       	ldi	r18, 0x7C	; 124
    4cc0:	30 e0       	ldi	r19, 0x00	; 0
    4cc2:	f9 01       	movw	r30, r18
    4cc4:	20 81       	ld	r18, Z
    4cc6:	fc 01       	movw	r30, r24
    4cc8:	20 83       	st	Z, r18
	// trigger reading
	ADCSRA |= (1 << ADSC);
    4cca:	8a e7       	ldi	r24, 0x7A	; 122
    4ccc:	90 e0       	ldi	r25, 0x00	; 0
    4cce:	2a e7       	ldi	r18, 0x7A	; 122
    4cd0:	30 e0       	ldi	r19, 0x00	; 0
    4cd2:	f9 01       	movw	r30, r18
    4cd4:	20 81       	ld	r18, Z
    4cd6:	20 64       	ori	r18, 0x40	; 64
    4cd8:	fc 01       	movw	r30, r24
    4cda:	20 83       	st	Z, r18
	while(ADCSRA & (1 << ADSC)) {};
    4cdc:	00 00       	nop
    4cde:	8a e7       	ldi	r24, 0x7A	; 122
    4ce0:	90 e0       	ldi	r25, 0x00	; 0
    4ce2:	fc 01       	movw	r30, r24
    4ce4:	80 81       	ld	r24, Z
    4ce6:	88 2f       	mov	r24, r24
    4ce8:	90 e0       	ldi	r25, 0x00	; 0
    4cea:	80 74       	andi	r24, 0x40	; 64
    4cec:	99 27       	eor	r25, r25
    4cee:	89 2b       	or	r24, r25
    4cf0:	b1 f7       	brne	.-20     	; 0x4cde <tsens_measure0_raw+0x46>
	// return result
	uint16_t res = ADCW;
    4cf2:	88 e7       	ldi	r24, 0x78	; 120
    4cf4:	90 e0       	ldi	r25, 0x00	; 0
    4cf6:	fc 01       	movw	r30, r24
    4cf8:	80 81       	ld	r24, Z
    4cfa:	91 81       	ldd	r25, Z+1	; 0x01
    4cfc:	9a 83       	std	Y+2, r25	; 0x02
    4cfe:	89 83       	std	Y+1, r24	; 0x01
	
	// short circuit / open circuit protection
	if(res == 0)
    4d00:	89 81       	ldd	r24, Y+1	; 0x01
    4d02:	9a 81       	ldd	r25, Y+2	; 0x02
    4d04:	89 2b       	or	r24, r25
    4d06:	31 f4       	brne	.+12     	; 0x4d14 <tsens_measure0_raw+0x7c>
		*ec = EC_THERMISTOR_SHORT_CIRCUIT;
    4d08:	8b 81       	ldd	r24, Y+3	; 0x03
    4d0a:	9c 81       	ldd	r25, Y+4	; 0x04
    4d0c:	22 e0       	ldi	r18, 0x02	; 2
    4d0e:	fc 01       	movw	r30, r24
    4d10:	20 83       	st	Z, r18
    4d12:	0f c0       	rjmp	.+30     	; 0x4d32 <tsens_measure0_raw+0x9a>
	else if(res >= 1023)
    4d14:	89 81       	ldd	r24, Y+1	; 0x01
    4d16:	9a 81       	ldd	r25, Y+2	; 0x02
    4d18:	8f 3f       	cpi	r24, 0xFF	; 255
    4d1a:	93 40       	sbci	r25, 0x03	; 3
    4d1c:	30 f0       	brcs	.+12     	; 0x4d2a <tsens_measure0_raw+0x92>
		*ec = EC_THERMISTOR_OPEN_CIRCUIT;
    4d1e:	8b 81       	ldd	r24, Y+3	; 0x03
    4d20:	9c 81       	ldd	r25, Y+4	; 0x04
    4d22:	21 e0       	ldi	r18, 0x01	; 1
    4d24:	fc 01       	movw	r30, r24
    4d26:	20 83       	st	Z, r18
    4d28:	04 c0       	rjmp	.+8      	; 0x4d32 <tsens_measure0_raw+0x9a>
	else
		*ec = EC_SUCCESS;
    4d2a:	8b 81       	ldd	r24, Y+3	; 0x03
    4d2c:	9c 81       	ldd	r25, Y+4	; 0x04
    4d2e:	fc 01       	movw	r30, r24
    4d30:	10 82       	st	Z, r1
		
	return res;
    4d32:	89 81       	ldd	r24, Y+1	; 0x01
    4d34:	9a 81       	ldd	r25, Y+2	; 0x02
}
    4d36:	0f 90       	pop	r0
    4d38:	0f 90       	pop	r0
    4d3a:	0f 90       	pop	r0
    4d3c:	0f 90       	pop	r0
    4d3e:	df 91       	pop	r29
    4d40:	cf 91       	pop	r28
    4d42:	08 95       	ret

00004d44 <tsens_measure0_resistance>:

float tsens_measure0_resistance(ErrorCode* ec)
{
    4d44:	cf 92       	push	r12
    4d46:	df 92       	push	r13
    4d48:	ef 92       	push	r14
    4d4a:	ff 92       	push	r15
    4d4c:	cf 93       	push	r28
    4d4e:	df 93       	push	r29
    4d50:	cd b7       	in	r28, 0x3d	; 61
    4d52:	de b7       	in	r29, 0x3e	; 62
    4d54:	2b 97       	sbiw	r28, 0x0b	; 11
    4d56:	0f b6       	in	r0, 0x3f	; 63
    4d58:	f8 94       	cli
    4d5a:	de bf       	out	0x3e, r29	; 62
    4d5c:	0f be       	out	0x3f, r0	; 63
    4d5e:	cd bf       	out	0x3d, r28	; 61
    4d60:	9b 87       	std	Y+11, r25	; 0x0b
    4d62:	8a 87       	std	Y+10, r24	; 0x0a
	int32_t temp = 0;
    4d64:	19 82       	std	Y+1, r1	; 0x01
    4d66:	1a 82       	std	Y+2, r1	; 0x02
    4d68:	1b 82       	std	Y+3, r1	; 0x03
    4d6a:	1c 82       	std	Y+4, r1	; 0x04
	for(uint8_t i = 0; i < TSENS_NUM_MEASUREMENTS; ++i)
    4d6c:	1d 82       	std	Y+5, r1	; 0x05
    4d6e:	16 c0       	rjmp	.+44     	; 0x4d9c <tsens_measure0_resistance+0x58>
	{
		temp += tsens_measure0_raw(ec);
    4d70:	8a 85       	ldd	r24, Y+10	; 0x0a
    4d72:	9b 85       	ldd	r25, Y+11	; 0x0b
    4d74:	0e 94 4c 26 	call	0x4c98	; 0x4c98 <tsens_measure0_raw>
    4d78:	cc 01       	movw	r24, r24
    4d7a:	a0 e0       	ldi	r26, 0x00	; 0
    4d7c:	b0 e0       	ldi	r27, 0x00	; 0
    4d7e:	29 81       	ldd	r18, Y+1	; 0x01
    4d80:	3a 81       	ldd	r19, Y+2	; 0x02
    4d82:	4b 81       	ldd	r20, Y+3	; 0x03
    4d84:	5c 81       	ldd	r21, Y+4	; 0x04
    4d86:	82 0f       	add	r24, r18
    4d88:	93 1f       	adc	r25, r19
    4d8a:	a4 1f       	adc	r26, r20
    4d8c:	b5 1f       	adc	r27, r21
    4d8e:	89 83       	std	Y+1, r24	; 0x01
    4d90:	9a 83       	std	Y+2, r25	; 0x02
    4d92:	ab 83       	std	Y+3, r26	; 0x03
    4d94:	bc 83       	std	Y+4, r27	; 0x04
}

float tsens_measure0_resistance(ErrorCode* ec)
{
	int32_t temp = 0;
	for(uint8_t i = 0; i < TSENS_NUM_MEASUREMENTS; ++i)
    4d96:	8d 81       	ldd	r24, Y+5	; 0x05
    4d98:	8f 5f       	subi	r24, 0xFF	; 255
    4d9a:	8d 83       	std	Y+5, r24	; 0x05
    4d9c:	8d 81       	ldd	r24, Y+5	; 0x05
    4d9e:	84 30       	cpi	r24, 0x04	; 4
    4da0:	38 f3       	brcs	.-50     	; 0x4d70 <tsens_measure0_resistance+0x2c>
	{
		temp += tsens_measure0_raw(ec);
	}
	float tempf = ((float)temp / (TSENS_NUM_MEASUREMENTS * 1024)) * UVCC;
    4da2:	69 81       	ldd	r22, Y+1	; 0x01
    4da4:	7a 81       	ldd	r23, Y+2	; 0x02
    4da6:	8b 81       	ldd	r24, Y+3	; 0x03
    4da8:	9c 81       	ldd	r25, Y+4	; 0x04
    4daa:	0e 94 51 2a 	call	0x54a2	; 0x54a2 <__floatsisf>
    4dae:	dc 01       	movw	r26, r24
    4db0:	cb 01       	movw	r24, r22
    4db2:	20 e0       	ldi	r18, 0x00	; 0
    4db4:	30 e0       	ldi	r19, 0x00	; 0
    4db6:	40 e8       	ldi	r20, 0x80	; 128
    4db8:	55 e4       	ldi	r21, 0x45	; 69
    4dba:	bc 01       	movw	r22, r24
    4dbc:	cd 01       	movw	r24, r26
    4dbe:	0e 94 6b 29 	call	0x52d6	; 0x52d6 <__divsf3>
    4dc2:	dc 01       	movw	r26, r24
    4dc4:	cb 01       	movw	r24, r22
    4dc6:	20 e0       	ldi	r18, 0x00	; 0
    4dc8:	30 e0       	ldi	r19, 0x00	; 0
    4dca:	40 ea       	ldi	r20, 0xA0	; 160
    4dcc:	50 e4       	ldi	r21, 0x40	; 64
    4dce:	bc 01       	movw	r22, r24
    4dd0:	cd 01       	movw	r24, r26
    4dd2:	0e 94 a4 2b 	call	0x5748	; 0x5748 <__mulsf3>
    4dd6:	dc 01       	movw	r26, r24
    4dd8:	cb 01       	movw	r24, r22
    4dda:	8e 83       	std	Y+6, r24	; 0x06
    4ddc:	9f 83       	std	Y+7, r25	; 0x07
    4dde:	a8 87       	std	Y+8, r26	; 0x08
    4de0:	b9 87       	std	Y+9, r27	; 0x09
	
	// for now return resistance for calibration
	return (TSENS_PROBE_0_RESISTANCE * tempf) / (UVCC - tempf);
    4de2:	20 e0       	ldi	r18, 0x00	; 0
    4de4:	30 e5       	ldi	r19, 0x50	; 80
    4de6:	43 ec       	ldi	r20, 0xC3	; 195
    4de8:	57 e4       	ldi	r21, 0x47	; 71
    4dea:	6e 81       	ldd	r22, Y+6	; 0x06
    4dec:	7f 81       	ldd	r23, Y+7	; 0x07
    4dee:	88 85       	ldd	r24, Y+8	; 0x08
    4df0:	99 85       	ldd	r25, Y+9	; 0x09
    4df2:	0e 94 a4 2b 	call	0x5748	; 0x5748 <__mulsf3>
    4df6:	dc 01       	movw	r26, r24
    4df8:	cb 01       	movw	r24, r22
    4dfa:	6c 01       	movw	r12, r24
    4dfc:	7d 01       	movw	r14, r26
    4dfe:	2e 81       	ldd	r18, Y+6	; 0x06
    4e00:	3f 81       	ldd	r19, Y+7	; 0x07
    4e02:	48 85       	ldd	r20, Y+8	; 0x08
    4e04:	59 85       	ldd	r21, Y+9	; 0x09
    4e06:	60 e0       	ldi	r22, 0x00	; 0
    4e08:	70 e0       	ldi	r23, 0x00	; 0
    4e0a:	80 ea       	ldi	r24, 0xA0	; 160
    4e0c:	90 e4       	ldi	r25, 0x40	; 64
    4e0e:	0e 94 f9 28 	call	0x51f2	; 0x51f2 <__subsf3>
    4e12:	dc 01       	movw	r26, r24
    4e14:	cb 01       	movw	r24, r22
    4e16:	9c 01       	movw	r18, r24
    4e18:	ad 01       	movw	r20, r26
    4e1a:	c7 01       	movw	r24, r14
    4e1c:	b6 01       	movw	r22, r12
    4e1e:	0e 94 6b 29 	call	0x52d6	; 0x52d6 <__divsf3>
    4e22:	dc 01       	movw	r26, r24
    4e24:	cb 01       	movw	r24, r22
}
    4e26:	bc 01       	movw	r22, r24
    4e28:	cd 01       	movw	r24, r26
    4e2a:	2b 96       	adiw	r28, 0x0b	; 11
    4e2c:	0f b6       	in	r0, 0x3f	; 63
    4e2e:	f8 94       	cli
    4e30:	de bf       	out	0x3e, r29	; 62
    4e32:	0f be       	out	0x3f, r0	; 63
    4e34:	cd bf       	out	0x3d, r28	; 61
    4e36:	df 91       	pop	r29
    4e38:	cf 91       	pop	r28
    4e3a:	ff 90       	pop	r15
    4e3c:	ef 90       	pop	r14
    4e3e:	df 90       	pop	r13
    4e40:	cf 90       	pop	r12
    4e42:	08 95       	ret

00004e44 <tsens_measure_probe0_temp>:

float tsens_measure_probe0_temp(ErrorCode* ec)
{
    4e44:	cf 92       	push	r12
    4e46:	df 92       	push	r13
    4e48:	ef 92       	push	r14
    4e4a:	ff 92       	push	r15
    4e4c:	cf 93       	push	r28
    4e4e:	df 93       	push	r29
    4e50:	00 d0       	rcall	.+0      	; 0x4e52 <tsens_measure_probe0_temp+0xe>
    4e52:	00 d0       	rcall	.+0      	; 0x4e54 <tsens_measure_probe0_temp+0x10>
    4e54:	00 d0       	rcall	.+0      	; 0x4e56 <tsens_measure_probe0_temp+0x12>
    4e56:	cd b7       	in	r28, 0x3d	; 61
    4e58:	de b7       	in	r29, 0x3e	; 62
    4e5a:	9e 83       	std	Y+6, r25	; 0x06
    4e5c:	8d 83       	std	Y+5, r24	; 0x05
	float logR = log(tsens_measure0_resistance(ec));
    4e5e:	8d 81       	ldd	r24, Y+5	; 0x05
    4e60:	9e 81       	ldd	r25, Y+6	; 0x06
    4e62:	0e 94 a2 26 	call	0x4d44	; 0x4d44 <tsens_measure0_resistance>
    4e66:	dc 01       	movw	r26, r24
    4e68:	cb 01       	movw	r24, r22
    4e6a:	bc 01       	movw	r22, r24
    4e6c:	cd 01       	movw	r24, r26
    4e6e:	0e 94 5c 2b 	call	0x56b8	; 0x56b8 <log>
    4e72:	dc 01       	movw	r26, r24
    4e74:	cb 01       	movw	r24, r22
    4e76:	89 83       	std	Y+1, r24	; 0x01
    4e78:	9a 83       	std	Y+2, r25	; 0x02
    4e7a:	ab 83       	std	Y+3, r26	; 0x03
    4e7c:	bc 83       	std	Y+4, r27	; 0x04
	return (1.0 / (TSENS_PROBE_0_A0 + TSENS_PROBE_0_A1 * logR + TSENS_PROBE_0_A2 * logR * logR * logR)) - 273.15;
    4e7e:	20 ea       	ldi	r18, 0xA0	; 160
    4e80:	30 e6       	ldi	r19, 0x60	; 96
    4e82:	42 ef       	ldi	r20, 0xF2	; 242
    4e84:	59 e3       	ldi	r21, 0x39	; 57
    4e86:	69 81       	ldd	r22, Y+1	; 0x01
    4e88:	7a 81       	ldd	r23, Y+2	; 0x02
    4e8a:	8b 81       	ldd	r24, Y+3	; 0x03
    4e8c:	9c 81       	ldd	r25, Y+4	; 0x04
    4e8e:	0e 94 a4 2b 	call	0x5748	; 0x5748 <__mulsf3>
    4e92:	dc 01       	movw	r26, r24
    4e94:	cb 01       	movw	r24, r22
    4e96:	25 e5       	ldi	r18, 0x55	; 85
    4e98:	39 ef       	ldi	r19, 0xF9	; 249
    4e9a:	46 e9       	ldi	r20, 0x96	; 150
    4e9c:	5a e3       	ldi	r21, 0x3A	; 58
    4e9e:	bc 01       	movw	r22, r24
    4ea0:	cd 01       	movw	r24, r26
    4ea2:	0e 94 f9 28 	call	0x51f2	; 0x51f2 <__subsf3>
    4ea6:	dc 01       	movw	r26, r24
    4ea8:	cb 01       	movw	r24, r22
    4eaa:	6c 01       	movw	r12, r24
    4eac:	7d 01       	movw	r14, r26
    4eae:	2b e0       	ldi	r18, 0x0B	; 11
    4eb0:	37 ed       	ldi	r19, 0xD7	; 215
    4eb2:	4b e0       	ldi	r20, 0x0B	; 11
    4eb4:	55 eb       	ldi	r21, 0xB5	; 181
    4eb6:	69 81       	ldd	r22, Y+1	; 0x01
    4eb8:	7a 81       	ldd	r23, Y+2	; 0x02
    4eba:	8b 81       	ldd	r24, Y+3	; 0x03
    4ebc:	9c 81       	ldd	r25, Y+4	; 0x04
    4ebe:	0e 94 a4 2b 	call	0x5748	; 0x5748 <__mulsf3>
    4ec2:	dc 01       	movw	r26, r24
    4ec4:	cb 01       	movw	r24, r22
    4ec6:	29 81       	ldd	r18, Y+1	; 0x01
    4ec8:	3a 81       	ldd	r19, Y+2	; 0x02
    4eca:	4b 81       	ldd	r20, Y+3	; 0x03
    4ecc:	5c 81       	ldd	r21, Y+4	; 0x04
    4ece:	bc 01       	movw	r22, r24
    4ed0:	cd 01       	movw	r24, r26
    4ed2:	0e 94 a4 2b 	call	0x5748	; 0x5748 <__mulsf3>
    4ed6:	dc 01       	movw	r26, r24
    4ed8:	cb 01       	movw	r24, r22
    4eda:	29 81       	ldd	r18, Y+1	; 0x01
    4edc:	3a 81       	ldd	r19, Y+2	; 0x02
    4ede:	4b 81       	ldd	r20, Y+3	; 0x03
    4ee0:	5c 81       	ldd	r21, Y+4	; 0x04
    4ee2:	bc 01       	movw	r22, r24
    4ee4:	cd 01       	movw	r24, r26
    4ee6:	0e 94 a4 2b 	call	0x5748	; 0x5748 <__mulsf3>
    4eea:	dc 01       	movw	r26, r24
    4eec:	cb 01       	movw	r24, r22
    4eee:	9c 01       	movw	r18, r24
    4ef0:	ad 01       	movw	r20, r26
    4ef2:	c7 01       	movw	r24, r14
    4ef4:	b6 01       	movw	r22, r12
    4ef6:	0e 94 fa 28 	call	0x51f4	; 0x51f4 <__addsf3>
    4efa:	dc 01       	movw	r26, r24
    4efc:	cb 01       	movw	r24, r22
    4efe:	9c 01       	movw	r18, r24
    4f00:	ad 01       	movw	r20, r26
    4f02:	60 e0       	ldi	r22, 0x00	; 0
    4f04:	70 e0       	ldi	r23, 0x00	; 0
    4f06:	80 e8       	ldi	r24, 0x80	; 128
    4f08:	9f e3       	ldi	r25, 0x3F	; 63
    4f0a:	0e 94 6b 29 	call	0x52d6	; 0x52d6 <__divsf3>
    4f0e:	dc 01       	movw	r26, r24
    4f10:	cb 01       	movw	r24, r22
    4f12:	23 e3       	ldi	r18, 0x33	; 51
    4f14:	33 e9       	ldi	r19, 0x93	; 147
    4f16:	48 e8       	ldi	r20, 0x88	; 136
    4f18:	53 e4       	ldi	r21, 0x43	; 67
    4f1a:	bc 01       	movw	r22, r24
    4f1c:	cd 01       	movw	r24, r26
    4f1e:	0e 94 f9 28 	call	0x51f2	; 0x51f2 <__subsf3>
    4f22:	dc 01       	movw	r26, r24
    4f24:	cb 01       	movw	r24, r22
}
    4f26:	bc 01       	movw	r22, r24
    4f28:	cd 01       	movw	r24, r26
    4f2a:	26 96       	adiw	r28, 0x06	; 6
    4f2c:	0f b6       	in	r0, 0x3f	; 63
    4f2e:	f8 94       	cli
    4f30:	de bf       	out	0x3e, r29	; 62
    4f32:	0f be       	out	0x3f, r0	; 63
    4f34:	cd bf       	out	0x3d, r28	; 61
    4f36:	df 91       	pop	r29
    4f38:	cf 91       	pop	r28
    4f3a:	ff 90       	pop	r15
    4f3c:	ef 90       	pop	r14
    4f3e:	df 90       	pop	r13
    4f40:	cf 90       	pop	r12
    4f42:	08 95       	ret

00004f44 <tsens_measure1_raw>:
#endif

#ifdef TSENS_PROBE_1
uint16_t tsens_measure1_raw(ErrorCode* ec)
{
    4f44:	cf 93       	push	r28
    4f46:	df 93       	push	r29
    4f48:	00 d0       	rcall	.+0      	; 0x4f4a <tsens_measure1_raw+0x6>
    4f4a:	00 d0       	rcall	.+0      	; 0x4f4c <tsens_measure1_raw+0x8>
    4f4c:	cd b7       	in	r28, 0x3d	; 61
    4f4e:	de b7       	in	r29, 0x3e	; 62
    4f50:	9c 83       	std	Y+4, r25	; 0x04
    4f52:	8b 83       	std	Y+3, r24	; 0x03
	// set channel
	ADMUX &= ~TSENS_ADC_MUX_MASK;
    4f54:	8c e7       	ldi	r24, 0x7C	; 124
    4f56:	90 e0       	ldi	r25, 0x00	; 0
    4f58:	2c e7       	ldi	r18, 0x7C	; 124
    4f5a:	30 e0       	ldi	r19, 0x00	; 0
    4f5c:	f9 01       	movw	r30, r18
    4f5e:	20 81       	ld	r18, Z
    4f60:	20 7e       	andi	r18, 0xE0	; 224
    4f62:	fc 01       	movw	r30, r24
    4f64:	20 83       	st	Z, r18
	ADMUX |= TSENS_ADC_PROBE1_MUX_BITS;
    4f66:	8c e7       	ldi	r24, 0x7C	; 124
    4f68:	90 e0       	ldi	r25, 0x00	; 0
    4f6a:	2c e7       	ldi	r18, 0x7C	; 124
    4f6c:	30 e0       	ldi	r19, 0x00	; 0
    4f6e:	f9 01       	movw	r30, r18
    4f70:	20 81       	ld	r18, Z
    4f72:	21 60       	ori	r18, 0x01	; 1
    4f74:	fc 01       	movw	r30, r24
    4f76:	20 83       	st	Z, r18
	// trigger reading
	ADCSRA |= (1 << ADSC);
    4f78:	8a e7       	ldi	r24, 0x7A	; 122
    4f7a:	90 e0       	ldi	r25, 0x00	; 0
    4f7c:	2a e7       	ldi	r18, 0x7A	; 122
    4f7e:	30 e0       	ldi	r19, 0x00	; 0
    4f80:	f9 01       	movw	r30, r18
    4f82:	20 81       	ld	r18, Z
    4f84:	20 64       	ori	r18, 0x40	; 64
    4f86:	fc 01       	movw	r30, r24
    4f88:	20 83       	st	Z, r18
	while(ADCSRA & (1 << ADSC)) {};
    4f8a:	00 00       	nop
    4f8c:	8a e7       	ldi	r24, 0x7A	; 122
    4f8e:	90 e0       	ldi	r25, 0x00	; 0
    4f90:	fc 01       	movw	r30, r24
    4f92:	80 81       	ld	r24, Z
    4f94:	88 2f       	mov	r24, r24
    4f96:	90 e0       	ldi	r25, 0x00	; 0
    4f98:	80 74       	andi	r24, 0x40	; 64
    4f9a:	99 27       	eor	r25, r25
    4f9c:	89 2b       	or	r24, r25
    4f9e:	b1 f7       	brne	.-20     	; 0x4f8c <tsens_measure1_raw+0x48>
	// return result
	uint16_t res = ADCW;
    4fa0:	88 e7       	ldi	r24, 0x78	; 120
    4fa2:	90 e0       	ldi	r25, 0x00	; 0
    4fa4:	fc 01       	movw	r30, r24
    4fa6:	80 81       	ld	r24, Z
    4fa8:	91 81       	ldd	r25, Z+1	; 0x01
    4faa:	9a 83       	std	Y+2, r25	; 0x02
    4fac:	89 83       	std	Y+1, r24	; 0x01
	
	// short circuit / open circuit protection
	if(res == 0)
    4fae:	89 81       	ldd	r24, Y+1	; 0x01
    4fb0:	9a 81       	ldd	r25, Y+2	; 0x02
    4fb2:	89 2b       	or	r24, r25
    4fb4:	31 f4       	brne	.+12     	; 0x4fc2 <tsens_measure1_raw+0x7e>
		*ec = EC_THERMISTOR_SHORT_CIRCUIT;
    4fb6:	8b 81       	ldd	r24, Y+3	; 0x03
    4fb8:	9c 81       	ldd	r25, Y+4	; 0x04
    4fba:	22 e0       	ldi	r18, 0x02	; 2
    4fbc:	fc 01       	movw	r30, r24
    4fbe:	20 83       	st	Z, r18
    4fc0:	0f c0       	rjmp	.+30     	; 0x4fe0 <tsens_measure1_raw+0x9c>
	else if(res >= 1023)
    4fc2:	89 81       	ldd	r24, Y+1	; 0x01
    4fc4:	9a 81       	ldd	r25, Y+2	; 0x02
    4fc6:	8f 3f       	cpi	r24, 0xFF	; 255
    4fc8:	93 40       	sbci	r25, 0x03	; 3
    4fca:	30 f0       	brcs	.+12     	; 0x4fd8 <tsens_measure1_raw+0x94>
		*ec = EC_THERMISTOR_OPEN_CIRCUIT;
    4fcc:	8b 81       	ldd	r24, Y+3	; 0x03
    4fce:	9c 81       	ldd	r25, Y+4	; 0x04
    4fd0:	21 e0       	ldi	r18, 0x01	; 1
    4fd2:	fc 01       	movw	r30, r24
    4fd4:	20 83       	st	Z, r18
    4fd6:	04 c0       	rjmp	.+8      	; 0x4fe0 <tsens_measure1_raw+0x9c>
	else
		*ec = EC_SUCCESS;
    4fd8:	8b 81       	ldd	r24, Y+3	; 0x03
    4fda:	9c 81       	ldd	r25, Y+4	; 0x04
    4fdc:	fc 01       	movw	r30, r24
    4fde:	10 82       	st	Z, r1
	
	return res;
    4fe0:	89 81       	ldd	r24, Y+1	; 0x01
    4fe2:	9a 81       	ldd	r25, Y+2	; 0x02
}
    4fe4:	0f 90       	pop	r0
    4fe6:	0f 90       	pop	r0
    4fe8:	0f 90       	pop	r0
    4fea:	0f 90       	pop	r0
    4fec:	df 91       	pop	r29
    4fee:	cf 91       	pop	r28
    4ff0:	08 95       	ret

00004ff2 <tsens_measure1_resistance>:

float tsens_measure1_resistance(ErrorCode* ec)
{
    4ff2:	cf 92       	push	r12
    4ff4:	df 92       	push	r13
    4ff6:	ef 92       	push	r14
    4ff8:	ff 92       	push	r15
    4ffa:	cf 93       	push	r28
    4ffc:	df 93       	push	r29
    4ffe:	cd b7       	in	r28, 0x3d	; 61
    5000:	de b7       	in	r29, 0x3e	; 62
    5002:	2b 97       	sbiw	r28, 0x0b	; 11
    5004:	0f b6       	in	r0, 0x3f	; 63
    5006:	f8 94       	cli
    5008:	de bf       	out	0x3e, r29	; 62
    500a:	0f be       	out	0x3f, r0	; 63
    500c:	cd bf       	out	0x3d, r28	; 61
    500e:	9b 87       	std	Y+11, r25	; 0x0b
    5010:	8a 87       	std	Y+10, r24	; 0x0a
	int32_t temp = 0;
    5012:	19 82       	std	Y+1, r1	; 0x01
    5014:	1a 82       	std	Y+2, r1	; 0x02
    5016:	1b 82       	std	Y+3, r1	; 0x03
    5018:	1c 82       	std	Y+4, r1	; 0x04
	for(uint8_t i = 0; i < TSENS_NUM_MEASUREMENTS; ++i)
    501a:	1d 82       	std	Y+5, r1	; 0x05
    501c:	16 c0       	rjmp	.+44     	; 0x504a <tsens_measure1_resistance+0x58>
	{
		temp += tsens_measure1_raw(ec);
    501e:	8a 85       	ldd	r24, Y+10	; 0x0a
    5020:	9b 85       	ldd	r25, Y+11	; 0x0b
    5022:	0e 94 a2 27 	call	0x4f44	; 0x4f44 <tsens_measure1_raw>
    5026:	cc 01       	movw	r24, r24
    5028:	a0 e0       	ldi	r26, 0x00	; 0
    502a:	b0 e0       	ldi	r27, 0x00	; 0
    502c:	29 81       	ldd	r18, Y+1	; 0x01
    502e:	3a 81       	ldd	r19, Y+2	; 0x02
    5030:	4b 81       	ldd	r20, Y+3	; 0x03
    5032:	5c 81       	ldd	r21, Y+4	; 0x04
    5034:	82 0f       	add	r24, r18
    5036:	93 1f       	adc	r25, r19
    5038:	a4 1f       	adc	r26, r20
    503a:	b5 1f       	adc	r27, r21
    503c:	89 83       	std	Y+1, r24	; 0x01
    503e:	9a 83       	std	Y+2, r25	; 0x02
    5040:	ab 83       	std	Y+3, r26	; 0x03
    5042:	bc 83       	std	Y+4, r27	; 0x04
}

float tsens_measure1_resistance(ErrorCode* ec)
{
	int32_t temp = 0;
	for(uint8_t i = 0; i < TSENS_NUM_MEASUREMENTS; ++i)
    5044:	8d 81       	ldd	r24, Y+5	; 0x05
    5046:	8f 5f       	subi	r24, 0xFF	; 255
    5048:	8d 83       	std	Y+5, r24	; 0x05
    504a:	8d 81       	ldd	r24, Y+5	; 0x05
    504c:	84 30       	cpi	r24, 0x04	; 4
    504e:	38 f3       	brcs	.-50     	; 0x501e <tsens_measure1_resistance+0x2c>
	{
		temp += tsens_measure1_raw(ec);
	}
	float tempf = ((float)temp / (TSENS_NUM_MEASUREMENTS * 1024)) * UVCC;
    5050:	69 81       	ldd	r22, Y+1	; 0x01
    5052:	7a 81       	ldd	r23, Y+2	; 0x02
    5054:	8b 81       	ldd	r24, Y+3	; 0x03
    5056:	9c 81       	ldd	r25, Y+4	; 0x04
    5058:	0e 94 51 2a 	call	0x54a2	; 0x54a2 <__floatsisf>
    505c:	dc 01       	movw	r26, r24
    505e:	cb 01       	movw	r24, r22
    5060:	20 e0       	ldi	r18, 0x00	; 0
    5062:	30 e0       	ldi	r19, 0x00	; 0
    5064:	40 e8       	ldi	r20, 0x80	; 128
    5066:	55 e4       	ldi	r21, 0x45	; 69
    5068:	bc 01       	movw	r22, r24
    506a:	cd 01       	movw	r24, r26
    506c:	0e 94 6b 29 	call	0x52d6	; 0x52d6 <__divsf3>
    5070:	dc 01       	movw	r26, r24
    5072:	cb 01       	movw	r24, r22
    5074:	20 e0       	ldi	r18, 0x00	; 0
    5076:	30 e0       	ldi	r19, 0x00	; 0
    5078:	40 ea       	ldi	r20, 0xA0	; 160
    507a:	50 e4       	ldi	r21, 0x40	; 64
    507c:	bc 01       	movw	r22, r24
    507e:	cd 01       	movw	r24, r26
    5080:	0e 94 a4 2b 	call	0x5748	; 0x5748 <__mulsf3>
    5084:	dc 01       	movw	r26, r24
    5086:	cb 01       	movw	r24, r22
    5088:	8e 83       	std	Y+6, r24	; 0x06
    508a:	9f 83       	std	Y+7, r25	; 0x07
    508c:	a8 87       	std	Y+8, r26	; 0x08
    508e:	b9 87       	std	Y+9, r27	; 0x09
	
	// for now return resistance for calibration
	return (TSENS_PROBE_1_RESISTANCE * tempf) / (UVCC - tempf);
    5090:	20 e0       	ldi	r18, 0x00	; 0
    5092:	30 e4       	ldi	r19, 0x40	; 64
    5094:	4c e1       	ldi	r20, 0x1C	; 28
    5096:	56 e4       	ldi	r21, 0x46	; 70
    5098:	6e 81       	ldd	r22, Y+6	; 0x06
    509a:	7f 81       	ldd	r23, Y+7	; 0x07
    509c:	88 85       	ldd	r24, Y+8	; 0x08
    509e:	99 85       	ldd	r25, Y+9	; 0x09
    50a0:	0e 94 a4 2b 	call	0x5748	; 0x5748 <__mulsf3>
    50a4:	dc 01       	movw	r26, r24
    50a6:	cb 01       	movw	r24, r22
    50a8:	6c 01       	movw	r12, r24
    50aa:	7d 01       	movw	r14, r26
    50ac:	2e 81       	ldd	r18, Y+6	; 0x06
    50ae:	3f 81       	ldd	r19, Y+7	; 0x07
    50b0:	48 85       	ldd	r20, Y+8	; 0x08
    50b2:	59 85       	ldd	r21, Y+9	; 0x09
    50b4:	60 e0       	ldi	r22, 0x00	; 0
    50b6:	70 e0       	ldi	r23, 0x00	; 0
    50b8:	80 ea       	ldi	r24, 0xA0	; 160
    50ba:	90 e4       	ldi	r25, 0x40	; 64
    50bc:	0e 94 f9 28 	call	0x51f2	; 0x51f2 <__subsf3>
    50c0:	dc 01       	movw	r26, r24
    50c2:	cb 01       	movw	r24, r22
    50c4:	9c 01       	movw	r18, r24
    50c6:	ad 01       	movw	r20, r26
    50c8:	c7 01       	movw	r24, r14
    50ca:	b6 01       	movw	r22, r12
    50cc:	0e 94 6b 29 	call	0x52d6	; 0x52d6 <__divsf3>
    50d0:	dc 01       	movw	r26, r24
    50d2:	cb 01       	movw	r24, r22
}
    50d4:	bc 01       	movw	r22, r24
    50d6:	cd 01       	movw	r24, r26
    50d8:	2b 96       	adiw	r28, 0x0b	; 11
    50da:	0f b6       	in	r0, 0x3f	; 63
    50dc:	f8 94       	cli
    50de:	de bf       	out	0x3e, r29	; 62
    50e0:	0f be       	out	0x3f, r0	; 63
    50e2:	cd bf       	out	0x3d, r28	; 61
    50e4:	df 91       	pop	r29
    50e6:	cf 91       	pop	r28
    50e8:	ff 90       	pop	r15
    50ea:	ef 90       	pop	r14
    50ec:	df 90       	pop	r13
    50ee:	cf 90       	pop	r12
    50f0:	08 95       	ret

000050f2 <tsens_measure_probe1_temp>:

float tsens_measure_probe1_temp(ErrorCode* ec)
{
    50f2:	cf 92       	push	r12
    50f4:	df 92       	push	r13
    50f6:	ef 92       	push	r14
    50f8:	ff 92       	push	r15
    50fa:	cf 93       	push	r28
    50fc:	df 93       	push	r29
    50fe:	00 d0       	rcall	.+0      	; 0x5100 <tsens_measure_probe1_temp+0xe>
    5100:	00 d0       	rcall	.+0      	; 0x5102 <tsens_measure_probe1_temp+0x10>
    5102:	00 d0       	rcall	.+0      	; 0x5104 <tsens_measure_probe1_temp+0x12>
    5104:	cd b7       	in	r28, 0x3d	; 61
    5106:	de b7       	in	r29, 0x3e	; 62
    5108:	9e 83       	std	Y+6, r25	; 0x06
    510a:	8d 83       	std	Y+5, r24	; 0x05
	float logR = log(tsens_measure1_resistance(ec));
    510c:	8d 81       	ldd	r24, Y+5	; 0x05
    510e:	9e 81       	ldd	r25, Y+6	; 0x06
    5110:	0e 94 f9 27 	call	0x4ff2	; 0x4ff2 <tsens_measure1_resistance>
    5114:	dc 01       	movw	r26, r24
    5116:	cb 01       	movw	r24, r22
    5118:	bc 01       	movw	r22, r24
    511a:	cd 01       	movw	r24, r26
    511c:	0e 94 5c 2b 	call	0x56b8	; 0x56b8 <log>
    5120:	dc 01       	movw	r26, r24
    5122:	cb 01       	movw	r24, r22
    5124:	89 83       	std	Y+1, r24	; 0x01
    5126:	9a 83       	std	Y+2, r25	; 0x02
    5128:	ab 83       	std	Y+3, r26	; 0x03
    512a:	bc 83       	std	Y+4, r27	; 0x04
	return (1.0 / (TSENS_PROBE_1_A0 + TSENS_PROBE_1_A1 * logR + TSENS_PROBE_1_A2 * logR * logR * logR)) - 273.15;
    512c:	25 ee       	ldi	r18, 0xE5	; 229
    512e:	31 ec       	ldi	r19, 0xC1	; 193
    5130:	44 e5       	ldi	r20, 0x54	; 84
    5132:	59 e3       	ldi	r21, 0x39	; 57
    5134:	69 81       	ldd	r22, Y+1	; 0x01
    5136:	7a 81       	ldd	r23, Y+2	; 0x02
    5138:	8b 81       	ldd	r24, Y+3	; 0x03
    513a:	9c 81       	ldd	r25, Y+4	; 0x04
    513c:	0e 94 a4 2b 	call	0x5748	; 0x5748 <__mulsf3>
    5140:	dc 01       	movw	r26, r24
    5142:	cb 01       	movw	r24, r22
    5144:	21 ea       	ldi	r18, 0xA1	; 161
    5146:	38 ee       	ldi	r19, 0xE8	; 232
    5148:	4c ea       	ldi	r20, 0xAC	; 172
    514a:	5a e3       	ldi	r21, 0x3A	; 58
    514c:	bc 01       	movw	r22, r24
    514e:	cd 01       	movw	r24, r26
    5150:	0e 94 fa 28 	call	0x51f4	; 0x51f4 <__addsf3>
    5154:	dc 01       	movw	r26, r24
    5156:	cb 01       	movw	r24, r22
    5158:	6c 01       	movw	r12, r24
    515a:	7d 01       	movw	r14, r26
    515c:	29 e4       	ldi	r18, 0x49	; 73
    515e:	36 e8       	ldi	r19, 0x86	; 134
    5160:	4c e7       	ldi	r20, 0x7C	; 124
    5162:	54 e3       	ldi	r21, 0x34	; 52
    5164:	69 81       	ldd	r22, Y+1	; 0x01
    5166:	7a 81       	ldd	r23, Y+2	; 0x02
    5168:	8b 81       	ldd	r24, Y+3	; 0x03
    516a:	9c 81       	ldd	r25, Y+4	; 0x04
    516c:	0e 94 a4 2b 	call	0x5748	; 0x5748 <__mulsf3>
    5170:	dc 01       	movw	r26, r24
    5172:	cb 01       	movw	r24, r22
    5174:	29 81       	ldd	r18, Y+1	; 0x01
    5176:	3a 81       	ldd	r19, Y+2	; 0x02
    5178:	4b 81       	ldd	r20, Y+3	; 0x03
    517a:	5c 81       	ldd	r21, Y+4	; 0x04
    517c:	bc 01       	movw	r22, r24
    517e:	cd 01       	movw	r24, r26
    5180:	0e 94 a4 2b 	call	0x5748	; 0x5748 <__mulsf3>
    5184:	dc 01       	movw	r26, r24
    5186:	cb 01       	movw	r24, r22
    5188:	29 81       	ldd	r18, Y+1	; 0x01
    518a:	3a 81       	ldd	r19, Y+2	; 0x02
    518c:	4b 81       	ldd	r20, Y+3	; 0x03
    518e:	5c 81       	ldd	r21, Y+4	; 0x04
    5190:	bc 01       	movw	r22, r24
    5192:	cd 01       	movw	r24, r26
    5194:	0e 94 a4 2b 	call	0x5748	; 0x5748 <__mulsf3>
    5198:	dc 01       	movw	r26, r24
    519a:	cb 01       	movw	r24, r22
    519c:	9c 01       	movw	r18, r24
    519e:	ad 01       	movw	r20, r26
    51a0:	c7 01       	movw	r24, r14
    51a2:	b6 01       	movw	r22, r12
    51a4:	0e 94 fa 28 	call	0x51f4	; 0x51f4 <__addsf3>
    51a8:	dc 01       	movw	r26, r24
    51aa:	cb 01       	movw	r24, r22
    51ac:	9c 01       	movw	r18, r24
    51ae:	ad 01       	movw	r20, r26
    51b0:	60 e0       	ldi	r22, 0x00	; 0
    51b2:	70 e0       	ldi	r23, 0x00	; 0
    51b4:	80 e8       	ldi	r24, 0x80	; 128
    51b6:	9f e3       	ldi	r25, 0x3F	; 63
    51b8:	0e 94 6b 29 	call	0x52d6	; 0x52d6 <__divsf3>
    51bc:	dc 01       	movw	r26, r24
    51be:	cb 01       	movw	r24, r22
    51c0:	23 e3       	ldi	r18, 0x33	; 51
    51c2:	33 e9       	ldi	r19, 0x93	; 147
    51c4:	48 e8       	ldi	r20, 0x88	; 136
    51c6:	53 e4       	ldi	r21, 0x43	; 67
    51c8:	bc 01       	movw	r22, r24
    51ca:	cd 01       	movw	r24, r26
    51cc:	0e 94 f9 28 	call	0x51f2	; 0x51f2 <__subsf3>
    51d0:	dc 01       	movw	r26, r24
    51d2:	cb 01       	movw	r24, r22
}
    51d4:	bc 01       	movw	r22, r24
    51d6:	cd 01       	movw	r24, r26
    51d8:	26 96       	adiw	r28, 0x06	; 6
    51da:	0f b6       	in	r0, 0x3f	; 63
    51dc:	f8 94       	cli
    51de:	de bf       	out	0x3e, r29	; 62
    51e0:	0f be       	out	0x3f, r0	; 63
    51e2:	cd bf       	out	0x3d, r28	; 61
    51e4:	df 91       	pop	r29
    51e6:	cf 91       	pop	r28
    51e8:	ff 90       	pop	r15
    51ea:	ef 90       	pop	r14
    51ec:	df 90       	pop	r13
    51ee:	cf 90       	pop	r12
    51f0:	08 95       	ret

000051f2 <__subsf3>:
    51f2:	50 58       	subi	r21, 0x80	; 128

000051f4 <__addsf3>:
    51f4:	bb 27       	eor	r27, r27
    51f6:	aa 27       	eor	r26, r26
    51f8:	0e 94 11 29 	call	0x5222	; 0x5222 <__addsf3x>
    51fc:	0c 94 15 2b 	jmp	0x562a	; 0x562a <__fp_round>
    5200:	0e 94 07 2b 	call	0x560e	; 0x560e <__fp_pscA>
    5204:	38 f0       	brcs	.+14     	; 0x5214 <__addsf3+0x20>
    5206:	0e 94 0e 2b 	call	0x561c	; 0x561c <__fp_pscB>
    520a:	20 f0       	brcs	.+8      	; 0x5214 <__addsf3+0x20>
    520c:	39 f4       	brne	.+14     	; 0x521c <__addsf3+0x28>
    520e:	9f 3f       	cpi	r25, 0xFF	; 255
    5210:	19 f4       	brne	.+6      	; 0x5218 <__addsf3+0x24>
    5212:	26 f4       	brtc	.+8      	; 0x521c <__addsf3+0x28>
    5214:	0c 94 f4 2a 	jmp	0x55e8	; 0x55e8 <__fp_nan>
    5218:	0e f4       	brtc	.+2      	; 0x521c <__addsf3+0x28>
    521a:	e0 95       	com	r30
    521c:	e7 fb       	bst	r30, 7
    521e:	0c 94 ee 2a 	jmp	0x55dc	; 0x55dc <__fp_inf>

00005222 <__addsf3x>:
    5222:	e9 2f       	mov	r30, r25
    5224:	0e 94 26 2b 	call	0x564c	; 0x564c <__fp_split3>
    5228:	58 f3       	brcs	.-42     	; 0x5200 <__addsf3+0xc>
    522a:	ba 17       	cp	r27, r26
    522c:	62 07       	cpc	r22, r18
    522e:	73 07       	cpc	r23, r19
    5230:	84 07       	cpc	r24, r20
    5232:	95 07       	cpc	r25, r21
    5234:	20 f0       	brcs	.+8      	; 0x523e <__addsf3x+0x1c>
    5236:	79 f4       	brne	.+30     	; 0x5256 <__addsf3x+0x34>
    5238:	a6 f5       	brtc	.+104    	; 0x52a2 <__addsf3x+0x80>
    523a:	0c 94 48 2b 	jmp	0x5690	; 0x5690 <__fp_zero>
    523e:	0e f4       	brtc	.+2      	; 0x5242 <__addsf3x+0x20>
    5240:	e0 95       	com	r30
    5242:	0b 2e       	mov	r0, r27
    5244:	ba 2f       	mov	r27, r26
    5246:	a0 2d       	mov	r26, r0
    5248:	0b 01       	movw	r0, r22
    524a:	b9 01       	movw	r22, r18
    524c:	90 01       	movw	r18, r0
    524e:	0c 01       	movw	r0, r24
    5250:	ca 01       	movw	r24, r20
    5252:	a0 01       	movw	r20, r0
    5254:	11 24       	eor	r1, r1
    5256:	ff 27       	eor	r31, r31
    5258:	59 1b       	sub	r21, r25
    525a:	99 f0       	breq	.+38     	; 0x5282 <__addsf3x+0x60>
    525c:	59 3f       	cpi	r21, 0xF9	; 249
    525e:	50 f4       	brcc	.+20     	; 0x5274 <__addsf3x+0x52>
    5260:	50 3e       	cpi	r21, 0xE0	; 224
    5262:	68 f1       	brcs	.+90     	; 0x52be <__addsf3x+0x9c>
    5264:	1a 16       	cp	r1, r26
    5266:	f0 40       	sbci	r31, 0x00	; 0
    5268:	a2 2f       	mov	r26, r18
    526a:	23 2f       	mov	r18, r19
    526c:	34 2f       	mov	r19, r20
    526e:	44 27       	eor	r20, r20
    5270:	58 5f       	subi	r21, 0xF8	; 248
    5272:	f3 cf       	rjmp	.-26     	; 0x525a <__addsf3x+0x38>
    5274:	46 95       	lsr	r20
    5276:	37 95       	ror	r19
    5278:	27 95       	ror	r18
    527a:	a7 95       	ror	r26
    527c:	f0 40       	sbci	r31, 0x00	; 0
    527e:	53 95       	inc	r21
    5280:	c9 f7       	brne	.-14     	; 0x5274 <__addsf3x+0x52>
    5282:	7e f4       	brtc	.+30     	; 0x52a2 <__addsf3x+0x80>
    5284:	1f 16       	cp	r1, r31
    5286:	ba 0b       	sbc	r27, r26
    5288:	62 0b       	sbc	r22, r18
    528a:	73 0b       	sbc	r23, r19
    528c:	84 0b       	sbc	r24, r20
    528e:	ba f0       	brmi	.+46     	; 0x52be <__addsf3x+0x9c>
    5290:	91 50       	subi	r25, 0x01	; 1
    5292:	a1 f0       	breq	.+40     	; 0x52bc <__addsf3x+0x9a>
    5294:	ff 0f       	add	r31, r31
    5296:	bb 1f       	adc	r27, r27
    5298:	66 1f       	adc	r22, r22
    529a:	77 1f       	adc	r23, r23
    529c:	88 1f       	adc	r24, r24
    529e:	c2 f7       	brpl	.-16     	; 0x5290 <__addsf3x+0x6e>
    52a0:	0e c0       	rjmp	.+28     	; 0x52be <__addsf3x+0x9c>
    52a2:	ba 0f       	add	r27, r26
    52a4:	62 1f       	adc	r22, r18
    52a6:	73 1f       	adc	r23, r19
    52a8:	84 1f       	adc	r24, r20
    52aa:	48 f4       	brcc	.+18     	; 0x52be <__addsf3x+0x9c>
    52ac:	87 95       	ror	r24
    52ae:	77 95       	ror	r23
    52b0:	67 95       	ror	r22
    52b2:	b7 95       	ror	r27
    52b4:	f7 95       	ror	r31
    52b6:	9e 3f       	cpi	r25, 0xFE	; 254
    52b8:	08 f0       	brcs	.+2      	; 0x52bc <__addsf3x+0x9a>
    52ba:	b0 cf       	rjmp	.-160    	; 0x521c <__addsf3+0x28>
    52bc:	93 95       	inc	r25
    52be:	88 0f       	add	r24, r24
    52c0:	08 f0       	brcs	.+2      	; 0x52c4 <__addsf3x+0xa2>
    52c2:	99 27       	eor	r25, r25
    52c4:	ee 0f       	add	r30, r30
    52c6:	97 95       	ror	r25
    52c8:	87 95       	ror	r24
    52ca:	08 95       	ret

000052cc <__cmpsf2>:
    52cc:	0e 94 ca 2a 	call	0x5594	; 0x5594 <__fp_cmp>
    52d0:	08 f4       	brcc	.+2      	; 0x52d4 <__cmpsf2+0x8>
    52d2:	81 e0       	ldi	r24, 0x01	; 1
    52d4:	08 95       	ret

000052d6 <__divsf3>:
    52d6:	0e 94 7f 29 	call	0x52fe	; 0x52fe <__divsf3x>
    52da:	0c 94 15 2b 	jmp	0x562a	; 0x562a <__fp_round>
    52de:	0e 94 0e 2b 	call	0x561c	; 0x561c <__fp_pscB>
    52e2:	58 f0       	brcs	.+22     	; 0x52fa <__divsf3+0x24>
    52e4:	0e 94 07 2b 	call	0x560e	; 0x560e <__fp_pscA>
    52e8:	40 f0       	brcs	.+16     	; 0x52fa <__divsf3+0x24>
    52ea:	29 f4       	brne	.+10     	; 0x52f6 <__divsf3+0x20>
    52ec:	5f 3f       	cpi	r21, 0xFF	; 255
    52ee:	29 f0       	breq	.+10     	; 0x52fa <__divsf3+0x24>
    52f0:	0c 94 ee 2a 	jmp	0x55dc	; 0x55dc <__fp_inf>
    52f4:	51 11       	cpse	r21, r1
    52f6:	0c 94 49 2b 	jmp	0x5692	; 0x5692 <__fp_szero>
    52fa:	0c 94 f4 2a 	jmp	0x55e8	; 0x55e8 <__fp_nan>

000052fe <__divsf3x>:
    52fe:	0e 94 26 2b 	call	0x564c	; 0x564c <__fp_split3>
    5302:	68 f3       	brcs	.-38     	; 0x52de <__divsf3+0x8>

00005304 <__divsf3_pse>:
    5304:	99 23       	and	r25, r25
    5306:	b1 f3       	breq	.-20     	; 0x52f4 <__divsf3+0x1e>
    5308:	55 23       	and	r21, r21
    530a:	91 f3       	breq	.-28     	; 0x52f0 <__divsf3+0x1a>
    530c:	95 1b       	sub	r25, r21
    530e:	55 0b       	sbc	r21, r21
    5310:	bb 27       	eor	r27, r27
    5312:	aa 27       	eor	r26, r26
    5314:	62 17       	cp	r22, r18
    5316:	73 07       	cpc	r23, r19
    5318:	84 07       	cpc	r24, r20
    531a:	38 f0       	brcs	.+14     	; 0x532a <__divsf3_pse+0x26>
    531c:	9f 5f       	subi	r25, 0xFF	; 255
    531e:	5f 4f       	sbci	r21, 0xFF	; 255
    5320:	22 0f       	add	r18, r18
    5322:	33 1f       	adc	r19, r19
    5324:	44 1f       	adc	r20, r20
    5326:	aa 1f       	adc	r26, r26
    5328:	a9 f3       	breq	.-22     	; 0x5314 <__divsf3_pse+0x10>
    532a:	35 d0       	rcall	.+106    	; 0x5396 <__divsf3_pse+0x92>
    532c:	0e 2e       	mov	r0, r30
    532e:	3a f0       	brmi	.+14     	; 0x533e <__divsf3_pse+0x3a>
    5330:	e0 e8       	ldi	r30, 0x80	; 128
    5332:	32 d0       	rcall	.+100    	; 0x5398 <__divsf3_pse+0x94>
    5334:	91 50       	subi	r25, 0x01	; 1
    5336:	50 40       	sbci	r21, 0x00	; 0
    5338:	e6 95       	lsr	r30
    533a:	00 1c       	adc	r0, r0
    533c:	ca f7       	brpl	.-14     	; 0x5330 <__divsf3_pse+0x2c>
    533e:	2b d0       	rcall	.+86     	; 0x5396 <__divsf3_pse+0x92>
    5340:	fe 2f       	mov	r31, r30
    5342:	29 d0       	rcall	.+82     	; 0x5396 <__divsf3_pse+0x92>
    5344:	66 0f       	add	r22, r22
    5346:	77 1f       	adc	r23, r23
    5348:	88 1f       	adc	r24, r24
    534a:	bb 1f       	adc	r27, r27
    534c:	26 17       	cp	r18, r22
    534e:	37 07       	cpc	r19, r23
    5350:	48 07       	cpc	r20, r24
    5352:	ab 07       	cpc	r26, r27
    5354:	b0 e8       	ldi	r27, 0x80	; 128
    5356:	09 f0       	breq	.+2      	; 0x535a <__divsf3_pse+0x56>
    5358:	bb 0b       	sbc	r27, r27
    535a:	80 2d       	mov	r24, r0
    535c:	bf 01       	movw	r22, r30
    535e:	ff 27       	eor	r31, r31
    5360:	93 58       	subi	r25, 0x83	; 131
    5362:	5f 4f       	sbci	r21, 0xFF	; 255
    5364:	3a f0       	brmi	.+14     	; 0x5374 <__divsf3_pse+0x70>
    5366:	9e 3f       	cpi	r25, 0xFE	; 254
    5368:	51 05       	cpc	r21, r1
    536a:	78 f0       	brcs	.+30     	; 0x538a <__divsf3_pse+0x86>
    536c:	0c 94 ee 2a 	jmp	0x55dc	; 0x55dc <__fp_inf>
    5370:	0c 94 49 2b 	jmp	0x5692	; 0x5692 <__fp_szero>
    5374:	5f 3f       	cpi	r21, 0xFF	; 255
    5376:	e4 f3       	brlt	.-8      	; 0x5370 <__divsf3_pse+0x6c>
    5378:	98 3e       	cpi	r25, 0xE8	; 232
    537a:	d4 f3       	brlt	.-12     	; 0x5370 <__divsf3_pse+0x6c>
    537c:	86 95       	lsr	r24
    537e:	77 95       	ror	r23
    5380:	67 95       	ror	r22
    5382:	b7 95       	ror	r27
    5384:	f7 95       	ror	r31
    5386:	9f 5f       	subi	r25, 0xFF	; 255
    5388:	c9 f7       	brne	.-14     	; 0x537c <__divsf3_pse+0x78>
    538a:	88 0f       	add	r24, r24
    538c:	91 1d       	adc	r25, r1
    538e:	96 95       	lsr	r25
    5390:	87 95       	ror	r24
    5392:	97 f9       	bld	r25, 7
    5394:	08 95       	ret
    5396:	e1 e0       	ldi	r30, 0x01	; 1
    5398:	66 0f       	add	r22, r22
    539a:	77 1f       	adc	r23, r23
    539c:	88 1f       	adc	r24, r24
    539e:	bb 1f       	adc	r27, r27
    53a0:	62 17       	cp	r22, r18
    53a2:	73 07       	cpc	r23, r19
    53a4:	84 07       	cpc	r24, r20
    53a6:	ba 07       	cpc	r27, r26
    53a8:	20 f0       	brcs	.+8      	; 0x53b2 <__divsf3_pse+0xae>
    53aa:	62 1b       	sub	r22, r18
    53ac:	73 0b       	sbc	r23, r19
    53ae:	84 0b       	sbc	r24, r20
    53b0:	ba 0b       	sbc	r27, r26
    53b2:	ee 1f       	adc	r30, r30
    53b4:	88 f7       	brcc	.-30     	; 0x5398 <__divsf3_pse+0x94>
    53b6:	e0 95       	com	r30
    53b8:	08 95       	ret

000053ba <__fixsfdi>:
    53ba:	be e3       	ldi	r27, 0x3E	; 62
    53bc:	04 d0       	rcall	.+8      	; 0x53c6 <__fixunssfdi+0x2>
    53be:	08 f4       	brcc	.+2      	; 0x53c2 <__fixsfdi+0x8>
    53c0:	90 e8       	ldi	r25, 0x80	; 128
    53c2:	08 95       	ret

000053c4 <__fixunssfdi>:
    53c4:	bf e3       	ldi	r27, 0x3F	; 63
    53c6:	22 27       	eor	r18, r18
    53c8:	33 27       	eor	r19, r19
    53ca:	a9 01       	movw	r20, r18
    53cc:	0e 94 2e 2b 	call	0x565c	; 0x565c <__fp_splitA>
    53d0:	60 f1       	brcs	.+88     	; 0x542a <__fixunssfdi+0x66>
    53d2:	9f 57       	subi	r25, 0x7F	; 127
    53d4:	48 f1       	brcs	.+82     	; 0x5428 <__fixunssfdi+0x64>
    53d6:	b9 17       	cp	r27, r25
    53d8:	40 f1       	brcs	.+80     	; 0x542a <__fixunssfdi+0x66>
    53da:	bf e3       	ldi	r27, 0x3F	; 63
    53dc:	b9 1b       	sub	r27, r25
    53de:	99 27       	eor	r25, r25
    53e0:	b8 50       	subi	r27, 0x08	; 8
    53e2:	3a f4       	brpl	.+14     	; 0x53f2 <__fixunssfdi+0x2e>
    53e4:	66 0f       	add	r22, r22
    53e6:	77 1f       	adc	r23, r23
    53e8:	88 1f       	adc	r24, r24
    53ea:	99 1f       	adc	r25, r25
    53ec:	b3 95       	inc	r27
    53ee:	d2 f3       	brmi	.-12     	; 0x53e4 <__fixunssfdi+0x20>
    53f0:	16 c0       	rjmp	.+44     	; 0x541e <__fixunssfdi+0x5a>
    53f2:	b8 50       	subi	r27, 0x08	; 8
    53f4:	4a f0       	brmi	.+18     	; 0x5408 <__fixunssfdi+0x44>
    53f6:	23 2f       	mov	r18, r19
    53f8:	34 2f       	mov	r19, r20
    53fa:	45 2f       	mov	r20, r21
    53fc:	56 2f       	mov	r21, r22
    53fe:	67 2f       	mov	r22, r23
    5400:	78 2f       	mov	r23, r24
    5402:	88 27       	eor	r24, r24
    5404:	b8 50       	subi	r27, 0x08	; 8
    5406:	ba f7       	brpl	.-18     	; 0x53f6 <__fixunssfdi+0x32>
    5408:	b8 5f       	subi	r27, 0xF8	; 248
    540a:	49 f0       	breq	.+18     	; 0x541e <__fixunssfdi+0x5a>
    540c:	86 95       	lsr	r24
    540e:	77 95       	ror	r23
    5410:	67 95       	ror	r22
    5412:	57 95       	ror	r21
    5414:	47 95       	ror	r20
    5416:	37 95       	ror	r19
    5418:	27 95       	ror	r18
    541a:	ba 95       	dec	r27
    541c:	b9 f7       	brne	.-18     	; 0x540c <__fixunssfdi+0x48>
    541e:	16 f4       	brtc	.+4      	; 0x5424 <__fixunssfdi+0x60>
    5420:	0e 94 f7 2a 	call	0x55ee	; 0x55ee <__fp_negdi>
    5424:	88 94       	clc
    5426:	08 95       	ret
    5428:	88 94       	clc
    542a:	60 e0       	ldi	r22, 0x00	; 0
    542c:	70 e0       	ldi	r23, 0x00	; 0
    542e:	cb 01       	movw	r24, r22
    5430:	08 95       	ret

00005432 <__fixsfsi>:
    5432:	0e 94 20 2a 	call	0x5440	; 0x5440 <__fixunssfsi>
    5436:	68 94       	set
    5438:	b1 11       	cpse	r27, r1
    543a:	0c 94 49 2b 	jmp	0x5692	; 0x5692 <__fp_szero>
    543e:	08 95       	ret

00005440 <__fixunssfsi>:
    5440:	0e 94 2e 2b 	call	0x565c	; 0x565c <__fp_splitA>
    5444:	88 f0       	brcs	.+34     	; 0x5468 <__fixunssfsi+0x28>
    5446:	9f 57       	subi	r25, 0x7F	; 127
    5448:	98 f0       	brcs	.+38     	; 0x5470 <__fixunssfsi+0x30>
    544a:	b9 2f       	mov	r27, r25
    544c:	99 27       	eor	r25, r25
    544e:	b7 51       	subi	r27, 0x17	; 23
    5450:	b0 f0       	brcs	.+44     	; 0x547e <__fixunssfsi+0x3e>
    5452:	e1 f0       	breq	.+56     	; 0x548c <__fixunssfsi+0x4c>
    5454:	66 0f       	add	r22, r22
    5456:	77 1f       	adc	r23, r23
    5458:	88 1f       	adc	r24, r24
    545a:	99 1f       	adc	r25, r25
    545c:	1a f0       	brmi	.+6      	; 0x5464 <__fixunssfsi+0x24>
    545e:	ba 95       	dec	r27
    5460:	c9 f7       	brne	.-14     	; 0x5454 <__fixunssfsi+0x14>
    5462:	14 c0       	rjmp	.+40     	; 0x548c <__fixunssfsi+0x4c>
    5464:	b1 30       	cpi	r27, 0x01	; 1
    5466:	91 f0       	breq	.+36     	; 0x548c <__fixunssfsi+0x4c>
    5468:	0e 94 48 2b 	call	0x5690	; 0x5690 <__fp_zero>
    546c:	b1 e0       	ldi	r27, 0x01	; 1
    546e:	08 95       	ret
    5470:	0c 94 48 2b 	jmp	0x5690	; 0x5690 <__fp_zero>
    5474:	67 2f       	mov	r22, r23
    5476:	78 2f       	mov	r23, r24
    5478:	88 27       	eor	r24, r24
    547a:	b8 5f       	subi	r27, 0xF8	; 248
    547c:	39 f0       	breq	.+14     	; 0x548c <__fixunssfsi+0x4c>
    547e:	b9 3f       	cpi	r27, 0xF9	; 249
    5480:	cc f3       	brlt	.-14     	; 0x5474 <__fixunssfsi+0x34>
    5482:	86 95       	lsr	r24
    5484:	77 95       	ror	r23
    5486:	67 95       	ror	r22
    5488:	b3 95       	inc	r27
    548a:	d9 f7       	brne	.-10     	; 0x5482 <__fixunssfsi+0x42>
    548c:	3e f4       	brtc	.+14     	; 0x549c <__fixunssfsi+0x5c>
    548e:	90 95       	com	r25
    5490:	80 95       	com	r24
    5492:	70 95       	com	r23
    5494:	61 95       	neg	r22
    5496:	7f 4f       	sbci	r23, 0xFF	; 255
    5498:	8f 4f       	sbci	r24, 0xFF	; 255
    549a:	9f 4f       	sbci	r25, 0xFF	; 255
    549c:	08 95       	ret

0000549e <__floatunsisf>:
    549e:	e8 94       	clt
    54a0:	09 c0       	rjmp	.+18     	; 0x54b4 <__floatsisf+0x12>

000054a2 <__floatsisf>:
    54a2:	97 fb       	bst	r25, 7
    54a4:	3e f4       	brtc	.+14     	; 0x54b4 <__floatsisf+0x12>
    54a6:	90 95       	com	r25
    54a8:	80 95       	com	r24
    54aa:	70 95       	com	r23
    54ac:	61 95       	neg	r22
    54ae:	7f 4f       	sbci	r23, 0xFF	; 255
    54b0:	8f 4f       	sbci	r24, 0xFF	; 255
    54b2:	9f 4f       	sbci	r25, 0xFF	; 255
    54b4:	99 23       	and	r25, r25
    54b6:	a9 f0       	breq	.+42     	; 0x54e2 <__floatsisf+0x40>
    54b8:	f9 2f       	mov	r31, r25
    54ba:	96 e9       	ldi	r25, 0x96	; 150
    54bc:	bb 27       	eor	r27, r27
    54be:	93 95       	inc	r25
    54c0:	f6 95       	lsr	r31
    54c2:	87 95       	ror	r24
    54c4:	77 95       	ror	r23
    54c6:	67 95       	ror	r22
    54c8:	b7 95       	ror	r27
    54ca:	f1 11       	cpse	r31, r1
    54cc:	f8 cf       	rjmp	.-16     	; 0x54be <__floatsisf+0x1c>
    54ce:	fa f4       	brpl	.+62     	; 0x550e <__floatsisf+0x6c>
    54d0:	bb 0f       	add	r27, r27
    54d2:	11 f4       	brne	.+4      	; 0x54d8 <__floatsisf+0x36>
    54d4:	60 ff       	sbrs	r22, 0
    54d6:	1b c0       	rjmp	.+54     	; 0x550e <__floatsisf+0x6c>
    54d8:	6f 5f       	subi	r22, 0xFF	; 255
    54da:	7f 4f       	sbci	r23, 0xFF	; 255
    54dc:	8f 4f       	sbci	r24, 0xFF	; 255
    54de:	9f 4f       	sbci	r25, 0xFF	; 255
    54e0:	16 c0       	rjmp	.+44     	; 0x550e <__floatsisf+0x6c>
    54e2:	88 23       	and	r24, r24
    54e4:	11 f0       	breq	.+4      	; 0x54ea <__floatsisf+0x48>
    54e6:	96 e9       	ldi	r25, 0x96	; 150
    54e8:	11 c0       	rjmp	.+34     	; 0x550c <__floatsisf+0x6a>
    54ea:	77 23       	and	r23, r23
    54ec:	21 f0       	breq	.+8      	; 0x54f6 <__floatsisf+0x54>
    54ee:	9e e8       	ldi	r25, 0x8E	; 142
    54f0:	87 2f       	mov	r24, r23
    54f2:	76 2f       	mov	r23, r22
    54f4:	05 c0       	rjmp	.+10     	; 0x5500 <__floatsisf+0x5e>
    54f6:	66 23       	and	r22, r22
    54f8:	71 f0       	breq	.+28     	; 0x5516 <__floatsisf+0x74>
    54fa:	96 e8       	ldi	r25, 0x86	; 134
    54fc:	86 2f       	mov	r24, r22
    54fe:	70 e0       	ldi	r23, 0x00	; 0
    5500:	60 e0       	ldi	r22, 0x00	; 0
    5502:	2a f0       	brmi	.+10     	; 0x550e <__floatsisf+0x6c>
    5504:	9a 95       	dec	r25
    5506:	66 0f       	add	r22, r22
    5508:	77 1f       	adc	r23, r23
    550a:	88 1f       	adc	r24, r24
    550c:	da f7       	brpl	.-10     	; 0x5504 <__floatsisf+0x62>
    550e:	88 0f       	add	r24, r24
    5510:	96 95       	lsr	r25
    5512:	87 95       	ror	r24
    5514:	97 f9       	bld	r25, 7
    5516:	08 95       	ret

00005518 <__floatundisf>:
    5518:	e8 94       	clt

0000551a <__fp_di2sf>:
    551a:	f9 2f       	mov	r31, r25
    551c:	96 eb       	ldi	r25, 0xB6	; 182
    551e:	ff 23       	and	r31, r31
    5520:	81 f0       	breq	.+32     	; 0x5542 <__fp_di2sf+0x28>
    5522:	12 16       	cp	r1, r18
    5524:	13 06       	cpc	r1, r19
    5526:	14 06       	cpc	r1, r20
    5528:	44 0b       	sbc	r20, r20
    552a:	93 95       	inc	r25
    552c:	f6 95       	lsr	r31
    552e:	87 95       	ror	r24
    5530:	77 95       	ror	r23
    5532:	67 95       	ror	r22
    5534:	57 95       	ror	r21
    5536:	40 40       	sbci	r20, 0x00	; 0
    5538:	ff 23       	and	r31, r31
    553a:	b9 f7       	brne	.-18     	; 0x552a <__fp_di2sf+0x10>
    553c:	1b c0       	rjmp	.+54     	; 0x5574 <__fp_di2sf+0x5a>
    553e:	99 27       	eor	r25, r25
    5540:	08 95       	ret
    5542:	88 23       	and	r24, r24
    5544:	51 f4       	brne	.+20     	; 0x555a <__fp_di2sf+0x40>
    5546:	98 50       	subi	r25, 0x08	; 8
    5548:	d2 f7       	brpl	.-12     	; 0x553e <__fp_di2sf+0x24>
    554a:	87 2b       	or	r24, r23
    554c:	76 2f       	mov	r23, r22
    554e:	65 2f       	mov	r22, r21
    5550:	54 2f       	mov	r21, r20
    5552:	43 2f       	mov	r20, r19
    5554:	32 2f       	mov	r19, r18
    5556:	20 e0       	ldi	r18, 0x00	; 0
    5558:	b1 f3       	breq	.-20     	; 0x5546 <__fp_di2sf+0x2c>
    555a:	12 16       	cp	r1, r18
    555c:	13 06       	cpc	r1, r19
    555e:	14 06       	cpc	r1, r20
    5560:	44 0b       	sbc	r20, r20
    5562:	88 23       	and	r24, r24
    5564:	3a f0       	brmi	.+14     	; 0x5574 <__fp_di2sf+0x5a>
    5566:	9a 95       	dec	r25
    5568:	44 0f       	add	r20, r20
    556a:	55 1f       	adc	r21, r21
    556c:	66 1f       	adc	r22, r22
    556e:	77 1f       	adc	r23, r23
    5570:	88 1f       	adc	r24, r24
    5572:	ca f7       	brpl	.-14     	; 0x5566 <__fp_di2sf+0x4c>
    5574:	55 23       	and	r21, r21
    5576:	4a f4       	brpl	.+18     	; 0x558a <__fp_di2sf+0x70>
    5578:	44 0f       	add	r20, r20
    557a:	55 1f       	adc	r21, r21
    557c:	11 f4       	brne	.+4      	; 0x5582 <__fp_di2sf+0x68>
    557e:	60 ff       	sbrs	r22, 0
    5580:	04 c0       	rjmp	.+8      	; 0x558a <__fp_di2sf+0x70>
    5582:	6f 5f       	subi	r22, 0xFF	; 255
    5584:	7f 4f       	sbci	r23, 0xFF	; 255
    5586:	8f 4f       	sbci	r24, 0xFF	; 255
    5588:	9f 4f       	sbci	r25, 0xFF	; 255
    558a:	88 0f       	add	r24, r24
    558c:	96 95       	lsr	r25
    558e:	87 95       	ror	r24
    5590:	97 f9       	bld	r25, 7
    5592:	08 95       	ret

00005594 <__fp_cmp>:
    5594:	99 0f       	add	r25, r25
    5596:	00 08       	sbc	r0, r0
    5598:	55 0f       	add	r21, r21
    559a:	aa 0b       	sbc	r26, r26
    559c:	e0 e8       	ldi	r30, 0x80	; 128
    559e:	fe ef       	ldi	r31, 0xFE	; 254
    55a0:	16 16       	cp	r1, r22
    55a2:	17 06       	cpc	r1, r23
    55a4:	e8 07       	cpc	r30, r24
    55a6:	f9 07       	cpc	r31, r25
    55a8:	c0 f0       	brcs	.+48     	; 0x55da <__fp_cmp+0x46>
    55aa:	12 16       	cp	r1, r18
    55ac:	13 06       	cpc	r1, r19
    55ae:	e4 07       	cpc	r30, r20
    55b0:	f5 07       	cpc	r31, r21
    55b2:	98 f0       	brcs	.+38     	; 0x55da <__fp_cmp+0x46>
    55b4:	62 1b       	sub	r22, r18
    55b6:	73 0b       	sbc	r23, r19
    55b8:	84 0b       	sbc	r24, r20
    55ba:	95 0b       	sbc	r25, r21
    55bc:	39 f4       	brne	.+14     	; 0x55cc <__fp_cmp+0x38>
    55be:	0a 26       	eor	r0, r26
    55c0:	61 f0       	breq	.+24     	; 0x55da <__fp_cmp+0x46>
    55c2:	23 2b       	or	r18, r19
    55c4:	24 2b       	or	r18, r20
    55c6:	25 2b       	or	r18, r21
    55c8:	21 f4       	brne	.+8      	; 0x55d2 <__fp_cmp+0x3e>
    55ca:	08 95       	ret
    55cc:	0a 26       	eor	r0, r26
    55ce:	09 f4       	brne	.+2      	; 0x55d2 <__fp_cmp+0x3e>
    55d0:	a1 40       	sbci	r26, 0x01	; 1
    55d2:	a6 95       	lsr	r26
    55d4:	8f ef       	ldi	r24, 0xFF	; 255
    55d6:	81 1d       	adc	r24, r1
    55d8:	81 1d       	adc	r24, r1
    55da:	08 95       	ret

000055dc <__fp_inf>:
    55dc:	97 f9       	bld	r25, 7
    55de:	9f 67       	ori	r25, 0x7F	; 127
    55e0:	80 e8       	ldi	r24, 0x80	; 128
    55e2:	70 e0       	ldi	r23, 0x00	; 0
    55e4:	60 e0       	ldi	r22, 0x00	; 0
    55e6:	08 95       	ret

000055e8 <__fp_nan>:
    55e8:	9f ef       	ldi	r25, 0xFF	; 255
    55ea:	80 ec       	ldi	r24, 0xC0	; 192
    55ec:	08 95       	ret

000055ee <__fp_negdi>:
    55ee:	90 95       	com	r25
    55f0:	80 95       	com	r24
    55f2:	70 95       	com	r23
    55f4:	60 95       	com	r22
    55f6:	50 95       	com	r21
    55f8:	40 95       	com	r20
    55fa:	30 95       	com	r19
    55fc:	21 95       	neg	r18
    55fe:	3f 4f       	sbci	r19, 0xFF	; 255
    5600:	4f 4f       	sbci	r20, 0xFF	; 255
    5602:	5f 4f       	sbci	r21, 0xFF	; 255
    5604:	6f 4f       	sbci	r22, 0xFF	; 255
    5606:	7f 4f       	sbci	r23, 0xFF	; 255
    5608:	8f 4f       	sbci	r24, 0xFF	; 255
    560a:	9f 4f       	sbci	r25, 0xFF	; 255
    560c:	08 95       	ret

0000560e <__fp_pscA>:
    560e:	00 24       	eor	r0, r0
    5610:	0a 94       	dec	r0
    5612:	16 16       	cp	r1, r22
    5614:	17 06       	cpc	r1, r23
    5616:	18 06       	cpc	r1, r24
    5618:	09 06       	cpc	r0, r25
    561a:	08 95       	ret

0000561c <__fp_pscB>:
    561c:	00 24       	eor	r0, r0
    561e:	0a 94       	dec	r0
    5620:	12 16       	cp	r1, r18
    5622:	13 06       	cpc	r1, r19
    5624:	14 06       	cpc	r1, r20
    5626:	05 06       	cpc	r0, r21
    5628:	08 95       	ret

0000562a <__fp_round>:
    562a:	09 2e       	mov	r0, r25
    562c:	03 94       	inc	r0
    562e:	00 0c       	add	r0, r0
    5630:	11 f4       	brne	.+4      	; 0x5636 <__fp_round+0xc>
    5632:	88 23       	and	r24, r24
    5634:	52 f0       	brmi	.+20     	; 0x564a <__fp_round+0x20>
    5636:	bb 0f       	add	r27, r27
    5638:	40 f4       	brcc	.+16     	; 0x564a <__fp_round+0x20>
    563a:	bf 2b       	or	r27, r31
    563c:	11 f4       	brne	.+4      	; 0x5642 <__fp_round+0x18>
    563e:	60 ff       	sbrs	r22, 0
    5640:	04 c0       	rjmp	.+8      	; 0x564a <__fp_round+0x20>
    5642:	6f 5f       	subi	r22, 0xFF	; 255
    5644:	7f 4f       	sbci	r23, 0xFF	; 255
    5646:	8f 4f       	sbci	r24, 0xFF	; 255
    5648:	9f 4f       	sbci	r25, 0xFF	; 255
    564a:	08 95       	ret

0000564c <__fp_split3>:
    564c:	57 fd       	sbrc	r21, 7
    564e:	90 58       	subi	r25, 0x80	; 128
    5650:	44 0f       	add	r20, r20
    5652:	55 1f       	adc	r21, r21
    5654:	59 f0       	breq	.+22     	; 0x566c <__fp_splitA+0x10>
    5656:	5f 3f       	cpi	r21, 0xFF	; 255
    5658:	71 f0       	breq	.+28     	; 0x5676 <__fp_splitA+0x1a>
    565a:	47 95       	ror	r20

0000565c <__fp_splitA>:
    565c:	88 0f       	add	r24, r24
    565e:	97 fb       	bst	r25, 7
    5660:	99 1f       	adc	r25, r25
    5662:	61 f0       	breq	.+24     	; 0x567c <__fp_splitA+0x20>
    5664:	9f 3f       	cpi	r25, 0xFF	; 255
    5666:	79 f0       	breq	.+30     	; 0x5686 <__fp_splitA+0x2a>
    5668:	87 95       	ror	r24
    566a:	08 95       	ret
    566c:	12 16       	cp	r1, r18
    566e:	13 06       	cpc	r1, r19
    5670:	14 06       	cpc	r1, r20
    5672:	55 1f       	adc	r21, r21
    5674:	f2 cf       	rjmp	.-28     	; 0x565a <__fp_split3+0xe>
    5676:	46 95       	lsr	r20
    5678:	f1 df       	rcall	.-30     	; 0x565c <__fp_splitA>
    567a:	08 c0       	rjmp	.+16     	; 0x568c <__fp_splitA+0x30>
    567c:	16 16       	cp	r1, r22
    567e:	17 06       	cpc	r1, r23
    5680:	18 06       	cpc	r1, r24
    5682:	99 1f       	adc	r25, r25
    5684:	f1 cf       	rjmp	.-30     	; 0x5668 <__fp_splitA+0xc>
    5686:	86 95       	lsr	r24
    5688:	71 05       	cpc	r23, r1
    568a:	61 05       	cpc	r22, r1
    568c:	08 94       	sec
    568e:	08 95       	ret

00005690 <__fp_zero>:
    5690:	e8 94       	clt

00005692 <__fp_szero>:
    5692:	bb 27       	eor	r27, r27
    5694:	66 27       	eor	r22, r22
    5696:	77 27       	eor	r23, r23
    5698:	cb 01       	movw	r24, r22
    569a:	97 f9       	bld	r25, 7
    569c:	08 95       	ret

0000569e <__gesf2>:
    569e:	0e 94 ca 2a 	call	0x5594	; 0x5594 <__fp_cmp>
    56a2:	08 f4       	brcc	.+2      	; 0x56a6 <__gesf2+0x8>
    56a4:	8f ef       	ldi	r24, 0xFF	; 255
    56a6:	08 95       	ret
    56a8:	16 f0       	brts	.+4      	; 0x56ae <__gesf2+0x10>
    56aa:	0c 94 11 2c 	jmp	0x5822	; 0x5822 <__fp_mpack>
    56ae:	0c 94 f4 2a 	jmp	0x55e8	; 0x55e8 <__fp_nan>
    56b2:	68 94       	set
    56b4:	0c 94 ee 2a 	jmp	0x55dc	; 0x55dc <__fp_inf>

000056b8 <log>:
    56b8:	0e 94 2e 2b 	call	0x565c	; 0x565c <__fp_splitA>
    56bc:	a8 f3       	brcs	.-22     	; 0x56a8 <__gesf2+0xa>
    56be:	99 23       	and	r25, r25
    56c0:	c1 f3       	breq	.-16     	; 0x56b2 <__gesf2+0x14>
    56c2:	ae f3       	brts	.-22     	; 0x56ae <__gesf2+0x10>
    56c4:	df 93       	push	r29
    56c6:	cf 93       	push	r28
    56c8:	1f 93       	push	r17
    56ca:	0f 93       	push	r16
    56cc:	ff 92       	push	r15
    56ce:	c9 2f       	mov	r28, r25
    56d0:	dd 27       	eor	r29, r29
    56d2:	88 23       	and	r24, r24
    56d4:	2a f0       	brmi	.+10     	; 0x56e0 <log+0x28>
    56d6:	21 97       	sbiw	r28, 0x01	; 1
    56d8:	66 0f       	add	r22, r22
    56da:	77 1f       	adc	r23, r23
    56dc:	88 1f       	adc	r24, r24
    56de:	da f7       	brpl	.-10     	; 0x56d6 <log+0x1e>
    56e0:	20 e0       	ldi	r18, 0x00	; 0
    56e2:	30 e0       	ldi	r19, 0x00	; 0
    56e4:	40 e8       	ldi	r20, 0x80	; 128
    56e6:	5f eb       	ldi	r21, 0xBF	; 191
    56e8:	9f e3       	ldi	r25, 0x3F	; 63
    56ea:	88 39       	cpi	r24, 0x98	; 152
    56ec:	20 f0       	brcs	.+8      	; 0x56f6 <log+0x3e>
    56ee:	80 3e       	cpi	r24, 0xE0	; 224
    56f0:	38 f0       	brcs	.+14     	; 0x5700 <log+0x48>
    56f2:	21 96       	adiw	r28, 0x01	; 1
    56f4:	8f 77       	andi	r24, 0x7F	; 127
    56f6:	0e 94 fa 28 	call	0x51f4	; 0x51f4 <__addsf3>
    56fa:	e0 e9       	ldi	r30, 0x90	; 144
    56fc:	f0 e0       	ldi	r31, 0x00	; 0
    56fe:	04 c0       	rjmp	.+8      	; 0x5708 <log+0x50>
    5700:	0e 94 fa 28 	call	0x51f4	; 0x51f4 <__addsf3>
    5704:	ed eb       	ldi	r30, 0xBD	; 189
    5706:	f0 e0       	ldi	r31, 0x00	; 0
    5708:	0e 94 1f 2c 	call	0x583e	; 0x583e <__fp_powser>
    570c:	8b 01       	movw	r16, r22
    570e:	be 01       	movw	r22, r28
    5710:	ec 01       	movw	r28, r24
    5712:	fb 2e       	mov	r15, r27
    5714:	6f 57       	subi	r22, 0x7F	; 127
    5716:	71 09       	sbc	r23, r1
    5718:	75 95       	asr	r23
    571a:	77 1f       	adc	r23, r23
    571c:	88 0b       	sbc	r24, r24
    571e:	99 0b       	sbc	r25, r25
    5720:	0e 94 51 2a 	call	0x54a2	; 0x54a2 <__floatsisf>
    5724:	28 e1       	ldi	r18, 0x18	; 24
    5726:	32 e7       	ldi	r19, 0x72	; 114
    5728:	41 e3       	ldi	r20, 0x31	; 49
    572a:	5f e3       	ldi	r21, 0x3F	; 63
    572c:	0e 94 b7 2b 	call	0x576e	; 0x576e <__mulsf3x>
    5730:	af 2d       	mov	r26, r15
    5732:	98 01       	movw	r18, r16
    5734:	ae 01       	movw	r20, r28
    5736:	ff 90       	pop	r15
    5738:	0f 91       	pop	r16
    573a:	1f 91       	pop	r17
    573c:	cf 91       	pop	r28
    573e:	df 91       	pop	r29
    5740:	0e 94 11 29 	call	0x5222	; 0x5222 <__addsf3x>
    5744:	0c 94 15 2b 	jmp	0x562a	; 0x562a <__fp_round>

00005748 <__mulsf3>:
    5748:	0e 94 b7 2b 	call	0x576e	; 0x576e <__mulsf3x>
    574c:	0c 94 15 2b 	jmp	0x562a	; 0x562a <__fp_round>
    5750:	0e 94 07 2b 	call	0x560e	; 0x560e <__fp_pscA>
    5754:	38 f0       	brcs	.+14     	; 0x5764 <__mulsf3+0x1c>
    5756:	0e 94 0e 2b 	call	0x561c	; 0x561c <__fp_pscB>
    575a:	20 f0       	brcs	.+8      	; 0x5764 <__mulsf3+0x1c>
    575c:	95 23       	and	r25, r21
    575e:	11 f0       	breq	.+4      	; 0x5764 <__mulsf3+0x1c>
    5760:	0c 94 ee 2a 	jmp	0x55dc	; 0x55dc <__fp_inf>
    5764:	0c 94 f4 2a 	jmp	0x55e8	; 0x55e8 <__fp_nan>
    5768:	11 24       	eor	r1, r1
    576a:	0c 94 49 2b 	jmp	0x5692	; 0x5692 <__fp_szero>

0000576e <__mulsf3x>:
    576e:	0e 94 26 2b 	call	0x564c	; 0x564c <__fp_split3>
    5772:	70 f3       	brcs	.-36     	; 0x5750 <__mulsf3+0x8>

00005774 <__mulsf3_pse>:
    5774:	95 9f       	mul	r25, r21
    5776:	c1 f3       	breq	.-16     	; 0x5768 <__mulsf3+0x20>
    5778:	95 0f       	add	r25, r21
    577a:	50 e0       	ldi	r21, 0x00	; 0
    577c:	55 1f       	adc	r21, r21
    577e:	62 9f       	mul	r22, r18
    5780:	f0 01       	movw	r30, r0
    5782:	72 9f       	mul	r23, r18
    5784:	bb 27       	eor	r27, r27
    5786:	f0 0d       	add	r31, r0
    5788:	b1 1d       	adc	r27, r1
    578a:	63 9f       	mul	r22, r19
    578c:	aa 27       	eor	r26, r26
    578e:	f0 0d       	add	r31, r0
    5790:	b1 1d       	adc	r27, r1
    5792:	aa 1f       	adc	r26, r26
    5794:	64 9f       	mul	r22, r20
    5796:	66 27       	eor	r22, r22
    5798:	b0 0d       	add	r27, r0
    579a:	a1 1d       	adc	r26, r1
    579c:	66 1f       	adc	r22, r22
    579e:	82 9f       	mul	r24, r18
    57a0:	22 27       	eor	r18, r18
    57a2:	b0 0d       	add	r27, r0
    57a4:	a1 1d       	adc	r26, r1
    57a6:	62 1f       	adc	r22, r18
    57a8:	73 9f       	mul	r23, r19
    57aa:	b0 0d       	add	r27, r0
    57ac:	a1 1d       	adc	r26, r1
    57ae:	62 1f       	adc	r22, r18
    57b0:	83 9f       	mul	r24, r19
    57b2:	a0 0d       	add	r26, r0
    57b4:	61 1d       	adc	r22, r1
    57b6:	22 1f       	adc	r18, r18
    57b8:	74 9f       	mul	r23, r20
    57ba:	33 27       	eor	r19, r19
    57bc:	a0 0d       	add	r26, r0
    57be:	61 1d       	adc	r22, r1
    57c0:	23 1f       	adc	r18, r19
    57c2:	84 9f       	mul	r24, r20
    57c4:	60 0d       	add	r22, r0
    57c6:	21 1d       	adc	r18, r1
    57c8:	82 2f       	mov	r24, r18
    57ca:	76 2f       	mov	r23, r22
    57cc:	6a 2f       	mov	r22, r26
    57ce:	11 24       	eor	r1, r1
    57d0:	9f 57       	subi	r25, 0x7F	; 127
    57d2:	50 40       	sbci	r21, 0x00	; 0
    57d4:	9a f0       	brmi	.+38     	; 0x57fc <__mulsf3_pse+0x88>
    57d6:	f1 f0       	breq	.+60     	; 0x5814 <__mulsf3_pse+0xa0>
    57d8:	88 23       	and	r24, r24
    57da:	4a f0       	brmi	.+18     	; 0x57ee <__mulsf3_pse+0x7a>
    57dc:	ee 0f       	add	r30, r30
    57de:	ff 1f       	adc	r31, r31
    57e0:	bb 1f       	adc	r27, r27
    57e2:	66 1f       	adc	r22, r22
    57e4:	77 1f       	adc	r23, r23
    57e6:	88 1f       	adc	r24, r24
    57e8:	91 50       	subi	r25, 0x01	; 1
    57ea:	50 40       	sbci	r21, 0x00	; 0
    57ec:	a9 f7       	brne	.-22     	; 0x57d8 <__mulsf3_pse+0x64>
    57ee:	9e 3f       	cpi	r25, 0xFE	; 254
    57f0:	51 05       	cpc	r21, r1
    57f2:	80 f0       	brcs	.+32     	; 0x5814 <__mulsf3_pse+0xa0>
    57f4:	0c 94 ee 2a 	jmp	0x55dc	; 0x55dc <__fp_inf>
    57f8:	0c 94 49 2b 	jmp	0x5692	; 0x5692 <__fp_szero>
    57fc:	5f 3f       	cpi	r21, 0xFF	; 255
    57fe:	e4 f3       	brlt	.-8      	; 0x57f8 <__mulsf3_pse+0x84>
    5800:	98 3e       	cpi	r25, 0xE8	; 232
    5802:	d4 f3       	brlt	.-12     	; 0x57f8 <__mulsf3_pse+0x84>
    5804:	86 95       	lsr	r24
    5806:	77 95       	ror	r23
    5808:	67 95       	ror	r22
    580a:	b7 95       	ror	r27
    580c:	f7 95       	ror	r31
    580e:	e7 95       	ror	r30
    5810:	9f 5f       	subi	r25, 0xFF	; 255
    5812:	c1 f7       	brne	.-16     	; 0x5804 <__mulsf3_pse+0x90>
    5814:	fe 2b       	or	r31, r30
    5816:	88 0f       	add	r24, r24
    5818:	91 1d       	adc	r25, r1
    581a:	96 95       	lsr	r25
    581c:	87 95       	ror	r24
    581e:	97 f9       	bld	r25, 7
    5820:	08 95       	ret

00005822 <__fp_mpack>:
    5822:	9f 3f       	cpi	r25, 0xFF	; 255
    5824:	31 f0       	breq	.+12     	; 0x5832 <__fp_mpack_finite+0xc>

00005826 <__fp_mpack_finite>:
    5826:	91 50       	subi	r25, 0x01	; 1
    5828:	20 f4       	brcc	.+8      	; 0x5832 <__fp_mpack_finite+0xc>
    582a:	87 95       	ror	r24
    582c:	77 95       	ror	r23
    582e:	67 95       	ror	r22
    5830:	b7 95       	ror	r27
    5832:	88 0f       	add	r24, r24
    5834:	91 1d       	adc	r25, r1
    5836:	96 95       	lsr	r25
    5838:	87 95       	ror	r24
    583a:	97 f9       	bld	r25, 7
    583c:	08 95       	ret

0000583e <__fp_powser>:
    583e:	df 93       	push	r29
    5840:	cf 93       	push	r28
    5842:	1f 93       	push	r17
    5844:	0f 93       	push	r16
    5846:	ff 92       	push	r15
    5848:	ef 92       	push	r14
    584a:	df 92       	push	r13
    584c:	7b 01       	movw	r14, r22
    584e:	8c 01       	movw	r16, r24
    5850:	68 94       	set
    5852:	06 c0       	rjmp	.+12     	; 0x5860 <__fp_powser+0x22>
    5854:	da 2e       	mov	r13, r26
    5856:	ef 01       	movw	r28, r30
    5858:	0e 94 b7 2b 	call	0x576e	; 0x576e <__mulsf3x>
    585c:	fe 01       	movw	r30, r28
    585e:	e8 94       	clt
    5860:	a5 91       	lpm	r26, Z+
    5862:	25 91       	lpm	r18, Z+
    5864:	35 91       	lpm	r19, Z+
    5866:	45 91       	lpm	r20, Z+
    5868:	55 91       	lpm	r21, Z+
    586a:	a6 f3       	brts	.-24     	; 0x5854 <__fp_powser+0x16>
    586c:	ef 01       	movw	r28, r30
    586e:	0e 94 11 29 	call	0x5222	; 0x5222 <__addsf3x>
    5872:	fe 01       	movw	r30, r28
    5874:	97 01       	movw	r18, r14
    5876:	a8 01       	movw	r20, r16
    5878:	da 94       	dec	r13
    587a:	69 f7       	brne	.-38     	; 0x5856 <__fp_powser+0x18>
    587c:	df 90       	pop	r13
    587e:	ef 90       	pop	r14
    5880:	ff 90       	pop	r15
    5882:	0f 91       	pop	r16
    5884:	1f 91       	pop	r17
    5886:	cf 91       	pop	r28
    5888:	df 91       	pop	r29
    588a:	08 95       	ret

0000588c <__divmodhi4>:
    588c:	97 fb       	bst	r25, 7
    588e:	07 2e       	mov	r0, r23
    5890:	16 f4       	brtc	.+4      	; 0x5896 <__divmodhi4+0xa>
    5892:	00 94       	com	r0
    5894:	07 d0       	rcall	.+14     	; 0x58a4 <__divmodhi4_neg1>
    5896:	77 fd       	sbrc	r23, 7
    5898:	09 d0       	rcall	.+18     	; 0x58ac <__divmodhi4_neg2>
    589a:	0e 94 c3 2c 	call	0x5986	; 0x5986 <__udivmodhi4>
    589e:	07 fc       	sbrc	r0, 7
    58a0:	05 d0       	rcall	.+10     	; 0x58ac <__divmodhi4_neg2>
    58a2:	3e f4       	brtc	.+14     	; 0x58b2 <__divmodhi4_exit>

000058a4 <__divmodhi4_neg1>:
    58a4:	90 95       	com	r25
    58a6:	81 95       	neg	r24
    58a8:	9f 4f       	sbci	r25, 0xFF	; 255
    58aa:	08 95       	ret

000058ac <__divmodhi4_neg2>:
    58ac:	70 95       	com	r23
    58ae:	61 95       	neg	r22
    58b0:	7f 4f       	sbci	r23, 0xFF	; 255

000058b2 <__divmodhi4_exit>:
    58b2:	08 95       	ret

000058b4 <__udivmodsi4>:
    58b4:	a1 e2       	ldi	r26, 0x21	; 33
    58b6:	1a 2e       	mov	r1, r26
    58b8:	aa 1b       	sub	r26, r26
    58ba:	bb 1b       	sub	r27, r27
    58bc:	fd 01       	movw	r30, r26
    58be:	0d c0       	rjmp	.+26     	; 0x58da <__udivmodsi4_ep>

000058c0 <__udivmodsi4_loop>:
    58c0:	aa 1f       	adc	r26, r26
    58c2:	bb 1f       	adc	r27, r27
    58c4:	ee 1f       	adc	r30, r30
    58c6:	ff 1f       	adc	r31, r31
    58c8:	a2 17       	cp	r26, r18
    58ca:	b3 07       	cpc	r27, r19
    58cc:	e4 07       	cpc	r30, r20
    58ce:	f5 07       	cpc	r31, r21
    58d0:	20 f0       	brcs	.+8      	; 0x58da <__udivmodsi4_ep>
    58d2:	a2 1b       	sub	r26, r18
    58d4:	b3 0b       	sbc	r27, r19
    58d6:	e4 0b       	sbc	r30, r20
    58d8:	f5 0b       	sbc	r31, r21

000058da <__udivmodsi4_ep>:
    58da:	66 1f       	adc	r22, r22
    58dc:	77 1f       	adc	r23, r23
    58de:	88 1f       	adc	r24, r24
    58e0:	99 1f       	adc	r25, r25
    58e2:	1a 94       	dec	r1
    58e4:	69 f7       	brne	.-38     	; 0x58c0 <__udivmodsi4_loop>
    58e6:	60 95       	com	r22
    58e8:	70 95       	com	r23
    58ea:	80 95       	com	r24
    58ec:	90 95       	com	r25
    58ee:	9b 01       	movw	r18, r22
    58f0:	ac 01       	movw	r20, r24
    58f2:	bd 01       	movw	r22, r26
    58f4:	cf 01       	movw	r24, r30
    58f6:	08 95       	ret

000058f8 <__tablejump2__>:
    58f8:	ee 0f       	add	r30, r30
    58fa:	ff 1f       	adc	r31, r31
    58fc:	05 90       	lpm	r0, Z+
    58fe:	f4 91       	lpm	r31, Z
    5900:	e0 2d       	mov	r30, r0
    5902:	09 94       	ijmp

00005904 <__umulhisi3>:
    5904:	a2 9f       	mul	r26, r18
    5906:	b0 01       	movw	r22, r0
    5908:	b3 9f       	mul	r27, r19
    590a:	c0 01       	movw	r24, r0
    590c:	a3 9f       	mul	r26, r19
    590e:	70 0d       	add	r23, r0
    5910:	81 1d       	adc	r24, r1
    5912:	11 24       	eor	r1, r1
    5914:	91 1d       	adc	r25, r1
    5916:	b2 9f       	mul	r27, r18
    5918:	70 0d       	add	r23, r0
    591a:	81 1d       	adc	r24, r1
    591c:	11 24       	eor	r1, r1
    591e:	91 1d       	adc	r25, r1
    5920:	08 95       	ret

00005922 <__muluhisi3>:
    5922:	0e 94 82 2c 	call	0x5904	; 0x5904 <__umulhisi3>
    5926:	a5 9f       	mul	r26, r21
    5928:	90 0d       	add	r25, r0
    592a:	b4 9f       	mul	r27, r20
    592c:	90 0d       	add	r25, r0
    592e:	a4 9f       	mul	r26, r20
    5930:	80 0d       	add	r24, r0
    5932:	91 1d       	adc	r25, r1
    5934:	11 24       	eor	r1, r1
    5936:	08 95       	ret

00005938 <__adddi3>:
    5938:	2a 0d       	add	r18, r10
    593a:	3b 1d       	adc	r19, r11
    593c:	4c 1d       	adc	r20, r12
    593e:	5d 1d       	adc	r21, r13
    5940:	6e 1d       	adc	r22, r14
    5942:	7f 1d       	adc	r23, r15
    5944:	80 1f       	adc	r24, r16
    5946:	91 1f       	adc	r25, r17
    5948:	08 95       	ret

0000594a <__adddi3_s8>:
    594a:	00 24       	eor	r0, r0
    594c:	a7 fd       	sbrc	r26, 7
    594e:	00 94       	com	r0
    5950:	2a 0f       	add	r18, r26
    5952:	30 1d       	adc	r19, r0
    5954:	40 1d       	adc	r20, r0
    5956:	50 1d       	adc	r21, r0
    5958:	60 1d       	adc	r22, r0
    595a:	70 1d       	adc	r23, r0
    595c:	80 1d       	adc	r24, r0
    595e:	90 1d       	adc	r25, r0
    5960:	08 95       	ret

00005962 <__subdi3>:
    5962:	2a 19       	sub	r18, r10
    5964:	3b 09       	sbc	r19, r11
    5966:	4c 09       	sbc	r20, r12
    5968:	5d 09       	sbc	r21, r13
    596a:	6e 09       	sbc	r22, r14
    596c:	7f 09       	sbc	r23, r15
    596e:	80 0b       	sbc	r24, r16
    5970:	91 0b       	sbc	r25, r17
    5972:	08 95       	ret

00005974 <__cmpdi2>:
    5974:	2a 15       	cp	r18, r10
    5976:	3b 05       	cpc	r19, r11
    5978:	4c 05       	cpc	r20, r12
    597a:	5d 05       	cpc	r21, r13
    597c:	6e 05       	cpc	r22, r14
    597e:	7f 05       	cpc	r23, r15
    5980:	80 07       	cpc	r24, r16
    5982:	91 07       	cpc	r25, r17
    5984:	08 95       	ret

00005986 <__udivmodhi4>:
    5986:	aa 1b       	sub	r26, r26
    5988:	bb 1b       	sub	r27, r27
    598a:	51 e1       	ldi	r21, 0x11	; 17
    598c:	07 c0       	rjmp	.+14     	; 0x599c <__udivmodhi4_ep>

0000598e <__udivmodhi4_loop>:
    598e:	aa 1f       	adc	r26, r26
    5990:	bb 1f       	adc	r27, r27
    5992:	a6 17       	cp	r26, r22
    5994:	b7 07       	cpc	r27, r23
    5996:	10 f0       	brcs	.+4      	; 0x599c <__udivmodhi4_ep>
    5998:	a6 1b       	sub	r26, r22
    599a:	b7 0b       	sbc	r27, r23

0000599c <__udivmodhi4_ep>:
    599c:	88 1f       	adc	r24, r24
    599e:	99 1f       	adc	r25, r25
    59a0:	5a 95       	dec	r21
    59a2:	a9 f7       	brne	.-22     	; 0x598e <__udivmodhi4_loop>
    59a4:	80 95       	com	r24
    59a6:	90 95       	com	r25
    59a8:	bc 01       	movw	r22, r24
    59aa:	cd 01       	movw	r24, r26
    59ac:	08 95       	ret

000059ae <abort>:
    59ae:	81 e0       	ldi	r24, 0x01	; 1
    59b0:	90 e0       	ldi	r25, 0x00	; 0
    59b2:	f8 94       	cli
    59b4:	0c 94 0e 2d 	jmp	0x5a1c	; 0x5a1c <_exit>

000059b8 <eeprom_read_block>:
    59b8:	dc 01       	movw	r26, r24
    59ba:	cb 01       	movw	r24, r22

000059bc <eeprom_read_blraw>:
    59bc:	fc 01       	movw	r30, r24
    59be:	f9 99       	sbic	0x1f, 1	; 31
    59c0:	fe cf       	rjmp	.-4      	; 0x59be <eeprom_read_blraw+0x2>
    59c2:	06 c0       	rjmp	.+12     	; 0x59d0 <eeprom_read_blraw+0x14>
    59c4:	f2 bd       	out	0x22, r31	; 34
    59c6:	e1 bd       	out	0x21, r30	; 33
    59c8:	f8 9a       	sbi	0x1f, 0	; 31
    59ca:	31 96       	adiw	r30, 0x01	; 1
    59cc:	00 b4       	in	r0, 0x20	; 32
    59ce:	0d 92       	st	X+, r0
    59d0:	41 50       	subi	r20, 0x01	; 1
    59d2:	50 40       	sbci	r21, 0x00	; 0
    59d4:	b8 f7       	brcc	.-18     	; 0x59c4 <eeprom_read_blraw+0x8>
    59d6:	08 95       	ret

000059d8 <eeprom_update_block>:
    59d8:	dc 01       	movw	r26, r24
    59da:	a4 0f       	add	r26, r20
    59dc:	b5 1f       	adc	r27, r21
    59de:	41 50       	subi	r20, 0x01	; 1
    59e0:	50 40       	sbci	r21, 0x00	; 0
    59e2:	48 f0       	brcs	.+18     	; 0x59f6 <eeprom_update_block+0x1e>
    59e4:	cb 01       	movw	r24, r22
    59e6:	84 0f       	add	r24, r20
    59e8:	95 1f       	adc	r25, r21
    59ea:	2e 91       	ld	r18, -X
    59ec:	0e 94 fd 2c 	call	0x59fa	; 0x59fa <eeprom_update_r18>
    59f0:	41 50       	subi	r20, 0x01	; 1
    59f2:	50 40       	sbci	r21, 0x00	; 0
    59f4:	d0 f7       	brcc	.-12     	; 0x59ea <eeprom_update_block+0x12>
    59f6:	08 95       	ret

000059f8 <eeprom_update_byte>:
    59f8:	26 2f       	mov	r18, r22

000059fa <eeprom_update_r18>:
    59fa:	f9 99       	sbic	0x1f, 1	; 31
    59fc:	fe cf       	rjmp	.-4      	; 0x59fa <eeprom_update_r18>
    59fe:	92 bd       	out	0x22, r25	; 34
    5a00:	81 bd       	out	0x21, r24	; 33
    5a02:	f8 9a       	sbi	0x1f, 0	; 31
    5a04:	01 97       	sbiw	r24, 0x01	; 1
    5a06:	00 b4       	in	r0, 0x20	; 32
    5a08:	02 16       	cp	r0, r18
    5a0a:	39 f0       	breq	.+14     	; 0x5a1a <eeprom_update_r18+0x20>
    5a0c:	1f ba       	out	0x1f, r1	; 31
    5a0e:	20 bd       	out	0x20, r18	; 32
    5a10:	0f b6       	in	r0, 0x3f	; 63
    5a12:	f8 94       	cli
    5a14:	fa 9a       	sbi	0x1f, 2	; 31
    5a16:	f9 9a       	sbi	0x1f, 1	; 31
    5a18:	0f be       	out	0x3f, r0	; 63
    5a1a:	08 95       	ret

00005a1c <_exit>:
    5a1c:	f8 94       	cli

00005a1e <__stop_program>:
    5a1e:	ff cf       	rjmp	.-2      	; 0x5a1e <__stop_program>
